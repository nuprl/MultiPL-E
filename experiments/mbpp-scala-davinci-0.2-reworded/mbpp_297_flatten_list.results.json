{
  "name": "mbpp_297_flatten_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n                case y : Long => y :: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => x.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeyh25xd.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeyh25xd.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeyh25xd.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list: List[Any] => list.flatMap(flattenList)\n            case element: Long => List(element)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1tgmby_e.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1tgmby_e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1tgmby_e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n            case _ => {\n                println(\"error\")\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwdev85yo.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwdev85yo.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwdev85yo.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvo31aj9z.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvo31aj9z.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvo31aj9z.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list = list ::: flattenList(i)\n                }\n            }\n            case i : Int => list = list ::: List(i.toLong)\n            case i : Long => list = list ::: List(i)\n            case i : Double => list = list ::: List(i.toLong)\n            case i : Float => list = list ::: List(i.toLong)\n            case i : Char => list = list ::: List(i.toLong)\n            case i : Byte => list = list ::: List(i.toLong)\n            case i : Short => list = list ::: List(i.toLong)\n            case i : String => list = list ::: List(i.toLong)\n            case _ => list = list ::: List(0)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp23as1qvg.scala:21:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mcase\u001b[0m _ => list = list ::: List(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    List[\u001b[1m\u001b[31mAnyVal\u001b[0m]\n\u001b[31m   |\u001b[0m                             Required: List[\u001b[1m\u001b[32mLong\u001b[0m]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23as1qvg.scala:26:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23as1qvg.scala:27:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case Nil => list2\n            case (x : Int) :: xs => list2 = list2 :+ x.toLong\n            case (x : Long) :: xs => list2 = list2 :+ x\n            case (x : List[Any]) :: xs => list2 = list2 ::: flattenList(x)\n            case _ => list2\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2unf_sh.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2unf_sh.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2unf_sh.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (element <- list) {\n                    list2 = list2 ::: flattenList(element)\n                }\n            }\n            case element : Long => {\n                list2 = list2 :+ element\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppdjvpxjz.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppdjvpxjz.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppdjvpxjz.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxljdx1w6.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxljdx1w6.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxljdx1w6.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x:List[Any]) :: tail => flattenList(x) ::: flattenList(tail)\n            case x :: tail => x :: flattenList(tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpccnknfbp.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: tail => x :: flattenList(tail)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (x : Any)\n\u001b[31m  |\u001b[0m                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpccnknfbp.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpccnknfbp.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn8zkgjij.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn8zkgjij.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn8zkgjij.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x.asInstanceOf[Long] :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vbkvxm1.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vbkvxm1.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vbkvxm1.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Int => {\n                list2 = list2 :+ i.toLong\n            }\n            case i : Long => {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphyl0ebry.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphyl0ebry.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphyl0ebry.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx0lq3p_d.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx0lq3p_d.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx0lq3p_d.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ji48wrc.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ji48wrc.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ji48wrc.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7q2h1gvb.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7q2h1gvb.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7q2h1gvb.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case a : Long => List(a)\n            case a : List[Any] => a.flatMap(flattenList)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_3rjfr_x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_3rjfr_x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_3rjfr_x.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfv7miwx.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfv7miwx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfv7miwx.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n                case x : Long => x :: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7l488ctx.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7l488ctx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7l488ctx.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 ::: List(x)\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz6_wi7ze.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz6_wi7ze.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz6_wi7ze.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case x : Long => x :: flattenList(tail)\n                case x : List[Any] => flattenList(x) ::: flattenList(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => for (e <- list) list2 = list2 ::: flattenList(e)\n            case n : Long => list2 = list2 :+ n\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0unsp69.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0unsp69.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0unsp69.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(y => list2 = list2 ++ flattenList(y))\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpby0c_fw2.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpby0c_fw2.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpby0c_fw2.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ::: flattenList(x)\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bdiljom.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bdiljom.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bdiljom.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case num : Long => list2 = list2 :+ num\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykfr3v8.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykfr3v8.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ykfr3v8.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case (x : Long) :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgw46t4ut.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgw46t4ut.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgw46t4ut.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => throw new IllegalArgumentException\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z2tcgb0.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z2tcgb0.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z2tcgb0.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list = List[Long]()\n        list1 match {\n            case x : Long => list = list :+ x\n            case x : List[Any] => x.foreach(y => list = list ::: flattenList(y))\n            case _ =>\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpco7g5c8e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpco7g5c8e.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpco7g5c8e.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnku21k_a.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnku21k_a.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnku21k_a.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparhh9knq.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparhh9knq.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparhh9knq.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxljdx1w6.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxljdx1w6.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxljdx1w6.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkj5vwyv3.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkj5vwyv3.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkj5vwyv3.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpauspzzv9.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpauspzzv9.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpauspzzv9.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case n : Long => List(n)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc_tgse8c.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc_tgse8c.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc_tgse8c.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 ::: List(num)\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphy65e2pu.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphy65e2pu.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphy65e2pu.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case list1 : Long => List(list1)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpodh9235k.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpodh9235k.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpodh9235k.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ++ flattenList(x)\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl91k265f.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl91k265f.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl91k265f.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkcvlgifj.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkcvlgifj.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkcvlgifj.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case (x : List[Any]) => {\n                for (i <- 0 until x.length) {\n                    list2 = list2 ::: flattenList(x(i))\n                }\n            }\n            case (x : Long) => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgxv2ne87.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgxv2ne87.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgxv2ne87.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbx_klb6.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbx_klb6.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbx_klb6.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x:Long) :: xs => x :: flattenList(xs)\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb90_iadj.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb90_iadj.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb90_iadj.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (head : Long) :: tail => head :: flattenList(tail)\n            case (head : List[Any]) :: tail => flattenList(head) ::: flattenList(tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc5cel4ev.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc5cel4ev.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc5cel4ev.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => for (elem <- list) list2 = list2 ::: flattenList(elem)\n            case num : Long => list2 = list2 :+ num\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpftzr7k8s.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpftzr7k8s.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpftzr7k8s.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8p5ku6z.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = new ListBuffer[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 ++= flattenList(item)\n                }\n            }\n            case item : Long => list2 += item\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppppssrxg.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppppssrxg.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppppssrxg.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow0jlokc.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case h :: t => h match {\n                case h : Long => h :: flattenList(t)\n                case h : List[Any] => flattenList(h) ::: flattenList(t)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm8zzv1e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm8zzv1e.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm8zzv1e.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case i : Long => list2 = list2 :+ i\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc7tam5ow.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc7tam5ow.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc7tam5ow.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwpk8gno.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case _ => Nil\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptn3wgqol.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptn3wgqol.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptn3wgqol.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = new ListBuffer[Long]\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 ++= flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 += num\n            }\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ejl2_j5.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ejl2_j5.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ejl2_j5.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case (x : List[Any]) => x.foreach(x => list2 = list2 ++ flattenList(x))\n            case (x : Long) => list2 = list2 :+ x\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2_n3g5n5.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2_n3g5n5.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2_n3g5n5.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x => List(x.asInstanceOf[Long])\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case num : Long => list2 = list2 :+ num\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => Nil\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3p27usry.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3p27usry.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3p27usry.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => {\n                list2 = list2 ::: List(l)\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfk41v516.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfk41v516.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfk41v516.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case num : Long => list2 = list2 :+ num\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case long : Long => List(long)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiuosjfg.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiuosjfg.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiuosjfg.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : Int => list2 = list2 :+ x.toLong\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(y => list2 = list2 ::: flattenList(y))\n            case _ =>\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbircf5_6.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbircf5_6.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbircf5_6.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: tail => flattenList(x) ::: flattenList(tail)\n            case (x : Long) :: tail => x :: flattenList(tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3slgvee.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3slgvee.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3slgvee.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwpk8gno.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => list2 = list2 :+ l\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj4gohcc5.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj4gohcc5.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj4gohcc5.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwvcfen.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwvcfen.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwvcfen.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n                case x : Long => x :: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq00xv17y.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq00xv17y.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq00xv17y.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case head : List[Any] => flattenList(head) ::: flattenList(tail)\n                case head : Long => head :: flattenList(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxdqfd4qx.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxdqfd4qx.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxdqfd4qx.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyw1cnxrk.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyw1cnxrk.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyw1cnxrk.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuz6ays4j.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuz6ays4j.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuz6ays4j.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case (x : Long) :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList(_))\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc5u5ehyf.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc5u5ehyf.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc5u5ehyf.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => list2 = list2 :+ item\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcd6p9zz.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcd6p9zz.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcd6p9zz.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwpk8gno.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (e <- l) {\n                    list2 = list2 ::: flattenList(e)\n                }\n            }\n            case i : Int => {\n                list2 = list2 :+ i.toLong\n            }\n            case l : Long => {\n                list2 = list2 :+ l\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphq_r58vc.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphq_r58vc.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphq_r58vc.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x => List(x.asInstanceOf[Long])\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case element : Long => List(element)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7yie4_x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7yie4_x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7yie4_x.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list = list ++ flattenList(i)\n                }\n            }\n            case l : Long => {\n                list = list :+ l\n            }\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0fn12m1.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0fn12m1.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0fn12m1.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case head : Long => head :: flattenList(tail)\n                case head : List[Any] => flattenList(head) ::: flattenList(tail)\n                case _ => flattenList(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27c89tyw.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27c89tyw.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27c89tyw.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 ::: List(x)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpongdy2d6.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpongdy2d6.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpongdy2d6.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparlmlsam.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparlmlsam.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparlmlsam.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmhm21ans.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmhm21ans.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmhm21ans.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n                case _ => x.asInstanceOf[Long] :: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdsmt7q7a.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdsmt7q7a.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdsmt7q7a.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33bv1b5e.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33bv1b5e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33bv1b5e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbamwr1vf.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbamwr1vf.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbamwr1vf.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => {\n                var list2 : List[Long] = List()\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n                list2\n            }\n            case n : Long => List(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocnlr63f.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocnlr63f.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocnlr63f.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x:Long) :: xs => x :: flattenList(xs)\n            case x :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0lbcb401.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0lbcb401.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0lbcb401.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => {\n                list2 = list2 ::: List(l)\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfk41v516.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfk41v516.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfk41v516.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Long => list2 = list2 :+ i\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivnm9umn.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivnm9umn.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivnm9umn.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ei4dfbe.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ei4dfbe.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ei4dfbe.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case num : Long => {\n                list2 = list2 ::: List(num)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps0p4uf7f.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps0p4uf7f.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps0p4uf7f.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr4ir19zk.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hr1d5at.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case (x : List[Any]) => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case (x : Long) => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5nhpc4k1.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5nhpc4k1.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5nhpc4k1.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => {\n                var list2 : List[Long] = List()\n                for (item <- list1) {\n                    list2 = list2 ::: flattenList(item)\n                }\n                list2\n            }\n            case item : Long => List(item)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgxe1iu6u.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgxe1iu6u.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgxe1iu6u.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7kb3ssis.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var result = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    result = result ::: flattenList(i)\n                }\n            }\n            case i : Int => {\n                result = result :+ i.toLong\n            }\n            case i : Long => {\n                result = result :+ i\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwzbyd0_.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwzbyd0_.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwzbyd0_.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ++ flattenList(x)\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl91k265f.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl91k265f.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl91k265f.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => list2 = list2 :+ num\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph3k013m9.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph3k013m9.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph3k013m9.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(y => list2 = list2 ::: flattenList(y))\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwqltuw.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwqltuw.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwqltuw.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n            case _ => {\n                println(\"Error\")\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8pzmnmsv.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8pzmnmsv.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8pzmnmsv.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwpk8gno.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnku21k_a.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnku21k_a.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnku21k_a.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ++ flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n            case _ => {\n                throw new Exception(\"Invalid input\")\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpne9qpk7n.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpne9qpk7n.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpne9qpk7n.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[_] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaon8aqur.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaon8aqur.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaon8aqur.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwvcfen.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwvcfen.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphzwvcfen.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- 0 to x.length - 1) {\n                    list2 = list2 ::: flattenList(x(i))\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59iflkri.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59iflkri.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59iflkri.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => list2 = list2 :+ l\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl2l4z6d8.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl2l4z6d8.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl2l4z6d8.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}