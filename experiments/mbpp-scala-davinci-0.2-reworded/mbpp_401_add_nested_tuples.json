{
  "name": "mbpp_401_add_nested_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    def addNestedTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addNestedTuples(((1l, 3l), (4l, 5l), (2l, 9l), (1l, 10l)), ((6l, 7l), (3l, 9l), (1l, 1l), (7l, 3l))) == ((7l, 10l), (7l, 14l), (3l, 10l), (8l, 13l)));\n    assert(addNestedTuples(((2l, 4l), (5l, 6l), (3l, 10l), (2l, 11l)), ((7l, 8l), (4l, 10l), (2l, 2l), (8l, 4l))) == ((9l, 12l), (9l, 16l), (5l, 12l), (10l, 15l)));\n    assert(addNestedTuples(((3l, 5l), (6l, 7l), (4l, 11l), (3l, 12l)), ((8l, 9l), (5l, 11l), (3l, 3l), (9l, 5l))) == ((11l, 14l), (11l, 18l), (7l, 14l), (12l, 17l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            sum += pow(10, i).toLong * (digit1 + digit2)\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var tup1_len = 0\n        var tup2_len = 0\n        while (tup1 != 0) {\n            tup1 = tup1 / 10\n            tup1_len += 1\n        }\n        while (tup2 != 0) {\n            tup2 = tup2 / 10\n            tup2_len += 1\n        }\n        tup1 = test_tup1\n        tup2 = test_tup2\n        var i = 0\n        while (i < tup1_len) {\n            var tup1_elem = tup1 % 10\n            var tup2_elem = tup2 % 10\n            sum = sum + (tup1_elem + tup2_elem) * pow(10, i).toLong\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i += 1\n        }\n        while (i < tup2_len) {\n            var tup2_elem = tup2 % 10\n            sum = sum + tup2_elem * pow(10, i).toLong\n            tup2 = tup2 / 10\n            i += 1\n        }\n        return sum",
    "        return test_tup1 + test_tup2",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0 && tup2 > 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while(tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var tup1_list : List[Long] = List()\n        var tup2_list : List[Long] = List()\n        var tup1_size : Int = 0\n        var tup2_size : Int = 0\n        while (tup1 != 0) {\n            tup1_list = (tup1 % 10) :: tup1_list\n            tup1 /= 10\n            tup1_size += 1\n        }\n        while (tup2 != 0) {\n            tup2_list = (tup2 % 10) :: tup2_list\n            tup2 /= 10\n            tup2_size += 1\n        }\n        var tup_size : Int = max(tup1_size, tup2_size)\n        var tup_list : List[Long] = List()\n        for (i <- 0 until tup_size) {\n            if (i < tup1_size && i < tup2_size) tup_list = (tup1_list(i) + tup2_list(i)) :: tup_list\n            else if (i < tup1_size) tup_list = tup1_list(i) :: tup_list\n            else tup_list = tup2_list(i) :: tup_list\n        }\n        var tup : Long = 0\n        for (i <- 0 until tup_size) {\n            tup = tup * 10 + tup_list(i)\n        }\n        return tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup1_len = 0\n        var tup2_len = 0\n        while (tup1 != 0) {\n            tup1_len += 1\n            tup1 /= 10\n        }\n        while (tup2 != 0) {\n            tup2_len += 1\n            tup2 /= 10\n        }\n        var tup1_arr = new Array[Long](tup1_len)\n        var tup2_arr = new Array[Long](tup2_len)\n        tup1 = test_tup1\n        tup2 = test_tup2\n        for (i <- 0 until tup1_len) {\n            tup1_arr(i) = tup1 % 10\n            tup1 /= 10\n        }\n        for (i <- 0 until tup2_len) {\n            tup2_arr(i) = tup2 % 10\n            tup2 /= 10\n        }\n        var tup_len = max(tup1_len, tup2_len)\n        var tup_arr = new Array[Long](tup_len)\n        for (i <- 0 until tup_len) {\n            if (i < tup1_len && i < tup2_len) tup_arr(i) = tup1_arr(i) + tup2_arr(i)\n            else if (i < tup1_len) tup_arr(i) = tup1_arr(i)\n            else tup_arr(i) = tup2_arr(i)\n        }\n        var tup = 0L\n        for (i <- 0 until tup_len) {\n            tup += tup_arr(i) * pow(10, i).toLong\n        }\n        return tup",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.zip(tup2).map(x => x._1 + x._2)\n        tup3.product",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        sum",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 != 0 || tup2 != 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            sum += (digit1 + digit2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.zip(tup2)\n        val tup4 = tup3.map(x => x._1 + x._2)\n        val tup5 = tup4.productIterator.toList\n        val tup6 = tup5.map(_.asInstanceOf[Long])\n        val tup7 = tup6.reduceLeft(_ + _)\n        return tup7",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, test_tup1.toString.length - 1 - i).toLong\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum"
  ]
}