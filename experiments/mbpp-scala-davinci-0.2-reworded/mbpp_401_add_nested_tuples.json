{
  "name": "mbpp_401_add_nested_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    def addNestedTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addNestedTuples(((1l, 3l), (4l, 5l), (2l, 9l), (1l, 10l)), ((6l, 7l), (3l, 9l), (1l, 1l), (7l, 3l))) == ((7l, 10l), (7l, 14l), (3l, 10l), (8l, 13l)));\n    assert(addNestedTuples(((2l, 4l), (5l, 6l), (3l, 10l), (2l, 11l)), ((7l, 8l), (4l, 10l), (2l, 2l), (8l, 4l))) == ((9l, 12l), (9l, 16l), (5l, 12l), (10l, 15l)));\n    assert(addNestedTuples(((3l, 5l), (6l, 7l), (4l, 11l), (3l, 12l)), ((8l, 9l), (5l, 11l), (3l, 3l), (9l, 5l))) == ((11l, 14l), (11l, 18l), (7l, 14l), (12l, 17l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            sum += pow(10, i).toLong * (digit1 + digit2)\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var tup1_len = 0\n        var tup2_len = 0\n        while (tup1 != 0) {\n            tup1 = tup1 / 10\n            tup1_len += 1\n        }\n        while (tup2 != 0) {\n            tup2 = tup2 / 10\n            tup2_len += 1\n        }\n        tup1 = test_tup1\n        tup2 = test_tup2\n        var i = 0\n        while (i < tup1_len) {\n            var tup1_elem = tup1 % 10\n            var tup2_elem = tup2 % 10\n            sum = sum + (tup1_elem + tup2_elem) * pow(10, i).toLong\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i += 1\n        }\n        while (i < tup2_len) {\n            var tup2_elem = tup2 % 10\n            sum = sum + tup2_elem * pow(10, i).toLong\n            tup2 = tup2 / 10\n            i += 1\n        }\n        return sum",
    "        return test_tup1 + test_tup2",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0 && tup2 > 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while(tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var tup1_list : List[Long] = List()\n        var tup2_list : List[Long] = List()\n        var tup1_size : Int = 0\n        var tup2_size : Int = 0\n        while (tup1 != 0) {\n            tup1_list = (tup1 % 10) :: tup1_list\n            tup1 /= 10\n            tup1_size += 1\n        }\n        while (tup2 != 0) {\n            tup2_list = (tup2 % 10) :: tup2_list\n            tup2 /= 10\n            tup2_size += 1\n        }\n        var tup_size : Int = max(tup1_size, tup2_size)\n        var tup_list : List[Long] = List()\n        for (i <- 0 until tup_size) {\n            if (i < tup1_size && i < tup2_size) tup_list = (tup1_list(i) + tup2_list(i)) :: tup_list\n            else if (i < tup1_size) tup_list = tup1_list(i) :: tup_list\n            else tup_list = tup2_list(i) :: tup_list\n        }\n        var tup : Long = 0\n        for (i <- 0 until tup_size) {\n            tup = tup * 10 + tup_list(i)\n        }\n        return tup",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup1_len = 0\n        var tup2_len = 0\n        while (tup1 != 0) {\n            tup1_len += 1\n            tup1 /= 10\n        }\n        while (tup2 != 0) {\n            tup2_len += 1\n            tup2 /= 10\n        }\n        var tup1_arr = new Array[Long](tup1_len)\n        var tup2_arr = new Array[Long](tup2_len)\n        tup1 = test_tup1\n        tup2 = test_tup2\n        for (i <- 0 until tup1_len) {\n            tup1_arr(i) = tup1 % 10\n            tup1 /= 10\n        }\n        for (i <- 0 until tup2_len) {\n            tup2_arr(i) = tup2 % 10\n            tup2 /= 10\n        }\n        var tup_len = max(tup1_len, tup2_len)\n        var tup_arr = new Array[Long](tup_len)\n        for (i <- 0 until tup_len) {\n            if (i < tup1_len && i < tup2_len) tup_arr(i) = tup1_arr(i) + tup2_arr(i)\n            else if (i < tup1_len) tup_arr(i) = tup1_arr(i)\n            else tup_arr(i) = tup2_arr(i)\n        }\n        var tup = 0L\n        for (i <- 0 until tup_len) {\n            tup += tup_arr(i) * pow(10, i).toLong\n        }\n        return tup",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.zip(tup2).map(x => x._1 + x._2)\n        tup3.product",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        sum",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 != 0 || tup2 != 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            sum += (digit1 + digit2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.zip(tup2)\n        val tup4 = tup3.map(x => x._1 + x._2)\n        val tup5 = tup4.productIterator.toList\n        val tup6 = tup5.map(_.asInstanceOf[Long])\n        val tup7 = tup6.reduceLeft(_ + _)\n        return tup7",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, test_tup1.toString.length - 1 - i).toLong\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 : List[Long] = List(test_tup1)\n        var tup2 : List[Long] = List(test_tup2)\n        var tup3 : List[Long] = List()\n        var tup4 : List[Long] = List()\n        var tup5 : List[Long] = List()\n        var tup6 : List[Long] = List()\n        var tup7 : List[Long] = List()\n        var tup8 : List[Long] = List()\n        var tup9 : List[Long] = List()\n        var tup10 : List[Long] = List()\n        var tup11 : List[Long] = List()\n        var tup12 : List[Long] = List()\n        var tup13 : List[Long] = List()\n        var tup14 : List[Long] = List()\n        var tup15 : List[Long] = List()\n        var tup16 : List[Long] = List()\n        var tup17 : List[Long] = List()\n        var tup18 : List[Long] = List()\n        var tup19 : List[Long] = List()\n        var tup20 : List[Long] = List()\n        var tup21 : List[Long] = List()\n        var tup22 : List[Long] = List()\n        var tup23 : List[Long] = List()\n        var tup24 : List[Long] = List()\n        var tup25 : List[Long] = List()\n        var tup26 : List[Long] = List()\n        var tup27 : List[Long] = List()\n        var tup28 : List[Long] = List()\n        var tup29 : List[Long] = List()\n        var tup30 : List[Long] = List()\n        var tup31 : List[Long] = List()\n        var tup32 : List[Long] = List()\n        var tup33 : List[Long] = List()\n        var tup34 : List[Long] = List()\n        var tup35 : List[Long] = List()\n        var tup36 : List[Long",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Int] + x._2.asInstanceOf[Int]).toList\n        tup3(test_tup1.toInt) + tup3(test_tup2.toInt)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var sum : Long = 0\n        while (tup1 != 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        // Write your code here\n        return 0",
    "        return test_tup1 + test_tup2",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 != 0L || tup2 != 0L) {\n            sum = sum * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while(tup1 != 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        return test_tup1 + test_tup2",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 && tup2 != 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 > 0) {\n            result += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).toInt - '0'.toInt) + (test_tup2.toString.charAt(i).toInt - '0'.toInt)\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = (11, 12, 13, 14, 15)\n        val tup4 = (16, 17, 18, 19, 20)\n        val tup5 = (21, 22, 23, 24, 25)\n        val tup6 = (26, 27, 28, 29, 30)\n        val tup7 = (31, 32, 33, 34, 35)\n        val tup8 = (36, 37, 38, 39, 40)\n        val tup9 = (41, 42, 43, 44, 45)\n        val tup10 = (46, 47, 48, 49, 50)\n        val tup11 = (51, 52, 53, 54, 55)\n        val tup12 = (56, 57, 58, 59, 60)\n        val tup13 = (61, 62, 63, 64, 65)\n        val tup14 = (66, 67, 68, 69, 70)\n        val tup15 = (71, 72, 73, 74, 75)\n        val tup16 = (76, 77, 78, 79, 80)\n        val tup17 = (81, 82, 83, 84, 85)\n        val tup18 = (86, 87, 88, 89, 90)\n        val tup19 = (91, 92, 93, 94, 95)\n        val tup20 = (96, 97, 98, 99, 100)\n        val tup21 = (101, 102, 103, 104, 105)\n        val tup22 = (106, 107, 108, 109, 110)\n        val tup23 = (111, 112, 113, 114, 115)\n        val tup24 = (116, 117, 118, 119, 120)\n        val tup25 = (121, 122, 123, 124, 125)\n        val tup26 = (126, 127, 128, 129, 130)\n        val tup27 = (131, 132, 133, 134, 135)\n        val tup28 = (136, 137, 138, 139, 140)\n        val tup29 = (",
    "        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var tup3 : Long = 0\n        var tup4 : Long = 0\n        var tup5 : Long = 0\n        var tup6 : Long = 0\n        var tup7 : Long = 0\n        var tup8 : Long = 0\n        var tup9 : Long = 0\n        var tup10 : Long = 0\n        var tup11 : Long = 0\n        var tup12 : Long = 0\n        var tup13 : Long = 0\n        var tup14 : Long = 0\n        var tup15 : Long = 0\n        var tup16 : Long = 0\n        var tup17 : Long = 0\n        var tup18 : Long = 0\n        var tup19 : Long = 0\n        var tup20 : Long = 0\n        var tup21 : Long = 0\n        var tup22 : Long = 0\n        var tup23 : Long = 0\n        var tup24 : Long = 0\n        var tup25 : Long = 0\n        var tup26 : Long = 0\n        var tup27 : Long = 0\n        var tup28 : Long = 0\n        var tup29 : Long = 0\n        var tup30 : Long = 0\n        var tup31 : Long = 0\n        var tup32 : Long = 0\n        var tup33 : Long = 0\n        var tup34 : Long = 0\n        var tup35 : Long = 0\n        var tup36 : Long = 0\n        var tup37 : Long = 0\n        var tup38 : Long = 0\n        var tup39 : Long = 0\n        var tup40 : Long = 0\n        var tup41 : Long = 0\n        var tup42 : Long = 0\n        var tup43 : Long = 0\n        var tup44 : Long = 0\n        var tup45 : Long = 0\n        var tup46 : Long = 0\n        var tup47 : Long = 0\n        var tup48 : Long = 0\n        var tup49 : Long = 0\n        var tup50 : Long = 0\n        var t",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = (sum * 10) + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0 || tup2 > 0) {\n            var a = tup1 % 10\n            var b = tup2 % 10\n            sum += (a + b) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while(tup1 != 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var test_tup1_list = test_tup1.toString.toList\n        var test_tup2_list = test_tup2.toString.toList\n        var result_list = List[Int]()\n        for (i <- 0 until test_tup1_list.length) {\n            result_list = result_list :+ (test_tup1_list(i).toString.toInt + test_tup2_list(i).toString.toInt)\n        }\n        return result_list.mkString.toLong",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).toInt - '0'.toInt) + (test_tup2.toString.charAt(i).toInt - '0'.toInt)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            result = result * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var sum : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Int] + x._2.asInstanceOf[Int])\n        tup3.toString.replaceAll(\"[^0-9]\", \"\").toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 != 0) {\n            result = result * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var result = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            result += (test_tup1.toString.charAt(i).toInt - 48) + (test_tup2.toString.charAt(i).toInt - 48)\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.productArity - 1) {\n            sum += test_tup1.productElement(i).asInstanceOf[Long] + test_tup2.productElement(i).asInstanceOf[Long]\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0 || tup2 > 0) {\n            var d1 = tup1 % 10\n            var d2 = tup2 % 10\n            sum += (d1 + d2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Int] + x._2.asInstanceOf[Int]).toList\n        tup3(test_tup1.toInt) + tup3(test_tup2.toInt)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 != 0L || tup2 != 0L) {\n            sum = sum * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = (sum * 10) + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup1_digits = List[Long]()\n        var tup2_digits = List[Long]()\n        var tup_result = List[Long]()\n        while (tup1 > 0) {\n            tup1_digits = (tup1 % 10) :: tup1_digits\n            tup1 /= 10\n        }\n        while (tup2 > 0) {\n            tup2_digits = (tup2 % 10) :: tup2_digits\n            tup2 /= 10\n        }\n        for (i <- 0 until min(tup1_digits.length, tup2_digits.length)) {\n            tup_result = (tup1_digits(i) + tup2_digits(i)) :: tup_result\n        }\n        var result = 0L\n        for (i <- 0 until tup_result.length) {\n            result = result * 10 + tup_result(i)\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += ((tup1 % 10) + (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).toString.toInt + test_tup2.toString.charAt(i).toString.toInt)\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Int] + x._2.asInstanceOf[Int])\n        tup3.productIterator.map(x => x.asInstanceOf[Int]).reduceLeft(_ + _)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.productArity - 1) {\n            sum += test_tup1.productElement(i).asInstanceOf[Long] + test_tup2.productElement(i).asInstanceOf[Long]\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0 || tup2 != 0) {\n            var tup1_elem = tup1 % 10\n            var tup2_elem = tup2 % 10\n            result += (tup1_elem + tup2_elem) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var tup1_len = 0\n        var tup2_len = 0\n        while (tup1 > 0) {\n            tup1_len += 1\n            tup1 /= 10\n        }\n        while (tup2 > 0) {\n            tup2_len += 1\n            tup2 /= 10\n        }\n        tup1 = test_tup1\n        tup2 = test_tup2\n        var tup1_num = 0L\n        var tup2_num = 0L\n        var tup1_dig = 0\n        var tup2_dig = 0\n        for (i <- 0 until max(tup1_len, tup2_len)) {\n            tup1_dig = (tup1 % 10).toInt\n            tup2_dig = (tup2 % 10).toInt\n            if (tup1_dig != 0) {\n                tup1_num = tup1_num * 10 + tup1_dig\n            }\n            if (tup2_dig != 0) {\n                tup2_num = tup2_num * 10 + tup2_dig\n            }\n            if (tup1_dig == 0 && tup2_dig == 0) {\n                sum = sum * 100\n            } else {\n                sum = sum * 10 + (tup1_num + tup2_num)\n                tup1_num = 0L\n                tup2_num = 0L\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 != 0L || tup2 != 0L) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            sum += (digit1 + digit2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        sum",
    "        return test_tup1 + test_tup2",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 || tup2 > 0) {\n            sum = sum * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup3 = 0L\n        while (tup1 > 0 || tup2 > 0) {\n            tup3 = tup3 * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return tup3",
    "        var sum = 0L\n        for (i <- 0 until test_tup1._1.length) {\n            sum += test_tup1._1(i) + test_tup2._1(i)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var digit = 0\n        while (tup1 > 0 || tup2 > 0) {\n            sum += ((tup1 % 10) + (tup2 % 10)) * pow(10, digit).toLong\n            tup1 /= 10\n            tup2 /= 10\n            digit += 1\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            result = result * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var result : Long = 0\n        var tup1 : List[Long] = List(test_tup1)\n        var tup2 : List[Long] = List(test_tup2)\n        for (i <- 0 to tup1.length - 1) {\n            result += tup1(i) + tup2(i)\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += ((tup1 % 10) + (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while(tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup1_digits = List[Long]()\n        var tup2_digits = List[Long]()\n        while (tup1 > 0) {\n            tup1_digits = (tup1 % 10) :: tup1_digits\n            tup1 /= 10\n        }\n        while (tup2 > 0) {\n            tup2_digits = (tup2 % 10) :: tup2_digits\n            tup2 /= 10\n        }\n        var result = 0L\n        for (i <- 0 until min(tup1_digits.length, tup2_digits.length)) {\n            result = result * 10 + (tup1_digits(i) + tup2_digits(i))\n        }\n        result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = (sum << 1) + ((tup1 & 1) + (tup2 & 1))\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = tup1.zip(tup2)\n        val tup4 = tup3.map(x => x._1 + x._2)\n        tup4.product",
    "        var sum = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        val tup1 = (1 to test_tup1.toInt).toList\n        val tup2 = (1 to test_tup2.toInt).toList\n        val tup3 = tup1.zip(tup2)\n        tup3.map(x => x._1 + x._2).sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 && tup2 != 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Long] + x._2.asInstanceOf[Long]).toList\n        tup3(test_tup1.toInt - 1) + tup3(test_tup2.toInt - 1)",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup3 = tup1.zip(tup2).map(x => x._1 + x._2)\n        tup3.product",
    "        var result = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            result += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup1_len = 0\n        var tup2_len = 0\n        var tup1_sum = 0\n        var tup2_sum = 0\n        while (tup1 != 0) {\n            tup1_len += 1\n            tup1_sum += tup1 % 10\n            tup1 /= 10\n        }\n        while (tup2 != 0) {\n            tup2_len += 1\n            tup2_sum += tup2 % 10\n            tup2 /= 10\n        }\n        var tup_sum = tup1_sum + tup2_sum\n        var tup_len = max(tup1_len, tup2_len)\n        var result = 0\n        while (tup_sum != 0) {\n            result = result * 10 + tup_sum % 10\n            tup_sum /= 10\n        }\n        var result_len = 0\n        while (result != 0) {\n            result_len += 1\n            result /= 10\n        }\n        var result_final = 0\n        while (result_len < tup_len) {\n            result_final = result_final * 10 + 0\n            result_len += 1\n        }\n        result_final = result_final * 10 + tup_sum\n        return result_final",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 != 0 || tup2 != 0) {\n            sum += ((tup1 % 10) + (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 > 0) {\n            result = result + (tup1 % 10) + (tup2 % 10)\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0 || tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Int] + x._2.asInstanceOf[Int])\n        tup3.productIterator.reduce((x, y) => x.asInstanceOf[Int] + y.asInstanceOf[Int])",
    "        var result : Long = 0\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            result += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        return result",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toLong)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toLong)\n        val tup3 = tup1.zip(tup2).map(x => x._1 + x._2)\n        tup3.mkString.toLong",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 != 0 || tup2 != 0) {\n            sum += ((tup1 % 10) + (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while(tup1 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        return sum",
    "        // Write your code here\n        return test_tup1 + test_tup2",
    "        var tup1 : List[Long] = List[Long]()\n        var tup2 : List[Long] = List[Long]()\n        var tup3 : List[Long] = List[Long]()\n        var tup4 : List[Long] = List[Long]()\n        var tup5 : List[Long] = List[Long]()\n        var tup6 : List[Long] = List[Long]()\n        var tup7 : List[Long] = List[Long]()\n        var tup8 : List[Long] = List[Long]()\n        var tup9 : List[Long] = List[Long]()\n        var tup10 : List[Long] = List[Long]()\n        var tup11 : List[Long] = List[Long]()\n        var tup12 : List[Long] = List[Long]()\n        var tup13 : List[Long] = List[Long]()\n        var tup14 : List[Long] = List[Long]()\n        var tup15 : List[Long] = List[Long]()\n        var tup16 : List[Long] = List[Long]()\n        var tup17 : List[Long] = List[Long]()\n        var tup18 : List[Long] = List[Long]()\n        var tup19 : List[Long] = List[Long]()\n        var tup20 : List[Long] = List[Long]()\n        var tup21 : List[Long] = List[Long]()\n        var tup22 : List[Long] = List[Long]()\n        var tup23 : List[Long] = List[Long]()\n        var tup24 : List[Long] = List[Long]()\n        var tup25 : List[Long] = List[Long]()\n        var tup26 : List[Long] = List[Long]()\n        var tup27 : List[Long] = List[Long]()\n        var tup28 : List[Long] = List[Long]()\n        var tup29 : List[Long] = List[Long]()\n        var tup30 : List[Long] = List[Long]()\n       ",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var sum : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 > 0 && tup2 > 0) {\n            result = result * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        result",
    "        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val tup3 = tup1.zip(tup2).map(x => x._1 + x._2)\n        tup3.mkString(\"\").toLong",
    "        var test_tup1_list = test_tup1.toString.toList\n        var test_tup2_list = test_tup2.toString.toList\n        var result_tup = List[Long]()\n        for (i <- 0 until test_tup1_list.length) {\n            result_tup = result_tup :+ (test_tup1_list(i).asDigit + test_tup2_list(i).asDigit)\n        }\n        return result_tup.mkString.toLong",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = (11, 12, 13, 14, 15)\n        val tup4 = (16, 17, 18, 19, 20)\n        val tup5 = (21, 22, 23, 24, 25)\n        val tup6 = (26, 27, 28, 29, 30)\n        val tup7 = (31, 32, 33, 34, 35)\n        val tup8 = (36, 37, 38, 39, 40)\n        val tup9 = (41, 42, 43, 44, 45)\n        val tup10 = (46, 47, 48, 49, 50)\n        val tup11 = (51, 52, 53, 54, 55)\n        val tup12 = (56, 57, 58, 59, 60)\n        val tup13 = (61, 62, 63, 64, 65)\n        val tup14 = (66, 67, 68, 69, 70)\n        val tup15 = (71, 72, 73, 74, 75)\n        val tup16 = (76, 77, 78, 79, 80)\n        val tup17 = (81, 82, 83, 84, 85)\n        val tup18 = (86, 87, 88, 89, 90)\n        val tup19 = (91, 92, 93, 94, 95)\n        val tup20 = (96, 97, 98, 99, 100)\n        val tup21 = (101, 102, 103, 104, 105)\n        val tup22 = (106, 107, 108, 109, 110)\n        val tup23 = (111, 112, 113, 114, 115)\n        val tup24 = (116, 117, 118, 119, 120)\n        val tup25 = (121, 122, 123, 124, 125)\n        val tup26 = (126, 127, 128, 129, 130)\n        val tup27 = (131, 132, 133, 134, 135)\n        val tup28 = (136, 137, 138, 139, 140)\n        val tup29 = (",
    "        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 != 0 && tup2 != 0) {\n            result = (result << 8) + ((tup1 & 0xFF) + (tup2 & 0xFF))\n            tup1 = tup1 >> 8\n            tup2 = tup2 >> 8\n        }\n        return result",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 && tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val tup1 = (1, 2, 3)\n        val tup2 = (4, 5, 6)\n        val tup3 = (7, 8, 9)\n        val tup4 = (10, 11, 12)\n        val tup5 = (13, 14, 15)\n        val tup6 = (16, 17, 18)\n        val tup7 = (19, 20, 21)\n        val tup8 = (22, 23, 24)\n        val tup9 = (25, 26, 27)\n        val tup10 = (28, 29, 30)\n        val tup11 = (31, 32, 33)\n        val tup12 = (34, 35, 36)\n        val tup13 = (37, 38, 39)\n        val tup14 = (40, 41, 42)\n        val tup15 = (43, 44, 45)\n        val tup16 = (46, 47, 48)\n        val tup17 = (49, 50, 51)\n        val tup18 = (52, 53, 54)\n        val tup19 = (55, 56, 57)\n        val tup20 = (58, 59, 60)\n        val tup21 = (61, 62, 63)\n        val tup22 = (64, 65, 66)\n        val tup23 = (67, 68, 69)\n        val tup24 = (70, 71, 72)\n        val tup25 = (73, 74, 75)\n        val tup26 = (76, 77, 78)\n        val tup27 = (79, 80, 81)\n        val tup28 = (82, 83, 84)\n        val tup29 = (85, 86, 87)\n        val tup30 = (88, 89, 90)\n        val tup31 = (91, 92, 93)\n        val tup32 = (94, 95, 96)\n        val tup33 = (97, 98, 99)\n        val tup34 = (100, 101, 102)\n        val tup35 = (103, 104, 105)\n        val tup36 = (106, 107, 108)\n        val tup37 = (",
    "        var test_tup1_list = test_tup1.toString.toList\n        var test_tup2_list = test_tup2.toString.toList\n        var result = 0\n        for (i <- 0 until test_tup1_list.length) {\n            result += (test_tup1_list(i).asDigit + test_tup2_list(i).asDigit)\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 && tup2 != 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n            if (tup1 != 0 && tup2 != 0) sum *= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var tup1_elem = tup1 % 10\n            var tup2_elem = tup2 % 10\n            sum += (tup1_elem + tup2_elem) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val test_tup1_list = test_tup1.toString.toList\n        val test_tup2_list = test_tup2.toString.toList\n        val test_tup1_list_len = test_tup1_list.length\n        val test_tup2_list_len = test_tup2_list.length\n        val max_len = max(test_tup1_list_len, test_tup2_list_len)\n        val min_len = min(test_tup1_list_len, test_tup2_list_len)\n        val diff_len = max_len - min_len\n        val test_tup1_list_rev = test_tup1_list.reverse\n        val test_tup2_list_rev = test_tup2_list.reverse\n        val test_tup1_list_rev_str = test_tup1_list_rev.mkString\n        val test_tup2_list_rev_str = test_tup2_list_rev.mkString\n        val test_tup1_list_rev_str_num = test_tup1_list_rev_str.toLong\n        val test_tup2_list_rev_str_num = test_tup2_list_rev_str.toLong\n        val test_tup1_list_rev_str_num_list = test_tup1_list_rev_str_num.toString.toList\n        val test_tup2_list_rev_str_num_list = test_tup2_list_rev_str_num.toString.toList\n        val test_tup1_list_rev_str_num_list_len = test_tup1_list_rev_str_num_list.length\n        val test_tup2_list_rev_str_num_list_len = test_tup2_list_rev_str_num_list.length\n        val test_tup1_list_rev_str_num_list_rev = test_tup1_list_rev_str_num_list.reverse\n       ",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 != 0 || tup2 != 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            sum += pow(10, i).toLong * (digit1 + digit2)\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = (sum * 10) + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        return test_tup1 + test_tup2",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0) {\n            sum += tup1 % 10 + tup2 % 10\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\n        val tup3 = tup1.zip(tup2).map(x => x._1 + x._2)\n        tup3.product",
    "        var sum : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 || tup2 > 0) {\n            sum = sum * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 && tup2 != 0) {\n            sum = sum * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        sum",
    "        return test_tup1 + test_tup2",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while(i < 10) {\n            sum += (tup1 % 10) + (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var test_tup1_list : List[Long] = List()\n        var test_tup2_list : List[Long] = List()\n        var test_tup1_list_rev : List[Long] = List()\n        var test_tup2_list_rev : List[Long] = List()\n        var test_tup1_list_rev_str : String = \"\"\n        var test_tup2_list_rev_str : String = \"\"\n        var test_tup1_list_rev_str_rev : String = \"\"\n        var test_tup2_list_rev_str_rev : String = \"\"\n        var test_tup1_list_rev_str_rev_int : Long = 0\n        var test_tup2_list_rev_str_rev_int : Long = 0\n        var test_tup1_list_rev_str_rev_int_rev : Long = 0\n        var test_tup2_list_rev_str_rev_int_rev : Long = 0\n        var test_tup1_list_rev_str_rev_int_rev_rev : Long = 0\n        var test_tup2_list_rev_str_rev_int_rev_rev : Long = 0\n        var test_tup1_list_rev_str_rev_int_rev_rev_rev : Long = 0\n        var test_tup2_list_rev_str_rev_int_rev_rev_rev : Long = 0\n        var test_tup1_list_rev_str_rev_int_rev_rev_rev_rev : Long = 0\n        var test_tup2_list_rev_str_rev_int_rev_rev_rev_rev : Long = 0\n        var test_tup1_list_rev_str_rev_int_rev_rev_rev_rev_rev : Long = 0\n        var test_tup2_list_rev_str_rev_int_rev_rev_rev_rev_rev : Long = 0\n        var test_tup1_list_rev_str_rev_int_rev_rev_rev_rev_rev_rev : Long = 0\n       ",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += ((tup1 % 10) + (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Long] + x._2.asInstanceOf[Long])\n        tup3.productIterator.map(x => x.asInstanceOf[Long]).reduceLeft(_ + _)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup2 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup3 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup4 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup5 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup6 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup7 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup8 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup9 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup10 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup11 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup12 : Tuple2[Tuple2[Long, Long], Tuple2[Long, Long]] = (test_tup1, test_tup2)\n        var tup13 : Tuple2[Tuple2[Long, Long], T",
    "        val tup1 = (1, (2, (3, (4, (5, (6, (7, (8, (9, (10, (11, (12, (13, (14, (15, (16, (17, (18, (19, (20, (21, (22, (23, (24, (25, (26, (27, (28, (29, (30, (31, (32, (33, (34, (35, (36, (37, (38, (39, (40, (41, (42, (43, (44, (45, (46, (47, (48, (49, (50, (51, (52, (53, (54, (55, (56, (57, (58, (59, (60, (61, (62, (63, (64, (65, (66, (67, (68, (69, (70, (71, (72, (73, (74, (75, (76, (77, (78, (79, (80, (81, (82, (83, (84, (85, (86, (87, (88, (89, (90, (91, (92, (93, (94, (95, (96, (97, (98, (99, (100, (101, (102, (103, (104, (105, (106, (107, (108, (109, (110, (111, (112, (113, (114, (115, (116, (117, (118, (119, (120, (121, (122, (123, (124, (125, (126, (127, (128, (129, (130, (131, (132, (133, (134, (135, (136, (137, (138, (139, (140, (141, (142, (143, (144, (145, (146, (147, (148, (149, (150, (151, (152, (153, (154, (155, (156, (157, (158, (159, (160, (161, (162, (163, (164, (165, (166, (167, (168, (",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit) * pow(10, i).toLong\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until test_tup1.toString.length) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup1_list = List[Long]()\n        var tup2_list = List[Long]()\n        while (tup1 > 0) {\n            tup1_list = (tup1 % 10) :: tup1_list\n            tup1 /= 10\n        }\n        while (tup2 > 0) {\n            tup2_list = (tup2 % 10) :: tup2_list\n            tup2 /= 10\n        }\n        var result = 0L\n        for (i <- 0 until max(tup1_list.length, tup2_list.length)) {\n            result = result * 10 + (tup1_list(i) + tup2_list(i))\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0 || tup2 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            sum += (digit1 + digit2) * pow(10, i).toLong\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup3 = tup1.zip(tup2).map(x => x._1 + x._2)\n        tup3.product",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = (21, 22, 23, 24, 25, 26, 27, 28, 29, 30)\n        val tup4 = (31, 32, 33, 34, 35, 36, 37, 38, 39, 40)\n        val tup5 = (41, 42, 43, 44, 45, 46, 47, 48, 49, 50)\n        val tup6 = (51, 52, 53, 54, 55, 56, 57, 58, 59, 60)\n        val tup7 = (61, 62, 63, 64, 65, 66, 67, 68, 69, 70)\n        val tup8 = (71, 72, 73, 74, 75, 76, 77, 78, 79, 80)\n        val tup9 = (81, 82, 83, 84, 85, 86, 87, 88, 89, 90)\n        val tup10 = (91, 92, 93, 94, 95, 96, 97, 98, 99, 100)\n        val tup11 = (101, 102, 103, 104, 105, 106, 107, 108, 109, 110)\n        val tup12 = (111, 112, 113, 114, 115, 116, 117, 118, 119, 120)\n        val tup13 = (121, 122, 123, 124, 125, 126, 127, 128, 129, 130)\n        val tup14 = (131, 132, 133, 134, 135, 136, 137, 138, 139, 140)\n        val tup15 = (141, 142, 143, 144, 145, 146, 147, 148, 149, 150)\n        val tup16 = (151, 152, 153, 154, 155, 156, 157, 158, 159, 160)\n        val tup17 = (161, 162, 163, 164, 165, 166, 167, 168, 169, 170)\n        val tup18 = (171, 172, 173, 174, 175, 176, 177, 178, 179, 180)\n        val tup19 = (",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Int] + x._2.asInstanceOf[Int])\n        tup3.productIterator.map(x => x.asInstanceOf[Int]).reduceLeft(_ + _)",
    "        var sum = 0L\n        for (i <- 0 to test_tup1.toString.length - 1) {\n            sum += (test_tup1.toString.charAt(i).asDigit + test_tup2.toString.charAt(i).asDigit)\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        sum",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var count : Int = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10 + tup2 % 10) * pow(10, count).toLong\n            tup1 /= 10\n            tup2 /= 10\n            count += 1\n        }\n        return result",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (6, 7, 8, 9, 10)\n        val tup3 = (11, 12, 13, 14, 15)\n        val tup4 = (16, 17, 18, 19, 20)\n        val tup5 = (21, 22, 23, 24, 25)\n        val tup6 = (26, 27, 28, 29, 30)\n        val tup7 = (31, 32, 33, 34, 35)\n        val tup8 = (36, 37, 38, 39, 40)\n        val tup9 = (41, 42, 43, 44, 45)\n        val tup10 = (46, 47, 48, 49, 50)\n        val tup11 = (51, 52, 53, 54, 55)\n        val tup12 = (56, 57, 58, 59, 60)\n        val tup13 = (61, 62, 63, 64, 65)\n        val tup14 = (66, 67, 68, 69, 70)\n        val tup15 = (71, 72, 73, 74, 75)\n        val tup16 = (76, 77, 78, 79, 80)\n        val tup17 = (81, 82, 83, 84, 85)\n        val tup18 = (86, 87, 88, 89, 90)\n        val tup19 = (91, 92, 93, 94, 95)\n        val tup20 = (96, 97, 98, 99, 100)\n        val tup21 = (101, 102, 103, 104, 105)\n        val tup22 = (106, 107, 108, 109, 110)\n        val tup23 = (111, 112, 113, 114, 115)\n        val tup24 = (116, 117, 118, 119, 120)\n        val tup25 = (121, 122, 123, 124, 125)\n        val tup26 = (126, 127, 128, 129, 130)\n        val tup27 = (131, 132, 133, 134, 135)\n        val tup28 = (136, 137, 138, 139, 140)\n        val tup29 = (",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, log10(tup1).toInt).toLong\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        return test_tup1 + test_tup2",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10) + (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var t1 = tup1 % 10\n            var t2 = tup2 % 10\n            sum += pow(10, i).toLong * (t1 + t2)\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 > 0 && tup2 > 0) {\n            result = result * 10 + ((tup1 % 10) + (tup2 % 10))\n            tup1 /= 10\n            tup2 /= 10\n        }\n        result",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Int] + x._2.asInstanceOf[Int]).toList\n        tup3(test_tup1.toInt - 1) + tup3(test_tup2.toInt - 1)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Long] + x._2.asInstanceOf[Long]).toList\n        tup3(test_tup1.toInt - 1) + tup3(test_tup2.toInt - 1)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0 || tup2 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            sum += (digit1 + digit2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0 && tup2 > 0) {\n            sum += (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- 0 until test_tup1.productArity) {\n            sum += test_tup1.productElement(i).asInstanceOf[Long] + test_tup2.productElement(i).asInstanceOf[Long]\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        var i = 0\n        while (tup1 > 0) {\n            sum += (tup1 % 10 + tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return sum",
    "        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var tup_sum : Long = 0\n        while (tup1 != 0 || tup2 != 0) {\n            tup_sum = tup_sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return tup_sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0 || tup2 != 0) {\n            sum = sum * 10 + (tup1 % 10 + tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Int] + x._2.asInstanceOf[Int]).toList\n        tup3(test_tup1.toInt - 1) + tup3(test_tup2.toInt - 1)",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var sum = 0L\n        while (tup1 != 0L) {\n            sum = sum + ((tup1 % 10L) + (tup2 % 10L)) * 10L\n            tup1 = tup1 / 10L\n            tup2 = tup2 / 10L\n        }\n        return sum"
  ]
}