{
  "name": "mbpp_301_dict_depth",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the depth of a map.\n    def dictDepth(d : Any) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(dictDepth((Any(\"a\" -> 1l, \"b\" -> Map[String,Map[String,Map[Long,Long]]](\"c\" -> Map[String,Map[Long,Long]](\"d\" -> Map[Long,Long]()))))) == (4l));\n    assert(dictDepth((Any(\"a\" -> 1l, \"b\" -> Map[String,String](\"c\" -> \"python\")))) == (2l));\n    assert(dictDepth((Any(1l -> \"Sun\", 2l -> Map[Long,Map[Long,String]](3l -> Any(4l -> \"Mon\"))))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        d match {\n            case d : Map[Any, Any] => d.map(x => dictDepth(x._2)).max + 1\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + (d.values.map(dictDepth(_)).max)\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1\n                else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1\n                else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case d : List[Any] => 1 + d.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case d : List[Any] => d.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                var max = 0L\n                for (x <- d.keys) {\n                    val depth = dictDepth(d(x))\n                    if (depth > max) max = depth\n                }\n                max + 1\n            }\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case d : List[Any] => 1 + d.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[String, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_)).toList\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + (d.values.map(dictDepth(_)).max)\n            case d : List[Any] => 1 + (d.map(dictDepth(_)).max)\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case d : List[Any] => d.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_)).toList\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case d : List[Any] => 1 + d.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_)).toList\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case d : List[Any] => 1 + d.map(dictDepth).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[_, _] => {\n                val depths = d.values.map(dictDepth(_)).toList\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case m : Map[Any, Any] => {\n                val depths = m.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_)).toList\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[_, _] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[_, _] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1\n                else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1\n                else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[_, _] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1\n                else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 0 else depths.max + 1\n            }\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                var max = 0L\n                for (k <- d.keys) {\n                    val depth = dictDepth(d(k))\n                    if (depth > max) max = depth\n                }\n                max + 1\n            }\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1\n                else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case d : List[Any] => 1 + d.map(x => dictDepth(x)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = for (k <- d.keys) yield dictDepth(d(k))\n                1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[String, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1\n                else 1 + depths.max\n            }\n            case _ => 0\n        }",
    "        d match {\n            case m : Map[Any, Any] => 1 + (m.values.map(dictDepth(_)).max)\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case _ => 0\n        }",
    "        d match {\n            case m : Map[Any, Any] => {\n                val depths = m.values.map(dictDepth(_))\n                if (depths.isEmpty) 1\n                else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case m : Map[Any, Any] => {\n                val depths = m.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.size == 0) 1\n                else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.size == 0) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case d : List[Any] => 1 + d.map(dictDepth).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                var max = 0L\n                for ((k, v) <- d) {\n                    max = max max (1 + dictDepth(v))\n                }\n                max\n            }\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case d : Iterable[Any] => d.map(dictDepth).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                var maxDepth = 0L\n                for (key <- d.keys) {\n                    maxDepth = max(maxDepth, dictDepth(d(key)))\n                }\n                maxDepth + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                var max = 0L\n                for ((k, v) <- d) {\n                    val depth = dictDepth(v)\n                    if (depth > max) max = depth\n                }\n                max + 1\n            }\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                if (d.isEmpty) 0\n                else 1 + d.map(x => dictDepth(x._2)).max\n            }\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                if (d.size == 0) 1\n                else d.map(x => dictDepth(x._2)).max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case d : List[Any] => 1 + d.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case d : List[Any] => 1 + d.map(dictDepth(_)).max\n            case d : Any => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case d : List[Any] => 1 + d.map(dictDepth).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case d : List[Any] => 1 + d.map(dictDepth).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_)).toList\n                if (depths.length == 0) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                var max = 0L\n                for (key <- d.keys) {\n                    val depth = 1 + dictDepth(d(key))\n                    if (depth > max) max = depth\n                }\n                max\n            }\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1\n                else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + dictDepth(d.values.toList)\n            case d : List[Any] => d.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 0 else depths.max + 1\n            }\n            case _ => 0\n        }",
    "        d match {\n            case x : Map[Any, Any] => 1 + x.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(x => dictDepth(x)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[_, _] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        def depth(d : Any, level : Long) : Long = {\n            d match {\n                case m : Map[Any, Any] => {\n                    val depths = m.values.map(depth(_, level + 1))\n                    if (depths.isEmpty) level\n                    else depths.max\n                }\n                case _ => level\n            }\n        }\n        depth(d, 1)",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(x => dictDepth(x))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case d : List[Any] => 1 + d.map(dictDepth).max\n            case d : Any => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => d.foldLeft(1L)((a, b) => max(a, dictDepth(b._2) + 1))\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + dictDepth(d.values.toList)\n            case d : List[Any] => d.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + (d.values.map(dictDepth(_)).max)\n            case d : List[Any] => 1 + (d.map(dictDepth(_)).max)\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                1 + d.map(x => dictDepth(x._2)).max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[_, _] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case m : Map[Any, Any] => {\n                if (m.size == 0) 1\n                else m.map(x => dictDepth(x._2)).max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(x => dictDepth(x)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.map(x => dictDepth(x._2))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 0 else depths.max + 1\n            }\n            case _ => 0\n        }",
    "        d match {\n            case m : Map[Any, Any] => {\n                val depths = m.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case d : List[Any] => {\n                val depths = d.map(dictDepth(_))\n                if (depths.isEmpty) 1 else depths.max + 1\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                var max = 0L\n                for (k <- d.keys) {\n                    val depth = dictDepth(d(k))\n                    if (depth > max) max = depth\n                }\n                1 + max\n            }\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => {\n                val depths = d.values.map(dictDepth(_))\n                if (depths.isEmpty) 1 else 1 + depths.max\n            }\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case _ => 0\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.values.map(dictDepth(_)).max\n            case d : List[Any] => 1 + d.map(dictDepth(_)).max\n            case _ => 1\n        }",
    "        d match {\n            case d : Map[Any, Any] => 1 + d.map(x => dictDepth(x._2)).max\n            case _ => 1\n        }"
  ]
}