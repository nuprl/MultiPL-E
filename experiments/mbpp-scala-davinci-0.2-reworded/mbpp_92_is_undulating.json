{
  "name": "mbpp_92_is_undulating",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is undulating or not.\n    def isUndulating(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isUndulating((1212121l)) == (true));\n    assert(isUndulating((1991l)) == (false));\n    assert(isUndulating((121l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ == 1)",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) - x(0)).toList\n        diffs2.forall(_ == 0)",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        diffs2.forall(_ == 1)",
    "        val digits = n.toString.map(_.asDigit).toList\n        digits.sliding(3).forall(x => x(0) % 2 == 0 && x(1) == 0 && x(2) % 2 == 1)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).map(x => x._2 - x._1).forall(_ == 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            val a = s(i).asDigit\n            val b = s(i + 1).asDigit\n            val c = s(i + 2).asDigit\n            if (a != b && b != c && a != c) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 1) || s(i + 1) == s(i + 2) || s(i) == s(i + 2)) return false\n        }\n        return true",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val s = n.toString\n        for (i <- 0 to s.length - 3) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)",
    "        val digits = n.toString.map(_.asDigit).toList\n        var result = true\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i) == digits(i + 2) || digits(i + 1) == digits(i + 2)) {\n                result = false\n            }\n        }\n        result",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val diffs = digits.zip(digits.tail).map(x => x._2 - x._1)\n        diffs.zip(diffs.tail).forall(x => x._1 * x._2 < 0)",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 2)) return false\n        }\n        true",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        false",
    "        val s = n.toString\n        for (i <- 0 until s.length - 2) {\n            if (s(i) != s(i + 1) && s(i + 1) != s(i + 2) && s(i) != s(i + 2)) return true\n        }\n        return false",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        var i = 0\n        while (i < digits.length - 2) {\n            if (digits(i) == digits(i + 2)) return true\n            i += 1\n        }\n        return false",
    "        val digits = n.toString.map(_.asDigit)\n        for (i <- 0 until digits.length - 2) {\n            if (digits(i) == digits(i + 1) || digits(i + 1) == digits(i + 2) || digits(i) == digits(i + 2)) return false\n        }\n        true",
    "        val digits = n.toString.map(_.asDigit).toList\n        val diffs = digits.sliding(2).map(x => x(1) - x(0)).toList\n        diffs.sliding(2).forall(x => x(0) * x(1) < 0)"
  ]
}