{
  "name": "mbpp_429_and_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnckir6hi.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnckir6hi.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnckir6hi.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnckir6hi.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        for (i <- 0 until 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result |= 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsik752px.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsik752px.scala:22:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsik752px.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsik752px.scala:23:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while(tup1 != 0) {\n            var tup1_bit = tup1 % 10\n            var tup2_bit = tup2 % 10\n            if(tup1_bit == 1 && tup2_bit == 1) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsxgxx1xj.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsxgxx1xj.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsxgxx1xj.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsxgxx1xj.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1.toBinaryString.toList\n        var tup2 = test_tup2.toBinaryString.toList\n        var result = 0\n        var i = 0\n        while (i < tup1.length) {\n            if (tup1(i) == '1' && tup2(i) == '1') {\n                result += pow(2, tup1.length - i - 1).toInt\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp1nkuns.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp1nkuns.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp1nkuns.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjp1nkuns.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            if (((tup1 & 1) == 1) && ((tup2 & 1) == 1)) {\n                and_tup = and_tup | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpks0zl0c3.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpks0zl0c3.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpks0zl0c3.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpks0zl0c3.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res = res | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        var and_tup = List[Int]()\n        for (i <- 0 until tup1.length) {\n            and_tup = and_tup :+ (tup1(i) & tup2(i))\n        }\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvygow6r.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvygow6r.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvygow6r.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvygow6r.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = (tup1 & 1)\n            var bit2 = (tup2 & 1)\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0hk7xxu.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0hk7xxu.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0hk7xxu.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0hk7xxu.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9jvcdly.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9jvcdly.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9jvcdly.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9jvcdly.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 16) {\n            and_tup = and_tup | ((tup1 & 1) & (tup2 & 1))\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n            i += 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5pffhfj.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5pffhfj.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5pffhfj.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5pffhfj.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplzv8pcv.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplzv8pcv.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplzv8pcv.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplzv8pcv.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93b3xrbj.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93b3xrbj.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93b3xrbj.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93b3xrbj.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                res += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9pglj9cz.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9pglj9cz.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9pglj9cz.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9pglj9cz.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var and_tuple = \"\"\n        for (i <- 0 to tup1.length - 1) {\n            and_tuple += (tup1(i) & tup2(i))\n        }\n        and_tuple.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgohpkh6t.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgohpkh6t.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgohpkh6t.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgohpkh6t.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res = res | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10 == 1) && (tup2 % 10 == 1)) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplqp2o5ef.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplqp2o5ef.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplqp2o5ef.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplqp2o5ef.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while(tup1 != 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppxgzdfk6.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            and_tup += (tup1 % \u001b[31m10\u001b[0m) * (tup2 % \u001b[31m10\u001b[0m) * pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppxgzdfk6.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppxgzdfk6.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppxgzdfk6.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avail",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            and_tup = and_tup | (bit1 & bit2)\n            and_tup = and_tup << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjq1umbr.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjq1umbr.scala:22:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjq1umbr.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjq1umbr.scala:23:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 % 10) == 1 && (tup2 % 10) == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3tyox70.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3tyox70.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3tyox70.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3tyox70.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n            i += 1\n        }\n        return result >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122804,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuhfvwl03.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuhfvwl03.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuhfvwl03.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuhfvwl03.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        var result = 0\n        while(tup1 > 0 && tup2 > 0) {\n            if(tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(10, count).toLong\n            }\n            count += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv_pd3vi2.scala:12:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                result += pow(\u001b[31m10\u001b[0m, count).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pd3vi2.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pd3vi2.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pd3vi2.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1 << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwfrbper4.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwfrbper4.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwfrbper4.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwfrbper4.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Long = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9konwdx6.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9konwdx6.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9konwdx6.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9konwdx6.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if(bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9ihfp3d.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9ihfp3d.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9ihfp3d.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx9ihfp3d.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 64) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup = and_tup | 1\n            }\n            and_tup = and_tup << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ddrg0vk.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ddrg0vk.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ddrg0vk.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ddrg0vk.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result = result | 1\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph1zv2zrk.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph1zv2zrk.scala:22:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph1zv2zrk.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph1zv2zrk.scala:23:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) result += pow(2, i).toLong\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl3v1ata.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl3v1ata.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl3v1ata.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl3v1ata.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n            i += 1\n        }\n        result = result >> 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:25:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:26:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:26:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) == 1 && (tup2 % 10) == 1) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf3al6wrs.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf3al6wrs.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf3al6wrs.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf3al6wrs.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val tup3 = tup1.zip(tup2).map(x => x._1 & x._2)\n        tup3.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyok100dw.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyok100dw.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyok100dw.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyok100dw.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 64) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_azskamr.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_azskamr.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_azskamr.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_azskamr.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res = res | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var pow = 1\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow\n            }\n            pow *= 2\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgxxtn7ps.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgxxtn7ps.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgxxtn7ps.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgxxtn7ps.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup_and = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            if(bit1 == 1 && bit2 == 1) {\n                tup_and = tup_and + pow(2, i).toLong\n            }\n            i = i + 1\n        }\n        return tup_and\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpub70ffyq.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpub70ffyq.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpub70ffyq.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpub70ffyq.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        var result = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(10, count).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            count += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpappqmjbo.scala:12:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                result += pow(\u001b[31m10\u001b[0m, count).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpappqmjbo.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpappqmjbo.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpappqmjbo.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9laye02n.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9laye02n.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9laye02n.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9laye02n.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var i = 0\n        while (tup1 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            if (digit1 == 1 && digit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuis_clae.scala:14:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                result += pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuis_clae.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuis_clae.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuis_clae.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) result += pow(2, i).toLong\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dp8_taw.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dp8_taw.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dp8_taw.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dp8_taw.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsyjpjs87.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsyjpjs87.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsyjpjs87.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsyjpjs87.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        // Write your code here\n        val tup1 = test_tup1.toBinaryString.map(_.asDigit).toList\n        val tup2 = test_tup2.toBinaryString.map(_.asDigit).toList\n        val tup1_len = tup1.length\n        val tup2_len = tup2.length\n        val tup_len = max(tup1_len, tup2_len)\n        val tup1_padded = tup1.padTo(tup_len, 0)\n        val tup2_padded = tup2.padTo(tup_len, 0)\n        val result = tup1_padded.zip(tup2_padded).map(x => x._1 & x._2)\n        result.foldLeft(0L)((x, y) => x * 2 + y)\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpax528fag.scala:18:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpax528fag.scala:18:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpax528fag.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpax528fag.scala:19:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if (((tup1 & (1L << i)) != 0) && ((tup2 & (1L << i)) != 0)) {\n                result = result | (1L << i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6wvnx3h.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6wvnx3h.scala:17:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6wvnx3h.scala:18:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6wvnx3h.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo05j2atg.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo05j2atg.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo05j2atg.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo05j2atg.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var i = 0\n        while (tup1 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            if (digit1 == 1 && digit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuis_clae.scala:14:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                result += pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuis_clae.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuis_clae.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuis_clae.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result += pow(2, i).toLong\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz54p0oh.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz54p0oh.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz54p0oh.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz54p0oh.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            if((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnpcqwpt.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnpcqwpt.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnpcqwpt.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnpcqwpt.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup_and : Long = 0\n        var i : Int = 0\n        while (tup1 > 0) {\n            tup_and += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return tup_and\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9oil8inl.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9oil8inl.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9oil8inl.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9oil8inl.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2) == 1 && (tup2 % 2) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7yp50oa5.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7yp50oa5.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7yp50oa5.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7yp50oa5.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            if (i < 63) result = result << 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:20:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:21:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0yn68iwj.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0yn68iwj.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0yn68iwj.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0yn68iwj.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            and_tup = and_tup | (bit1 & bit2)\n            and_tup = and_tup << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5j10t8y0.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5j10t8y0.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5j10t8y0.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5j10t8y0.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var tup3 : Long = 0\n        var tup4 : Long = 0\n        var tup5 : Long = 0\n        var tup6 : Long = 0\n        var tup7 : Long = 0\n        var tup8 : Long = 0\n        var tup9 : Long = 0\n        var tup10 : Long = 0\n        var tup11 : Long = 0\n        var tup12 : Long = 0\n        var tup13 : Long = 0\n        var tup14 : Long = 0\n        var tup15 : Long = 0\n        var tup16 : Long = 0\n        var tup17 : Long = 0\n        var tup18 : Long = 0\n        var tup19 : Long = 0\n        var tup20 : Long = 0\n        var tup21 : Long = 0\n        var tup22 : Long = 0\n        var tup23 : Long = 0\n        var tup24 : Long = 0\n        var tup25 : Long = 0\n        var tup26 : Long = 0\n        var tup27 : Long = 0\n        var tup28 : Long = 0\n        var tup29 : Long = 0\n        var tup30 : Long = 0\n        var tup31 : Long = 0\n        var tup32 : Long = 0\n        var tup33 : Long = 0\n        var tup34 : Long = 0\n        var tup35 : Long = 0\n        var tup36 : Long = 0\n        var tup37 : Long = 0\n        var tup38 : Long = 0\n        var tup39 : Long = 0\n        var tup40 : Long = 0\n        var tup41 : Long = 0\n        var tup42 : Long = 0\n        var tup43 : Long = 0\n        var tup44 : Long = 0\n        var tup45 : Long = 0\n        var tup46 : Long = 0\n        var tup47 : Long = 0\n        var tup48 : Long = 0\n        var tup49 : Long = 0\n        var tup50 : Long = 0\n        var t\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkgzewz1r.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgzewz1r.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgzewz1r.scala:59:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgzewz1r.scala:59:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgzewz1r.scala:60:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1dhvx84.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1dhvx84.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1dhvx84.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1dhvx84.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            if (i < 63) result = result << 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:20:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:21:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwtu0zu7.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwtu0zu7.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwtu0zu7.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwtu0zu7.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res = res | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5z92752.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5z92752.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5z92752.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5z92752.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 % 10 == 1) && (tup2 % 10 == 1)) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9fudhfa.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9fudhfa.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9fudhfa.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9fudhfa.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var tup1_bit = tup1 % 2\n            var tup2_bit = tup2 % 2\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6_tw8szo.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6_tw8szo.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6_tw8szo.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6_tw8szo.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4fdpez4e.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4fdpez4e.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4fdpez4e.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4fdpez4e.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fc5pst.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fc5pst.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fc5pst.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fc5pst.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) == 1 && (tup2 % 10) == 1) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppoll_q35.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppoll_q35.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppoll_q35.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppoll_q35.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        for (i <- 0 to 63) {\n            and_tup = and_tup | ((tup1 & 1) & (tup2 & 1))\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n        }\n        return and_tup >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuy56gqi8.scala:18:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuy56gqi8.scala:18:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuy56gqi8.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuy56gqi8.scala:19:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        // Write your code here\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjoshh0db.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjoshh0db.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjoshh0db.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjoshh0db.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            if(digit1 == 1 && digit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3mzyf0vn.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3mzyf0vn.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3mzyf0vn.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3mzyf0vn.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnckir6hi.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnckir6hi.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnckir6hi.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnckir6hi.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            if (i < 31) result = result << 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhnp9lzd.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhnp9lzd.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhnp9lzd.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhnp9lzd.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(i < 64) {\n            if(((tup1 >> i) & 1) == 1 && ((tup2 >> i) & 1) == 1) {\n                result = result | (1L << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgn5d5pg6.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgn5d5pg6.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgn5d5pg6.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgn5d5pg6.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps6px9hbj.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps6px9hbj.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps6px9hbj.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps6px9hbj.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1.toString.toList.map(_.asDigit)\n        var tup2 = test_tup2.toString.toList.map(_.asDigit)\n        var tup3 = List[Int]()\n        var tup4 = List[Int]()\n        for (i <- 0 to tup1.length - 1) {\n            if (tup1(i) == 1 && tup2(i) == 1) {\n                tup3 = tup3 :+ 1\n                tup4 = tup4 :+ 1\n            } else if (tup1(i) == 1 && tup2(i) == 0) {\n                tup3 = tup3 :+ 1\n                tup4 = tup4 :+ 0\n            } else if (tup1(i) == 0 && tup2(i) == 1) {\n                tup3 = tup3 :+ 0\n                tup4 = tup4 :+ 1\n            } else {\n                tup3 = tup3 :+ 0\n                tup4 = tup4 :+ 0\n            }\n        }\n        var and_tuple = tup3.mkString.toLong\n        var or_tuple = tup4.mkString.toLong\n        return and_tuple * or_tuple\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnptvpx9.scala:30:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnptvpx9.scala:30:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnptvpx9.scala:31:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnptvpx9.scala:31:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 until 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_l5pjfpd.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_l5pjfpd.scala:22:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_l5pjfpd.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_l5pjfpd.scala:23:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) result += pow(2, i).toLong\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7q9724kg.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7q9724kg.scala:17:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7q9724kg.scala:18:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7q9724kg.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        //Write your code here\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var i = 0\n        while (tup1 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            if (digit1 == 1 && digit2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4oqa1089.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                result = result + pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4oqa1089.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4oqa1089.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4oqa1089.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            var tup1_bit : Long = tup1 % 10\n            var tup2_bit : Long = tup2 % 10\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqdc7qqzz.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqdc7qqzz.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqdc7qqzz.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqdc7qqzz.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\")\n        return result.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 != 0) {\n            and_tup = and_tup + ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplo5ef3v3.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            and_tup = and_tup + ((tup1 % \u001b[31m10\u001b[0m) & (tup2 % \u001b[31m10\u001b[0m)) * pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplo5ef3v3.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplo5ef3v3.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplo5ef3v3.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpntpvpdgz.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpntpvpdgz.scala:22:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpntpvpdgz.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpntpvpdgz.scala:23:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwtu0zu7.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwtu0zu7.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwtu0zu7.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprwtu0zu7.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if (((tup1 >> i) & 1) == 1 && ((tup2 >> i) & 1) == 1) {\n                result |= (1L << i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzc08gm39.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzc08gm39.scala:17:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzc08gm39.scala:18:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzc08gm39.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1 << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            if (i < 63) result = result << 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:20:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuoc7ed7.scala:21:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2) == 1 && (tup2 % 2) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzs6et75o.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzs6et75o.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzs6et75o.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzs6et75o.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res = res | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoudiyg9.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoudiyg9.scala:22:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoudiyg9.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoudiyg9.scala:23:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup = and_tup | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55wmr4m4.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55wmr4m4.scala:20:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55wmr4m4.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55wmr4m4.scala:21:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2) == 1 && (tup2 % 2) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8i3iknmv.scala:12:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                result += pow(\u001b[31m2\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8i3iknmv.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8i3iknmv.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8i3iknmv.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwygehvvf.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwygehvvf.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwygehvvf.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwygehvvf.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val tup3 = tup1.zip(tup2).map(x => x._1 & x._2)\n        tup3.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122855,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9ns6itz.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9ns6itz.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9ns6itz.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9ns6itz.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var t1 = tup1 % 10\n            var t2 = tup2 % 10\n            if (t1 == 1 && t2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfr375wj.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfr375wj.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfr375wj.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfr375wj.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += 1L << i\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122856,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu7xx4izx.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu7xx4izx.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu7xx4izx.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu7xx4izx.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var count = 0\n        var result = 0L\n        while (tup1 != 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(2, count).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            count += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0z6okwq4.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0z6okwq4.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0z6okwq4.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0z6okwq4.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyseed2ka.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyseed2ka.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyseed2ka.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyseed2ka.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while(tup1 != 0) {\n            and_tup += ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpun3axxgk.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpun3axxgk.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpun3axxgk.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpun3axxgk.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1 << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) == 1 && (tup2 % 10) == 1) {\n                res += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnkv2slkb.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnkv2slkb.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnkv2slkb.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnkv2slkb.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwtwjtx4g.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwtwjtx4g.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwtwjtx4g.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwtwjtx4g.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 64) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_azskamr.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_azskamr.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_azskamr.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_azskamr.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var count = 0\n        while(tup1 > 0 && tup2 > 0) {\n            var tup1_bit = tup1 % 10\n            var tup2_bit = tup2 % 10\n            if(tup1_bit == 1 && tup2_bit == 1) {\n                result += pow(10, count).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            count += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi60s66n8.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi60s66n8.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi60s66n8.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi60s66n8.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fc5pst.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fc5pst.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fc5pst.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk9fc5pst.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 != 0 || tup2 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result = result * 10 + 1\n            }\n            else {\n                result = result * 10 + 0\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6_fi53yg.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6_fi53yg.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6_fi53yg.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6_fi53yg.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (i < 64) {\n            if (((tup1 & 1) == 1) && ((tup2 & 1) == 1)) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7axcdot.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7axcdot.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7axcdot.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7axcdot.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i : Long = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result = result + pow(2, i).toLong\n            }\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxht57t9g.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxht57t9g.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxht57t9g.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxht57t9g.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var num1 = tup1 % 10\n            var num2 = tup2 % 10\n            if (num1 == 1 && num2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplfjnk_x.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplfjnk_x.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplfjnk_x.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplfjnk_x.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result = result + tup1(i) * tup2(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqekezsn.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqekezsn.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqekezsn.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqekezsn.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val tup3 = tup1.zip(tup2).map(x => x._1 & x._2)\n        tup3.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyok100dw.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyok100dw.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyok100dw.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyok100dw.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_2gj0hc0.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_2gj0hc0.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_2gj0hc0.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_2gj0hc0.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var counter = 0\n        while (tup1 > 0) {\n            var digit1 = tup1 % 10\n            var digit2 = tup2 % 10\n            if (digit1 == 1 && digit2 == 1) {\n                result += pow(10, counter).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            counter += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb92_kjdu.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb92_kjdu.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb92_kjdu.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb92_kjdu.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var tup1_bit = tup1 % 2\n            var tup2_bit = tup2 % 2\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                and_tup = and_tup + pow(2, i).toLong\n            }\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            i = i + 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbau7z42y.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbau7z42y.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbau7z42y.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbau7z42y.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1tesypxc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1tesypxc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1tesypxc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1tesypxc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122859,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr5xsz7u2.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr5xsz7u2.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr5xsz7u2.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr5xsz7u2.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1dhvx84.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1dhvx84.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1dhvx84.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1dhvx84.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1 << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var count = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, count).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            count += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122859,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr0xbk0ak.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr0xbk0ak.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr0xbk0ak.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr0xbk0ak.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            var bit1 : Long = tup1 & 1\n            var bit2 : Long = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122859,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppykm1mdg.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppykm1mdg.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppykm1mdg.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppykm1mdg.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5z92752.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5z92752.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5z92752.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5z92752.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res = res | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) result = result | (1L << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3vzupcd2.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3vzupcd2.scala:17:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3vzupcd2.scala:18:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3vzupcd2.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                res += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiw97u0tp.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiw97u0tp.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiw97u0tp.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiw97u0tp.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp01z2bt5e.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result = result + pow(2, i).toLong\n            }\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqnfpzm1.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqnfpzm1.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqnfpzm1.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqnfpzm1.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.map(_.asDigit).toList\n        val tup2 = test_tup2.toString.map(_.asDigit).toList\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47ek2pv3.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47ek2pv3.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47ek2pv3.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47ek2pv3.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(i < 32) {\n            if((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvth5k1r.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvth5k1r.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvth5k1r.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvth5k1r.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe88bde_.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe88bde_.scala:22:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe88bde_.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe88bde_.scala:23:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10) == (tup2 % 10)) {\n                and_tup = and_tup + (tup1 % 10) * pow(10, i).toLong\n                i += 1\n            }\n            tup1 /= 10\n            tup2 /= 10\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpos6cqu7x.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpos6cqu7x.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpos6cqu7x.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpos6cqu7x.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup = and_tup | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwb7pq7j.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwb7pq7j.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwb7pq7j.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwb7pq7j.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val tup3 = tup1.zip(tup2).map(x => x._1 & x._2)\n        tup3.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122855,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9ns6itz.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9ns6itz.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9ns6itz.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl9ns6itz.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while(tup1 > 0) {\n            if((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5xnlippq.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5xnlippq.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5xnlippq.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5xnlippq.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7_6_ezt.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7_6_ezt.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7_6_ezt.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7_6_ezt.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 31) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87qq8po7.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87qq8po7.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87qq8po7.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp87qq8po7.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphdbwz4py.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var t1 = tup1 & 1\n            var t2 = tup2 & 1\n            if (t1 == 1 && t2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n            i += 1\n        }\n        return result >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8r8if3f.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8r8if3f.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8r8if3f.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8r8if3f.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) result += pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_payaocn.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_payaocn.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_payaocn.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_payaocn.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result = result + pow(2, i).toLong\n            }\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsc06v78.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsc06v78.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsc06v78.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsc06v78.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) result += pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1 << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl5poppp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) result += pow(10, i).toLong\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk2zswt8n.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk2zswt8n.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk2zswt8n.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk2zswt8n.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jghltxq.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jghltxq.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jghltxq.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jghltxq.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.map(x => x.toString.toInt).toList\n        val tup2 = test_tup2.toString.map(x => x.toString.toInt).toList\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\").toLong\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxir2x9g.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxir2x9g.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxir2x9g.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxir2x9g.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tuple = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tuple += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tuple\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjkyqggp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjkyqggp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjkyqggp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjkyqggp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n            i += 1\n        }\n        result = result >> 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:25:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:26:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:26:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var tup1_bit = tup1 & 1\n            var tup2_bit = tup2 & 1\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncsj3ebf.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncsj3ebf.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncsj3ebf.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncsj3ebf.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(x => x.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(x => x.toInt).toList\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\").toLong\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ntxqfay.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ntxqfay.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ntxqfay.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ntxqfay.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rkuwsts.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rkuwsts.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rkuwsts.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rkuwsts.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var test_tup1_list = test_tup1.toString.toList.map(x => x.toString.toInt)\n        var test_tup2_list = test_tup2.toString.toList.map(x => x.toString.toInt)\n        var result = 0\n        for (i <- 0 until test_tup1_list.length) {\n            result = result * 10 + (test_tup1_list(i) & test_tup2_list(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxv1h5y3h.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxv1h5y3h.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxv1h5y3h.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxv1h5y3h.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            tup1 /= 2\n            tup2 /= 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsnjctxkb.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsnjctxkb.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsnjctxkb.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsnjctxkb.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                res += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiw97u0tp.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiw97u0tp.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiw97u0tp.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiw97u0tp.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7_6_ezt.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7_6_ezt.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7_6_ezt.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7_6_ezt.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9jvcdly.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9jvcdly.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9jvcdly.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9jvcdly.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while(tup1 != 0 || tup2 != 0) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if(bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq16iqql9.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq16iqql9.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq16iqql9.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq16iqql9.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx1yem85_.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                and_tup += pow(\u001b[31m2\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx1yem85_.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx1yem85_.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx1yem85_.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup = and_tup | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2p_v_fkp.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2p_v_fkp.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2p_v_fkp.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2p_v_fkp.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}