{
  "name": "mbpp_127_multiply_int",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x >> 1, y)\n            if (x % 2 == 0) half + half\n            else half + half + y\n        }",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x < y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }",
    "        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x % 2 == 0) multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else if (y % 2 == 0) multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        else x + multiplyInt(x, y - 1)",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else x + multiplyInt(x, y - 1)",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y == 2) return x + x\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        return multiplyInt(x, y / 2) + multiplyInt(x, y / 2) + x",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (x < 0) {\n            a = -x\n            b = -y\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) result += b\n        result",
    "        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)",
    "        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == 4) y << 2\n        else if (y == 4) x << 2\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == 6) y << 1 + y << 2\n        else if (y == 6) x << 1 + x << 2\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == 8) y << 3\n        else if (y == 8) x << 3\n        else if (x == 9) y + y + y + y + y + y + y + y + y\n        else if (y == 9) x + x + x + x + x + x + x + x + x\n        else if (x == 10) y << 1 + y << 3\n        else if (y == 10) x << 1 + x << 3\n        else if (x == 11) y + y + y + y + y + y + y + y + y + y\n        else if (y == 11) x + x + x + x + x + x + x + x + x + x\n        else if (x == 12) y << 2 + y << 2\n        else if (y == 12) x << 2 + x << 2\n        else if (x == 13) y + y + y + y + y + y + y + y + y + y + y + y\n        else",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y",
    "        var result = 0L\n        for (i <- 0 until y) {\n            result += x\n        }\n        result",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x > y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else x + half + half\n        }",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return multiplyInt(x / 2, y + y) + y",
    "        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return y + multiplyInt(x - 1, y)",
    "        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return (y << 1) + y + y\n        if (y == 6) return (x << 1) + x + x\n        if (x == 7) return (y << 1) + y + y + y\n        if (y == 7) return (x << 1) + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y\n        if (y == 10) return x + x + x + x + x\n        if (x == 11) return (y << 1) + y + y + y + y + y\n        if (y == 11) return (x << 1) + x + x + x + x + x\n        if (x == 12) return (y << 2) + y + y\n        if (y == 12) return (x << 2) + x + x\n        if (x == 13) return (y << 2) + y + y + y\n        if (y == 13) return (x << 2)",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val a = abs(x)\n            val b = abs(y)\n            val c = min(a, b)\n            val d = max(a, b)\n            val e = multiplyInt(c, d)\n            if (x * y > 0) e else -e\n        }",
    "        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y"
  ]
}