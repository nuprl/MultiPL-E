{
  "name": "mbpp_71_comb_sort",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        def combSort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.zipWithIndex.filter(x => (x._2 + gap) % gap == 0).map(_._1)\n                combSort(newNums, gap - 1)\n            }\n        }\n        combSort(nums, nums.length)",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(gap / 1.25, 1).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        return nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) {\n                nums\n            }\n            else {\n                var i = 0\n                var j = gap\n                var newNums = nums\n                while (j < nums.length) {\n                    if (newNums(i) > newNums(j)) {\n                        newNums = swap(newNums, i, j)\n                    }\n                    i += 1\n                    j += 1\n                }\n                sort(newNums, (gap * 10) / 13)\n            }\n        }\n        sort(nums, nums.length)",
    "        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.25).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.sliding(gap, gap).map(x => if (x(0) > x(1)) x(0) else x(1)).toList\n                sort(newNums, max(1, (gap * 10) / 13))\n            }\n        }\n        sort(nums, nums.length)",
    "        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) return nums\n            var i = 0\n            var swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n                i += 1\n            }\n            if (swapped) sort(nums, gap / 1.3.toInt)\n            else nums\n        }\n        sort(nums, nums.length / 1.3.toInt)",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        def combSort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.zipWithIndex.filter(x => (x._2 + gap) % gap == 0).map(_._1)\n                val sorted = newNums.sorted\n                val result = nums.zipWithIndex.map(x => if ((x._2 + gap) % gap == 0) sorted(x._2 / gap) else x._1)\n                combSort(result, gap / 1.3.toInt)\n            }\n        }\n        combSort(nums, nums.length / 1.3.toInt)",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) {\n                nums.sortWith(_ < _)\n            } else {\n                val newGap = (gap / 1.3).toInt\n                val newNums = for (i <- 0 until nums.length - gap) yield {\n                    if (nums(i) > nums(i + gap)) {\n                        val temp = nums(i)\n                        nums(i) = nums(i + gap)\n                        nums(i + gap) = temp\n                    }\n                    nums(i)\n                }\n                sort(newNums.toList ::: nums.slice(nums.length - gap, nums.length), newGap)\n            }\n        }\n        sort(nums, nums.length)",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums",
    "        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.25).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums"
  ]
}