{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    def textMatchWordzMiddle(text : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchWordzMiddle((\"pythonzabc.\")) == (true));\n    assert(textMatchWordzMiddle((\"zxyabc.\")) == (false));\n    assert(textMatchWordzMiddle((\"  lang  .\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val textArray = text.toCharArray\n        var result = false\n        for (i <- 1 until textArray.length - 1) {\n            if (textArray(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        text.matches(\"^[^z]*z[^z]*$\")",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"\\\\bz\\\\b\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"z\".r\n        val result = pattern.findAllIn(text)\n        if (result.hasNext) {\n            val first = result.next\n            if (result.hasNext) {\n                val second = result.next\n                if (result.hasNext) {\n                    return false\n                }\n                return true\n            }\n            return false\n        }\n        return false",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]+z[^z]+$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        text.matches(\"^[^z]*z[^z]*$\")",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        text.matches(\"^[^z].*z.*[^z]$\")"
  ]
}