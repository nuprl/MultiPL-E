{
  "name": "mbpp_558_digit_distance_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of the per-digit difference between two integers.\n    def digitDistanceNums(n1 : Long, n2 : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digitDistanceNums((1l), (2l)) == (1l));\n    assert(digitDistanceNums((23l), (56l)) == (6l));\n    assert(digitDistanceNums((123l), (256l)) == (7l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - m % 10) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        0",
    "        val digits1 = n1.toString.map(_.asDigit)\n        val digits2 = n2.toString.map(_.asDigit)\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n != 0 || m != 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            sum += abs(n % 10 - (n2 % 10))\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        // Fill in the code here\n        return 0",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            var m = n2\n            while (m > 0) {\n                val d2 = m % 10\n                sum += abs(d1 - d2)\n                m /= 10\n            }\n            n /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        // Fill in the body of this function\n        val n1_list = n1.toString.toList\n        val n2_list = n2.toString.toList\n        val n1_list_int = n1_list.map(x => x.toString.toInt)\n        val n2_list_int = n2_list.map(x => x.toString.toInt)\n        val n1_list_int_rev = n1_list_int.reverse\n        val n2_list_int_rev = n2_list_int.reverse\n        val n1_list_int_rev_len = n1_list_int_rev.length\n        val n2_list_int_rev_len = n2_list_int_rev.length\n        val n1_list_int_rev_len_max = max(n1_list_int_rev_len, n2_list_int_rev_len)\n        val n1_list_int_rev_len_min = min(n1_list_int_rev_len, n2_list_int_rev_len)\n        val n1_list_int_rev_len_diff = n1_list_int_rev_len_max - n1_list_int_rev_len_min\n        val n1_list_int_rev_len_diff_list = List.fill(n1_list_int_rev_len_diff)(0)\n        val n1_list_int_rev_len_diff_list_rev = n1_list_int_rev_len_diff_list.reverse\n        val n1_list_int_rev_len_diff_list_rev_len = n1_list_int_rev_len_diff_list_rev.length\n        val n1_list_int_rev_len_diff_list_rev_len_max = max(n1_list_int_rev_len_diff_list_rev_len, n1_list_int_rev_len_min)\n        val n1_list_int_rev_len_diff_list_rev_len_min = min(n1_list_int_rev_len",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                sum += abs(m % 10 - (m / 10) % 10)\n                m /= 10\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        return 0",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum"
  ]
}