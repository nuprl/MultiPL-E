{
  "name": "mbpp_558_digit_distance_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of the per-digit difference between two integers.\n    def digitDistanceNums(n1 : Long, n2 : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digitDistanceNums((1l), (2l)) == (1l));\n    assert(digitDistanceNums((23l), (56l)) == (6l));\n    assert(digitDistanceNums((123l), (256l)) == (7l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - m % 10) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        0",
    "        val digits1 = n1.toString.map(_.asDigit)\n        val digits2 = n2.toString.map(_.asDigit)\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n != 0 || m != 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            sum += abs(n % 10 - (n2 % 10))\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        // Fill in the code here\n        return 0",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            var m = n2\n            while (m > 0) {\n                val d2 = m % 10\n                sum += abs(d1 - d2)\n                m /= 10\n            }\n            n /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        // Fill in the body of this function\n        val n1_list = n1.toString.toList\n        val n2_list = n2.toString.toList\n        val n1_list_int = n1_list.map(x => x.toString.toInt)\n        val n2_list_int = n2_list.map(x => x.toString.toInt)\n        val n1_list_int_rev = n1_list_int.reverse\n        val n2_list_int_rev = n2_list_int.reverse\n        val n1_list_int_rev_len = n1_list_int_rev.length\n        val n2_list_int_rev_len = n2_list_int_rev.length\n        val n1_list_int_rev_len_max = max(n1_list_int_rev_len, n2_list_int_rev_len)\n        val n1_list_int_rev_len_min = min(n1_list_int_rev_len, n2_list_int_rev_len)\n        val n1_list_int_rev_len_diff = n1_list_int_rev_len_max - n1_list_int_rev_len_min\n        val n1_list_int_rev_len_diff_list = List.fill(n1_list_int_rev_len_diff)(0)\n        val n1_list_int_rev_len_diff_list_rev = n1_list_int_rev_len_diff_list.reverse\n        val n1_list_int_rev_len_diff_list_rev_len = n1_list_int_rev_len_diff_list_rev.length\n        val n1_list_int_rev_len_diff_list_rev_len_max = max(n1_list_int_rev_len_diff_list_rev_len, n1_list_int_rev_len_min)\n        val n1_list_int_rev_len_diff_list_rev_len_min = min(n1_list_int_rev_len",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                sum += abs(m % 10 - (m / 10) % 10)\n                m /= 10\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        return 0",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        // Fill in the code here\n        0",
    "        var sum = 0L\n        var n1 = n1\n        var n2 = n2\n        while (n1 > 0) {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n            n2 /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val r = n / 10\n                abs(d - r % 10) + digitDistance(r)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n != 0 || m != 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n1 : Long, n2 : Long) : Long = {\n            if (n1 == 0 && n2 == 0) return 0\n            val d1 = n1 % 10\n            val d2 = n2 % 10\n            abs(d1 - d2) + digitDistance(n1 / 10, n2 / 10)\n        }\n        digitDistance(n1, n2)",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                m /= 10\n                sum += d * d\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - (m % 10)) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        0",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l1 = s1.length\n        val l2 = s2.length\n        val l = max(l1, l2)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < l1) s1(l1 - i - 1) - '0' else 0\n            val d2 = if (i < l2) s2(l2 - i - 1) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            return abs(d - m % 10) + digitDistance(m)\n        }\n        return digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var nn = n\n            while (nn > 0) {\n                val d = nn % 10\n                nn /= 10\n                sum += d * d\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            return abs(n % 10 - (n / 10) % 10) + digitDistance(n / 10)\n        }\n        return digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var s1 = n1.toString\n        var s2 = n2.toString\n        var sum = 0\n        for (i <- 0 until s1.length) {\n            sum += abs(s1(i) - s2(i))\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            def digitDistanceHelper(n : Long, prev : Long, sum : Long) : Long = {\n                if (n == 0) sum\n                else {\n                    val curr = n % 10\n                    digitDistanceHelper(n / 10, curr, sum + abs(curr - prev))\n                }\n            }\n            digitDistanceHelper(n, 0, 0)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                sum += abs(m % 10 - (m / 10) % 10)\n                m /= 10\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - m % 10) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = (n2 % 10)\n            sum += abs(d1 - d2)\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            def digitDistance(n : Long, prev : Long) : Long = {\n                if (n == 0) 0\n                else {\n                    val cur = n % 10\n                    abs(cur - prev) + digitDistance(n / 10, cur)\n                }\n            }\n            digitDistance(n, 0)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            def digitDistanceHelper(n : Long, prev : Long, acc : Long) : Long = {\n                if (n == 0) acc\n                else digitDistanceHelper(n / 10, n % 10, acc + abs(n % 10 - prev))\n            }\n            digitDistanceHelper(n, 0, 0)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var s1 = n1.toString\n        var s2 = n2.toString\n        var sum = 0\n        for (i <- 0 to s1.length - 1) {\n            sum += abs(s1(i) - s2(i))\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val d1 = n1.toString.map(_.asDigit).toList\n        val d2 = n2.toString.map(_.asDigit).toList\n        val d = d1.zip(d2).map(x => abs(x._1 - x._2))\n        d.sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                d * d + digitDistance(n / 10)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val r = n / 10\n            abs(d - r % 10) + digitDistance(r)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - m % 10) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            return abs(n % 10 - (n / 10) % 10) + digitDistance(n / 10)\n        }\n        return digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                m /= 10\n                sum += d * d\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            sum += abs((n1_ % 10) - (n2_ % 10))\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - m % 10) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n != 0 || m != 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i) - '0' else 0\n            val d2 = if (i < s2.length) s2(i) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxLength = max(n1DigitsLength, n2DigitsLength)\n        val minLength = min(n1DigitsLength, n2DigitsLength)\n        val n1DigitsPadded = n1Digits.padTo(maxLength, 0)\n        val n2DigitsPadded = n2Digits.padTo(maxLength, 0)\n        val diff = (n1DigitsPadded zip n2DigitsPadded).map(x => abs(x._1 - x._2))\n        diff.sum",
    "        var sum = 0L\n        var num1 = n1\n        var num2 = n2\n        while (num1 > 0 || num2 > 0) {\n            sum += abs(num1 % 10 - num2 % 10)\n            num1 /= 10\n            num2 /= 10\n        }\n        return sum",
    "        // Fill in the code here\n        return 0",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            def digitDistance(n : Long, d : Long) : Long = {\n                if (n == 0) d\n                else digitDistance(n / 10, d + abs(n % 10 - (n / 10) % 10))\n            }\n            digitDistance(n, 0)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val r = n / 10\n            abs(d - r) + digitDistance(r)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val digits1 = n1.toString.map(_.asDigit)\n        val digits2 = n2.toString.map(_.asDigit)\n        digits1.zip(digits2).map(x => abs(x._1 - x._2)).sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        // Fill in the code here\n        return 0",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                sum += d * d\n                m /= 10\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = min(s1.length, s2.length)\n        var sum = 0\n        for (i <- 0 until l) {\n            sum += abs(s1(i) - s2(i))\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                sum += d * d\n                m /= 10\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            def digitDistance(n : Long, acc : Long) : Long = {\n                if (n == 0) acc\n                else digitDistance(n / 10, acc + abs(n % 10 - (n / 10) % 10))\n            }\n            digitDistance(n, 0)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            var m = n2\n            while (m > 0) {\n                val d2 = m % 10\n                sum += abs(d1 - d2)\n                m /= 10\n            }\n            n /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                d + digitDistance(n / 10)\n            }\n        }\n        digitDistance(n1) - digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            val s = n.toString\n            val d = s.length\n            val m = s.map(_.toString.toLong).sum\n            (d - 1) * m + s.map(_.toString.toLong).zipWithIndex.map(x => x._1 * (d - x._2 - 1)).sum\n        }\n        abs(digitDistance(n1) - digitDistance(n2))",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        while (n != 0) {\n            sum += abs(n % 10 - n2 % 10)\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - (m % 10)) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        val digits1 = n1.toString.map(_.asDigit)\n        val digits2 = n2.toString.map(_.asDigit)\n        val diffs = digits1.zip(digits2).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l = max(s1.length, s2.length)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < s1.length) s1(i) - '0' else 0\n            val d2 = if (i < s2.length) s2(i) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                sum += d * d\n                m /= 10\n            }\n            sum\n        }\n        digitDistance(n1) - digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val d1 = n1.toString.map(_.toString.toLong)\n        val d2 = n2.toString.map(_.toString.toLong)\n        val d = d1.zip(d2).map(x => abs(x._1 - x._2))\n        d.sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            sum += abs(n % 10 - n2 % 10)\n            n /= 10\n            n2 /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            def loop(n : Long, prev : Long) : Long = {\n                if (n == 0) 0\n                else {\n                    val d = n % 10\n                    abs(d - prev) + loop(n / 10, d)\n                }\n            }\n            loop(n, 0)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            sum += abs(d - (n2 % 10))\n            n /= 10\n            n2 /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val r = n / 10\n            abs(d - r) + digitDistance(r)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0 || n2_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                sum += abs(m % 10 - (m / 10) % 10)\n                m /= 10\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            return abs(d - m % 10) + digitDistance(m)\n        }\n        return digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - (m % 10)) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - (m % 10)) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else (n % 10) - (n / 10 % 10) + digitDistance(n / 10)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        var n1_len = n1_str.length\n        var n2_len = n2_str.length\n        var i = 0\n        while (i < n1_len && i < n2_len) {\n            sum += abs(n1_str(i) - n2_str(i))\n            i += 1\n        }\n        while (i < n1_len) {\n            sum += n1_str(i) - '0'\n            i += 1\n        }\n        while (i < n2_len) {\n            sum += n2_str(i) - '0'\n            i += 1\n        }\n        return sum",
    "        // Fill in the code here\n        0",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            var sum = 0L\n            var m = n\n            while (m > 0) {\n                val d = m % 10\n                m /= 10\n                sum += d * d\n            }\n            sum\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d1 = n % 10\n            var m = n2\n            while (m > 0) {\n                val d2 = m % 10\n                sum += abs(d1 - d2)\n                m /= 10\n            }\n            n /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        // Fill in the code here\n        0",
    "        def f(n : Long) : Long = {\n            if (n == 0) 0\n            else n % 10 + f(n / 10)\n        }\n        f(abs(n1 - n2))",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            return abs(d - m % 10) + digitDistance(m)\n        }\n        return digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            val d1 = n % 10\n            val d2 = m % 10\n            sum += abs(d1 - d2)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        val l1 = s1.length\n        val l2 = s2.length\n        val l = max(l1, l2)\n        var sum = 0L\n        for (i <- 0 until l) {\n            val d1 = if (i < l1) s1(i) - '0' else 0\n            val d2 = if (i < l2) s2(i) - '0' else 0\n            sum += abs(d1 - d2)\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            return abs(d - m % 10) + digitDistance(m)\n        }\n        return digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        0",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - m % 10) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                d + digitDistance(n / 10)\n            }\n        }\n        digitDistance(n1) - digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            else return abs(n % 10 - (n / 10) % 10) + digitDistance(n / 10)\n        }\n        return digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val diffs = (n1Digits zip n2Digits).map(x => abs(x._1 - x._2))\n        diffs.sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n != 0 || m != 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n1_ = n1\n        var n2_ = n2\n        while (n1_ > 0) {\n            sum += abs(n1_ % 10 - n2_ % 10)\n            n1_ /= 10\n            n2_ /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                d + digitDistance(n / 10)\n            }\n        }\n        digitDistance(n1) - digitDistance(n2)",
    "        var sum = 0L\n        var n1_temp = n1\n        var n2_temp = n2\n        while (n1_temp > 0) {\n            sum += abs(n1_temp % 10 - n2_temp % 10)\n            n1_temp /= 10\n            n2_temp /= 10\n        }\n        return sum",
    "        val s1 = n1.toString\n        val s2 = n2.toString\n        var sum = 0L\n        for (i <- 0 until s1.length) {\n            sum += abs(s1(i) - s2(i))\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else {\n                val d = n % 10\n                val m = n / 10\n                abs(d - m % 10) + digitDistance(m)\n            }\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        def digitDistance(n : Long) : Long = {\n            def digitDistance(n : Long, prev : Long) : Long = {\n                if (n == 0) 0\n                else {\n                    val curr = n % 10\n                    abs(curr - prev) + digitDistance(n / 10, curr)\n                }\n            }\n            digitDistance(n, 0)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        // Fill in the code here\n        0",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) return 0\n            val d = n % 10\n            val m = n / 10\n            abs(d - m % 10) + digitDistance(m)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        var m = n2\n        while (n > 0) {\n            sum += abs(n % 10 - m % 10)\n            n /= 10\n            m /= 10\n        }\n        return sum",
    "        def digitDistance(n : Long) : Long = {\n            if (n < 10) 0\n            else abs(n % 10 - (n / 10) % 10) + digitDistance(n / 10)\n        }\n        digitDistance(n1) + digitDistance(n2)",
    "        var sum = 0L\n        var n = n1\n        while (n > 0) {\n            val d = n % 10\n            n /= 10\n            sum += abs(d - (n2 % 10))\n            n2 /= 10\n        }\n        return sum",
    "        val n1Digits = n1.toString.map(_.asDigit)\n        val n2Digits = n2.toString.map(_.asDigit)\n        val n1DigitsLength = n1Digits.length\n        val n2DigitsLength = n2Digits.length\n        val maxDigitsLength = max(n1DigitsLength, n2DigitsLength)\n        var sum = 0L\n        for (i <- 0 until maxDigitsLength) {\n            val n1Digit = if (i < n1DigitsLength) n1Digits(i) else 0\n            val n2Digit = if (i < n2DigitsLength) n2Digits(i) else 0\n            sum += abs(n1Digit - n2Digit)\n        }\n        sum",
    "        // Fill in the code here\n        var n1_str = n1.toString\n        var n2_str = n2.toString\n        var n1_len = n1_str.length()\n        var n2_len = n2_str.length()\n        var diff = 0\n        var min_len = min(n1_len, n2_len)\n        for (i <- 0 until min_len) {\n            diff += abs(n1_str(i) - n2_str(i))\n        }\n        diff"
  ]
}