{
  "name": "mbpp_17_square_perimeter",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns the perimeter of a square given its side length as input.\n    def squarePerimeter(a : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(squarePerimeter((10l)) == (40l));\n    assert(squarePerimeter((5l)) == (20l));\n    assert(squarePerimeter((4l)) == (16l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        return a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        a * 4",
    "        4 * a",
    "        return a * 4",
    "        4 * a",
    "        return 4 * a",
    "        return 4 * a",
    "        return 4 * a",
    "        return 4 * a",
    "        4 * a",
    "        a * 4",
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        return a * 4",
    "        return 4 * a",
    "        a * 4",
    "        return a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        a * 4",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        a * 4",
    "        return a * 4",
    "        4 * a",
    "        4 * a",
    "        return a * 4",
    "        return a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        return a * 4",
    "        4 * a",
    "        return a * 4",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        return 4 * a",
    "        return 4 * a",
    "        return a * 4",
    "        4 * a",
    "        a * 4",
    "        a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        return a * 4",
    "        return a * 4",
    "        return 4 * a",
    "        4 * a",
    "        a * 4",
    "        return 4 * a",
    "        4 * a",
    "        return 4 * a",
    "        return a * 4",
    "        a * 4",
    "        4 * a",
    "        a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        return a * 4",
    "        return a * 4",
    "        a * 4",
    "        a * 4",
    "        4 * a",
    "        return a * 4",
    "        a * 4",
    "        4 * a",
    "        return a * 4",
    "        4 * a",
    "        a * 4",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        return 4 * a",
    "        4 * a",
    "        return 4 * a",
    "        a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        return a * 4",
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        a * 4",
    "        return a * 4",
    "        a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        return a * 4",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        return a * 4",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        a * 4",
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        return 4 * a",
    "        return 4 * a",
    "        4 * a",
    "        a * 4",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        a * 4",
    "        return a * 4",
    "        return 4 * a",
    "        return 4 * a",
    "        return 4 * a",
    "        return a * 4",
    "        4 * a",
    "        4 * a",
    "        return a * 4",
    "        return 4 * a",
    "        return 4 * a",
    "        return 4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        4 * a",
    "        a * 4",
    "        return a * 4",
    "        return a * 4",
    "        4 * a",
    "        return 4 * a",
    "        4 * a",
    "        return a * 4",
    "        4 * a",
    "        4 * a"
  ]
}