{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    def textLowercaseUnderscore(text : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textLowercaseUnderscore((\"aab_cbbbc\")) == (true));\n    assert(textLowercaseUnderscore((\"aab_Abbbc\")) == (false));\n    assert(textLowercaseUnderscore((\"Aaab_abbbc\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val pattern = \"[a-z]+_[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"[a-z]+_[a-z]+\".r\n        val result = pattern.findAllIn(text)\n        if (result.isEmpty) false else true",
    "        val pattern = \"([a-z]+_)+[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]+_[a-z]+)\".r\n        pattern.findFirstIn(text).isDefined",
    "        val pattern = \"[a-z]+_[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]+_)+[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]_[a-z])\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]+_)+[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"[a-z]+_[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"[a-z]+_[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]+_[a-z]+)\".r\n        pattern.findAllIn(text).toList.length > 0",
    "        val pattern = \"([a-z]+)_([a-z]+)\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"[a-z]+_[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]_)+[a-z]\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]+_[a-z]+)\".r\n        val matches = pattern.findAllIn(text)\n        matches.hasNext",
    "        val pattern = \"[a-z]+_[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]_[a-z])+\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"[a-z]+_[a-z]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"([a-z]_[a-z])+\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"\"\"([a-z]+_)+[a-z]+\"\"\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }"
  ]
}