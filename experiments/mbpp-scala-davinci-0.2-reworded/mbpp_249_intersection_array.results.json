{
  "name": "mbpp_249_intersection_array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = new ListBuffer[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection_array += num\n            }\n        }\n        return intersection_array.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2.contains(array_nums1(i))) {\n                result = result :+ array_nums1(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        (array_nums1_set & array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwn_z0p00.scala:11)\n\tat Problem.main(tmpwn_z0p00.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = new ListBuffer[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    intersection_array += num1\n                }\n            }\n        }\n        return intersection_array.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var array_nums3 = List[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2.contains(array_nums1(i))) {\n                array_nums3 = array_nums3 :+ array_nums1(i)\n            }\n        }\n        return array_nums3\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection = new ListBuffer[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection += i\n            }\n        }\n        return intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        val intersection_list = intersection_set.toList\n        return intersection_list\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp63_vpzr8.scala:13)\n\tat Problem.main(tmp63_vpzr8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val array_nums1_set_intersect = array_nums1_set.intersect(array_nums2_set)\n        array_nums1_set_intersect.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9r2v01xd.scala:12)\n\tat Problem.main(tmp9r2v01xd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val map = new HashMap[Long, Boolean]()\n        for (num <- array_nums1) {\n            map.put(num, true)\n        }\n        val result = new ListBuffer[Long]()\n        for (num <- array_nums2) {\n            if (map.contains(num)) result += num\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) result = i :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjq2286jt.scala:13)\n\tat Problem.main(tmpjq2286jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    result = num1 :: result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcjq0wb1.scala:17)\n\tat Problem.main(tmphcjq0wb1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        val intersection_list = intersection_set.toList\n        return intersection_list\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp63_vpzr8.scala:13)\n\tat Problem.main(tmp63_vpzr8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        (array_nums1_set & array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwn_z0p00.scala:11)\n\tat Problem.main(tmpwn_z0p00.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                result = result :+ num\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val result = new ListBuffer[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    result += num1\n                }\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection : List[Long] = List()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    intersection = intersection :+ num1\n                }\n            }\n        }\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var array_nums3 = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                array_nums3 = i :: array_nums3\n            }\n        }\n        return array_nums3\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5cnqi1bv.scala:15)\n\tat Problem.main(tmp5cnqi1bv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection : List[Long] = List()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    intersection = intersection :+ num1\n                }\n            }\n        }\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val result = new ListBuffer[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result += i\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzairm07o.scala:15)\n\tat Problem.main(tmpzairm07o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        (array_nums1_set & array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwn_z0p00.scala:11)\n\tat Problem.main(tmpwn_z0p00.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val hash_nums1 = new HashMap[Long, Int]\n        val hash_nums2 = new HashMap[Long, Int]\n        val intersection = new ListBuffer[Long]\n        for (num <- array_nums1) {\n            if (hash_nums1.contains(num)) {\n                hash_nums1(num) += 1\n            } else {\n                hash_nums1(num) = 1\n            }\n        }\n        for (num <- array_nums2) {\n            if (hash_nums2.contains(num)) {\n                hash_nums2(num) += 1\n            } else {\n                hash_nums2(num) = 1\n            }\n        }\n        for ((num, count) <- hash_nums1) {\n            if (hash_nums2.contains(num)) {\n                val count2 = hash_nums2(num)\n                val minCount = min(count, count2)\n                for (i <- 1 to minCount) {\n                    intersection += num\n                }\n            }\n        }\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val intersection = array_nums1.intersect(array_nums2)\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection_array = num :: intersection_array\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1c76mdrf.scala:15)\n\tat Problem.main(tmp1c76mdrf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection : List[Long] = List()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection = i :: intersection\n            }\n        }\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptwnx8jf8.scala:15)\n\tat Problem.main(tmptwnx8jf8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        (array_nums1_set & array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwn_z0p00.scala:11)\n\tat Problem.main(tmpwn_z0p00.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = List[Long]()\n        for(num1 <- array_nums1) {\n            for(num2 <- array_nums2) {\n                if(num1 == num2) {\n                    intersection_array = intersection_array :+ num1\n                }\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val intersection = array_nums1.intersect(array_nums2)\n        intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var array_nums1_set = Set[Long]()\n        var array_nums2_set = Set[Long]()\n        for (i <- array_nums1) {\n            array_nums1_set += i\n        }\n        for (i <- array_nums2) {\n            array_nums2_set += i\n        }\n        return (array_nums1_set & array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array : List[Long] = List()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection_array = intersection_array :+ num\n            }\n        }\n        intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection_array = intersection_array :+ num\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb0w15yh2.scala:12)\n\tat Problem.main(tmpb0w15yh2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val nums1 = array_nums1.toSet\n        val nums2 = array_nums2.toSet\n        val intersection = nums1.intersect(nums2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp15dj2bsg.scala:12)\n\tat Problem.main(tmp15dj2bsg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        val set_intersection = set_nums1.intersect(set_nums2)\n        set_intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb0w15yh2.scala:12)\n\tat Problem.main(tmpb0w15yh2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array : List[Long] = List()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection_array = intersection_array :+ num\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val result = new ListBuffer[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result += i\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val intersection_array = new ListBuffer[Long]()\n        for (i <- 0 until array_nums1.length) {\n            for (j <- 0 until array_nums2.length) {\n                if (array_nums1(i) == array_nums2(j)) {\n                    intersection_array += array_nums1(i)\n                }\n            }\n        }\n        return intersection_array.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection : List[Long] = List()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    intersection = num1 :: intersection\n                }\n            }\n        }\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjbdy4bap.scala:17)\n\tat Problem.main(tmpjbdy4bap.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        return intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbnhk69vg.scala:12)\n\tat Problem.main(tmpbnhk69vg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        (array_nums1_set & array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwn_z0p00.scala:11)\n\tat Problem.main(tmpwn_z0p00.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection = i :: intersection\n            }\n        }\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcfzdyxv9.scala:15)\n\tat Problem.main(tmpcfzdyxv9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzairm07o.scala:15)\n\tat Problem.main(tmpzairm07o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set_nums1 = array_nums1.toSet\n        val set_nums2 = array_nums2.toSet\n        set_nums1.intersect(set_nums2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0d82ijnj.scala:11)\n\tat Problem.main(tmp0d82ijnj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val intersection = array_nums1.intersect(array_nums2)\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_map = new HashMap[Long, Boolean]()\n        for (i <- array_nums1) {\n            array_nums1_map += (i -> true)\n        }\n        val array_nums2_map = new HashMap[Long, Boolean]()\n        for (i <- array_nums2) {\n            array_nums2_map += (i -> true)\n        }\n        val intersection = new ListBuffer[Long]()\n        for (i <- array_nums1_map.keys) {\n            if (array_nums2_map.contains(i)) {\n                intersection += i\n            }\n        }\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = List[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2.contains(array_nums1(i))) {\n                intersection_array = intersection_array :+ array_nums1(i)\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = List[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2.contains(array_nums1(i))) {\n                intersection_array = intersection_array :+ array_nums1(i)\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        val intersection = set1.intersect(set2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphunnepax.scala:12)\n\tat Problem.main(tmphunnepax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val array_nums1_set_intersection = array_nums1_set.intersect(array_nums2_set)\n        array_nums1_set_intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl2oi85pm.scala:12)\n\tat Problem.main(tmpl2oi85pm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection = List[Long]()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection = intersection :+ num\n            }\n        }\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val array_nums1_set_intersection = array_nums1_set.intersect(array_nums2_set)\n        array_nums1_set_intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl2oi85pm.scala:12)\n\tat Problem.main(tmpl2oi85pm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection = i :: intersection\n            }\n        }\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcfzdyxv9.scala:15)\n\tat Problem.main(tmpcfzdyxv9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        val intersection_list = intersection.toList\n        return intersection_list\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa5ai06gd.scala:13)\n\tat Problem.main(tmpa5ai06gd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val nums1 = array_nums1.toSet\n        val nums2 = array_nums2.toSet\n        val intersection = nums1.intersect(nums2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp15dj2bsg.scala:12)\n\tat Problem.main(tmp15dj2bsg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        val intersection_list = intersection.toList\n        return intersection_list\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa5ai06gd.scala:13)\n\tat Problem.main(tmpa5ai06gd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val result = new ListBuffer[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    result += num1\n                }\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val nums1 = array_nums1.toSet\n        val nums2 = array_nums2.toSet\n        val intersection = nums1.intersect(nums2)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp15dj2bsg.scala:12)\n\tat Problem.main(tmp15dj2bsg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val set1 = array_nums1.toSet\n        val set2 = array_nums2.toSet\n        (set1 & set2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb8y29tfb.scala:11)\n\tat Problem.main(tmpb8y29tfb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array : List[Long] = List()\n        for (num <- array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection_array = intersection_array :+ num\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array : List[Long] = List()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection_array = intersection_array :+ i\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val intersection = array_nums1.intersect(array_nums2)\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var array_nums1_map = new HashMap[Long, Int]()\n        var array_nums2_map = new HashMap[Long, Int]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums1_map.contains(array_nums1(i))) {\n                array_nums1_map(array_nums1(i)) += 1\n            } else {\n                array_nums1_map(array_nums1(i)) = 1\n            }\n        }\n        for (i <- 0 until array_nums2.length) {\n            if (array_nums2_map.contains(array_nums2(i))) {\n                array_nums2_map(array_nums2(i)) += 1\n            } else {\n                array_nums2_map(array_nums2(i)) = 1\n            }\n        }\n        var intersection = new ListBuffer[Long]()\n        for (i <- 0 until array_nums1.length) {\n            if (array_nums2_map.contains(array_nums1(i))) {\n                intersection += array_nums1(i)\n            }\n        }\n        return intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        val intersection_list = intersection_set.toList\n        return intersection_list\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp63_vpzr8.scala:13)\n\tat Problem.main(tmp63_vpzr8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzairm07o.scala:15)\n\tat Problem.main(tmpzairm07o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array : List[Long] = List()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection_array = intersection_array :+ i\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        array_nums1_set.intersect(array_nums2_set).toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7infaqs.scala:11)\n\tat Problem.main(tmpj7infaqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection = new ListBuffer[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    intersection += num1\n                }\n            }\n        }\n        return intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val intersection = new ListBuffer[Long]()\n        for (num1 <- array_nums1) {\n            for (num2 <- array_nums2) {\n                if (num1 == num2) {\n                    intersection += num1\n                }\n            }\n        }\n        return intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        // array_nums1.intersect(array_nums2)\n        array_nums1.filter(x => array_nums2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection_array = intersection_array :+ i\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val intersection = array_nums1.intersect(array_nums2)\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.intersect(array_nums2)\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.filter(x => array_nums2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123321,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection_array = List[Long]()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection_array = intersection_array :+ i\n            }\n        }\n        return intersection_array\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var intersection : List[Long] = List()\n        for (i <- array_nums1) {\n            if (array_nums2.contains(i)) {\n                intersection = i :: intersection\n            }\n        }\n        return intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptwnx8jf8.scala:15)\n\tat Problem.main(tmptwnx8jf8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection = array_nums1_set.intersect(array_nums2_set)\n        intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvny5om8j.scala:12)\n\tat Problem.main(tmpvny5om8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        intersection_set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwvykuqy.scala:12)\n\tat Problem.main(tmpfwvykuqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val array_nums1_set = array_nums1.toSet\n        val array_nums2_set = array_nums2.toSet\n        val intersection_set = array_nums1_set.intersect(array_nums2_set)\n        val intersection_list = intersection_set.toList\n        return intersection_list\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp63_vpzr8.scala:13)\n\tat Problem.main(tmp63_vpzr8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        var array_nums3 = List[Long]()\n        for (i <- 0 until array_nums1.length) {\n            for (j <- 0 until array_nums2.length) {\n                if (array_nums1(i) == array_nums2(j)) {\n                    array_nums3 = array_nums3 :+ array_nums1(i)\n                }\n            }\n        }\n        return array_nums3\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        val intersection = array_nums1.intersect(array_nums2)\n        intersection\n    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}