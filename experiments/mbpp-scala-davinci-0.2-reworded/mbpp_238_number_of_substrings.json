{
  "name": "mbpp_238_number_of_substrings",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of non-empty substrings of a given string.\n    def numberOfSubstrings(str : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(numberOfSubstrings((\"abc\")) == (6l));\n    assert(numberOfSubstrings((\"abcd\")) == (10l));\n    assert(numberOfSubstrings((\"abcde\")) == (15l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        str.length * (str.length + 1) / 2",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val m = n * (n + 1) / 2\n        m",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        str.length * (str.length + 1) / 2",
    "        val n = str.length\n        if (n == 0) return 0\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        count",
    "        str.length * (str.length + 1) / 2",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val count = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (str(i) != ' ') {\n                count(i) = if (i == 0) 1 else count(i - 1) + 1\n            }\n        }\n        count.sum",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var result = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) result += 1\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 to str.length) {\n            for (j <- i to str.length) {\n                if (str.substring(i, j).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val m = n * (n + 1) / 2\n        return m",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        return (n * (n + 1)) / 2",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val result = (1 to n).foldLeft(0L)((acc, i) => acc + i)\n        result",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        if (str.length == 0) return 0\n        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str.substring(i, j + 1).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        if (str.length == 0) return 0\n        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val dp = Array.fill(n)(0)\n        dp(0) = 1\n        for (i <- 1 until n) {\n            dp(i) = dp(i - 1) + i + 1\n        }\n        dp(n - 1)",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j) != \"\") count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        str.length * (str.length + 1) / 2",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        val n = str.length\n        val arr = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            if (str(i) == '1') arr(i) = 1\n            else arr(i) = 0\n        }\n        var sum = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n            arr(i) = sum\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result += arr(i)\n        }\n        result",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        str.length * (str.length + 1) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        val arr = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        val len = str.length\n        val result = (1 to len).map(i => len - i + 1).sum\n        result",
    "        val len = str.length\n        (len * (len + 1) / 2).toLong",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val result = (n * (n + 1)) / 2\n        result",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        // TODO: implement this function\n        0",
    "        val n = str.length\n        return n * (n + 1) / 2",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val count = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            var j = i\n            while (j < n) {\n                count(i) += 1\n                j += 1\n            }\n        }\n        count.sum",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != ' ') count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        // Write your code here\n        return 0",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count : Long = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        // TODO\n        0",
    "        str.length * (str.length + 1) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != ' ') {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str(i) != str(j)) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        val result = (0 until n).map(i => (n - i) * (i + 1)).sum\n        result",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i to str.length - 1) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        // your code here\n        0",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        str.length * (str.length + 1) / 2",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        str.length * (str.length + 1) / 2",
    "        val n = str.length\n        if (n == 0) return 0\n        var result = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) result += 1\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        str.length * (str.length + 1) / 2",
    "        // Write your code here\n        return 0",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        // TODO: Implement this function\n        0",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        val n = str.length\n        (n * (n + 1)) / 2",
    "        val n = str.length\n        (1 to n).map(i => n - i + 1).sum",
    "        val n = str.length\n        val arr = str.toCharArray\n        var count = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i to n - 1) {\n                if (arr(i) != ' ') {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val result = (0 until n).map(i => (i + 1) * (n - i)).sum\n        result",
    "        var count : Long = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i until str.length) {\n                if (str.substring(i, j + 1).length > 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val len = str.length\n        var count = 0\n        for (i <- 0 until len) {\n            for (j <- i until len) {\n                if (str(i) != str(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong",
    "        var count = 0\n        for (i <- 0 to str.length - 1) {\n            for (j <- i + 1 to str.length) {\n                if (str.substring(i, j).length > 0) count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        (n * (n + 1) / 2).toLong"
  ]
}