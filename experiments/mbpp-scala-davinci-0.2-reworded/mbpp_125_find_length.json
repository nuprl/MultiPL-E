{
  "name": "mbpp_125_find_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    def findLength(string : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLength((\"11000010001\")) == (6l));\n    assert(findLength((\"10111\")) == (1l));\n    assert(findLength((\"11011101100101\")) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val prefix = new Array[Long](n)\n        prefix(0) = arr(0)\n        for (i <- 1 until n) prefix(i) = prefix(i - 1) + arr(i)\n        val map = new HashMap[Long, Long]\n        var ans = 0L\n        for (i <- 0 until n) {\n            if (prefix(i) == 0) ans = max(ans, i + 1)\n            else {\n                if (map.contains(prefix(i))) ans = max(ans, i - map(prefix(i)))\n                else map(prefix(i)) = i\n            }\n        }\n        ans",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = if (string(i) == '0') 1 else -1\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = dp(i)(i) + dp(i + 1)(i + 1)\n        }\n        for (i <- 2 until n) {\n            for (j <- 0 until n - i) {\n                dp(j)(j + i) = dp(j)(j + i - 1) + dp(j + i)(j + i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                max = max max abs(dp(i)(j))\n            }\n        }\n        max",
    "        var maxLength = 0\n        for (i <- 0 until string.length) {\n            var zeros = 0\n            var ones = 0\n            for (j <- i until string.length) {\n                if (string(j) == '0') zeros += 1\n                else ones += 1\n                if (zeros == ones) maxLength = max(maxLength, j - i + 1)\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            max = max max abs(count)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            currentLength += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, currentLength)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else if (count < 0) count = 0\n        }\n        maxLength",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        val n = string.length\n        val arr = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) arr(i)(0) = 0\n        for (j <- 0 to n) arr(0)(j) = 0\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                if (string(i - 1) == '0') arr(i)(j) = arr(i - 1)(j) + 1\n                else arr(i)(j) = arr(i - 1)(j) - 1\n            }\n        }\n        var max = 0L\n        for (i <- 0 to n) {\n            for (j <- 0 to n) {\n                if (arr(i)(j) == 0) max = max max (i - j).toLong\n                else {\n                    val index = arr.indexWhere(_(j) == arr(i)(j))\n                    if (index != -1) max = max max (i - index).toLong\n                }\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val ones = Array.fill(n + 1)(0L)\n        val zeros = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) {\n            ones(i) = ones(i - 1) + (if (string(i - 1) == '1') 1 else 0)\n            zeros(i) = zeros(i - 1) + (if (string(i - 1) == '0') 1 else 0)\n        }\n        var max = 0L\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                val diff = abs(ones(j) - ones(i - 1) - (zeros(j) - zeros(i - 1)))\n                if (diff > max) max = diff\n            }\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') {\n                count -= 1\n            } else {\n                count += 1\n            }\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            max = max max abs(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val sum = Array.ofDim[Long](n)\n        sum(0) = arr(0)\n        for (i <- 1 until n) sum(i) = sum(i - 1) + arr(i)\n        val map = new HashMap[Long, Int]\n        var max = 0\n        for (i <- 0 until n) {\n            if (sum(i) == 0) max = max max (i + 1)\n            else {\n                if (map.contains(sum(i))) max = max max (i - map(sum(i)))\n                else map += (sum(i) -> i)\n            }\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val diff = Array.fill(n + 1)(0)\n        for (i <- 1 to n) {\n            diff(i) = diff(i - 1) + (if (string(i - 1) == '0') -1 else 1)\n        }\n        val map = HashMap[Int, Int]()\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(diff(i))) {\n                max = max max (i - map(diff(i)))\n            } else {\n                map(diff(i)) = i\n            }\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n + 1)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i + 1) = arr(i) - 1\n            else arr(i + 1) = arr(i) + 1\n        }\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(arr(i))) max = max max (i - map(arr(i)))\n            else map += (arr(i) -> i)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) {\n            dp(i)(0) = 0\n            dp(0)(i) = 0\n        }\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                if (string(i - 1) == '0') {\n                    dp(i)(j) = dp(i - 1)(j) + 1\n                } else {\n                    dp(i)(j) = dp(i - 1)(j - 1)\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 to n) {\n            for (j <- 0 to n) {\n                max = max max (dp(n)(i) - dp(n)(j))\n            }\n        }\n        max",
    "        var max : Long = 0\n        var count : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '1') arr(i) = 1\n            else arr(i) = -1\n        }\n        val sum = Array.fill(n)(0)\n        sum(0) = arr(0)\n        for (i <- 1 until n) sum(i) = sum(i - 1) + arr(i)\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 until n) {\n            if (sum(i) == 0) max = i + 1\n            else if (map.contains(sum(i))) max = max max (i - map(sum(i)))\n            else map(sum(i)) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val sum = Array.ofDim[Long](n)\n        sum(0) = arr(0)\n        for (i <- 1 until n) sum(i) = sum(i - 1) + arr(i)\n        val map = new HashMap[Long, Int]\n        map(sum(0)) = 0\n        var max = 0\n        for (i <- 1 until n) {\n            if (sum(i) == 0) max = i + 1\n            else if (map.contains(sum(i))) max = max.max(i - map(sum(i)))\n            else map(sum(i)) = i\n        }\n        max",
    "        val n = string.length\n        val diff = Array.fill(n + 1)(0)\n        var max = 0\n        for (i <- 0 until n) {\n            diff(i + 1) = diff(i) + (if (string(i) == '0') 1 else -1)\n            max = max max abs(diff(i + 1))\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else if (count > max) max = count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (oneCount == zeroCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (oneCount > zeroCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        return max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '1') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val arr = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '1') arr(i) = 1\n            if (i > 0) arr(i) += arr(i - 1)\n        }\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 until n) {\n            if (map.contains(arr(i))) max = max.max(i - map(arr(i)))\n            else map.put(arr(i), i)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength : Long = 0\n        var currentLength : Long = 0\n        var zeroCount : Long = 0\n        var oneCount : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            currentLength += 1\n            if (zeroCount == oneCount) {\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n                currentLength = 0\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') {\n                count += 1\n            } else {\n                count -= 1\n            }\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            if (string(i) == '1') arr(i) = 1 else arr(i) = -1\n        }\n        val map = new HashMap[Int, Int]\n        var sum = 0\n        var max = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = max max (i + 1)\n            else if (map.contains(sum)) max = max max (i - map(sum))\n            else map(sum) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        val n = string.length\n        val diff = new Array[Long](n)\n        diff(0) = if (string(0) == '0') 1 else -1\n        for (i <- 1 until n) {\n            diff(i) = diff(i - 1) + (if (string(i) == '0') 1 else -1)\n        }\n        val map = new HashMap[Long, Long]\n        var max = 0L\n        for (i <- 0 until n) {\n            if (diff(i) == 0) max = max max (i + 1)\n            else if (map.contains(diff(i))) max = max max (i - map(diff(i)))\n            else map(diff(i)) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) maxLength = currentLength\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) maxLength = currentLength\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var zeros = 0\n        var ones = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') zeros += 1\n            else ones += 1\n            if (zeros == ones) max = max max (zeros + ones)\n        }\n        for (i <- 0 until n) {\n            if (string(i) == '0') zeros -= 1\n            else ones -= 1\n            if (zeros == ones) max = max max (zeros + ones)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) max = i + 1\n            else if (count < 0) count = 0\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                max = max max abs(count)\n                count = 0\n            }\n        }\n        max",
    "        val n = string.length\n        val arr = Array.fill(n)(0)\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '1') count += 1\n            arr(i) = count\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val diff = arr(j) - arr(i) + (if (string(i) == '1') -1 else 0)\n                max = max max abs(diff - (j - i + 1 - diff))\n            }\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            currentLength += 1\n            if (zeroCount == oneCount) {\n                maxLength = max(maxLength, currentLength)\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                zeroCount += 1\n                currentLength += 1\n            } else {\n                oneCount += 1\n                currentLength -= 1\n            }\n            if (currentLength < 0) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n            if (zeroCount == oneCount) maxLength = max(maxLength, currentLength)\n        }\n        maxLength",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n, n)\n        for (i <- 0 until n) {\n            arr(i)(i) = if (string(i) == '0') -1 else 1\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                arr(i)(j) = arr(i)(j - 1) + (if (string(j) == '0') -1 else 1)\n            }\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (arr(i)(j) == 0) max = max max (j - i + 1)\n            }\n        }\n        max",
    "        var max = 0L\n        var count = 0L\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                zeroCount += 1\n                currentLength += 1\n            } else {\n                oneCount += 1\n                currentLength -= 1\n            }\n            if (currentLength < 0) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n            if (zeroCount > 0 && oneCount > 0) {\n                maxLength = max(maxLength, currentLength)\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        var map = Map[Int, Int]()\n        map += 0 -> -1\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map += count -> i\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count != 0) {\n                for (j <- i + 1 until string.length) {\n                    if (string(j) == '0') count += 1\n                    else count -= 1\n                    if (count == 0) maxLength = max(maxLength, j - i)\n                }\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        var max = 0\n        var sum = 0\n        val map = HashMap[Int, Int]()\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = i + 1\n            if (map.contains(sum)) max = max.max(i - map(sum))\n            else map(sum) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            } else {\n                max = max.max(count)\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n + 1)\n        for (i <- 0 until n) {\n            arr(i + 1) = arr(i) + (if (string(i) == '0') -1 else 1)\n        }\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(arr(i))) max = max max (i - map(arr(i)))\n            else map(arr(i)) = i\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) currentLength += 1\n            else if (zeroCount > oneCount) {\n                maxLength = max(maxLength, currentLength)\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var zeros = 0\n        var ones = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeros += 1 else ones += 1\n            if (zeros == ones) max = max max (zeros + ones)\n        }\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeros -= 1 else ones -= 1\n            if (zeros == ones) max = max max (zeros + ones)\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) {\n            arr(i)(0) = 0\n            arr(0)(i) = 0\n        }\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                if (string(i - 1) == '0') arr(i)(j) = arr(i - 1)(j) + 1\n                else arr(i)(j) = arr(i - 1)(j) - 1\n            }\n        }\n        var max = 0L\n        for (i <- 0 to n) {\n            for (j <- 0 to n) {\n                if (arr(i)(j) == 0) max = max max (i - j)\n            }\n        }\n        for (i <- 0 to n) {\n            for (j <- 0 to n) {\n                if (arr(i)(j) != 0) {\n                    val index = arr.map(_.indexOf(arr(i)(j))).filter(_ > j).min\n                    if (index != -1) max = max max (index - j)\n                }\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var maxDiff = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            maxDiff = max(maxDiff, abs(zeroCount - oneCount))\n        }\n        maxDiff",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var zeros = 0\n        var ones = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeros += 1\n            else ones += 1\n            max = max max abs(zeros - ones)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                zeroCount += 1\n            } else {\n                oneCount += 1\n            }\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) {\n                    maxLength = currentLength\n                }\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') {\n                zeroCount += 1\n            } else {\n                oneCount += 1\n            }\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) {\n                    maxLength = currentLength\n                }\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var current = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '1') current += 1\n            else current -= 1\n            if (current < 0) current = 0\n            max = max.max(current)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val prefix = new Array[Long](n)\n        prefix(0) = arr(0)\n        for (i <- 1 until n) prefix(i) = prefix(i - 1) + arr(i)\n        val map = new HashMap[Long, Int]\n        var max = 0\n        for (i <- 0 until n) {\n            if (prefix(i) == 0) max = i + 1\n            else if (map.contains(prefix(i))) max = max max (i - map(prefix(i)))\n            else map(prefix(i)) = i\n        }\n        max",
    "        val n = string.length\n        val arr = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            if (string(i) == '1') arr(i) = 1\n            else arr(i) = -1\n        }\n        val map = new HashMap[Int, Int]\n        map(0) = -1\n        var max = 0\n        var sum = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (map.contains(sum)) {\n                max = max.max(i - map(sum))\n            }\n            else map(sum) = i\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else if (count < 0) count = 0\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var max = 0L\n        var count = 0L\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var maxLength : Long = 0\n        var count : Long = 0\n        var zeroCount : Long = 0\n        var oneCount : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            count = abs(zeroCount - oneCount)\n            if (count > maxLength) maxLength = count\n        }\n        maxLength",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            max = max max abs(count)\n        }\n        max",
    "        val n = string.length\n        val zeros = new Array[Long](n)\n        val ones = new Array[Long](n)\n        zeros(0) = if (string(0) == '0') 1 else 0\n        ones(0) = if (string(0) == '1') 1 else 0\n        for (i <- 1 until n) {\n            zeros(i) = zeros(i - 1) + (if (string(i) == '0') 1 else 0)\n            ones(i) = ones(i - 1) + (if (string(i) == '1') 1 else 0)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val z = zeros(j) - (if (i > 0) zeros(i - 1) else 0)\n                val o = ones(j) - (if (i > 0) ones(i - 1) else 0)\n                max = max max abs(z - o)\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                zeroCount += 1\n            } else {\n                oneCount += 1\n            }\n            currentLength += 1\n            if (zeroCount == oneCount) {\n                maxLength = max(maxLength, currentLength)\n            }\n        }\n        maxLength",
    "        val n = string.length\n        val a = Array.fill(n + 1)(0)\n        for (i <- 0 until n) {\n            a(i + 1) = a(i) + (if (string(i) == '0') 1 else -1)\n        }\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(a(i))) {\n                max = max max (i - map(a(i)))\n            } else {\n                map(a(i)) = i\n            }\n        }\n        max",
    "        var maxLength : Long = 0\n        var count : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        var map = Map[Long, Long]()\n        map += (0 -> -1)\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map += (count -> i)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                count += 1\n            } else {\n                count -= 1\n            }\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        maxLength",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) currentLength += 1\n            else {\n                maxLength = max(maxLength, currentLength)\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n        }\n        maxLength",
    "        var zeros = 0\n        var ones = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeros += 1\n            else ones += 1\n            if (zeros == ones) max = max max (zeros + ones)\n        }\n        zeros = 0\n        ones = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeros += 1\n            else ones += 1\n            if (zeros == ones) max = max max (zeros + ones)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else if (count < 0) count = 0\n        }\n        maxLength",
    "        val n = string.length\n        val count = Array.fill(n + 1)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '1') count(i + 1) = count(i) + 1\n            else count(i + 1) = count(i)\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n + 1) {\n                val diff = abs(count(i) - count(j))\n                if (diff > max) max = diff\n            }\n        }\n        max",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength : Long = 0\n        var count : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else {\n                var j = i + 1\n                while (j < string.length) {\n                    if (string(j) == '0') count -= 1\n                    else count += 1\n                    if (count == 0) maxLength = max(maxLength, j - i)\n                    j += 1\n                }\n            }\n        }\n        maxLength",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                zeroCount += 1\n                currentLength += 1\n            } else {\n                oneCount += 1\n                currentLength -= 1\n            }\n            if (currentLength < 0) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n            if (currentLength > maxLength) maxLength = currentLength\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                zeroCount += 1\n            } else {\n                oneCount += 1\n            }\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            } else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') {\n                zeroCount += 1\n            } else {\n                oneCount += 1\n            }\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            } else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 to string.length - 1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        maxLength",
    "        var maxLength = 0\n        var zeros = 0\n        var ones = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeros += 1\n            else ones += 1\n            if (zeros == ones) maxLength = max(maxLength, zeros + ones)\n            else if (zeros > ones) {\n                zeros = 0\n                ones = 0\n            }\n        }\n        zeros = 0\n        ones = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeros += 1\n            else ones += 1\n            if (ones == zeros + 1) maxLength = max(maxLength, zeros + ones)\n            else if (ones > zeros + 1) {\n                zeros = 0\n                ones = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var current = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') {\n                current += 1\n            } else {\n                current -= 1\n            }\n            if (current < 0) {\n                current = 0\n            }\n            max = max.max(current)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max : Long = 0\n        var count : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        var zeros = 0\n        var ones = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') zeros += 1\n            else ones += 1\n            if (zeros == ones) max = max max (zeros + ones)\n            for (j <- i + 1 until n) {\n                if (string(j) == '0') zeros += 1\n                else ones += 1\n                if (zeros == ones) max = max max (zeros + ones)\n            }\n            zeros = 0\n            ones = 0\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else if (count < 0) count = 0\n        }\n        maxLength",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n                currentLength = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        currentLength = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount + 1) {\n                currentLength = zeroCount + oneCount\n                maxLength = max(maxLength, currentLength)\n            }\n            else if (zeroCount > oneCount + 1) {\n                zeroCount = 0\n                oneCount = 0\n                currentLength = 0\n            }\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = i + 1\n        }\n        var map = new HashMap[Int, Int]\n        count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (map.contains(count)) maxLength = max(maxLength, i - map(count))\n            else map += (count -> i)\n        }\n        maxLength",
    "        var max : Long = 0\n        var count : Long = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        val n = string.length\n        val zeroCount = Array.fill(n)(0)\n        val oneCount = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (i == 0) {\n                if (string(i) == '0') zeroCount(i) = 1\n                else oneCount(i) = 1\n            } else {\n                if (string(i) == '0') zeroCount(i) = zeroCount(i - 1) + 1\n                else zeroCount(i) = zeroCount(i - 1)\n                if (string(i) == '1') oneCount(i) = oneCount(i - 1) + 1\n                else oneCount(i) = oneCount(i - 1)\n            }\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val z = zeroCount(j) - zeroCount(i) + (if (string(i) == '0') 1 else 0)\n                val o = oneCount(j) - oneCount(i) + (if (string(i) == '1') 1 else 0)\n                max = max max abs(z - o)\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else if (count > max) max = count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max abs(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val diff = Array.fill(n + 1)(0)\n        for (i <- 1 to n) {\n            diff(i) = diff(i - 1) + (if (string(i - 1) == '0') -1 else 1)\n        }\n        val map = new HashMap[Int, Int]\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(diff(i))) max = max max (i - map(diff(i)))\n            else map += (diff(i) -> i)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i == 0) dp(i)(j) = j\n                else if (j == 0) dp(i)(j) = i\n                else if (string(i - 1) == string(j - 1)) dp(i)(j) = dp(i - 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i - 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(n)(n)",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count > max) max = count\n            if (count < 0) count = 0\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        val n = string.length\n        val count = Array.fill(n + 1)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '1') count(i + 1) = count(i) + 1\n            else count(i + 1) = count(i)\n        }\n        var max = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n + 1) {\n                val diff = abs(count(j) - count(i))\n                if (diff > max) max = diff\n            }\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        for (i <- 0 until n) {\n            arr(i) = if (string(i) == '0') -1 else 1\n        }\n        val sum = new Array[Long](n + 1)\n        for (i <- 0 until n) {\n            sum(i + 1) = sum(i) + arr(i)\n        }\n        val map = new HashMap[Long, Int]\n        var max = 0\n        for (i <- 0 to n) {\n            if (map.contains(sum(i))) {\n                max = max max (i - map(sum(i)))\n            } else {\n                map(sum(i)) = i\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) maxLength = currentLength\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) maxLength = currentLength\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            else max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) maxLength = currentLength\n            }\n            else if (zeroCount > oneCount) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) {\n                currentLength = zeroCount + oneCount\n                if (currentLength > maxLength) maxLength = currentLength\n            }\n            else if (zeroCount < oneCount) {\n                currentLength = 0\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n        }\n        count = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, string.length - i)\n        }\n        maxLength",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count == 0) max = i + 1\n        }\n        var map = Map[Int, Int]()\n        map += (0 -> -1)\n        var len = 0\n        count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (map.contains(count)) len = max(len, i - map(count))\n            else map += (count -> i)\n        }\n        len",
    "        val n = string.length\n        val arr = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val map = new HashMap[Long, Long]\n        var sum = 0\n        var max = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n            if (sum == 0) max = i + 1\n            else if (map.contains(sum)) max = max max (i - map(sum))\n            else map += (sum -> i)\n        }\n        max"
  ]
}