{
  "name": "mbpp_125_find_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    def findLength(string : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLength((\"11000010001\")) == (6l));\n    assert(findLength((\"10111\")) == (1l));\n    assert(findLength((\"11011101100101\")) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            if (count < 0) count = 0\n            else max = max max count\n        }\n        max",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            if (count > max) max = count\n        }\n        max",
    "        val n = string.length\n        val arr = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (string(i) == '0') arr(i) = -1\n            else arr(i) = 1\n        }\n        val prefix = new Array[Long](n)\n        prefix(0) = arr(0)\n        for (i <- 1 until n) prefix(i) = prefix(i - 1) + arr(i)\n        val map = new HashMap[Long, Long]\n        var ans = 0L\n        for (i <- 0 until n) {\n            if (prefix(i) == 0) ans = max(ans, i + 1)\n            else {\n                if (map.contains(prefix(i))) ans = max(ans, i - map(prefix(i)))\n                else map(prefix(i)) = i\n            }\n        }\n        ans",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        val n = string.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = if (string(i) == '0') 1 else -1\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = dp(i)(i) + dp(i + 1)(i + 1)\n        }\n        for (i <- 2 until n) {\n            for (j <- 0 until n - i) {\n                dp(j)(j + i) = dp(j)(j + i - 1) + dp(j + i)(j + i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                max = max max abs(dp(i)(j))\n            }\n        }\n        max",
    "        var maxLength = 0\n        for (i <- 0 until string.length) {\n            var zeros = 0\n            var ones = 0\n            for (j <- i until string.length) {\n                if (string(j) == '0') zeros += 1\n                else ones += 1\n                if (zeros == ones) maxLength = max(maxLength, j - i + 1)\n            }\n        }\n        maxLength",
    "        val n = string.length\n        var count = 0\n        var max = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count -= 1\n            else count += 1\n            max = max max abs(count)\n        }\n        max",
    "        var maxLength = 0\n        var currentLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            currentLength += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, currentLength)\n        }\n        maxLength",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max",
    "        var maxLength = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count == 0) maxLength = max(maxLength, i + 1)\n            else if (count < 0) count = 0\n        }\n        maxLength",
    "        var count = 0\n        var max = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max max count\n        }\n        max",
    "        var maxLength = 0\n        var zeroCount = 0\n        var oneCount = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount > oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        zeroCount = 0\n        oneCount = 0\n        for (i <- string.length - 1 to 0 by -1) {\n            if (string(i) == '0') zeroCount += 1\n            else oneCount += 1\n            if (zeroCount == oneCount) maxLength = max(maxLength, zeroCount + oneCount)\n            else if (zeroCount < oneCount) {\n                zeroCount = 0\n                oneCount = 0\n            }\n        }\n        maxLength",
    "        val n = string.length\n        val arr = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) arr(i)(0) = 0\n        for (j <- 0 to n) arr(0)(j) = 0\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                if (string(i - 1) == '0') arr(i)(j) = arr(i - 1)(j) + 1\n                else arr(i)(j) = arr(i - 1)(j) - 1\n            }\n        }\n        var max = 0L\n        for (i <- 0 to n) {\n            for (j <- 0 to n) {\n                if (arr(i)(j) == 0) max = max max (i - j).toLong\n                else {\n                    val index = arr.indexWhere(_(j) == arr(i)(j))\n                    if (index != -1) max = max max (i - index).toLong\n                }\n            }\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) count = 0\n            max = max.max(count)\n        }\n        max",
    "        val n = string.length\n        val ones = Array.fill(n + 1)(0L)\n        val zeros = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) {\n            ones(i) = ones(i - 1) + (if (string(i - 1) == '1') 1 else 0)\n            zeros(i) = zeros(i - 1) + (if (string(i - 1) == '0') 1 else 0)\n        }\n        var max = 0L\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                val diff = abs(ones(j) - ones(i - 1) - (zeros(j) - zeros(i - 1)))\n                if (diff > max) max = diff\n            }\n        }\n        max",
    "        val n = string.length\n        var max = 0\n        var count = 0\n        for (i <- 0 until n) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max max count\n        }\n        max",
    "        var max = 0\n        var count = 0\n        for (i <- 0 until string.length) {\n            if (string(i) == '0') count += 1\n            else count -= 1\n            if (count < 0) {\n                count = 0\n            }\n            max = max.max(count)\n        }\n        max"
  ]
}