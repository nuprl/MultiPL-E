{
  "name": "mbpp_97_frequency_lists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a map.\n    def frequencyLists(list1 : List[List[Long]]) : Map[Long,Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong, 5l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 3l, 3l -> 1l, 4l -> 1l, 5l -> 2l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l))));\n    assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 1l, 3l -> 1l, 4l -> 1l, 5l -> 1l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l, 10l -> 1l, 11l -> 1l, 12l -> 1l))));\n    assert(frequencyLists((List[List[Long]](List[Long](20l.toLong, 30l.toLong, 40l.toLong, 17l.toLong), List[Long](18l.toLong, 16l.toLong, 14l.toLong, 13l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong)))).equals((Map[Long,Long](20l -> 2l, 30l -> 2l, 40l -> 2l, 17l -> 1l, 18l -> 1l, 16l -> 1l, 14l -> 1l, 13l -> 1l, 10l -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) {\n                    map(i) += 1\n                } else {\n                    map(i) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) map(element) += 1\n                else map += (element -> 1)\n            }\n        }\n        map",
    "        var result = Map[Long,Long]()\n        for (i <- 0 until list1.length) {\n            for (j <- 0 until list1(i).length) {\n                if (result.contains(list1(i)(j))) {\n                    result(list1(i)(j)) += 1\n                } else {\n                    result += (list1(i)(j) -> 1)\n                }\n            }\n        }\n        result",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- 0 until list1.length) {\n            for (j <- 0 until list1(i).length) {\n                if (map.contains(list1(i)(j))) {\n                    map(list1(i)(j)) += 1\n                } else {\n                    map(list1(i)(j)) = 1\n                }\n            }\n        }\n        return map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map += (e -> (map(e) + 1))\n                else map += (e -> 1)\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map += (j -> 1)\n                }\n            }\n        }\n        return map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) = map(element) + 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                }\n                else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) = map(j) + 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) {\n                    map(i) += 1\n                } else {\n                    map(i) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) {\n                    map(i) += 1\n                } else {\n                    map(i) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        list1.flatten.foreach(x => map(x) = map.getOrElse(x, 0L) + 1L)\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map += (e -> 1)\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) = map(element) + 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (x <- l) {\n                if (map.contains(x)) {\n                    map(x) += 1\n                } else {\n                    map(x) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        var result = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (result.contains(e)) {\n                    result(e) += 1\n                } else {\n                    result(e) = 1\n                }\n            }\n        }\n        result",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                map += (element -> (map.getOrElse(element, 0L) + 1))\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) {\n                    map(i) += 1\n                } else {\n                    map(i) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var freqMap = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (freqMap.contains(element)) {\n                    freqMap(element) += 1\n                } else {\n                    freqMap(element) = 1\n                }\n            }\n        }\n        freqMap",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                }\n                else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) = map(e) + 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var frequencyMap = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (frequencyMap.contains(element)) {\n                    frequencyMap(element) += 1\n                } else {\n                    frequencyMap += (element -> 1)\n                }\n            }\n        }\n        frequencyMap",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                map(e) = map.getOrElse(e, 0) + 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map += (e -> 1)\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        return map",
    "        val freq = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (freq.contains(e)) {\n                    freq(e) += 1\n                } else {\n                    freq(e) = 1\n                }\n            }\n        }\n        freq",
    "        val map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) map(element) += 1\n                else map(element) = 1\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        val map = Map[Long,Long]()\n        for (list <- list1) {\n            for (elem <- list) {\n                if (map.contains(elem)) {\n                    map(elem) += 1\n                } else {\n                    map(elem) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                val count = map.getOrElse(e, 0)\n                map(e) = count + 1\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val flatList = list1.flatten\n        val freqMap = Map[Long,Long]()\n        for (i <- flatList) {\n            if (freqMap.contains(i)) {\n                freqMap(i) = freqMap(i) + 1\n            } else {\n                freqMap(i) = 1\n            }\n        }\n        freqMap",
    "        val frequencyMap = new HashMap[Long,Long]\n        list1.foreach(list => list.foreach(element => frequencyMap.put(element, frequencyMap.getOrElse(element, 0L) + 1L)))\n        frequencyMap",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                map(e) = map.getOrElse(e, 0) + 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        return map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                map += (e -> (map.getOrElse(e, 0L) + 1))\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) map(i) += 1\n                else map += (i -> 1)\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        list1.foreach(list => {\n            list.foreach(element => {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            })\n        })\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                map += (element -> (map.getOrElse(element, 0L) + 1))\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                map(e) = map.getOrElse(e, 0) + 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                map += (element -> (map.getOrElse(element, 0L) + 1L))\n            }\n        }\n        map",
    "        var map = new HashMap[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        return map",
    "        var freqMap = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (freqMap.contains(element)) freqMap(element) += 1\n                else freqMap(element) = 1\n            }\n        }\n        freqMap",
    "        var frequencyMap = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (frequencyMap.contains(element)) {\n                    frequencyMap(element) += 1\n                } else {\n                    frequencyMap(element) = 1\n                }\n            }\n        }\n        frequencyMap",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        list1.foreach(list => list.foreach(num => map(num) = map.getOrElse(num, 0L) + 1))\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (i <- l) {\n                map(i) = map.getOrElse(i, 0) + 1\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) = map(e) + 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) map(element) += 1\n                else map(element) = 1\n            }\n        }\n        return map",
    "        val map = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) = map(element) + 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) map(element) += 1\n                else map(element) = 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map += (element -> 1)\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) map(element) += 1\n                else map(element) = 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map += (element -> 1)\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        return map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- 0 until list1.length) {\n            for (j <- 0 until list1(i).length) {\n                if (map.contains(list1(i)(j))) {\n                    map(list1(i)(j)) = map(list1(i)(j)) + 1\n                } else {\n                    map += (list1(i)(j) -> 1)\n                }\n            }\n        }\n        return map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) = map(element) + 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val freq = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (freq.contains(element)) {\n                    freq(element) = freq(element) + 1\n                } else {\n                    freq(element) = 1\n                }\n            }\n        }\n        freq",
    "        var freqMap = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (freqMap.contains(element)) {\n                    freqMap(element) += 1\n                } else {\n                    freqMap(element) = 1\n                }\n            }\n        }\n        freqMap",
    "        list1.flatten.groupBy(x => x).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) = map(e) + 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        return map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) = map(element) + 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                map += (element -> (map.getOrElse(element, 0L) + 1))\n            }\n        }\n        map",
    "        list1.flatten.groupBy(x => x).mapValues(_.size)",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map += (e -> (map(e) + 1))\n                } else {\n                    map += (e -> 1)\n                }\n            }\n        }\n        map",
    "        val freqMap = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (num <- list) {\n                freqMap.put(num, freqMap.getOrElse(num, 0L) + 1)\n            }\n        }\n        freqMap",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) = map(e) + 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        val result = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (result.contains(e)) result(e) += 1\n                else result(e) = 1\n            }\n        }\n        result",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        return map",
    "        list1.flatten.groupBy(x => x).mapValues(x => x.length)",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var freqMap = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (freqMap.contains(element)) {\n                    freqMap(element) += 1\n                } else {\n                    freqMap(element) = 1\n                }\n            }\n        }\n        freqMap",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) {\n                    map(i) += 1\n                } else {\n                    map(i) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            for (j <- i) {\n                if (map.contains(j)) {\n                    map(j) += 1\n                } else {\n                    map(j) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                }\n                else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                map(e) = map.getOrElse(e, 0L) + 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) map(element) += 1\n                else map(element) = 1\n            }\n        }\n        map",
    "        list1.flatten.groupBy(x => x).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) map(element) += 1\n                else map(element) = 1\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (l <- list1) {\n            for (i <- l) {\n                map(i) = map.getOrElse(i, 0) + 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) = map(element) + 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val freq = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (freq.contains(e)) {\n                    freq(e) += 1\n                } else {\n                    freq(e) = 1\n                }\n            }\n        }\n        freq",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) = map(e) + 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        return map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) = map(element) + 1\n                }\n                else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        //val list1 = List(List(1,2,3), List(2,3,4), List(3,4,5))\n        val list2 = list1.flatten\n        val list3 = list2.groupBy(x => x)\n        val list4 = list3.mapValues(x => x.size)\n        list4",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (i <- l) {\n                if (map.contains(i)) {\n                    map(i) += 1\n                } else {\n                    map(i) = 1\n                }\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        val map = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) map(e) += 1\n                else map(e) = 1\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) = map(e) + 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        list1.foreach(list => list.foreach(x => map(x) = map.getOrElse(x, 0L) + 1))\n        map",
    "        val result = new HashMap[Long,Long]\n        for (list <- list1) {\n            for (element <- list) {\n                if (result.contains(element)) result(element) += 1\n                else result(element) = 1\n            }\n        }\n        result",
    "        val map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        var result = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (result.contains(e)) {\n                    result(e) += 1\n                } else {\n                    result(e) = 1\n                }\n            }\n        }\n        result",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        return map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) = map(e) + 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var freqMap = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (freqMap.contains(element)) {\n                    freqMap(element) += 1\n                } else {\n                    freqMap(element) = 1\n                }\n            }\n        }\n        return freqMap",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (e <- l) {\n                if (map.contains(e)) {\n                    map(e) += 1\n                } else {\n                    map(e) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (l <- list1) {\n            for (x <- l) {\n                if (map.contains(x)) {\n                    map(x) += 1\n                } else {\n                    map(x) = 1\n                }\n            }\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (map.contains(element)) {\n                    map(element) += 1\n                } else {\n                    map(element) = 1\n                }\n            }\n        }\n        map",
    "        val map = new HashMap[Long,Long]\n        for (l <- list1) {\n            for (x <- l) {\n                if (map.contains(x)) map(x) += 1\n                else map(x) = 1\n            }\n        }\n        map",
    "        list1.flatten.groupBy(identity).mapValues(_.size)",
    "        var result = Map[Long,Long]()\n        for (list <- list1) {\n            for (element <- list) {\n                if (result.contains(element)) {\n                    result(element) += 1\n                } else {\n                    result(element) = 1\n                }\n            }\n        }\n        result"
  ]
}