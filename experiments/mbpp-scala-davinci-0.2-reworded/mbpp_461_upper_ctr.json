{
  "name": "mbpp_461_upper_ctr",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the upper case characters in a given string.\n    def upperCtr(str : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(upperCtr((\"PYthon\")) == (1l));\n    assert(upperCtr((\"BigData\")) == (1l));\n    assert(upperCtr((\"program\")) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(c => c.isUpper).size",
    "        str.count(c => c.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(c => c.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        return str.count(c => c.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(c => c.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).size",
    "        str.filter(c => c.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(x => x.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.count(c => c.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).size",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(c => c.isUpper).size",
    "        str.filter(c => c.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).size",
    "        str.filter(_.isUpper).size",
    "        str.filter(x => x.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(_.isUpper).size",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(x => x.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(x => x.isUpper).size",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(x => x.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(c => c.isUpper).size",
    "        str.count(c => c.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(c => c.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(c => c.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).size",
    "        str.count(c => c.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        var count = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) count += 1\n        }\n        count",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).size",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(x => x.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.count(_.isUpper)",
    "        str.count(c => c.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(x => x.isUpper).length",
    "        str.filter(x => x.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(c => c.isUpper).length",
    "        str.count(_.isUpper)",
    "        str.filter(c => c.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        str.count(_.isUpper)",
    "        str.filter(_.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(c => c.isUpper)",
    "        var ctr : Long = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) ctr += 1\n        }\n        ctr",
    "        str.filter(c => c.isUpper).length",
    "        str.filter(_.isUpper).length",
    "        str.count(_.isUpper)"
  ]
}