{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) sqrtN + 1 else ceil(sqrtN)",
    "        var i = 0L\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) % 1 == 0) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) {\n            n += 1\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 0\n        var j = 0\n        while (i < N) {\n            i += 1\n            j += 2 * i - 1\n        }\n        j",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while(i * i < N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while(i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) sqrtN.toInt + 1 else sqrtN.toInt + 2",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N).toLong\n        val nextN = sqrtN + 1\n        return nextN * nextN",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while(n % sqrt(n) != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while (i * i < N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) sqrtN.toInt + 1 else sqrtN.toInt + 2",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = 1\n        while (n * n <= N) n += 1\n        n * n",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        else {\n            return (floor(sqrtN) + 1) * (floor(sqrtN) + 1)\n        }",
    "        var n = N\n        while(n * n <= N) n += 1\n        n * n",
    "        var n = N\n        while(true) {\n            if(isPerfectSquare(n)) return n\n            n += 1\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) return (sqrtN + 1) * (sqrtN + 1)\n        else return (floor(sqrtN) + 1) * (floor(sqrtN) + 1)",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "\t\tvar i = 1\n\t\twhile(i * i <= N) i += 1\n\t\ti * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            val sqrt = sqrt(n)\n            if(sqrt == sqrt.toInt) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        return (sqrtN.toInt + 1) * (sqrtN.toInt + 1)",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while(i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) % 1 == 0) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while(true) {\n            if(isPerfectSquare(n)) return n\n            n += 1\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while (n % sqrt(n) != 0) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n * n < N) n += 1\n        n * n",
    "        var i = 1L\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 0\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while(i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        var square = 1L\n        while (square <= N) {\n            i += 1\n            square = i * i\n        }\n        square",
    "        val sqrtN = sqrt(N)\n        if (sqrtN % 1 == 0) (sqrtN + 1) * (sqrtN + 1)\n        else {\n            val nextSqrt = ceil(sqrtN)\n            nextSqrt * nextSqrt\n        }",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return 0",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n",
    "        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        while (i * i < N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        return i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) % 1 == 0) return n\n        }\n        return -1",
    "        var x = N\n        while(x % sqrt(x) != 0) x += 1\n        x",
    "        val sqrt = math.sqrt(N)\n        if (sqrt == sqrt.toInt) {\n            return (sqrt + 1) * (sqrt + 1)\n        }\n        return (sqrt.toInt + 1) * (sqrt.toInt + 1)",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) return N + 1\n        val next = sqrtN.toInt + 1\n        next * next",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        var x = 1\n        while (x < N) {\n            i += 1\n            x = i * i\n        }\n        x",
    "        var i = 1\n        var j = 1\n        while (i < N) {\n            i += 2 * j + 1\n            j += 1\n        }\n        i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N)\n        val ceilN = ceil(sqrtN)\n        return ceilN * ceilN",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var n = N\n        while(!isPerfectSquare(n)) {\n            n += 1\n        }\n        return n",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (n % sqrt(n) != 0) n += 1\n        n",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(true) {\n            if(isPerfectSquare(n)) return n\n            n += 1\n        }\n        return 0",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) sqrtN.toInt + 1 else sqrtN.toInt + 2",
    "        var i = 1\n        while(i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1",
    "        var i = 1;\n        while(i * i <= N) {\n            i += 1;\n        }\n        return i * i;",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var n = N\n        while (sqrt(n) % 1 != 0) {\n            n += 1\n        }\n        n",
    "        var i = 1\n        var result = 0L\n        while (result < N) {\n            result = i * i\n            i += 1\n        }\n        result",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) % 1 == 0) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i",
    "        var n = N\n        while(true) {\n            var sqrt = sqrt(n).toLong\n            if(sqrt * sqrt == n) return n\n            n += 1\n        }\n        return -1",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i",
    "        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) % 1 == 0) return n\n        }\n        return -1",
    "        var i = 1\n        while (i * i < N) i += 1\n        i * i",
    "        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i"
  ]
}