{
  "name": "mbpp_102_snake_to_camel",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) {\n                camel.append(words(i))\n            } else {\n                camel.append(words(i).capitalize)\n            }\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqcmwwz65.scala:18)\n\tat Problem.main(tmpqcmwwz65.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var capitalize = false\n        for (c <- word) {\n            if (c == '_') {\n                capitalize = true\n            } else {\n                if (capitalize) {\n                    result += c.toUpper\n                    capitalize = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqm__tfel.scala:23)\n\tat Problem.main(tmpqm__tfel.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else {\n                if (flag) {\n                    result += c.toUpper\n                    flag = false\n                }\n                else result += c\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwvf8lod7.scala:21)\n\tat Problem.main(tmpwvf8lod7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(word => word.head.toUpper + word.tail).mkString\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmput7ocnna.scala:11)\n\tat Problem.main(tmput7ocnna.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpthh57i_4.scala:20)\n\tat Problem.main(tmpthh57i_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2dgqknul.scala:14)\n\tat Problem.main(tmp2dgqknul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelCase = restWords.foldLeft(firstWord)((acc, word) => acc + word.capitalize)\n        camelCase\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi729_ze9.scala:13)\n\tat Problem.main(tmpi729_ze9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxbj7n9ez.scala:20)\n\tat Problem.main(tmpxbj7n9ez.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        sb.append(words(0))\n        for (i <- 1 until words.length) {\n            sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprc1t_yzl.scala:15)\n\tat Problem.main(tmprc1t_yzl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var lastWasUnderscore = false\n        for (c <- word) {\n            if (c == '_') {\n                lastWasUnderscore = true\n            } else {\n                camel += if (lastWasUnderscore) c.toUpper else c\n                lastWasUnderscore = false\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123215,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpiefwsgq8.scala:12:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                camel += \u001b[33mif\u001b[0m (lastWasUnderscore) c.toUpper \u001b[33melse\u001b[0m c\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         expression expected but \u001b[31mif\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val first = words.head\n        val rest = words.tail\n        val camel = rest.map(x => x.head.toUpper + x.tail)\n        first + camel.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdy7tb7_t.scala:13)\n\tat Problem.main(tmpdy7tb7_t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            } else {\n                camel += word(i)\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqe8sdfqd.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val first = words(0)\n        val rest = words.drop(1)\n        val camel = first + rest.map(_.capitalize).mkString\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgxaugc7w.scala:13)\n\tat Problem.main(tmpgxaugc7w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else {\n                if (isFirst) result += c.toUpper\n                else result += c\n                isFirst = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = new StringBuilder\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            }\n            else result += word(i)\n            i += 1\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ixszhl3.scala:19)\n\tat Problem.main(tmp5ixszhl3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxbj7n9ez.scala:20)\n\tat Problem.main(tmpxbj7n9ez.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                }\n                else result += c\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuvvv7yyv.scala:21)\n\tat Problem.main(tmpuvvv7yyv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdk3cq0vk.scala:23)\n\tat Problem.main(tmpdk3cq0vk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            } else {\n                camel += word(i)\n            }\n            i += 1\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp766gcht5.scala:20)\n\tat Problem.main(tmp766gcht5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnkyb_e3g.scala:18)\n\tat Problem.main(tmpnkyb_e3g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxbj7n9ez.scala:20)\n\tat Problem.main(tmpxbj7n9ez.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2dgqknul.scala:14)\n\tat Problem.main(tmp2dgqknul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var capitalize = false\n        for (c <- word) {\n            if (c == '_') {\n                capitalize = true\n            } else {\n                if (capitalize) {\n                    result += c.toUpper\n                    capitalize = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqm__tfel.scala:23)\n\tat Problem.main(tmpqm__tfel.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2dgqknul.scala:14)\n\tat Problem.main(tmp2dgqknul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                result += if (nextUpper) c.toUpper else c\n                nextUpper = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp62bjnpfm.scala:12:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                result += \u001b[33mif\u001b[0m (nextUpper) c.toUpper \u001b[33melse\u001b[0m c\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^\u001b[0m\n\u001b[31m   |\u001b[0m                          expression expected but \u001b[31mif\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(_.capitalize).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result : String = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf6jnnba9.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        word.split(\"_\").map(_.capitalize).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdjw7vdf7.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf4u8ke0s.scala:23)\n\tat Problem.main(tmpf4u8ke0s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(x => x.head.toUpper + x.tail).mkString\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspisa_je.scala:11)\n\tat Problem.main(tmpspisa_je.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(word => word.charAt(0).toUpper + word.substring(1))\n        camel.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg5or7x9m.scala:19)\n\tat Problem.main(tmpg5or7x9m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpthh57i_4.scala:20)\n\tat Problem.main(tmpthh57i_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += (word(i + 1).toUpper)\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123225,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfhjguqaz.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123226,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdh2htsr3.scala:15)\n\tat Problem.main(tmpdh2htsr3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var flag = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                flag = true\n            } else {\n                if (flag) {\n                    result += word(i).toUpper\n                    flag = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123228,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp012_v83e.scala:23)\n\tat Problem.main(tmp012_v83e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                result += if (nextUpper) c.toUpper else c\n                nextUpper = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp62bjnpfm.scala:12:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                result += \u001b[33mif\u001b[0m (nextUpper) c.toUpper \u001b[33melse\u001b[0m c\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^\u001b[0m\n\u001b[31m   |\u001b[0m                          expression expected but \u001b[31mif\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxbj7n9ez.scala:20)\n\tat Problem.main(tmpxbj7n9ez.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val result = new StringBuilder\n        result.append(words(0))\n        for (i <- 1 until words.length) {\n            result.append(words(i).capitalize)\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqlr6jgtd.scala:15)\n\tat Problem.main(tmpqlr6jgtd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            } else {\n                camel += word(i)\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqe8sdfqd.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') nextUpper = true\n            else {\n                if (nextUpper) {\n                    result += word(i).toUpper\n                    nextUpper = false\n                }\n                else result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp80g8z_s3.scala:21)\n\tat Problem.main(tmp80g8z_s3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2dgqknul.scala:14)\n\tat Problem.main(tmp2dgqknul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            } else {\n                camel += word(i)\n            }\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqe8sdfqd.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val s = word.split(\"_\")\n        s.map(x => x.head.toUpper + x.tail).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelCase = restWords.map(w => w.head.toUpper + w.tail).mkString\n        firstWord + camelCase\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5m2lixc6.scala:13)\n\tat Problem.main(tmp5m2lixc6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            val w = words(i)\n            if (i == 0) sb.append(w)\n            else sb.append(w.capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmulg_r0w.scala:16)\n\tat Problem.main(tmpmulg_r0w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdjw7vdf7.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        camel.append(words(0))\n        for (i <- 1 until words.length) {\n            camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1ppkxa5x.scala:15)\n\tat Problem.main(tmp1ppkxa5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val s = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (i == 0) sb.append(s(i))\n            else sb.append(s(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt7tzqs5x.scala:15)\n\tat Problem.main(tmpt7tzqs5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = new StringBuilder\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv5k7yyav.scala:23)\n\tat Problem.main(tmpv5k7yyav.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                result += if (nextUpper) c.toUpper else c\n                nextUpper = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp62bjnpfm.scala:12:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                result += \u001b[33mif\u001b[0m (nextUpper) c.toUpper \u001b[33melse\u001b[0m c\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^\u001b[0m\n\u001b[31m   |\u001b[0m                          expression expected but \u001b[31mif\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxbj7n9ez.scala:20)\n\tat Problem.main(tmpxbj7n9ez.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val first = words(0)\n        val rest = words.drop(1)\n        val camel = rest.map(w => w.head.toUpper + w.tail).mkString\n        first + camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123230,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_p3m7hei.scala:13)\n\tat Problem.main(tmp_p3m7hei.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder()\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqed57244.scala:15)\n\tat Problem.main(tmpqed57244.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        camel.append(words(0))\n        for (i <- 1 until words.length) {\n            camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1ppkxa5x.scala:15)\n\tat Problem.main(tmp1ppkxa5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val result = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) result.append(words(i))\n            else result.append(words(i).capitalize)\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppqwv9emm.scala:15)\n\tat Problem.main(tmppqwv9emm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 to word.length - 1) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyxg7mo73.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpthh57i_4.scala:20)\n\tat Problem.main(tmpthh57i_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupfyzijt.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(_.capitalize).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i+1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpphlpxtqb.scala:14)\n\tat Problem.main(tmpphlpxtqb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphbp0gvc9.scala:23)\n\tat Problem.main(tmphbp0gvc9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else if (isFirst) {\n                result += c.toUpper\n                isFirst = false\n            }\n            else result += c\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).head.toUpper + words(i).tail)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcagtjche.scala:15)\n\tat Problem.main(tmpcagtjche.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        // Split the string on '_'\n        val words = word.split(\"_\")\n        // Capitalize the first letter of each word and join them together\n        words.map(w => w.capitalize).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123230,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val first = words.head\n        val rest = words.tail\n        val camel = rest.map(x => x.head.toUpper + x.tail).mkString\n        first + camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123230,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvwh0acgu.scala:13)\n\tat Problem.main(tmpvwh0acgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdk3cq0vk.scala:23)\n\tat Problem.main(tmpdk3cq0vk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder()\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn4tx_4mn.scala:15)\n\tat Problem.main(tmpn4tx_4mn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            val w = words(i)\n            if (i == 0) sb.append(w)\n            else sb.append(w.capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmulg_r0w.scala:16)\n\tat Problem.main(tmpmulg_r0w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextIsUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextIsUpper = true\n            } else {\n                if (nextIsUpper) {\n                    result += c.toUpper\n                    nextIsUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsehedgys.scala:23)\n\tat Problem.main(tmpsehedgys.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelCase = restWords.foldLeft(firstWord)((camel, word) => camel + word.capitalize)\n        camelCase\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk23vm557.scala:13)\n\tat Problem.main(tmpk23vm557.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdk3cq0vk.scala:23)\n\tat Problem.main(tmpdk3cq0vk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123226,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdh2htsr3.scala:15)\n\tat Problem.main(tmpdh2htsr3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextIsUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextIsUpper = true\n            } else {\n                if (nextIsUpper) {\n                    result += c.toUpper\n                    nextIsUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsehedgys.scala:23)\n\tat Problem.main(tmpsehedgys.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') nextUpper = true\n            else if (nextUpper) {\n                camel += c.toUpper\n                nextUpper = false\n            }\n            else camel += c\n        }\n        camel\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuhvxjm44.scala:19)\n\tat Problem.main(tmpuhvxjm44.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdjw7vdf7.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(_.capitalize).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) {\n                sb.append(words(i))\n            } else {\n                sb.append(words(i).capitalize)\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp36wipzub.scala:18)\n\tat Problem.main(tmp36wipzub.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            }\n            else result += word(i)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw_q26hyq.scala:19)\n\tat Problem.main(tmpw_q26hyq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var capitalize = false\n        for (c <- word) {\n            if (c == '_') {\n                capitalize = true\n            } else {\n                if (capitalize) {\n                    result += c.toUpper\n                    capitalize = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqm__tfel.scala:23)\n\tat Problem.main(tmpqm__tfel.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72d2cabs.scala:23)\n\tat Problem.main(tmp72d2cabs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123226,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdh2htsr3.scala:15)\n\tat Problem.main(tmpdh2htsr3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpthh57i_4.scala:20)\n\tat Problem.main(tmpthh57i_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) result += c.toUpper\n                else result += c\n                isUpper = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3oigkh8u.scala:19)\n\tat Problem.main(tmp3oigkh8u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelWords = restWords.map(w => w.head.toUpper + w.tail)\n        firstWord + camelWords.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsevott9r.scala:13)\n\tat Problem.main(tmpsevott9r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val result = new StringBuilder\n        for (i <- 0 to words.length - 1) {\n            if (i == 0) {\n                result.append(words(i))\n            } else {\n                result.append(words(i).capitalize)\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfwovpfvv.scala:18)\n\tat Problem.main(tmpfwovpfvv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2dgqknul.scala:14)\n\tat Problem.main(tmp2dgqknul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdjw7vdf7.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isNextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isNextUpper = true\n            } else {\n                if (isNextUpper) {\n                    result += c.toUpper\n                    isNextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbltbl249.scala:23)\n\tat Problem.main(tmpbltbl249.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(_.capitalize).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ainkvrw.scala:23)\n\tat Problem.main(tmp5ainkvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var res = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                res += word(i + 1).toUpper\n                i += 1\n            }\n            else res += word(i)\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmy38mo9s.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(x => x.head.toUpper + x.tail).mkString\n        camel.head.toLower + camel.tail\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspisa_je.scala:11)\n\tat Problem.main(tmpspisa_je.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val camel = words.map(x => x.capitalize).mkString(\"\")\n        camel.charAt(0).toLower + camel.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsdgm9e1a.scala:11)\n\tat Problem.main(tmpsdgm9e1a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510125,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3k2kzr6o.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhgvl595.scala:15)\n\tat Problem.main(tmplhgvl595.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}