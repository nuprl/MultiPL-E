{
  "name": "mbpp_573_unique_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var product : Long = 1\n        for (i <- list_data) {\n            product = product * i\n        }\n        return product",
    "        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)",
    "        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product",
    "        // Write your code here\n        var result = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                result *= i\n            }\n        }\n        result",
    "        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        // Write your code here\n        var product : Long = 1\n        var set_data : Set[Long] = Set()\n        for(i <- 0 until list_data.length) {\n            if(!set_data.contains(list_data(i))) {\n                product *= list_data(i)\n                set_data.add(list_data(i))\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var result : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            result *= i\n        }\n        return result",
    "        list_data.distinct.product",
    "        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        return unique_list.product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        return product",
    "        var result : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            result *= unique_list(i)\n        }\n        return result",
    "        val set_data = list_data.toSet\n        set_data.foldLeft(1L)(_ * _)",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list ::: List(list_data(i))\n            }\n        }\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product",
    "        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        // Write your code here\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set.add(i)\n            }\n        }\n        product",
    "        // Write your code here\n        list_data.toSet.product"
  ]
}