{
  "name": "mbpp_103_eulerian_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the Eulerian number a(n, m).\n    def eulerianNum(n : Long, m : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(eulerianNum((3l), (1l)) == (4l));\n    assert(eulerianNum((4l), (1l)) == (11l));\n    assert(eulerianNum((5l), (3l)) == (26l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n == 0 || m == 0) return 1\n        if (n == 1) return m + 1\n        if (m == 1) return n + 1\n        if (n == m) return 1\n        if (n < m) return 0\n        eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n - 1, m - 1)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += (-1).toLong.pow(k) * (m - k).toLong.choose(n - k)\n        }\n        result",
    "        var result = 1L\n        for (i <- 0L to m) {\n            result *= (n + 1 - i)\n            result /= (i + 1)\n        }\n        result",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        if (n == 0) 1\n        else if (n == 1) m + 1\n        else if (m == 0) 1\n        else eulerianNum(n - 1, m) + (n + 1) * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = 0\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) a(i)(j) = 1\n                else if (i == 0) a(i)(j) = 0\n                else if (j == 0) a(i)(j) = 1\n                else a(i)(j) = (i - j + 1) * a(i - 1)(j) + j * a(i - 1)(j - 1)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == j || j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) dp(i)(j) = 1\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i + 1) * dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) dp(i)(j) = 1\n                else if (j == 0) dp(i)(j) = 0\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == j || j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m) + (n + 1) * eulerianNum(n, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == 1) 1\n        else if (m == 1) 1\n        else if (n < m) 0\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        if (m == 1) return n\n        if (m == 2) return n * (n - 1) / 2\n        if (m == 3) return n * (n - 1) * (n - 2) / 6\n        if (m == 4) return n * (n - 1) * (n - 2) * (n - 3) / 24\n        if (m == 5) return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) / 120\n        if (m == 6) return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) / 720\n        if (m == 7) return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) / 5040\n        if (m == 8) return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) / 40320\n        if (m == 9) return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) / 362880\n        if (m == 10) return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) / 3628800\n        if (m == 11) return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) / 39916800\n        if (m == 12) return n * (n -",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + (n + 1) * eulerianNum(n - 1, m - 1)",
    "        if (n < 0 || m < 0 || n < m) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 && m != 0) return 0\n        if (n == 1 && m == 0) return 1\n        if (n == 1 && m == 1) return 0\n        if (n == m) return 1\n        if (n == m + 1) return n\n        if (m == 1) return n * eulerianNum(n - 1, m)\n        eulerianNum(n - 1, m - 1) + (n - m) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == j || j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + j * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j) + j * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n) / (factorial(m) * factorial(n - m))",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def binomial(n : Long, k : Long) : Long = {\n            factorial(n) / (factorial(k) * factorial(n - k))\n        }\n        def eulerianNum(n : Long, m : Long) : Long = {\n            if (n == 0) 1\n            else binomial(n + m, n) * eulerianNum(n - 1, m + 1)\n        }\n        eulerianNum(n, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 || j == 0) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var result : Long = 0\n        for (k <- 0 to m.toInt) {\n            result += ((-1).toLong).pow(k) * (n + k).choose(k) * (m - k).choose(n - 1)\n        }\n        result",
    "        if (n < 0 || m < 0) 0\n        else if (n == 0 || m == 0) 1\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else {\n                    dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n                }\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n == 0 || m == 0 || n < m) return 0\n        if (n == m) return 1\n        if (m == 1) return factorial(n)\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (m > n) return 0\n        if (m == 1) return 1\n        if (m == n) return 1\n        eulerianNum(n - 1, m - 1) + (n - m + 1) * eulerianNum(n - 1, m)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (m == 0) 1\n        else if (n == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (m > n) 0\n        else if (m == n) 1\n        else if (m == 1) n\n        else eulerianNum(n - 1, m) + (n - m + 1) * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n < m) 0\n        else if (n == m) 1\n        else if (m == 0) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n < m) 0 else if (n == m) 1 else (n - m + 1) * eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (j == i) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (m == 0) 1\n        else if (n == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to m.toInt) a(0)(i) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0 || m == 0) 1\n        else if (n == 1) m + 1\n        else if (m == 1) n + 1\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == 1) 1\n        else if (m == 1) 1\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) dp(i)(j) = 1\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j - 1) + (j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return 1\n        if (m == 1) return 1\n        return (n - m) * eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        def factorial(n : Long) : Long = {\n            var result = 1L\n            for (i <- 1L to n) result *= i\n            result\n        }\n        def binomial(n : Long, k : Long) : Long = {\n            var result = 1L\n            for (i <- 0L until k) result = result * (n - i) / (i + 1)\n            result\n        }\n        def eulerianNum(n : Long, m : Long) : Long = {\n            if (m == 0) 1\n            else if (m == 1) n\n            else if (m == n) 1\n            else if (m > n) 0\n            else eulerianNum(n - 1, m - 1) + (n - m) * eulerianNum(n - 1, m)\n        }\n        eulerianNum(n, m)",
    "        if (n < 0 || m < 0) 0\n        else if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (j == i) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += binomial(n + 1, k) * binomial(n - k + 1, m - k + 1)\n        }\n        result",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += (pow(-1, k) * (factorial(m.toInt) / (factorial(k) * factorial(m.toInt - k))) * (factorial(n.toInt + k - 1) / factorial(n.toInt - 1))).toLong\n        }\n        result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == 1) 1\n        else if (m == 1) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) dp(i)(j) = 1\n                else if (j == 0) dp(i)(j) = 0\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j) + (j + 1) * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i + 1) * dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 || m == 0) return 1\n        if (n == 1 || m == 1) return n + m\n        if (n == m) return 1\n        if (n < m) return 0\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0 || j == i) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0 || n < m) 0\n        else if (n == 0 || m == 0) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        if (m == 1) return n\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += (-1).toLong.pow(k) * (n - k).toLong.pow(n.toInt) / (factorial(k) * factorial(n.toInt - k))\n        }\n        result",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return 1\n        if (m == 1) return 1\n        if (n == m) return 1\n        return (n - m + 1) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m)",
    "        if (m == 0 || n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        var sum = 0L\n        for (i <- 0 to m.toInt) {\n            sum += binomial(n + 1, i) * binomial(n + 1, i - 1)\n        }\n        sum",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += ((-1) ^ k) * (factorial(m) / (factorial(k) * factorial(m - k))) * (factorial(n + m - k) / factorial(n - 1))\n        }\n        result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i - 1) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j) * (i - j) / i\n                if (j > 0) dp(i)(j) += dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < m) 0\n        else if (n == m) 1\n        else if (m == 0) 1\n        else eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def combination(n : Long, m : Long) : Long = {\n            factorial(n) / (factorial(m) * factorial(n - m))\n        }\n        if (n == 0) 1\n        else if (m == 0) 0\n        else combination(n + m - 1, m - 1)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += ((-1) ^ k) * (factorial(m) / (factorial(k) * factorial(m - k))) * (factorial(n + k) / factorial(n))\n        }\n        result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) * (i - j + 1)) / j\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += binomial(n + 1, k) * binomial(n - k + 1, m - k + 1)\n        }\n        result",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n - 1, m)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        var sum = 0L\n        for (k <- 0 to m.toInt) {\n            sum += ((-1) ^ k) * (n - k + 1) * eulerianNum(n - 1, m - k)\n        }\n        return sum / (m + 1)",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def binomial(n : Long, k : Long) : Long = {\n            factorial(n) / (factorial(k) * factorial(n - k))\n        }\n        def eulerianNum(n : Long, m : Long) : Long = {\n            if (n == 0) 1\n            else if (m == 0) 0\n            else (n - m + 1) * eulerianNum(n - 1, m - 1) + m * eulerianNum(n - 1, m)\n        }\n        eulerianNum(n, m)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (j == i) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n - 1, m)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += ((-1) ^ k) * (factorial(m) / (factorial(k) * factorial(m - k))) * (factorial(n + k) / factorial(n))\n        }\n        result",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n - 1, m)",
    "        if (n < m) 0\n        else if (n == m) 1\n        else (n - m + 1) * eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0) dp(i)(j) = 1\n                else if (j == 0) dp(i)(j) = 0\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < m) 0\n        else if (n == m) 1\n        else (n - m) * eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) a(i)(j) = 1\n                else if (j == 0) a(i)(j) = 0\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i + 1) * a(i)(j - 1)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (m == 0) 1\n        else if (n == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += ((-1) * (k % 2) * (factorial(m) / (factorial(k) * factorial(m - k)))) * (factorial(n + k - 1) / factorial(n - 1))\n        }\n        result",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) dp(i)(j) = 1\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == 1) dp(i)(j) = 1\n                else if (j == 1) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j - 1) + j * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (m + 1) * eulerianNum(n - 1, m) + (n - m) * eulerianNum(n - 1, m - 1)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val cache = new Array[Array[Long]](n.toInt + 1)\n        for (i <- 0 to n.toInt) cache(i) = new Array[Long](m.toInt + 1)\n        def eulerianNum(n : Long, m : Long) : Long = {\n            if (n == 0) 1\n            else if (m == 0) 0\n            else if (cache(n.toInt)(m.toInt) != 0) cache(n.toInt)(m.toInt)\n            else {\n                cache(n.toInt)(m.toInt) = (m * eulerianNum(n - 1, m) + (n - m + 1) * eulerianNum(n - 1, m - 1)) % 1000000007\n                cache(n.toInt)(m.toInt)\n            }\n        }\n        eulerianNum(n, m)",
    "        if (m == 0) 1\n        else if (n == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to m.toInt) a(0)(i) = 0\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = (i - j) * a(i - 1)(j) + (j + 1) * a(i - 1)(j - 1)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to min(i, m.toInt)) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var result = 1L\n        for (i <- 1 to m.toInt) {\n            result *= n - i + 1\n            result /= i\n        }\n        result",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j - 1) + (j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = 0\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = (dp(i - 1)(j - 1) * i + dp(i - 1)(j) * (i - j)) / j\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) dp(i)(j) = 1\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == 1) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) a(i)(j) = 1\n                else if (i == 0) a(i)(j) = 0\n                else if (j == 0) a(i)(j) = 1\n                else a(i)(j) = (i - j + 1) * a(i - 1)(j) + j * a(i - 1)(j - 1)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / n",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = (a(i - 1)(j - 1) * i + a(i - 1)(j) * (i - j)) / j\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else factorial(n) / (factorial(m) * factorial(n - m))",
    "        if (n < 0 || m < 0 || n < m) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 1 && m == 0) return 1\n        if (n == 1 && m == 1) return 1\n        if (m == 0) return 1\n        if (m == 1) return n\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(1) = i\n        }\n        for (i <- 0 to m.toInt) {\n            dp(0)(i) = 1\n            dp(1)(i) = 1\n        }\n        for (i <- 2 to n.toInt) {\n            for (j <- 2 to m.toInt) {\n                dp(i)(j) = (dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) 0\n        else if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else eulerianNum(n - 1, m) + (m + 1) * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (j + 1) * dp(i - 1)(j) + (i - j) * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to min(i, m.toInt)) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) for (j <- 1 to m.toInt) a(i)(j) = (i - j) * a(i - 1)(j) + (j + 1) * a(i - 1)(j - 1)\n        a(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0 || n < m) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 1 && m == 0) return 1\n        if (n == 1 && m == 1) return 1\n        if (n == 2 && m == 0) return 1\n        if (n == 2 && m == 1) return 1\n        if (n == 2 && m == 2) return 1\n        if (n == 3 && m == 0) return 1\n        if (n == 3 && m == 1) return 4\n        if (n == 3 && m == 2) return 11\n        if (n == 3 && m == 3) return 1\n        if (n == 4 && m == 0) return 1\n        if (n == 4 && m == 1) return 11\n        if (n == 4 && m == 2) return 41\n        if (n == 4 && m == 3) return 76\n        if (n == 4 && m == 4) return 1\n        if (n == 5 && m == 0) return 1\n        if (n == 5 && m == 1) return 26\n        if (n == 5 && m == 2) return 151\n        if (n == 5 && m == 3) return 421\n        if (n == 5 && m == 4) return 546\n        if (n == 5 && m == 5) return 1\n        if (n == 6 && m == 0) return 1\n        if (n == 6 && m == 1) return 57\n        if (n == 6 && m == 2) return 526\n        if (n == 6 && m == 3) return 2646\n        if (n == 6 && m == 4) return 6336\n        if (n == 6 && m == 5) return 6336\n        if (n == 6 && m == 6) return 1\n        if (n == 7 && m == 0) return 1\n        if (n == 7 && m == 1) return 120\n        if (n == 7 && m == 2) return 1612\n        if (n == 7 && m == 3) return 10961\n        if (n == 7 && m == 4) return 39212\n        if (n == 7 && m == 5) return 69212\n        if (n == 7",
    "        var result = 1L\n        for (i <- 1 to m.toInt) {\n            result *= n - i + 1\n            result /= i\n        }\n        result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return m + 1\n        if (m == 1) return 1\n        if (m > n) return 0\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m) + (n + 1) * eulerianNum(n, m - 1)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1 else n * factorial(n - 1)\n        }\n        def binomial(n : Long, k : Long) : Long = {\n            factorial(n) / (factorial(k) * factorial(n - k))\n        }\n        def eulerianNum(n : Long, m : Long) : Long = {\n            if (n == 0) 1 else (0 to m.toInt).map(k => binomial(n + k, k) * eulerianNum(n - 1, k)).sum\n        }\n        eulerianNum(n, m)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) * j + dp(i - 1)(j) * (i - j))\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val cache = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) cache(i)(j) = 1\n                else if (i == j) cache(i)(j) = 1\n                else cache(i)(j) = cache(i - 1)(j - 1) + (i - j) * cache(i - 1)(j)\n            }\n        }\n        cache(n.toInt)(m.toInt)",
    "        var ans = 0L\n        for (k <- 0 to m.toInt) {\n            ans += (factorial(m) / (factorial(k) * factorial(m - k))) * (pow(-1, k).toLong) * (pow(m - k, n).toLong)\n        }\n        ans / factorial(m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(1) = i\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 2 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j) + (i - 1) * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val cache = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) cache(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                cache(i)(j) = cache(i - 1)(j - 1) + (i - 1) * cache(i - 1)(j)\n            }\n        }\n        cache(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to m.toInt) a(0)(i) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i + 1) * a(i)(j - 1)\n            }\n        }\n        a(n.toInt)(m.toInt)"
  ]
}