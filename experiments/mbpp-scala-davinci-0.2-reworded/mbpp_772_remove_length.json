{
  "name": "mbpp_772_remove_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val words = test_str.split(\" \")\n        val filtered_words = words.filter(word => word.length != K)\n        return filtered_words.mkString(\" \")",
    "        val words = test_str.split(\" \")\n        var res = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                res += word + \" \"\n            }\n        }\n        res.trim",
    "        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i + 1\n                while (j < str.length && str(j) != ' ') {\n                    j += 1\n                }\n                if (j - i - 1 == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                }\n                else {\n                    i = j\n                }\n            }\n            else {\n                i += 1\n            }\n        }\n        str",
    "        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result",
    "        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isLetter) {\n                var j = i + 1\n                while (j < str.length && str(j).isLetter) {\n                    j += 1\n                }\n                if (j - i == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                    i -= 1\n                }\n                else i = j\n            }\n            else i += 1\n        }\n        return str",
    "        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim",
    "        var result = \"\"\n        for (word <- test_str.split(\" \")) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        return result.trim",
    "        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result",
    "        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        new_words.mkString(\" \")",
    "        val words = test_str.split(\" \")\n        var result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString.trim",
    "        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        new_words.mkString(\" \")",
    "        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")",
    "        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString",
    "        var str_arr = test_str.split(\" \")\n        var new_str = \"\"\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).length != K) {\n                new_str += str_arr(i) + \" \"\n            }\n        }\n        new_str.trim()",
    "        val words = test_str.split(\" \")\n        val result = new StringBuilder()\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim",
    "        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim",
    "        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim",
    "        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim",
    "        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 to str.length - 1) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result",
    "        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString"
  ]
}