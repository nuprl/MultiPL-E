{
  "name": "mbpp_572_two_unique_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove duplicate numbers from a given number of lists.\n    def twoUniqueNums(nums : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val numsMap = new HashMap[Long, Int]\n        nums.foreach(num => {\n            if (numsMap.contains(num)) numsMap(num) += 1\n            else numsMap(num) = 1\n        })\n        val result = new ListBuffer[Long]\n        numsMap.foreach(pair => {\n            if (pair._2 == 1) result += pair._1\n        })\n        result.toList",
    "        var uniqueNums = new ListBuffer[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums += num\n            }\n        }\n        return uniqueNums.toList",
    "        val set = new HashSet[Long]\n        for (num <- nums) {\n            if (set.contains(num)) set.remove(num)\n            else set.add(num)\n        }\n        set.toList",
    "        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        var result = List[Long]()\n        for ((num, count) <- map) {\n            if (count == 1) result = num :: result\n        }\n        result",
    "        var uniqueNums = List[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums = num :: uniqueNums\n            }\n        }\n        uniqueNums",
    "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n        for (num <- nums) {\n            if (!set.contains(num)) {\n                set += num\n                result += num\n            }\n        }\n        result.toList",
    "        var uniqueNums = new ListBuffer[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums += num\n            }\n        }\n        uniqueNums.toList",
    "        var uniqueNums = List[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) uniqueNums = uniqueNums :+ num\n        }\n        uniqueNums",
    "        val numsMap = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (numsMap.contains(num)) numsMap(num) += 1\n            else numsMap(num) = 1\n        }\n        numsMap.filter(x => x._2 == 1).keys.toList",
    "        var uniqueNums = List[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums = num :: uniqueNums\n            }\n        }\n        uniqueNums",
    "        var uniqueNums = List[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums = num :: uniqueNums\n            }\n        }\n        uniqueNums",
    "        var uniqueNums = List[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums = num :: uniqueNums\n            }\n        }\n        uniqueNums",
    "        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var ans = List[Long]()\n        for (num <- map.keys) {\n            if (map(num) == 1) ans = num :: ans\n        }\n        ans",
    "        val numsMap = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (numsMap.contains(num)) numsMap(num) += 1 else numsMap(num) = 1\n        }\n        val uniqueNums = new ListBuffer[Long]()\n        for ((num, count) <- numsMap) {\n            if (count == 1) uniqueNums += num\n        }\n        uniqueNums.toList",
    "        var uniqueNums = List[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) uniqueNums = num :: uniqueNums\n        }\n        return uniqueNums",
    "        var result = List[Long]()\n        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1 else map(num) = 1\n        }\n        for (num <- nums) {\n            if (map(num) == 1) result = num :: result\n        }\n        result",
    "        var uniqueNums = List[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) uniqueNums = num :: uniqueNums\n        }\n        uniqueNums",
    "        var uniqueNums = List[Long]()\n        for (num <- nums) {\n            if (!uniqueNums.contains(num)) {\n                uniqueNums = num :: uniqueNums\n            }\n        }\n        uniqueNums",
    "        val numsMap = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (numsMap.contains(num)) numsMap(num) += 1\n            else numsMap(num) = 1\n        }\n        val result = new ListBuffer[Long]\n        for (num <- numsMap.keys) {\n            if (numsMap(num) == 1) result += num\n        }\n        result.toList",
    "        var map = Map[Long, Long]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = List[Long]()\n        for (num <- nums) {\n            if (map(num) == 1) result = num :: result\n        }\n        result"
  ]
}