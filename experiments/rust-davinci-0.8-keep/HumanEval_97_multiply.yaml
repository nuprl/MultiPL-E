name: HumanEval_97_multiply
language: rust
prompt: "/// Complete the function that takes two integers and returns \n/// the product\
  \ of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
  /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return 20.\n\
  fn multiply(a: isize, b: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
  \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
  \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
  \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
  \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
completions: ["    let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)",
  '    ((a % 10) * (b % 10)) % 10', "    let mut ma = a;\n    let mut mb = b;\n  \
    \  if ma < 0 {\n        ma = ma * -1;\n    }\n    if mb < 0 {\n        mb = mb\
    \ * -1;\n    }\n    let mut result = ma % 10 * mb % 10;\n    if result > 9 {\n\
    \        result = result % 10;\n    }\n    result", "    let product = a * b;\n\
    \    return product % 10;", '  (a%10) * (b%10)', '    return (a % 10) * (b % 10);',
  '    (a % 10) * (b % 10)', '    (a.abs() % 10) * (b.abs() % 10)', "    let a = (a\
    \ % 10).abs();\n    let b = (b % 10).abs();\n    return a * b;", '    a.abs()
    % 10 * b.abs() % 10', "    let mut a = a.abs();\n    let mut b = b.abs();\n  \
    \  let mut product = 0;\n    while a > 0 {\n        product += b;\n        a -=\
    \ 1;\n    }\n    product", "    let a_str = a.to_string();\n    let b_str = b.to_string();\n\
    \    let a_unit = a_str.chars().nth(a_str.len() - 1).unwrap().to_digit(10).unwrap();\n\
    \    let b_unit = b_str.chars().nth(b_str.len() - 1).unwrap().to_digit(10).unwrap();\n\
    \    (a_unit * b_unit) as isize", '    (a % 10) * (b % 10)', '    (a % 10) * (b
    % 10)', "    let mut prod = 0;\n    let mut prod_1 = a % 10;\n    let mut prod_2\
    \ = b % 10;\n    prod = prod_1 * prod_2;\n    prod", '    (a % 10) * (b % 10)',
  "    let mut prod = a * b;\n    while prod >= 10 {\n        prod /= 10;\n    }\n\
    \    prod", '    (a % 10) * (b % 10)', "    let x = a % 10;\n    let y = b % 10;\n\
    \    x * y", '    (a % 10) * (b % 10)', "    let a = a % 10;\n    let b = b %\
    \ 10;\n    a * b", '    ((a % 10) * (b % 10)) as isize', '    ((a % 10) * (b %
    10)) % 10', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "    a.abs()\n\
    \        .to_string()\n        .chars()\n        .last()\n        .unwrap()\n\
    \        .to_digit(10)\n        .unwrap() as isize\n        * b.abs()\n      \
    \      .to_string()\n            .chars()\n            .last()\n            .unwrap()\n\
    \            .to_digit(10)\n            .unwrap() as isize", "    // Get the unit\
    \ digit\n    fn get_unit_digit(n: isize) -> isize {\n        let s = n.to_string();\n\
    \        let ch = s.chars().nth(s.len() - 1).unwrap();\n        return ch.to_digit(10).unwrap()\
    \ as isize;\n    }\n\n    return get_unit_digit(a) * get_unit_digit(b);", '    (a.abs()
    % 10) * (b.abs() % 10)', "    if a < 0 { return multiply(-a, b); }\n    if b <\
    \ 0 { return multiply(a, -b); }\n    let a = a % 10;\n    let b = b % 10;\n  \
    \  a * b", '    return (a.abs() % 10) * (b.abs() % 10);', '    (a % 10) * (b %
    10)', "    let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)", '    (a
    % 10) * (b % 10)', "    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n \
    \       a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n    (a % 10) *\
    \ (b % 10)", '    a.abs() * b.abs() % 10', "    let mut a = a;\n    let mut b\
    \ = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n\
    \    }\n    (a % 10) * (b % 10)", '    (a.abs() % 10) * (b.abs() % 10)', '    (a
    % 10) * (b % 10)', '    ((a % 10) * (b % 10)) as isize', "    let a = a.abs();\n\
    \    let b = b.abs();\n    (a % 10) * (b % 10)", "    let result = a * b;\n  \
    \  (result % 10) as isize", '  (a % 10) * (b % 10)', '    (a%10) * (b%10)', " \
    \   let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)", "    if\
    \ a * b == 0 { return 0; }\n    let mut aa = a.abs();\n    let mut bb = b.abs();\n\
    \    while aa > 9 { aa /= 10; }\n    while bb > 9 { bb /= 10; }\n    aa * bb",
  '    (a.abs() % 10) * (b.abs() % 10)', "    let a = a.abs();\n    let b = b.abs();\n\
    \    (a % 10) * (b % 10)", "    let abs_a = a.abs();\n    let abs_b = b.abs();\n\
    \    let product = abs_a * abs_b;\n    product % 10", "    // return the product\
    \ of two unit digits\n    // Take the modulus 10 of each, then multiply and return\n\
    \    (a%10)*(b%10)", "    let mut prod = a * b;\n    prod = prod % 10;\n    prod",
  "    // unimplemented!(\"Multiply {} by {}\", a, b);\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    a % 10 * b % 10", "    if a > 0 { a.abs() % 10 } else {\
    \ a.abs() % 10 } *\n    if b > 0 { b.abs() % 10 } else { b.abs() % 10 }", "  \
    \  let a_end = a % 10;\n    let b_end = b % 10;\n    a_end * b_end", '    (a.abs()
    * b.abs()) % 10', '  a.abs() % 10 * b.abs() % 10', "    let mut res: isize = a\
    \ * b;\n    loop {\n        if res < 10 {\n            break;\n        }\n   \
    \     res = res / 10;\n    }\n    res", '  (a.abs() % 10) * (b.abs() % 10)', '    (a
    % 10) * (b % 10)', '    a * b', '    (a % 10) * (b % 10)', "    let abs_a = a.abs();\n\
    \    let abs_b = b.abs();\n    let (a, b) = (abs_a % 10, abs_b % 10);\n    a *\
    \ b", '    (a.abs() * b.abs()) % 10', '    (a % 10) * (b % 10)', "    let a_unit\
    \ = a.abs() % 10;\n    let b_unit = b.abs() % 10;\n    let sign = if (a < 0 &&\
    \ b >= 0) || (a >= 0 && b < 0) { -1 } else { 1 };\n    sign * a_unit * b_unit",
  '    a.abs() * b.abs() % 10', "    let abs_a = a.abs();\n    let abs_b = b.abs();\n\
    \    let mut a_units_digit = abs_a % 10;\n    let mut b_units_digit = abs_b %\
    \ 10;\n    if a < 0 {\n        a_units_digit *= -1;\n    }\n    if b < 0 {\n \
    \       b_units_digit *= -1;\n    }\n    return a_units_digit * b_units_digit;",
  "    let digits = (a.abs() % 10, b.abs() % 10);\n    match (a < 0, b < 0) {\n  \
    \      (true, true) => digits.0 * digits.1,\n        (true, false) => -(digits.0\
    \ * digits.1),\n        (false, true) => -(digits.0 * digits.1),\n        (false,\
    \ false) => digits.0 * digits.1,\n    }", '    (a.abs() % 10) * (b.abs() % 10)',
  '    ((a % 10) * (b % 10)) as isize', "    let mut a = a.abs();\n    let mut b =\
    \ b.abs();\n    a %= 10;\n    b %= 10;\n    a * b", '  a.abs() * b.abs() % 10',
  '  a.abs() * b.abs() % 10', '  (a % 10) * (b % 10)', '  return (a % 10) * (b % 10);',
  '    (a.abs() % 10) * (b.abs() % 10)', '    (a % 10) * (b % 10)', '    (a % 10)
    * (b % 10)', '    (a.abs() * b.abs()) % 10', '    (a.abs() * b.abs()) % 10', '    (a
    % 10) * (b % 10)', "    let mut a = a.abs();\n    let mut b = b.abs();\n    let\
    \ mut c = 1;\n    while a > 10 {\n        a = a / 10;\n    }\n    while b > 10\
    \ {\n        b = b / 10;\n    }\n    a * b * c", '    (a % 10) * (b % 10)', " \
    \   let a = (a % 10).abs();\n    let b = (b % 10).abs();\n    a * b", '    (a
    % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '  (a
    % 10) * (b % 10)', '    ((a % 10) * (b % 10)) as isize', "    // This can be done\
    \ with some casting and modulus, but I think\n    // the digits approach is more\
    \ interesting.\n    if a < 0 {\n        return multiply(-a, b);\n    }\n    if\
    \ b < 0 {\n        return multiply(a, -b);\n    }\n    let mut x: isize = 1;\n\
    \    let mut y: isize = 1;\n    for c in a.to_string().chars() {\n        x *=\
    \ c.to_digit(10).unwrap() as isize;\n    }\n    for c in b.to_string().chars()\
    \ {\n        y *= c.to_digit(10).unwrap() as isize;\n    }\n    x * y", "    if\
    \ a < 0 {\n        return multiply(-a, b);\n    }\n    if b < 0 {\n        return\
    \ multiply(a, -b);\n    }\n    if a == 0 || b == 0 {\n        return 0;\n    }\n\
    \    a % 10 * b % 10", '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    (a.abs()
    % 10) * (b.abs() % 10)', "  if a == 0 || b == 0 {\n    return 0;\n  }\n  (a %\
    \ 10) * (b % 10)", "    let a_units = a % 10;\n    let b_units = b % 10;\n   \
    \ a_units * b_units", "    let a = a.abs();\n    let b = b.abs();\n    let a =\
    \ a % 10;\n    let b = b % 10;\n    return a * b;", '    return (a % 10) * (b
    % 10);', "    let mut a = a.abs();\n    let mut b = b.abs();\n    a %= 10;\n \
    \   b %= 10;\n    a * b", "    let a = a % 10;\n    let b = b % 10;\n    a * b",
  "    if a == 0 || b == 0 { return 0 }\n    (a % 10) * (b % 10)", "    let mut digits:\
    \ Vec<isize> = vec![];\n    let mut mult: isize = 1;\n    let mut a = a;\n   \
    \ let mut b = b;\n    while a > 0 {\n        digits.push(a % 10);\n        a /=\
    \ 10;\n    }\n    while b > 0 {\n        digits.push(b % 10);\n        b /= 10;\n\
    \    }\n    for digit in digits {\n        mult *= digit;\n    }\n    mult", " \
    \   let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)", '    (a
    % 10) * (b % 10)', '    (a.abs() % 10) * (b.abs() % 10)', "    let a = a % 10;\n\
    \    let b = b % 10;\n    a * b", "    let mut a = a;\n    let mut b = b;\n  \
    \  if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n\
    \    a % 10 * b % 10", "    let a: isize = (a % 10).abs();\n    let b: isize =\
    \ (b % 10).abs();\n    a * b", "    let a = a % 10;\n    let b = b % 10;\n   \
    \ a * b", '    a % 10 * b % 10', '    (a.abs() % 10) * (b.abs() % 10)', "    let\
    \ mut n1 = a.abs();\n    let mut n2 = b.abs();\n    let mut product = 0;\n   \
    \ while n1 > 0 {\n        let last1 = n1 % 10;\n        n1 /= 10;\n        while\
    \ n2 > 0 {\n            let last2 = n2 % 10;\n            n2 /= 10;\n        \
    \    product += last1 * last2;\n        }\n    }\n    product", '    return if
    a == 0 || b == 0 { 0 } else { (a.abs() % 10) * (b.abs() % 10) };', '  return (a
    % 10) * (b % 10);', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    (a
    % 10) * (b % 10)', "    let a_units = a % 10;\n    let b_units = b % 10;\n   \
    \ a_units * b_units", '    ((a % 10) * (b % 10)) as isize', '    (a % 10) * (b
    % 10)', "    let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)",
  "    let a = a % 10;\n    let b = b % 10;\n    a * b", "    let mut a = a;\n   \
    \ let mut b = b;\n    if a < 0 {\n        a = a * -1;\n    }\n    if b < 0 {\n\
    \        b = b * -1;\n    }\n    let x = a % 10;\n    let y = b % 10;\n    return\
    \ x * y;", '    (a.abs() % 10) * (b.abs() % 10)', "    let result = a * b;\n \
    \   let mut str_result = result.to_string();\n    let str_result_len = str_result.len();\n\
    \    if str_result_len >= 2 {\n        str_result.remove(str_result_len - 2);\n\
    \    }\n    str_result.parse::<isize>().unwrap()", "    let mut unit = 0;\n  \
    \  if a < 0 {\n        unit += a % 10;\n    } else {\n        unit += a % 10;\n\
    \    }\n    if b < 0 {\n        unit += b % 10;\n    } else {\n        unit +=\
    \ b % 10;\n    }\n    unit", '    (a.abs() % 10) * (b.abs() % 10)', '    (a.abs()
    % 10) * (b.abs() % 10)', "    let (a, b) = (a.abs(), b.abs());\n    let (a, b)\
    \ = (a % 10, b % 10);\n    a * b", '    (a % 10) * (b % 10)', '    (a % 10) *
    (b % 10)', '    (a.abs() % 10) * (b.abs() % 10)', "    let mut i: isize = 0;\n\
    \    for _ in 0..2 {\n        if a % 10 == 0 || b % 10 == 0 {\n            i +=\
    \ 1;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    if i == 2 {\n\
    \        return 0;\n    }\n    a * b", "    let a = (a % 10).abs();\n    let b\
    \ = (b % 10).abs();\n    a * b", '    return a.abs() % 10 * b.abs() % 10;', " \
    \   let mut (a, b) = (a, b);\n    while a >= 10 {\n        a /= 10;\n    }\n \
    \   while b >= 10 {\n        b /= 10;\n    }\n    a * b", '    (a % 10) * (b %
    10)', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "    let diga = a.abs()\
    \ % 10;\n    let digb = b.abs() % 10;\n    diga * digb", '    (a.abs() % 10) *
    (b.abs() % 10)', "    let mut result = 0;\n    let mut a = a;\n    let mut b =\
    \ b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n\
    \    }\n    result = (a % 10) * (b % 10);\n    result", "    let product = a *\
    \ b;\n    let string_product = product.to_string();\n    let last_digit = &string_product[string_product.len()\
    \ - 1..];\n    return last_digit.parse::<isize>().unwrap();", '    (a.abs() %
    10) * (b.abs() % 10)', "    let units = |n: isize| (n - n / 10 * 10).abs();\n\
    \    units(a) * units(b)", '    a.abs() % 10 * b.abs() % 10', '    (a % 10) *
    (b % 10)', "    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n        a\
    \ = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n    (a % 10) * (b % 10)",
  '    (a.abs() % 10) * (b.abs() % 10)', '    a.abs() % 10 * b.abs() % 10', "    //\
    \ unit digit is last digit, so take modulo 10\n    ((a % 10) * (b % 10)) as isize",
  '    (a.abs() % 10) * (b.abs() % 10)', '    ((a%10) * (b%10)) as isize', "    let\
    \ (a, b) = (a.abs(), b.abs());\n    let a = a % 10;\n    let b = b % 10;\n   \
    \ a * b", '    (a % 10) * (b % 10)', "    let a_abs = a.abs();\n    let b_abs\
    \ = b.abs();\n    let a_unit = a_abs % 10;\n    let b_unit = b_abs % 10;\n   \
    \ let result = a_unit * b_unit;\n    if (a >= 0 && b >= 0) || (a < 0 && b < 0)\
    \ {\n        result\n    } else {\n        -result\n    }", '    (a % 10) * (b
    % 10)', '    (a.abs() % 10) * (b.abs() % 10)', '    (a.abs() % 10) * (b.abs()
    % 10)', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    (a % 10) *
    (b % 10)', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "    let a: isize\
    \ = a.abs() % 10;\n    let b: isize = b.abs() % 10;\n    return a * b;", '    return
    (a % 10) * (b % 10);', "  let mut a_last = a % 10;\n  let mut b_last = b % 10;\n\
    \  if a_last < 0 {\n    a_last = -a_last;\n  }\n  if b_last < 0 {\n    b_last\
    \ = -b_last;\n  }\n  a_last * b_last", "    let mut a = a;\n    let mut b = b;\n\
    \    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n   \
    \ }\n    (a % 10) * (b % 10)", "    let mod_a = a % 10;\n    let mod_b = b % 10;\n\
    \    mod_a * mod_b", '    unimplemented!()', "    fn unit_digit(n: isize) -> isize\
    \ {\n        n % 10\n    }\n    unit_digit(a) * unit_digit(b)", '    (a % 10)
    * (b % 10)', '    a.abs() % 10 * b.abs() % 10', "    let product = a * b;\n  \
    \  let mut n = product;\n    let mut r = 0;\n    while n > 0 {\n        r = n\
    \ % 10;\n        n = n / 10;\n    }\n    r", "    let a_digit = a % 10;\n    let\
    \ b_digit = b % 10;\n    a_digit * b_digit", '    (a % 10) * (b % 10)', '    a.abs()
    * b.abs() % 10', "    let digit_a = a.abs() % 10;\n    let digit_b = b.abs() %\
    \ 10;\n    digit_a * digit_b", '    (a.abs() % 10) * (b.abs() % 10)', '    (a.abs()
    * b.abs()) % 10', '    (a % 10) * (b % 10)', '    (a.abs() * b.abs()) % 10', " \
    \   if a == 0 || b == 0 {\n        return 0;\n    }\n    let mut a = a;\n    let\
    \ mut b = b;\n    let mut unit_digit_a = 0;\n    let mut unit_digit_b = 0;\n \
    \   while a > 0 {\n        unit_digit_a = a % 10;\n        a /= 10;\n    }\n \
    \   while b > 0 {\n        unit_digit_b = b % 10;\n        b /= 10;\n    }\n \
    \   unit_digit_a * unit_digit_b", '    (a % 10) * (b % 10)', '    (a.abs() % 10)
    * (b.abs() % 10)', "    let mut prod: isize = 1;\n    let mut arr: Vec<isize>\
    \ = vec![a, b];\n    let mut i: usize = 0;\n    while i < arr.len() {\n      \
    \  if arr[i] == 0 {\n            i += 1;\n            continue;\n        }\n \
    \       prod *= arr[i] % 10;\n        arr[i] /= 10;\n        i += 1;\n    }\n\
    \    prod", "    let mut ret = a % 10 * b % 10;\n    ret", '    (a % 10) * (b
    % 10)', '    return a % 10 * b % 10;', "    let mut result = 1;\n    let mut a\
    \ = a;\n    let mut b = b;\n    while a > 0 {\n        result *= a % 10;\n   \
    \     a /= 10;\n    }\n    while b > 0 {\n        result *= b % 10;\n        b\
    \ /= 10;\n    }\n    result", "    let a = (a % 10).abs();\n    let b = (b % 10).abs();\n\
    \    a * b", "    let (a, b) = (a.abs(), b.abs());\n    let (a, b) = (a % 10,\
    \ b % 10);\n    a * b", '    (a % 10) * (b % 10)', "    let a_unit = a % 10;\n\
    \    let b_unit = b % 10;\n    a_unit * b_unit", '    (a % 10) * (b % 10)', '    (a
    % 10) * (b % 10)', "    let mut res = a * b;\n    while res > 9 {\n        res\
    \ = res / 10;\n    }\n    res", "    let a = a % 10;\n    let b = b % 10;\n  \
    \  a * b", '    (a%10) * (b%10)', "    fn get_unit_digit(x: isize) -> isize {\n\
    \        let abs_x = x.abs();\n        let mut div = 1;\n        while div <=\
    \ abs_x {\n            div *= 10;\n        }\n        div /= 10;\n        abs_x\
    \ % div\n    }\n    get_unit_digit(a) * get_unit_digit(b)", "    let mut rem =\
    \ a % 10;\n    let mut rem2 = b % 10;\n    rem * rem2"]
stop_tokens:
- "\n}"
