name: HumanEval_88_sort_array
language: rust
prompt: "/// Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n/// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n/// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't\
  \ change the given array.\n/// Examples:\n/// * sort_array([]) => []\n/// * sort_array([5])\
  \ => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n/// * sort_array([2,\
  \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
  \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2, 4,\
  \ 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
  \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
  \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
  \ 21, 14, 11]);\n}\n"
completions: ["    let mut array = array;\n    if array.len() > 1 {\n        if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n            array.sort_by(|a, b| b.cmp(a));\n\
    \        } else {\n            array.sort_by(|a, b| a.cmp(b));\n        }\n  \
    \  }\n    array", "    let mut evens = array.clone();\n    let mut odds = array.clone();\n\
    \    evens.sort_by(|a, b| a.cmp(b));\n    odds.sort_by(|a, b| b.cmp(a));\n   \
    \ if array.len() == 0 {\n        return array;\n    }\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        evens\n    } else {\n        odds\n    }", "    let\
    \ mut input: Vec<isize> = array.clone();\n    let i = array[0];\n    let j = array[array.len()\
    \ - 1];\n    if (i + j) % 2 == 0 {\n        input.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        input.sort_by(|a, b| a.cmp(b));\n    }\n    input", " \
    \   let mut array = array;\n    let length = array.len();\n    let mut sort =\
    \ true;\n    let mut last_unsorted = length - 1;\n    while sort {\n        sort\
    \ = false;\n        for i in 0..last_unsorted {\n            if sum_is_odd(array[i],\
    \ array[i + 1]) {\n                swap(&mut array, i, i + 1);\n             \
    \   sort = true;\n            }\n        }\n        last_unsorted -= 1;\n    }\n\
    \    array", "    if array.len() < 2 {\n        return array;\n    }\n    let\
    \ mut result = array.clone();\n    let sort_factor = if array[0] + array[array.len()\
    \ - 1] % 2 == 0 {\n        Ordering::Greater\n    } else {\n        Ordering::Less\n\
    \    };\n    result.sort_by(|a, b| a.cmp(b).reverse().then(sort_factor));\n  \
    \  result", "    let mut result = Vec::new();\n    if array.len() < 1 {\n    \
    \    return result;\n    }\n    let mut evens = Vec::new();\n    let mut odds\
    \ = Vec::new();\n    for (i, item) in array.iter().enumerate() {\n        if i\
    \ % 2 == 0 {\n            odds.push(*item);\n        } else {\n            evens.push(*item);\n\
    \        }\n    }\n    if array.len() % 2 == 0 {\n        odds.sort();\n     \
    \   evens.sort();\n        evens.reverse();\n    } else {\n        odds.sort();\n\
    \        odds.reverse();\n        evens.sort();\n    }\n    for (i, item) in odds.iter().enumerate()\
    \ {\n        result.push(*item);\n        if i < evens.len() {\n            result.push(evens[i]);\n\
    \        }\n    }\n    result", "    if array.len() == 0 {\n        return array;\n\
    \    }\n\n    let mut new_arr = array.clone();\n    let sort_method = if array[0]\
    \ + array[array.len() - 1] % 2 == 0 {\n        SortOrder::Descending\n    } else\
    \ {\n        SortOrder::Ascending\n    };\n\n    new_arr.sort_by(|a, b| sort_method.cmp(a,\
    \ b));\n    new_arr", "    let mut array = array;\n    let sum = array[0] + array[array.len()\
    \ - 1];\n    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    }\
    \ else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    let\
    \ mut array = array;\n    if array.len() == 0 {\n        return vec![];\n    }\n\
    \n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \n    array", "    let sum = array.get(0).cloned().unwrap_or(0) + array.last().cloned().unwrap_or(0);\n\
    \    let arr = if sum % 2 == 0 {\n        array.clone().into_iter().sorted().rev().collect()\n\
    \    } else {\n        array.clone().into_iter().sorted().collect()\n    };\n\
    \    arr", "    let mut array = array;\n    let mut left = 0;\n    let mut right\
    \ = array.len() - 1;\n    let mut is_even = (array[0] + array[right]) % 2 == 0;\n\
    \    while left < right {\n        if is_even {\n            if array[left] %\
    \ 2 == 0 {\n                left += 1;\n            } else if array[right] % 2\
    \ == 1 {\n                right -= 1;\n            } else {\n                let\
    \ tmp = array[left];\n                array[left] = array[right];\n          \
    \      array[right] = tmp;\n                left += 1;\n                right\
    \ -= 1;\n            }\n        } else {\n            if array[left] % 2 == 1\
    \ {\n                left += 1;\n            } else if array[right] % 2 == 0 {\n\
    \                right -= 1;\n            } else {\n                let tmp =\
    \ array[left];\n                array[left] = array[right];\n                array[right]\
    \ = tmp;\n                left += 1;\n                right -= 1;\n          \
    \  }\n        }\n    }\n    if is_even {\n        array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        array.sort();\n    }\n    array", "    let mut array =\
    \ array;\n    let mut sum = array[0] + array[array.len() - 1];\n    array.sort_by(|a,\
    \ b| {\n        if sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n  \
    \          a.cmp(b)\n        }\n    });\n    array", "    let mut res = array.clone();\n\
    \    if array.len() % 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        res.sort_by(|a, b| a.cmp(b));\n    }\n    res", "    let first =\
    \ array.first().cloned().unwrap_or(0);\n    let last = array.last().cloned().unwrap_or(0);\n\
    \    let mut copy = array.clone();\n    copy.sort_by(|a, b| {\n        let (first,\
    \ last) = (first + last, *a + *b);\n        match first % 2 {\n            0 =>\
    \ last.cmp(first),\n            _ => first.cmp(last),\n        }\n    });\n  \
    \  copy", "    let mut input = array.clone();\n    input.sort();\n    let mut\
    \ output = array.clone();\n    if input.len() == 0 {\n        return output;\n\
    \    }\n    if input.len() == 1 {\n        return input;\n    }\n    if input[0]\
    \ + input[input.len() - 1] % 2 == 0 {\n        output.reverse();\n    }\n    output",
  "    if array.len() <= 1 {\n        return array;\n    }\n    let mut new_array\
    \ = array.clone();\n    new_array.sort();\n    if new_array[0] + new_array[new_array.len()\
    \ - 1] % 2 == 0 {\n        new_array.reverse();\n    }\n    new_array", "    if\
    \ array.len() < 2 {\n        return array;\n    }\n    let is_odd = (array[0]\
    \ + array[array.len() - 1]) % 2 == 1;\n    if is_odd {\n        let mut result\
    \ = array.clone();\n        result.sort();\n        result\n    } else {\n   \
    \     let mut result = array.clone();\n        result.sort_by(|a, b| b.cmp(a));\n\
    \        result\n    }", "    fn is_even(a: &isize) -> bool {\n        a % 2 ==\
    \ 0\n    }\n\n    let mut new_array = array.clone();\n    let end = new_array.len()\
    \ - 1;\n    let sum = new_array[0] + new_array[end];\n    if is_even(&sum) {\n\
    \        new_array.sort_by(|a, b| b.cmp(a));\n    } else {\n        new_array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    new_array", "    let mut array = array;\n    if array.len()\
    \ > 1 {\n        let idx_sum = (array.len() - 1) as isize;\n        if idx_sum\
    \ % 2 == 0 {\n            array.sort_by(|a, b| b.cmp(a));\n        } else {\n\
    \            array.sort_by(|a, b| a.cmp(b));\n        }\n    }\n    array", " \
    \   let mut list = array.clone();\n    if list.len() <= 1 {\n        return list;\n\
    \    }\n\n    if list[0] + list[list.len() - 1] % 2 == 0 {\n        list.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        list.sort_by(|a, b| a.cmp(b));\n    }\n\
    \n    list", "    let len = array.len();\n    let copy_arr = array.clone();\n\
    \    let mut new_array = Vec::with_capacity(len);\n    let mut index = 0;\n  \
    \  let mut iteration = 0;\n    loop {\n        if len == 0 {\n            break;\n\
    \        }\n        if iteration >= len {\n            iteration = 0;\n      \
    \  }\n        if index >= len {\n            break;\n        }\n        let sum\
    \ = copy_arr[0] + copy_arr[len - 1];\n        if sum % 2 == 0 {\n            new_array.push(copy_arr[len\
    \ - 1 - iteration]);\n        } else {\n            new_array.push(copy_arr[iteration]);\n\
    \        }\n        index += 1;\n        iteration += 1;\n    }\n    new_array",
  "    if array.len() <= 1 {\n        return array;\n    }\n    let mut array_copy\
    \ = array.clone();\n    match ((array_copy[0] + array_copy[array_copy.len() -\
    \ 1]) % 2) {\n        0 => array_copy.sort_by(|a, b| b.cmp(a)),\n        _ =>\
    \ array_copy.sort_by(|a, b| a.cmp(b)),\n    };\n    array_copy", "    let mut\
    \ a = array.clone();\n    if a.len() < 2 {\n        return a;\n    }\n    let\
    \ sum = a[0] + a[a.len() - 1];\n    if sum % 2 == 0 {\n        a.sort_by(|a, b|\
    \ b.cmp(a));\n    } else {\n        a.sort_by(|a, b| a.cmp(b));\n    }\n    a",
  "    let mut array = array;\n    let first = array.first().unwrap();\n    let last\
    \ = array.last().unwrap();\n    let sum = first + last;\n    if sum % 2 == 0 {\n\
    \        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let mut array = array;\n    array.sort_by(|a,\
    \ b| {\n        if (array.len() - 1) % 2 == 0 {\n            a.cmp(b)\n      \
    \  } else {\n            b.cmp(a)\n        }\n    });\n    array", "    let mut\
    \ odd = array.iter().filter(|&&x| x % 2 == 1).collect::<Vec<_>>();\n    let mut\
    \ even = array.iter().filter(|&&x| x % 2 == 0).collect::<Vec<_>>();\n    odd.sort();\n\
    \    even.sort();\n    even.reverse();\n    let mut result = vec![];\n    for\
    \ i in 0..array.len() {\n        result.push(\n            if i % 2 == 0 {\n \
    \               odd.pop().unwrap()\n            } else {\n                even.pop().unwrap()\n\
    \            }\n        );\n    }\n    result", "    if array.len() < 2 {\n  \
    \      return array;\n    }\n    let mut array = array;\n    let (mut low, mut\
    \ high) = (0, array.len() - 1);\n    if (array[low] + array[high]) % 2 == 0 {\n\
    \        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort();\n\
    \    }\n    array", "    if array.len() < 2 {\n        return array;\n    }\n\
    \    if array[0] + array[array.len() - 1] % 2 == 0 {\n        let mut arr = array.clone();\n\
    \        arr.sort_by(|a, b| b.cmp(a));\n        return arr;\n    }\n    array.sort();\n\
    \    array", '    array', "    let mut vec = array.clone();\n    if array.len()\
    \ > 0 {\n        if array[0] + array[array.len() - 1] % 2 == 0 {\n           \
    \ vec.sort_by(|a, b| b.cmp(a));\n        } else {\n            vec.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    vec", "    match array.len() {\n      \
    \  0 => vec![],\n        1 => vec![array[0]],\n        _ => {\n            let\
    \ mut v = array.clone();\n            if (v[0] + v[v.len() - 1]) % 2 == 0 {\n\
    \                v.sort_by(|a, b| b.cmp(a));\n            } else {\n         \
    \       v.sort_by(|a, b| a.cmp(b));\n            }\n            v\n        }\n\
    \    }", "    let mut array = array;\n    array.sort_by(|a, b|\n        if (a\
    \ + b) % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    );\n    array", "    if array.len() == 0 {\n        return array;\n\
    \    }\n\n    let mut array = array;\n    if array[0] + array[array.len() - 1]\
    \ % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n\n    array", "    let mut v = array.clone();\n    if\
    \ v.len() == 0 {\n        return v;\n    }\n    if array[0] + array[array.len()\
    \ - 1] % 2 == 0 {\n        v.sort_by(|a, b| b.cmp(a));\n    } else {\n       \
    \ v.sort_by(|a, b| a.cmp(b));\n    }\n    v", "    let mut array = array;\n  \
    \  let mut even = array.iter().cloned().filter(|x| *x % 2 == 0).collect::<Vec<isize>>();\n\
    \    let mut odd = array.iter().cloned().filter(|x| *x % 2 != 0).collect::<Vec<isize>>();\n\
    \    even.sort();\n    odd.sort();\n    odd.reverse();\n    let mut i = 0;\n \
    \   let mut j = 0;\n    let mut index = 0;\n    while index < array.len() {\n\
    \        if array[index] % 2 == 0 {\n            array[index] = even[i];\n   \
    \         i += 1;\n        } else {\n            array[index] = odd[j];\n    \
    \        j += 1;\n        }\n        index += 1;\n    }\n    array", "    let\
    \ sum = array.first().unwrap() + array.last().unwrap();\n    let mut out = array.clone();\n\
    \    if sum % 2 == 0 {\n        out.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        out.sort_by(|a, b| a.cmp(b));\n    }\n    out", "    let mut array =\
    \ array;\n    let i = array.first().unwrap();\n    let j = array.last().unwrap();\n\
    \    if (i + j) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    let mut\
    \ res = array.clone();\n    if res.len() > 1 {\n        if res[0] % 2 == 0 {\n\
    \            res.sort();\n        } else {\n            res.sort_by(|a, b| b.cmp(a));\n\
    \        }\n    }\n    res", "    let mut array = array;\n    let s = &array[0]\
    \ + &array[array.len() - 1];\n    if s % 2 == 0 {\n        array.sort_by(|a, b|\
    \ b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n \
    \   array", "    // create a new vector to hold the result\n    let mut result\
    \ = Vec::new();\n    // special cases for empty and 1 element arrays\n    if array.len()\
    \ == 0 {\n        return result;\n    } else if array.len() == 1 {\n        result.push(array[0]);\n\
    \        return result;\n    }\n    // sort the input array\n    let mut sorted_array\
    \ = array.clone();\n    sorted_array.sort();\n    // separate the input array\
    \ into two halves\n    let midpoint = sorted_array.len() / 2;\n    let mut left_half\
    \ = Vec::new();\n    let mut right_half = Vec::new();\n    for index in 0..midpoint\
    \ {\n        left_half.push(sorted_array[index]);\n    }\n    for index in midpoint..sorted_array.len()\
    \ {\n        right_half.push(sorted_array[index]);\n    }\n    // put the left\
    \ half in ascending order\n    left_half.reverse();\n    // check the condition\n\
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        // condition is\
    \ true, so put the right half in descending order\n        right_half.reverse();\n\
    \    }\n    // assemble the result\n    for element in left_half {\n        result.push(element);\n\
    \    }\n    for element in right_half {\n        result.push(element);\n    }\n\
    \    // return the result\n    result", "    let mut array = array;\n    if array.len()\
    \ % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let mut res = array.clone();\n    if\
    \ array.len() > 0 {\n        res.sort_by(|x, y| {\n            if (array[0] +\
    \ array[array.len() - 1]) % 2 == 0 {\n                x.cmp(y)\n            }\
    \ else {\n                y.cmp(x)\n            }\n        });\n    }\n    res",
  "    if array.len() <= 1 {\n        return array;\n    }\n    let mut array = array;\n\
    \    if array[0] + array[array.len() - 1] % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    if array.len() == 0 {\n        return vec![];\n    }\n\n   \
    \ let is_odd = array[0] + array[array.len() - 1] % 2 == 1;\n    let mut new_array\
    \ = array.clone();\n    new_array.sort_by(|a, b| {\n        if is_odd {\n    \
    \        a.cmp(b)\n        } else {\n            b.cmp(a)\n        }\n    });\n\
    \    new_array", "    let mut array = array;\n    let mut first_index_value =\
    \ array[0];\n    let mut last_index_value = array[array.len() - 1];\n    let mut\
    \ sum = first_index_value + last_index_value;\n    let mut sort_result = Vec::new();\n\
    \    if sum % 2 == 0 {\n        loop {\n            match array.iter().max() {\n\
    \                Some(number) => {\n                    sort_result.push(*number);\n\
    \                    let mut index = 0;\n                    while index < array.len()\
    \ {\n                        if array[index] == *number {\n                  \
    \          array.remove(index);\n                            break;\n        \
    \                }\n                        index += 1;\n                    }\n\
    \                }\n                None => break,\n            }\n        }\n\
    \    } else {\n        loop {\n            match array.iter().min() {\n      \
    \          Some(number) => {\n                    sort_result.push(*number);\n\
    \                    let mut index = 0;\n                    while index < array.len()\
    \ {\n                        if array[index] == *number {\n                  \
    \          array.remove(index);\n                            break;\n        \
    \                }\n                        index += 1;\n                    }\n\
    \                }\n                None => break,\n            }\n        }\n\
    \    }\n    sort_result", "    let mut array = array;\n    let even = array.len()\
    \ % 2 == 0;\n    array.sort_by(|a, b| {\n        if (even && (a < b)) || (!even\
    \ && (a > b)) {\n            return Less;\n        }\n        Greater\n    });\n\
    \    array", "    if array.len() == 0 {\n        return vec![];\n    }\n\n   \
    \ let is_odd = array[0] + array[array.len() - 1] % 2 == 1;\n    if is_odd {\n\
    \        return array.iter().sorted().cloned().collect();\n    } else {\n    \
    \    return array.iter().sorted().rev().cloned().collect();\n    }", "    let\
    \ mut sorted = array.clone();\n    sorted.sort();\n    let mut result = Vec::new();\n\
    \    let (mut front, mut back) = (0, sorted.len() - 1);\n    if (sorted[0] + sorted[sorted.len()\
    \ - 1]) % 2 == 0 {\n        while front <= back {\n            result.push(sorted[back]);\n\
    \            result.push(sorted[front]);\n            front += 1;\n          \
    \  back -= 1;\n        }\n    } else {\n        while front <= back {\n      \
    \      result.push(sorted[front]);\n            result.push(sorted[back]);\n \
    \           front += 1;\n            back -= 1;\n        }\n    }\n    result",
  "    let mut vector = array.clone();\n    vector.sort();\n    let copy = vector.clone();\n\
    \    if vector.len() > 0 {\n        if (vector[0] + vector[vector.len() - 1])\
    \ % 2 == 0 {\n            vector.reverse();\n        }\n    }\n    vector", " \
    \   let (first, last) = (array[0], array[array.len() - 1]);\n    let mut array\
    \ = array;\n    array.sort_by(|a, b| {\n        let s = first + last;\n      \
    \  if s % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    });\n    array", "    let sum = array.first().unwrap() + array.last().unwrap();\n\
    \    if sum % 2 == 0 {\n        array.iter().cloned().rev().collect()\n    } else\
    \ {\n        array.iter().cloned().collect()\n    }", "    if array.len() == 0\
    \ {\n        return array;\n    }\n\n    let mut new_array = array.clone();\n\
    \    new_array.sort();\n\n    if array[0] + array[array.len() - 1] % 2 == 0 {\n\
    \        new_array.reverse();\n    }\n\n    new_array", "    let sum = array.first().unwrap()\
    \ + array.last().unwrap();\n    if sum % 2 == 0 {\n        array.iter().rev().cloned().collect()\n\
    \    } else {\n        array\n    }", "    let mut array = array;\n    let mut\
    \ even = vec![];\n    let mut odd = vec![];\n    for i in array.iter() {\n   \
    \     if i % 2 == 0 {\n            even.push(*i);\n        } else {\n        \
    \    odd.push(*i);\n        }\n    }\n    even.sort();\n    odd.sort();\n    if\
    \ (array[0] + array[array.len() - 1]) % 2 == 0 {\n        odd.reverse();\n   \
    \ }\n    let mut i = 0;\n    let mut j = 0;\n    for idx in 0..array.len() {\n\
    \        if array[idx] % 2 == 0 {\n            array[idx] = even[i];\n       \
    \     i += 1;\n        } else {\n            array[idx] = odd[j];\n          \
    \  j += 1;\n        }\n    }\n    array", "    let mut arr = array.clone();\n\
    \    arr.sort();\n    if arr.len() > 0 && (arr[0] + arr[arr.len() - 1]) % 2 ==\
    \ 0 {\n        arr.reverse();\n    }\n    arr", "    let len = array.len();\n\
    \    let mut evens = array.clone();\n    let mut odds = array.clone();\n    evens.sort_by(|a,\
    \ b| a.cmp(b));\n    odds.sort_by(|a, b| b.cmp(a));\n    if len == 0 || len ==\
    \ 1 {\n        return array;\n    }\n    let (evens, odds) = if len % 2 == 0 {\n\
    \        (evens, odds)\n    } else {\n        (odds, evens)\n    };\n    let mut\
    \ sorted = Vec::new();\n    for i in 0..len {\n        if i % 2 == 0 {\n     \
    \       sorted.push(evens[i / 2]);\n        } else {\n            sorted.push(odds[i\
    \ / 2]);\n        }\n    }\n    sorted", "    if array.len() < 2 {\n        return\
    \ array;\n    }\n    let mut res = array.clone();\n    for i in 0..array.len()\
    \ {\n        let mut j = i;\n        while j > 0 {\n            if compare(res[j\
    \ - 1], res[j]) {\n                let temp = res[j - 1];\n                res[j\
    \ - 1] = res[j];\n                res[j] = temp;\n            }\n            j\
    \ -= 1;\n        }\n    }\n    res", "    let mut array = array;\n    let len\
    \ = array.len();\n    let sum = array[0] + array[len - 1];\n    if sum % 2 ==\
    \ 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let sum = array.iter().fold(0, |acc,\
    \ &x| acc + x);\n    let mut ret = array.clone();\n    if sum % 2 == 0 {\n   \
    \     ret.sort_by(|a, b| b.cmp(a));\n    } else {\n        ret.sort_by(|a, b|\
    \ a.cmp(b));\n    }\n    ret", "    let len = array.len();\n    let mut result\
    \ = array.clone();\n    if len == 0 {\n        return result;\n    }\n\n    let\
    \ even = array[0] + array[len - 1] % 2 == 0;\n    result.sort_by(|a, b| if even\
    \ { b.cmp(a) } else { a.cmp(b) });\n    result", "    let mut res = array.clone();\n\
    \    let (mut lo, mut hi) = (0, res.len() - 1);\n    if array.len() == 0 {\n \
    \       return array;\n    }\n    if (array[0] + array[array.len() - 1]) % 2 ==\
    \ 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else {\n        res.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    return res;", "    let sum = array.first().unwrap()\
    \ + array.last().unwrap();\n    let arr = if sum % 2 == 0 {\n        array.clone().into_iter().rev().collect()\n\
    \    } else {\n        array.clone()\n    };\n    arr", "    let (mut head, mut\
    \ tail) = (0, array.len() - 1);\n    let mut res = array.clone();\n    while head\
    \ < tail {\n        if res[head] % 2 == 0 {\n            if res[tail] % 2 == 1\
    \ {\n                res.swap(head, tail);\n                head += 1;\n     \
    \           tail -= 1;\n            } else {\n                tail -= 1;\n   \
    \         }\n        } else {\n            head += 1;\n        }\n    }\n    res.sort_by(|a,\
    \ b| {\n        if *a % 2 == 0 && *b % 2 == 0 {\n            b.cmp(a)\n      \
    \  } else if *a % 2 == 1 && *b % 2 == 1 {\n            a.cmp(b)\n        } else\
    \ {\n            b.cmp(a)\n        }\n    });\n    res", "    let len = array.len();\n\
    \    if len == 0 {\n        return array;\n    }\n    let (left, right) = array.split_at(len\
    \ / 2);\n    let mut result = merge(left, right);\n    if len % 2 == 0 {\n   \
    \     result.reverse();\n    }\n    result", "    let mut res = array.clone();\n\
    \    let len = res.len();\n    res.sort_by(|a, b| {\n        if res[0] + res[len\
    \ - 1] % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    });\n    res", "    let mut v = array.clone();\n    let len =\
    \ v.len();\n    let even = len % 2 == 0;\n    if even {\n        v.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        v.sort_by(|a, b| a.cmp(b));\n    }\n  \
    \  v", "    let mut ret = array.clone();\n    if ret.len() < 2 {\n        return\
    \ ret;\n    }\n    let mut i = 0;\n    let mut j = ret.len() - 1;\n    if (ret[i]\
    \ + ret[j]) % 2 == 0 {\n        ret.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        ret.sort_by(|a, b| a.cmp(b));\n    }\n    ret", "    let mut a = array.clone();\n\
    \    // if first index value plus last index value is odd, then sort in ascending\
    \ order\n    if (a[0] + a[a.len() - 1]) % 2 == 1 {\n        a.sort();\n    } else\
    \ {\n        a.sort_by(|a, b| b.cmp(a));\n    }\n    a", "    let mut result =\
    \ array.clone();\n    if array.len() > 0 {\n        let index_sum = array[0] +\
    \ array[array.len() - 1];\n        if index_sum % 2 == 0 {\n            result.sort_by(|a,\
    \ b| b.cmp(a));\n        } else {\n            result.sort_by(|a, b| a.cmp(b));\n\
    \        }\n    }\n    result", "    let length = array.len();\n    let odd_even\
    \ = (length + 1) % 2;\n    array.into_iter().enumerate().map(|(i, e)| (e, i)).sorted_by(|a,\
    \ b| {\n        let (a_value, a_index) = a;\n        let (b_value, b_index) =\
    \ b;\n        if odd_even == 0 {\n            if a_index % 2 == 0 && b_index %\
    \ 2 == 0 {\n                b_value.cmp(&a_value)\n            } else if a_index\
    \ % 2 == 1 && b_index % 2 == 1 {\n                a_value.cmp(&b_value)\n    \
    \        } else if a_index % 2 == 0 {\n                Ordering::Less\n      \
    \      } else {\n                Ordering::Greater\n            }\n        } else\
    \ {\n            if a_index % 2 == 0 && b_index % 2 == 0 {\n                a_value.cmp(&b_value)\n\
    \            } else if a_index % 2 == 1 && b_index % 2 == 1 {\n              \
    \  b_value.cmp(&a_value)\n            } else if a_index % 2 == 0 {\n         \
    \       Ordering::Less\n            } else {\n                Ordering::Greater\n\
    \            }\n        }\n    }).map(|(e, _)| e).collect()", "    let len = array.len();\n\
    \    let odd = len % 2 != 0;\n    let mut new_array = array.clone();\n    new_array.sort();\n\
    \    if odd {\n        let mut left_index = 0;\n        let mut right_index =\
    \ len - 1;\n        let mut new_array_index = 0;\n        let mut new_array_odd\
    \ = vec![0; len];\n        while left_index < right_index {\n            new_array_odd[new_array_index]\
    \ = new_array[right_index];\n            new_array_odd[new_array_index + 1] =\
    \ new_array[left_index];\n            left_index += 1;\n            right_index\
    \ -= 1;\n            new_array_index += 2;\n        }\n        if right_index\
    \ == left_index {\n            new_array_odd[new_array_index] = new_array[right_index];\n\
    \        }\n        new_array_odd\n    } else {\n        new_array\n    }", " \
    \   if array.len() < 2 {\n        return array;\n    }\n    let mut array_c =\
    \ array.clone();\n    let flag = (array[0] + array[array.len() - 1]) % 2 == 0;\n\
    \    if flag {\n        array_c.sort_by(|a, b| b.cmp(a));\n    } else {\n    \
    \    array_c.sort_by(|a, b| a.cmp(b));\n    }\n    array_c", "    let mut array\
    \ = array;\n    let first = array.first().unwrap();\n    let last = array.last().unwrap();\n\
    \    if (first + last) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n \
    \   } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "  \
    \  let mut array = array;\n    array.sort_by(|a, b| {\n        if (array.len()\
    \ - 1) % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    });\n    array", "    let mut temp_array = array.clone();\n  \
    \  if array.len() == 0 {\n        return temp_array;\n    }\n    if array.len()\
    \ == 1 {\n        return temp_array;\n    }\n    let first_element = array[0];\n\
    \    let last_element = array[array.len() - 1];\n    let sum = first_element +\
    \ last_element;\n    if sum % 2 == 0 {\n        temp_array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        temp_array.sort_by(|a, b| a.cmp(b));\n    }\n    temp_array",
  "    // TODO\n    unimplemented!()", "    let mut array = array;\n    let mut i\
    \ = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        if (array[i]\
    \ + array[j]) % 2 == 0 {\n            // even\n            while i < j && array[i]\
    \ % 2 == 0 {\n                i += 1;\n            }\n            while i < j\
    \ && array[j] % 2 == 0 {\n                j -= 1;\n            }\n           \
    \ if i < j {\n                array.swap(i, j);\n            }\n        } else\
    \ {\n            // odd\n            while i < j && array[i] % 2 == 1 {\n    \
    \            i += 1;\n            }\n            while i < j && array[j] % 2 ==\
    \ 1 {\n                j -= 1;\n            }\n            if i < j {\n      \
    \          array.swap(i, j);\n            }\n        }\n    }\n    array", " \
    \   let mut new_array = array.clone();\n    let mut first_number = 0;\n    let\
    \ mut last_number = 0;\n    if new_array.len() > 0 {\n        first_number = new_array[0];\n\
    \        last_number = new_array[new_array.len() - 1];\n    }\n    let sum = first_number\
    \ + last_number;\n    let mut is_odd = false;\n    if sum % 2 != 0 {\n       \
    \ is_odd = true;\n    }\n    if is_odd {\n        new_array.sort();\n    } else\
    \ {\n        new_array.sort_by(|a, b| b.cmp(a));\n    }\n    new_array", "   \
    \ if array.len() <= 1 {\n        return array;\n    }\n    let mut new_array =\
    \ array.clone();\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n    \
    \    new_array.sort_by(|a, b| b.cmp(a));\n    } else {\n        new_array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    new_array", "    let mut result = array.clone();\n\
    \    if result.len() > 0 {\n        let mut pos = array.len() - 1;\n        if\
    \ array[0] + array[pos] % 2 == 0 {\n            result.sort_by(|a, b| b.cmp(a));\n\
    \        } else {\n            result.sort_by(|a, b| a.cmp(b));\n        }\n \
    \   }\n    result", "    // if given array is empty or has only one element, simply\
    \ return it\n    if array.len() < 2 {\n        return array;\n    }\n\n    //\
    \ create a copy of given array\n    let mut array = array.clone();\n\n    // define\
    \ sub array to sort\n    let (from, to) = match array.len() % 2 {\n        //\
    \ if total number of elements is odd, then the elements should be sorted from\n\
    \        // the first one to the last one\n        1 => (0, array.len()),\n  \
    \      // if total number of elements is even, then the elements should be sorted\
    \ from\n        // the last one to the first one\n        _ => (array.len() -\
    \ 1, 0),\n    };\n\n    // sort the sub array\n    if to == 0 {\n        // if\
    \ the end index is 0, the sub array should be sorted in descending order\n   \
    \     array[from..to].sort_by(|a, b| b.cmp(a));\n    } else {\n        // if the\
    \ end index is not 0, the sub array should be sorted in ascending order\n    \
    \    array[from..to].sort_by(|a, b| a.cmp(b));\n    }\n\n    // return the sorted\
    \ array\n    array", "    let mut array = array;\n    let copy = array.clone();\n\
    \    if array.len() == 0 {\n        return array;\n    }\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n  \
    \      array.sort_by(|a, b| a.cmp(b));\n    }\n    return array;", '    unimplemented!()',
  "    let mut array = array;\n    if array.len() > 1 {\n        let last_index =\
    \ array.len() - 1;\n        let sum = array[0] + array[last_index];\n        if\
    \ sum % 2 == 0 {\n            array.sort_by(|a, b| b.cmp(a));\n        } else\
    \ {\n            array.sort_by(|a, b| a.cmp(b));\n        }\n    }\n    array",
  "    let mut array = array;\n    if array.len() == 0 {\n        return vec![];\n\
    \    }\n    if array.len() == 1 {\n        return array;\n    }\n    if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", " \
    \   let mut arr = array.clone();\n    if array.len() < 2 {\n        return arr;\n\
    \    }\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        arr.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        arr.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    arr", "    let mut a = array.clone();\n    let last_index = a.len() - 1;\n\
    \    let last_index_value = a[last_index];\n    let first_index_value = a[0];\n\
    \    if (first_index_value + last_index_value) % 2 == 0 {\n        a.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        a.sort_by(|a, b| a.cmp(b));\n    }\n  \
    \  a", "    if array.len() < 2 {\n        return array;\n    }\n    let head =\
    \ array[0];\n    let last = array[array.len() - 1];\n    let sum = head + last;\n\
    \    let mut array = array;\n    array.sort_by(|a, b| {\n        if sum % 2 ==\
    \ 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n\
    \    });\n    array", '    unimplemented!()', "    if array.len() <= 1 {\n   \
    \     return array;\n    }\n    // sort the array, order is determined by whether\
    \ the sum of first and last elements is odd or even\n    let order = array[0]\
    \ + array[array.len() - 1] % 2;\n    let mut new_array = array.clone();\n    if\
    \ order == 0 {\n        new_array.sort_by(|a, b| b.cmp(a));\n    } else {\n  \
    \      new_array.sort_by(|a, b| a.cmp(b));\n    }\n    return new_array;", " \
    \   let sum: isize = array.iter().sum();\n    let mut v = array.clone();\n   \
    \ if sum % 2 == 0 {\n        v.sort_by(|a, b| b.cmp(a));\n    } else {\n     \
    \   v.sort_by(|a, b| a.cmp(b));\n    }\n    v", '    array', "    let mut v =\
    \ array.clone();\n    let mid = v.len() / 2;\n    v.sort_by(|a, b| {\n       \
    \ if a + b + mid as isize & 1 == 0 {\n            b.cmp(a)\n        } else {\n\
    \            a.cmp(b)\n        }\n    });\n    v", "    let sorted_array = if\
    \ (array.first().unwrap() + array.last().unwrap()) % 2 == 0 {\n        array.clone().sort_by(|a,\
    \ b| b.cmp(a))\n    } else {\n        array.clone().sort_by(|a, b| a.cmp(b))\n\
    \    };\n    sorted_array", "    let sum = array.first().unwrap() + array.last().unwrap();\n\
    \    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    let sum: isize\
    \ = array.iter().take(2).sum();\n    match sum % 2 {\n        0 => array.clone().into_iter().rev().collect(),\n\
    \        _ => array.clone().into_iter().sorted().collect(),\n    }", "    let\
    \ sum = array.first().cloned().unwrap_or(0) + array.last().cloned().unwrap_or(0);\n\
    \    let mut temp_array = array.clone();\n    temp_array.sort();\n    if sum %\
    \ 2 == 0 {\n        temp_array.reverse();\n    }\n    temp_array", "    if array.len()\
    \ <= 1 {\n        return array;\n    }\n    let mut sorted_arr = array.clone();\n\
    \    sorted_arr.sort();\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n\
    \        sorted_arr.reverse();\n    }\n    sorted_arr", "    let mut temp_array\
    \ = array.clone();\n    let length = temp_array.len();\n    let sum = (array[0]\
    \ + array[length - 1]) % 2;\n    if sum == 0 {\n        temp_array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        temp_array.sort_by(|a, b| a.cmp(b));\n\
    \    }\n    temp_array", "    let mut s_array = array.clone();\n    let sum =\
    \ array[0] + array[array.len() - 1];\n    s_array.sort_by(|a, b| {\n        if\
    \ sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    });\n    s_array", "    let mut array = array;\n    if array.len()\
    \ > 1 {\n        let front = array.remove(0);\n        let back = array.pop().unwrap();\n\
    \        if (front + back) % 2 == 0 {\n            array.sort_by(|a, b| b.cmp(a));\n\
    \        } else {\n            array.sort_by(|a, b| a.cmp(b));\n        }\n  \
    \      vec![front, array, vec![back]].concat()\n    } else {\n        array\n\
    \    }", "    if array.len() <= 1 {\n        return array;\n    }\n    let is_odd\
    \ = (array[0] + array[array.len() - 1]) % 2 == 1;\n    let mut new_array = array.clone();\n\
    \    let mut sorted_vector: Vec<&isize> = new_array.iter().collect();\n    if\
    \ is_odd {\n        sorted_vector.sort_by(|a, b| a.cmp(b));\n    } else {\n  \
    \      sorted_vector.sort_by(|a, b| b.cmp(a));\n    }\n    sorted_vector.iter().map(|i|\
    \ **i).collect()", "    //if array.len() < 2 { return array }\n    let mut arr:\
    \ Vec<isize> = array.clone();\n    if array.len() > 1 {\n        let mut left:\
    \ Vec<isize> = vec![];\n        let mut right: Vec<isize> = vec![];\n        let\
    \ mut pivot: isize = array[0];\n        for i in 1..array.len() {\n          \
    \  if array[i] < pivot {\n                left.push(array[i]);\n            }\
    \ else {\n                right.push(array[i]);\n            }\n        }\n  \
    \      let (mut left_v, mut right_v) = (sort_array(left), sort_array(right));\n\
    \        if ((left_v.len() + right_v.len()) & 1) == 0 {\n            left_v.reverse();\n\
    \            right_v.reverse();\n        }\n        arr.clear();\n        arr.append(&mut\
    \ left_v);\n        arr.push(pivot);\n        arr.append(&mut right_v);\n    }\n\
    \    arr", "    let mut result = array.clone();\n    let mut sorted = false;\n\
    \    let step = (result.len() - 1) as isize;\n    let mut start = 0;\n    let\
    \ mut end = result.len() - 1;\n    let is_odd = step % 2 == 1;\n    while !sorted\
    \ {\n        sorted = true;\n        for i in start..end {\n            let is_odd_pair\
    \ = ((i as isize) + step) % 2 == 1;\n            if (is_odd && result[i] > result[i\
    \ + 1]) || (!is_odd && is_odd_pair && result[i] < result[i + 1]) {\n         \
    \       sorted = false;\n                result.swap(i, i + 1);\n            }\n\
    \        }\n        end -= 1;\n        for i in (start..end).rev() {\n       \
    \     let is_odd_pair = ((i as isize) + step) % 2 == 1;\n            if (is_odd\
    \ && result[i] < result[i + 1]) || (!is_odd && is_odd_pair && result[i] > result[i\
    \ + 1]) {\n                sorted = false;\n                result.swap(i, i +\
    \ 1);\n            }\n        }\n        start += 1;\n    }\n    result", "  \
    \  //\n\n    let mut sort_desc = false;\n    if let Some(head) = array.first()\
    \ {\n        if let Some(tail) = array.last() {\n            if (head + tail)\
    \ % 2 == 0 {\n                sort_desc = true;\n            }\n        }\n  \
    \  }\n\n    if sort_desc {\n        array.clone().into_iter().rev().collect()\n\
    \    } else {\n        array\n    }", "    if array.len() < 2 {\n        return\
    \ array;\n    }\n    let mut array = array;\n    match (array[0], array[array.len()\
    \ - 1]) {\n        (0, 0) => return array,\n        (x, y) => match (x + y) %\
    \ 2 {\n            0 => array.sort_by(|a, b| b.cmp(a)),\n            _ => array.sort_by(|a,\
    \ b| a.cmp(b)),\n        },\n    }\n    array", "    let (mut odd, mut even) =\
    \ array.iter().partition(|i| i % 2 == 1);\n    odd.sort();\n    even.sort_by(|a,\
    \ b| b.cmp(a));\n    odd.iter().chain(even.iter()).cloned().collect()", "    if\
    \ array.len() == 0 {\n        return array;\n    }\n    let mut ret = array.clone();\n\
    \    let (mut i, mut j) = (0, ret.len() - 1);\n    while i < j {\n        if (ret[i]\
    \ % 2 == 0) && (ret[j] % 2 == 1) {\n            ret.swap(i, j);\n            i\
    \ += 1;\n            j -= 1;\n        } else if ret[i] % 2 == 1 {\n          \
    \  i += 1;\n        } else if ret[j] % 2 == 0 {\n            j -= 1;\n       \
    \ } else {\n            i += 1;\n            j -= 1;\n        }\n    }\n    if\
    \ ret.len() % 2 == 1 {\n        ret.sort();\n    } else {\n        ret.sort_by(|a,\
    \ b| b.cmp(a));\n    }\n    ret", "    if array.len() == 0 {\n        return array;\n\
    \    }\n    let mut result = array.clone();\n    let first = result[0];\n    let\
    \ last = result[result.len() - 1];\n    let mut sorted = if (first + last) % 2\
    \ == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n        true\n    } else {\n\
    \        result.sort_by(|a, b| a.cmp(b));\n        false\n    };\n    for idx\
    \ in 1..result.len() - 1 {\n        if sorted {\n            result[idx] = array[array.len()\
    \ - idx - 1];\n        } else {\n            result[idx] = array[idx];\n     \
    \   }\n    }\n    result", '    unimplemented!();', "    // TODO\n    unimplemented!()",
  '    array', "    if array.len() == 0 {\n        return vec![];\n    }\n\n    let\
    \ sum: isize = array[0] + array[array.len() - 1];\n    if sum % 2 == 0 {\n   \
    \     array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n\n    array", "    let n = array.len();\n    if n < 2\
    \ {\n        return array;\n    }\n    let mut v = array.clone();\n    //if sum\
    \ of first and last element is odd, sort it ascending, otherwise, descending\n\
    \    let ord = if v[0] + v[n - 1] % 2 == 0 {\n        Ordering::Less\n    } else\
    \ {\n        Ordering::Greater\n    };\n    v.sort_by(|a, b| a.cmp(b).reverse().then(b.cmp(a)));\n\
    \    v", "    let mut result = array.clone();\n    let index = array.len() - 1;\n\
    \    let fst = array[0];\n    let lst = array[index];\n    let sum = fst + lst;\n\
    \    match sum % 2 {\n        0 => result.sort_by(|a, b| b.cmp(a)),\n        _\
    \ => result.sort_by(|a, b| a.cmp(b)),\n    }\n    result", "    let mut vec =\
    \ array.clone();\n    vec.sort();\n    vec", "    if array.len() == 0 {\n    \
    \    return vec![];\n    }\n\n    let mut new_array = array.clone();\n    if array[0]\
    \ + array[array.len() - 1] % 2 == 0 {\n        new_array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        new_array.sort_by(|a, b| a.cmp(b));\n    }\n\n    new_array",
  "    let (mut v1, mut v2) = array.iter().partition(|x| x % 2 == 0);\n    v1.sort();\n\
    \    v2.sort();\n    v2.reverse();\n    let mut v3 = v1.iter().cloned().chain(v2.iter().cloned()).collect::<Vec<isize>>();\n\
    \    if array.len() == 0 || array.len() == 1 {\n        v3\n    } else {\n   \
    \     let (mut v3, mut v4) = v3.iter().partition(|x| x % 2 == 0);\n        v3.sort();\n\
    \        v4.sort();\n        v4.reverse();\n        v3.iter().cloned().chain(v4.iter().cloned()).collect::<Vec<isize>>()\n\
    \    }", "    // Calculate the sum of the first and last elements of the array\n\
    \    let sum: isize = array.first().unwrap() + array.last().unwrap();\n    let\
    \ mut new_array = array.clone();\n    // If the sum is even, sort in reverse\n\
    \    if sum % 2 == 0 {\n        new_array.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        // Else, sort normally\n        new_array.sort();\n    }\n    new_array",
  "    let sum: isize = array.iter().fold(0, |acc, &x| acc + x);\n    let mut tmp\
    \ = array.clone();\n    if sum % 2 == 0 {\n        tmp.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        tmp.sort_by(|a, b| a.cmp(b));\n    }\n    tmp", "    //\
    \ 1. Get the original array\n    // 2. Get the sum of the first and last value\
    \ of the array\n    // 3. If the sum is even, sort the array in descending order\n\
    \    // 4. If the sum is odd, sort the array in ascending order\n    // 5. Return\
    \ the sorted array\n    let mut copy = array.clone();\n    if array.is_empty()\
    \ {\n        copy\n    } else {\n        let (first, last) = (array[0], array[array.len()\
    \ - 1]);\n        if (first + last) % 2 == 0 {\n            copy.sort_by(|a, b|\
    \ b.cmp(a));\n        } else {\n            copy.sort_by(|a, b| a.cmp(b));\n \
    \       }\n        copy\n    }", "    if array.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut array = array;\n    let s = array[0] + array[array.len() -\
    \ 1];\n    if s % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    let mut\
    \ result = array.clone();\n    let result_len = result.len();\n    if result_len\
    \ == 0 {\n        return result;\n    }\n    if result_len == 1 {\n        return\
    \ result;\n    }\n    if (result[0] + result[result_len - 1]) % 2 == 0 {\n   \
    \     result.sort_by(|a, b| b.cmp(a));\n    } else {\n        result.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    result", "    let mut sorted_array = array.clone();\n\
    \    sorted_array.sort();\n    let last_index = sorted_array.len() - 1;\n    let\
    \ (first_value, last_value) =\n        (sorted_array[0], sorted_array[last_index]);\n\
    \    let sum = first_value + last_value;\n    if sum % 2 == 0 {\n        sorted_array.reverse();\n\
    \    }\n    sorted_array", "    let mut v = array.clone();\n    v.sort();\n  \
    \  if array.len() > 0 && (array[0] + array[array.len() - 1]) % 2 == 0 {\n    \
    \    v.reverse();\n    }\n    v", "    if array.len() < 2 {\n        return array;\n\
    \    }\n    let (mut lo, mut hi) = (0, array.len() - 1);\n    let sorted_array\
    \ = sort_array_inner(array, lo, hi);\n    if (sorted_array[lo] + sorted_array[hi])\
    \ % 2 == 0 {\n        sorted_array.reverse();\n    }\n    sorted_array", "   \
    \ let mut a: Vec<isize> = array.clone();\n    if a.len() > 0 {\n        if a[0]\
    \ % 2 == 0 {\n            a.sort();\n        } else {\n            a.sort_by(|a,\
    \ b| b.cmp(a));\n        }\n    }\n    a", "    let mut ret = array.clone();\n\
    \    let sum = ret[0] + ret[ret.len() - 1];\n    if sum % 2 == 0 {\n        ret.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        ret.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    ret", "    let mut result = array.clone();\n    let first = array[0];\n \
    \   let last = array[array.len() - 1];\n    if (first + last) % 2 == 0 {\n   \
    \     result.sort_by(|a, b| b.cmp(a));\n    } else {\n        result.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    result", "    let mut result = array.clone();\n  \
    \  if result.len() == 0 {\n        return result;\n    }\n    if result.len()\
    \ == 1 {\n        return result;\n    }\n    let mut start = 0;\n    let mut end\
    \ = result.len() - 1;\n    while start <= end {\n        let sum = result[start]\
    \ + result[end];\n        if sum % 2 == 0 {\n            result.swap(start, end);\n\
    \        }\n        start += 1;\n        end -= 1;\n    }\n    result", "    let\
    \ mut array = array;\n    array.sort_by(|a, b| {\n        if a.is_even() && b.is_even()\
    \ {\n            if a > b {\n                Ordering::Less\n            } else\
    \ {\n                Ordering::Greater\n            }\n        } else if a.is_odd()\
    \ && b.is_odd() {\n            if a > b {\n                Ordering::Greater\n\
    \            } else {\n                Ordering::Less\n            }\n       \
    \ } else if a.is_even() && b.is_odd() {\n            Ordering::Less\n        }\
    \ else {\n            Ordering::Greater\n        }\n    });\n    array", "   \
    \ let mut result = array.clone();\n    let index = array.len() - 1;\n    let sum\
    \ = array[0] + array[index];\n    if sum % 2 == 0 {\n        result.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    result", "    let mut odd_vec = Vec::new();\n    let mut even_vec = Vec::new();\n\
    \    let mut sort_array = array.clone();\n    if array.len() > 0 {\n        if\
    \ array[0] + array[array.len() - 1] % 2 == 0 {\n            sort_array.sort_by(|a,\
    \ b| b.cmp(a));\n        } else {\n            sort_array.sort_by(|a, b| a.cmp(b));\n\
    \        }\n    }\n    //pick all odd numbers and sort\n    for i in 0..array.len()\
    \ {\n        if array[i] % 2 != 0 {\n            odd_vec.push(array[i]);\n   \
    \     }\n    }\n    odd_vec.sort_by(|a, b| a.cmp(b));\n    //pick all even numbers\
    \ and sort\n    for i in 0..array.len() {\n        if array[i] % 2 == 0 {\n  \
    \          even_vec.push(array[i]);\n        }\n    }\n    even_vec.sort_by(|a,\
    \ b| b.cmp(a));\n    //merge odd and even numbers\n    let mut cnt = 0;\n    for\
    \ i in 0..sort_array.len() {\n        if sort_array[i] % 2 != 0 {\n          \
    \  sort_array[i] = odd_vec[cnt];\n            cnt += 1;\n        }\n    }\n  \
    \  cnt = 0;\n    for i in 0..sort_array.len() {\n        if sort_array[i] % 2\
    \ == 0 {\n            sort_array[i] = even_vec[cnt];\n            cnt += 1;\n\
    \        }\n    }\n    sort_array", "    // return array.sort_by(|a, b| b.cmp(a));\n\
    \    // return array.sort_by(|a, b| a.cmp(b));\n    let sum: isize = array.iter().sum();\n\
    \    if sum % 2 == 0 {\n        return array.sort_by(|a, b| b.cmp(a));\n    }\
    \ else {\n        return array.sort_by(|a, b| a.cmp(b));\n    }", "    let mut\
    \ arr = array.clone();\n    if arr.len() < 2 {\n        return arr;\n    }\n \
    \   let is_odd = |x: usize| {\n        let mut x = x;\n        while x > 0 {\n\
    \            x -= 2;\n        }\n        x == 0\n    };\n    let left = 0;\n \
    \   let right = arr.len() - 1;\n    if is_odd(arr[left] + arr[right]) {\n    \
    \    arr.sort();\n    } else {\n        arr.sort_by(|a, b| b.cmp(a));\n    }\n\
    \    arr", "    let len = array.len();\n    let mut new_array = array.clone();\n\
    \    if (len == 0) || (len == 1) {\n        return new_array;\n    }\n\n    let\
    \ sum = new_array[0] + new_array[len - 1];\n    if sum % 2 == 0 {\n        new_array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        new_array.sort_by(|a, b| a.cmp(b));\n \
    \   }\n    new_array", "    if array.len() == 0 {\n        return array;\n   \
    \ }\n    let mut array = array;\n    if (array[0] + array[array.len() - 1]) %\
    \ 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    if array.len() < 2 {\n        return\
    \ array;\n    }\n    let mut arr = array.clone();\n    let sum = arr[0] + arr[arr.len()\
    \ - 1];\n    if sum % 2 == 0 {\n        arr.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        arr.sort_by(|a, b| a.cmp(b));\n    }\n    arr", "    match array.len()\
    \ {\n        0 => vec![],\n        1 => vec![array[0]],\n        len => sort(array,\
    \ 0, len - 1),\n    }", "    if array.len() <= 1 {\n        return array;\n  \
    \  }\n    let odd_or_even = if array[0] + array[array.len() - 1] % 2 == 0 {\n\
    \        SortOrder::Descending\n    } else {\n        SortOrder::Ascending\n \
    \   };\n    let mut vec: Vec<_> = array.iter().cloned().collect();\n    vec.sort_by(|a,\
    \ b| a.cmp(b).reverse());\n    vec", "    if array.len() == 0 {\n        return\
    \ array;\n    }\n\n    let mut array = array;\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n  \
    \      array.sort_by(|a, b| a.cmp(b));\n    }\n\n    array", "    if array.len()\
    \ < 2 {\n        return array;\n    }\n    let mut array = array;\n    let is_even\
    \ = array[0] + array[array.len() - 1] % 2 == 0;\n    array.sort_by(|a, b| if is_even\
    \ { b.cmp(a) } else { a.cmp(b) });\n    array", "    let mut result = array.clone();\n\
    \    let len = result.len();\n    let (mut first, mut last) = (0, len - 1);\n\
    \    let even = (array[0] + array[len - 1]) % 2 == 0;\n    result.sort_by(|a,\
    \ b| {\n        let a = *a;\n        let b = *b;\n        if even {\n        \
    \    if a % 2 == 0 && b % 2 == 0 {\n                b.cmp(&a)\n            } else\
    \ if a % 2 == 0 {\n                b.cmp(&a)\n            } else if b % 2 == 0\
    \ {\n                a.cmp(&b)\n            } else {\n                a.cmp(&b)\n\
    \            }\n        } else {\n            if a % 2 == 0 && b % 2 == 0 {\n\
    \                a.cmp(&b)\n            } else if a % 2 == 0 {\n             \
    \   a.cmp(&b)\n            } else if b % 2 == 0 {\n                b.cmp(&a)\n\
    \            } else {\n                b.cmp(&a)\n            }\n        }\n \
    \   });\n    while first < last {\n        if even {\n            result.swap(first,\
    \ last);\n        }\n        first += 1;\n        last -= 1;\n    }\n    result",
  "    if array.len() == 0 {\n        return array;\n    }\n    if array.len() ==\
    \ 1 {\n        return array;\n    }\n    let mut a = array.clone();\n    let mut\
    \ i = 0;\n    let l = a.len();\n    while i < l {\n        let mut j = i + 1;\n\
    \        while j < l {\n            if sum_index_value(&a, i, j) % 2 == 0 {\n\
    \                a.swap(i, j);\n            }\n            j += 1;\n        }\n\
    \        i += 1;\n    }\n    a", "    let mut array = array;\n    if array.len()\
    \ > 1 {\n        if array[0] + array[array.len() - 1] % 2 == 0 {\n           \
    \ array.sort_by(|a, b| b.cmp(a));\n        } else {\n            array.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    array", '    array', "    let mut array\
    \ = array;\n    let mut is_odd = true;\n    if !array.is_empty() {\n        is_odd\
    \ = (array[0] + array[array.len() - 1]) % 2 == 1;\n    }\n    if is_odd {\n  \
    \      array.sort();\n    } else {\n        array.sort_by(|a, b| b.cmp(a));\n\
    \    }\n    array", "    if array.len() == 0 {\n        return array;\n    }\n\
    \    let sum: isize = array[0] + array[array.len() - 1];\n    if sum % 2 == 0\
    \ {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let l = array.len();\n    if l == 0 {\n\
    \        return vec![];\n    }\n    if l == 1 {\n        return array;\n    }\n\
    \    if (array[0] + array[l - 1]) % 2 == 0 {\n        let mut tmp = array.clone();\n\
    \        tmp.sort();\n        tmp.reverse();\n        return tmp;\n    } else\
    \ {\n        let mut tmp = array.clone();\n        tmp.sort();\n        return\
    \ tmp;\n    }", "    let mut v = array.clone();\n    let first = v[0];\n    let\
    \ last = v[v.len() - 1];\n    let sum = first + last;\n    v.sort_by(|a, b| {\n\
    \        if sum % 2 == 0 {\n            a.cmp(b)\n        } else {\n         \
    \   b.cmp(a)\n        }\n    });\n    v", "    let mut vec = array.clone();\n\
    \    if vec.len() <= 1 {\n        return vec;\n    }\n    let sum = vec[0] + vec[vec.len()\
    \ - 1];\n    if sum % 2 == 0 {\n        vec.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        vec.sort_by(|a, b| a.cmp(b));\n    }\n    vec", "    let n = array.len();\n\
    \    let mut result = array.clone();\n    let sum = array[0] + array[n - 1];\n\
    \    if sum % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        result.sort_by(|a, b| a.cmp(b));\n    }\n    result", "    let mut output:\
    \ Vec<isize> = array.clone();\n    if array.len() > 1 {\n        if array[0] +\
    \ array[array.len() - 1] % 2 == 0 {\n            output.sort_by(|a, b| b.cmp(a));\n\
    \        } else {\n            output.sort_by(|a, b| a.cmp(b));\n        }\n \
    \   }\n    output", "    match array.len() {\n        0 => vec![],\n        1\
    \ => vec![array[0]],\n        _ => {\n            if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n                let mut array = array;\n                array.sort_by(|a,\
    \ b| b.cmp(a));\n                array\n            } else {\n               \
    \ let mut array = array;\n                array.sort_by(|a, b| a.cmp(b));\n  \
    \              array\n            }\n        }\n    }", "    if array.len() ==\
    \ 0 {\n        return array;\n    }\n    let mut array_cp = array.clone();\n \
    \   if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        array_cp.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array_cp.sort_by(|a, b| a.cmp(b));\n  \
    \  }\n    array_cp", "    // TODO implement\n    let mut result: Vec<isize> =\
    \ Vec::new();\n    for i in array {\n        result.push(i);\n    }\n    if array.is_empty()\
    \ {\n        return result;\n    } else if array.len() == 1 {\n        return\
    \ result;\n    } else if array.len() == 2 {\n        if array[0] > array[1] {\n\
    \            result.swap(0, 1);\n        }\n        return result;\n    } else\
    \ {\n        if array[0] + array[array.len() - 1] % 2 == 0 {\n            result.sort();\n\
    \            result.reverse();\n        } else {\n            result.sort();\n\
    \        }\n        return result;\n    }", "    let mut array = array;\n    match\
    \ (&array[0], &array[array.len() - 1]) {\n        (a, b) if a + b % 2 == 0 =>\
    \ array.sort(),\n        _ => array.sort_by(|a, b| b.cmp(a)),\n    };\n    array",
  "    // your code here\n    unimplemented!()", "    let mut arr = array.clone();\n\
    \    let n = arr.len();\n    let m = n / 2;\n    let sum = arr[0] + arr[n - 1];\n\
    \    if sum % 2 == 0 {\n        for i in 0..m {\n            arr.swap(i, n - i\
    \ - 1);\n        }\n    }\n    arr.sort();\n    arr", "    let (start, end) =\
    \ (array[0], array[array.len() - 1]);\n    let sum = start + end;\n    let mut\
    \ result = array.clone();\n    result.sort_by(|a, b| if sum % 2 == 0 { b.cmp(a)\
    \ } else { a.cmp(b) });\n    result", "    let mut new_array = Vec::with_capacity(array.len());\n\
    \    let mut even = Vec::new();\n    let mut odd = Vec::new();\n    for i in array\
    \ {\n        if i % 2 == 0 {\n            even.push(i);\n        } else {\n  \
    \          odd.push(i);\n        }\n    }\n    even.sort();\n    odd.sort();\n\
    \    odd.reverse();\n    new_array.append(&mut even);\n    new_array.append(&mut\
    \ odd);\n    new_array", "    let mut sorted = array.clone();\n    if array.len()\
    \ > 0 {\n        if ((array[0] + array[array.len() - 1]) % 2) == 0 {\n       \
    \     sorted.sort_by(|a, b| b.cmp(a));\n        } else {\n            sorted.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    sorted", "    let mut res = array.clone();\n\
    \    if res.len() > 1 {\n        if (res[0] + res[res.len() - 1]) % 2 == 0 {\n\
    \            res.sort_by(|a, b| b.cmp(a));\n        } else {\n            res.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    res", "    let mut v = array.clone();\n\
    \    let mut l = 0;\n    let mut r = v.len() - 1;\n    loop {\n        while l\
    \ < r && (v[l] + v[r]) % 2 == 0 {\n            l += 1;\n        }\n        while\
    \ l < r && (v[l] + v[r]) % 2 == 1 {\n            r -= 1;\n        }\n        if\
    \ l < r {\n            v.swap(l, r);\n        } else {\n            break;\n \
    \       }\n    }\n    for i in 0..v.len() {\n        for j in i + 1..v.len() {\n\
    \            if (v[i] + v[j]) % 2 == 0 && v[i] > v[j] {\n                v.swap(i,\
    \ j);\n            }\n            if (v[i] + v[j]) % 2 == 1 && v[i] < v[j] {\n\
    \                v.swap(i, j);\n            }\n        }\n    }\n    v", "   \
    \ let mut result = array.clone();\n    if result.len() > 0 {\n        if result.len()\
    \ % 2 == 0 {\n            result.sort_by(|a, b| b.cmp(a));\n        } else {\n\
    \            result.sort_by(|a, b| a.cmp(b));\n        }\n    }\n    result",
  "    let mut new_array = array.clone();\n    new_array.sort();\n    new_array",
  "    let mut result = array.clone();\n    let sum = result[0] + result[result.len()\
    \ - 1];\n    if sum % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n   \
    \ } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n    result", "  \
    \  let mut new_array = array.clone();\n    // new_array.sort();\n    match new_array.is_empty()\
    \ {\n        true => new_array,\n        false => {\n            match (new_array[0]\
    \ + new_array[new_array.len() - 1]) % 2 {\n                0 => new_array.sort_by(|a,\
    \ b| b.cmp(a)),\n                _ => new_array.sort_by(|a, b| a.cmp(b)),\n  \
    \          }\n            new_array\n        }\n    }", "    let mut ret = array.clone();\n\
    \    let len = ret.len();\n    if len < 2 {\n        return ret;\n    }\n    if\
    \ len % 2 == 0 {\n        ret.sort_by(|a, b| b.cmp(a));\n    } else {\n      \
    \  ret.sort_by(|a, b| a.cmp(b));\n    }\n    ret", "    if array.len() == 0 {\n\
    \        return array;\n    }\n    if array.len() % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    let mut array = array;\n    if array.len() == 0 {\n        return\
    \ array;\n    }\n    if array.len() == 1 {\n        return array;\n    }\n   \
    \ let mut even_odd_sort = false;\n    if array[0] + array[array.len() - 1] % 2\
    \ == 0 {\n        even_odd_sort = true;\n    }\n    array.sort();\n    if even_odd_sort\
    \ {\n        array.reverse();\n    }\n    array", "    let len = array.len();\n\
    \    let mut v: Vec<isize> = array.clone();\n    for i in 0..len {\n        if\
    \ (i + len) % 2 == 0 {\n            v[i] = array[len - i - 1];\n        }\n  \
    \  }\n    v.sort();\n    v", "    // TODO\n    let mut new_arr = array.clone();\n\
    \    let last_elem = new_arr.len()-1;\n    let mut is_odd = false;\n    if new_arr.len()\
    \ > 0 {\n        if (new_arr[0] + new_arr[last_elem]) % 2 != 0 {\n           \
    \ is_odd = true;\n        }\n    }\n\n    if is_odd {\n        new_arr.sort();\n\
    \    } else {\n        new_arr.sort_by(|a, b| b.cmp(a));\n    }\n\n    new_arr",
  "    let mut array = array;\n    if array.len() > 1 {\n        let mut i = 0;\n\
    \        let mut j = array.len() - 1;\n        while i <= j {\n            if\
    \ (i + j) % 2 == 0 {\n                if array[i] < array[j] {\n             \
    \       let temp = array[i];\n                    array[i] = array[j];\n     \
    \               array[j] = temp;\n                }\n            } else {\n  \
    \              if array[i] > array[j] {\n                    let temp = array[i];\n\
    \                    array[i] = array[j];\n                    array[j] = temp;\n\
    \                }\n            }\n            i += 1;\n            j -= 1;\n\
    \        }\n    }\n    array", "    let sum = array.first().unwrap() + array.last().unwrap();\n\
    \    let mut array = array;\n    if sum % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort();\n    }\n    array", "   \
    \ let array_size = array.len();\n    let mut v: Vec<isize> = array.to_vec();\n\
    \    if array_size == 0 {\n        return v;\n    }\n    let sum_of_indices =\
    \ (array_size - 1) as isize + 0;\n    let mut sorted_array: Vec<isize> = Vec::new();\n\
    \    if sum_of_indices % 2 == 0 {\n        sorted_array = v.drain(..).rev().collect();\n\
    \    } else {\n        sorted_array = v.drain(..).collect();\n    }\n    sorted_array",
  "    if array.len() == 0 {\n        return vec![];\n    }\n    let mut tmp = array.clone();\n\
    \    let mut sum: isize = 0;\n    for num in &tmp {\n        sum += num;\n   \
    \ }\n    if sum % 2 == 0 {\n        tmp.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        tmp.sort_by(|a, b| a.cmp(b));\n    }\n    tmp", "    let mut vec\
    \ = array.clone();\n    if vec.len() > 0 {\n        let first = vec[0];\n    \
    \    let last = vec[vec.len() - 1];\n        if (first + last) % 2 == 0 {\n  \
    \          vec.sort_by(|a, b| b.cmp(a));\n        } else {\n            vec.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    vec", "    // unimplemented!();\n    let\
    \ mut tmp = Vec::new();\n    let mut result = Vec::new();\n    let mut tmp_result\
    \ = Vec::new();\n    let mut tmp_result_reverse = Vec::new();\n    for i in 0..array.len()\
    \ {\n        tmp.push(array[i]);\n    }\n    tmp.sort();\n    if tmp.len() ==\
    \ 0 {\n        return tmp;\n    }\n    if (tmp[0] + tmp[tmp.len() - 1]) % 2 ==\
    \ 0 {\n        tmp_result.push(tmp[tmp.len() - 1]);\n        for i in 0..tmp.len()\
    \ - 1 {\n            tmp_result.push(tmp[i]);\n        }\n        for i in 0..tmp_result.len()\
    \ {\n            tmp_result_reverse.push(tmp_result[tmp_result.len() - 1 - i]);\n\
    \        }\n        return tmp_result_reverse;\n    } else {\n        return tmp;\n\
    \    }", "    let mut array = array;\n    if array.len() > 1 {\n        let mut\
    \ index = 0;\n        while index < array.len() {\n            let next_index\
    \ = (index + 1) % array.len();\n            if (array[index] % 2 == 0 && array[next_index]\
    \ % 2 == 1)\n                || (array[index] % 2 == 1 && array[next_index] %\
    \ 2 == 0)\n            {\n                array.swap(index, next_index);\n   \
    \         }\n            index += 1;\n        }\n        array.sort();\n     \
    \   if array[0] % 2 == 0 {\n            array.reverse();\n        }\n    }\n \
    \   array", "    if array.len() == 0 {\n        return array;\n    }\n    let\
    \ mut sorted = array.clone();\n    sorted.sort();\n    if array[0] + array[array.len()\
    \ - 1] % 2 == 0 {\n        sorted.reverse();\n    }\n    sorted", "    // sort\
    \ all odd numbers in descending order, then even numbers in ascending order\n\
    \    let mut odds: Vec<isize> = array.iter().filter(|x| x % 2 == 1).cloned().collect();\n\
    \    let mut evens: Vec<isize> = array.iter().filter(|x| x % 2 == 0).cloned().collect();\n\
    \    odds.sort_by(|a, b| b.cmp(a));\n    evens.sort_by(|a, b| a.cmp(b));\n   \
    \ odds.append(&mut evens);\n    odds", "    let mut res = array.clone();\n   \
    \ let mut flag = false;\n    res.sort_by(|a, b| a.cmp(b));\n    if (res[0] + res[res.len()\
    \ - 1]) % 2 == 0 {\n        flag = true;\n    }\n    if flag {\n        res.reverse();\n\
    \    }\n    res", "    let mut array = array;\n    array.sort_by(|a, b| {\n  \
    \      let sum = a + b;\n        if sum % 2 == 0 {\n            b.cmp(a)\n   \
    \     } else {\n            a.cmp(b)\n        }\n    });\n    array", "    if\
    \ array.len() <= 1 {\n        return array;\n    }\n    let mut ar = array.clone();\n\
    \    ar.sort();\n    if (ar[0] + ar[ar.len() - 1]) % 2 == 0 {\n        ar.reverse();\n\
    \    }\n    ar", "    let mut result = array.clone();\n    result.sort();\n  \
    \  let (first, last) = (result[0], result[result.len() - 1]);\n    if (first +\
    \ last) % 2 == 0 {\n        result.reverse();\n    }\n    result", "    let mut\
    \ copy = array.clone();\n    copy.sort();\n    if array.len() > 0 && (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n        copy.reverse();\n    }\n    copy",
  "    if array.len() == 0 {\n        return vec![];\n    }\n    let mut out = array.clone();\n\
    \    if array[0] % 2 == 0 {\n        out.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        out.sort_by(|a, b| a.cmp(b));\n    }\n    out", "    let mut v =\
    \ array.clone();\n    if v.len() <= 1 {\n        return v;\n    }\n    let mut\
    \ left: usize = 0;\n    let mut right: usize = v.len() - 1;\n    let sum = v[left]\
    \ + v[right];\n    let _ascending = sum % 2 == 0;\n    while left < right {\n\
    \        if _ascending {\n            if v[left] < v[right] {\n              \
    \  let tmp = v[left];\n                v[left] = v[right];\n                v[right]\
    \ = tmp;\n            }\n        } else {\n            if v[left] > v[right] {\n\
    \                let tmp = v[left];\n                v[left] = v[right];\n   \
    \             v[right] = tmp;\n            }\n        }\n        left += 1;\n\
    \        right -= 1;\n    }\n    return v;", "    let mut sum = array.iter().fold(0,\
    \ |acc, x| acc + x);\n    let mut array = array;\n    let r = array.len() - 1;\n\
    \    let (mut l, mut i) = (0, 0);\n    while i < r {\n        if sum % 2 == 0\
    \ {\n            if array[l] < array[r] {\n                i += 1;\n         \
    \   } else {\n                array.swap(l, r);\n                l += 1;\n   \
    \             r -= 1;\n            }\n        } else {\n            if array[l]\
    \ > array[r] {\n                i += 1;\n            } else {\n              \
    \  array.swap(l, r);\n                l += 1;\n                r -= 1;\n     \
    \       }\n        }\n    }\n    array", "    let mut result = array.clone();\n\
    \    if result.len() > 0 {\n        let (mut front, mut end) = (0, result.len()\
    \ - 1);\n        loop {\n            if front == end {\n                break;\n\
    \            }\n            if (result[front] + result[end]) % 2 == 0 {\n    \
    \            let val = result[front];\n                result[front] = result[end];\n\
    \                result[end] = val;\n            }\n            front += 1;\n\
    \            end -= 1;\n        }\n        result.sort();\n    }\n    result",
  "    // TODO\n    let mut array = array;\n    let mut first_index = 0;\n    let\
    \ mut last_index = array.len() - 1;\n    while first_index < last_index {\n  \
    \      if (array[first_index] + array[last_index]) % 2 == 0 {\n            array.swap(first_index,\
    \ last_index);\n        }\n        first_index += 1;\n        last_index -= 1;\n\
    \    }\n    array", "    fn sort_array_asc(array: &mut Vec<isize>) {\n       \
    \ let l = array.len();\n        for i in 0..l {\n            for j in (i + 1)..l\
    \ {\n                if array[i] > array[j] {\n                    array.swap(i,\
    \ j);\n                }\n            }\n        }\n    }\n\n    fn sort_array_dsc(array:\
    \ &mut Vec<isize>) {\n        let l = array.len();\n        for i in 0..l {\n\
    \            for j in (i + 1)..l {\n                if array[i] < array[j] {\n\
    \                    array.swap(i, j);\n                }\n            }\n   \
    \     }\n    }\n\n    let mut array = array;\n    let l = array.len();\n    if\
    \ l % 2 == 0 {\n        sort_array_asc(&mut array);\n    } else {\n        sort_array_dsc(&mut\
    \ array);\n    }\n    array", "    let mut array = array;\n    if array.len()\
    \ > 1 {\n        if array[0] + array[array.len() - 1] % 2 == 0 {\n           \
    \ array.sort_by(|a, b| b.cmp(a));\n        } else {\n            array.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    array", "    let mut arr = array.clone();\n\
    \    let mid = arr.len() / 2;\n    let shift = (arr[0] + arr[arr.len() - 1]) %\
    \ 2;\n    match shift {\n        0 => arr.sort_by(|a, b| b.cmp(a)),\n        _\
    \ => arr.sort_by(|a, b| a.cmp(b)),\n    }\n    arr", "    let mut result = array.clone();\n\
    \    if array.len() > 0 {\n        let first = array[0];\n        let last = array[array.len()\
    \ - 1];\n        let sum = first + last;\n        if sum % 2 == 0 {\n        \
    \    result.sort_by(|a, b| b.cmp(a));\n        } else {\n            result.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    result", "    if array.len() == 0 {\n \
    \       return array;\n    }\n    let mut array = array;\n    let sort_fn = if\
    \ array[0] + array[array.len() - 1] % 2 == 0 {\n        |lhs: &isize, rhs: &isize|\
    \ rhs.cmp(lhs)\n    } else {\n        |lhs: &isize, rhs: &isize| lhs.cmp(rhs)\n\
    \    };\n    array.sort_by(sort_fn);\n    array", "    // TODO: implement me\n\
    \    panic!(\"unimplemented!\");", "    if array.len() <= 1 {\n        return\
    \ array;\n    }\n    let mut vector = array.clone();\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        vector.sort_by(|a, b| b.cmp(a));\n    } else {\n \
    \       vector.sort_by(|a, b| a.cmp(b));\n    }\n    vector", "    if array.len()\
    \ == 0 {\n        return vec![];\n    }\n\n    let mut sorted_array = array.clone();\n\
    \    sorted_array.sort();\n\n    if array[0] + array[array.len() - 1] % 2 == 0\
    \ {\n        sorted_array.reverse();\n    }\n\n    sorted_array"]
stop_tokens:
- "\n}"
