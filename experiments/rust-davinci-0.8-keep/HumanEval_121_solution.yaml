name: HumanEval_121_solution
language: rust
prompt: "/// Given a non-empty list of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
  \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321]) ==>0\n\
  fn solution(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
  \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
  \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
  \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
  \ 13, 2, 9]), 3);\n}\n"
completions: ["    let mut even = false;\n    let mut sum = 0;\n    for num in lst\
    \ {\n        if even {\n            sum += num;\n        }\n        even = !even;\n\
    \    }\n    sum", "    // TODO\n    let mut i = 0;\n    let mut res = 0;\n   \
    \ for elem in lst {\n        if i % 2 == 0 && elem % 2 != 0 {\n            res\
    \ += elem;\n        }\n        i += 1;\n    }\n    res", "    lst.iter().enumerate().fold(0,\
    \ |acc, (idx, &x)| {\n        if idx % 2 == 0 && x % 2 != 0 {\n            acc\
    \ + x\n        } else {\n            acc\n        }\n    })", "    // Sum the\
    \ elements of the even positions that have an odd value\n    lst.iter().enumerate().fold(0,\
    \ |acc, x| if x.0 % 2 == 0 && x.1 % 2 != 0 { acc + x.1 } else { acc })", "   \
    \ lst.iter().enumerate().fold(0, |acc, (idx, el)| {\n        acc + if idx % 2\
    \ == 0 && *el % 2 != 0 { *el } else { 0 }\n    })", "    let mut sum = 0;\n  \
    \  for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e % 2 != 0\
    \ {\n            sum += e;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    return\
    \ lst.iter().enumerate().fold(0, |acc, (i, item)| {\n        if i % 2 == 0 &&\
    \ item % 2 != 0 {\n            acc + item\n        } else {\n            acc\n\
    \        }\n    });", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    &x)| x % 2 != 0).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().fold(0,
    |sum, (i, x)| if i % 2 == 0 && x % 2 != 0 { sum + x } else { sum })', '    return
    lst.iter().enumerate().filter(|(i, x)| (i & 1) == 0 && (*x & 1) == 1).map(|(_,
    x)| *x).sum()', '    return lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    &v)| v % 2 != 0).map(|(_, &v)| v).sum();', "    let mut sum = 0;\n    for (i,\
    \ e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e % 2 != 0 {\n    \
    \        sum += e;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(idx,
    _)| idx % 2 == 0).map(|(_, v)| v).filter(|&v| v % 2 != 0).sum()', '    lst.iter().filter(|&x|
    x % 2 == 1).zip(1..).filter(|&(x, y)| y % 2 == 0).map(|(&x, _)| x).sum()', " \
    \   let mut sum = 0;\n    for (i, &num) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 && num % 2 != 0 {\n            sum += num;\n        }\n    }\n  \
    \  sum", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let mut\
    \ sol: isize = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if n %\
    \ 2 != 0 && i % 2 == 0 {\n            sol += n;\n        }\n    }\n    sol", " \
    \   lst.iter().enumerate().fold(0, |acc, (i, &n)| {\n        if i % 2 == 0 &&\
    \ n % 2 != 0 {\n            acc + n\n        } else {\n            acc\n     \
    \   }\n    })", "    let mut sol: isize = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sol += v;\n        }\n\
    \    }\n    sol", "    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0)\n \
    \       .filter(|&(_, &n)| n % 2 != 0)\n        .map(|(_, &n)| n)\n        .sum()",
  '    lst.iter().enumerate().filter(|(i,_)| i % 2 == 0).filter(|(_,n)| n % 2 != 0).map(|(_,n)|
    n).sum()', "    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n\
    \        if n % 2 != 0 && i % 2 == 0 {\n            sum += n;\n        }\n   \
    \ }\n    sum", "    let mut odd_even = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            odd_even += v;\n     \
    \   }\n    }\n    odd_even", "    return lst.iter().enumerate().fold(0, |acc,\
    \ (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n   \
    \     } else {\n            acc\n        }\n    });", "    let lst2 = lst.into_iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).filter(|&x| x % 2 != 0).sum();\n    lst2", '  lst.iter().enumerate().filter(|&(i,
    v)| i % 2 == 0 && v % 2 != 0).map(|(_, v)| v).sum()', '    return lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &n)| n % 2 != 0).map(|(_, &n)| n).sum();', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, v)| v % 2 != 0).map(|(_, v)| v).sum()', "    let\
    \ mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && v % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', "    let mut sum = 0;\n\
    \    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n   \
    \         sum += lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    x)| i % 2 == 0 && *x % 2 != 0).map(|(_, x)| x).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if (i % 2) == 0 && (x % 2) != 0 {\n            acc\
    \ + x\n        } else {\n            acc\n        }\n    })", "    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0)\n        .filter(|&(_, num)| num % 2 != 0)\n        .map(|(_,\
    \ num)| num)\n        .sum()", "    let mut odds: Vec<isize> = Vec::new();\n \
    \   let mut evens: Vec<isize> = Vec::new();\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            evens.push(*n);\n        } else {\n\
    \            odds.push(*n);\n        }\n    }\n    odds.iter().sum::<isize>()\
    \ + evens.iter().sum::<isize>()", '    lst.iter().enumerate().filter(|&(i, _)|
    i % 2 == 0).map(|(_, &e)| e).sum()', "    let mut sum = 0;\n    for (i, item)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && item % 2 != 0 {\n    \
    \        sum += item;\n        }\n    }\n    sum", "    let mut i = 0;\n    let\
    \ mut res = 0;\n    while i < lst.len() {\n        if i % 2 == 0 && lst[i] % 2\
    \ != 0 {\n            res += lst[i];\n        }\n        i += 1;\n    }\n    res",
  "  let mut sum = 0;\n  for (index, item) in lst.iter().enumerate() {\n    if index\
    \ % 2 == 0 && item % 2 != 0 {\n      sum += item;\n    }\n  }\n  sum", '    lst.iter().enumerate().filter(|(i,
    _)| *i % 2 == 0).map(|(_, j)| j).sum()', "    let mut res = 0;\n    for (i, el)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && el % 2 != 0 {\n      \
    \      res += el;\n        }\n    }\n    res", '  return lst.iter().filter(|x|
    x % 2 == 0).filter(|x| lst.iter().position(|y| x == y).unwrap() % 2 == 0).sum();',
  "    let mut count = 0;\n    for (index, value) in lst.iter().enumerate() {\n  \
    \      if index % 2 == 0 && value % 2 != 0 {\n            count += value;\n  \
    \      }\n    }\n    count", '    lst.iter().enumerate().filter(|&(i, &x)| x %
    2 == 1 && i % 2 == 0).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, el)| el % 2 != 0).map(|(_, el)| el).sum()', "   \
    \ let lst2 = lst.iter().enumerate().filter(|&(idx, _)| idx % 2 == 0).filter(|&(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).collect::<Vec<&isize>>();\n    let mut sum =\
    \ 0;\n    for x in lst2.iter() {\n        sum += **x;\n    }\n    sum", "    //\
    \ TODO implement solution\n    let mut count = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            count += v;\n        }\n\
    \    }\n    count", '  lst.iter().enumerate().filter(|(a, _)| a % 2 == 0).filter(|(_,
    b)| b % 2 != 0).map(|(_, b)| b).sum()', "    lst.iter().enumerate().fold(0, |acc,\
    \ (i, &v)| {\n        if i % 2 == 0 && v % 2 != 0 {\n            acc + v\n   \
    \     } else {\n            acc\n        }\n    })", "    let mut sum = 0;\n \
    \   for (i, num) in lst.iter().enumerate() {\n        if i % 2 == 0 && num % 2\
    \ != 0 {\n            sum += num;\n        }\n    }\n    sum", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if (i + 1) % 2 == 0 && x % 2 != 0 {\n            acc\
    \ + x\n        } else {\n            acc\n        }\n    })", "    let mut index\
    \ = 0;\n    let mut sum = 0;\n    for num in lst {\n        if num % 2 != 0 &&\
    \ index % 2 == 0 {\n            sum += num;\n        }\n        index += 1;\n\
    \    }\n    sum", "    let mut result = 0;\n    for (i, el) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && el % 2 != 0 {\n            result += el;\n     \
    \   }\n    }\n    result", "    let mut res = 0;\n    for (i,v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            res += v;\n        }\n\
    \    }\n    res", "    let mut result = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            result += n;\n       \
    \ }\n    }\n    result", "    let len = lst.len();\n    lst.iter().enumerate().filter(|x|\
    \ x.0 % 2 == 0 && x.1 % 2 != 0).map(|x| x.1).sum()", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()', "    let mut\
    \ sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0\
    \ && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0)\n                           .filter(|&(_, x)| x % 2 != 0)\n\
    \                           .map(|(_, x)| x)\n                           .sum()",
  '    lst.iter().enumerate().filter(|(i, v)| i % 2 == 0 && v % 2 != 0).map(|(_, v)|
    v).sum()', '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, n)|
    n).filter(|n| *n % 2 != 0).sum()', '    lst.iter().enumerate().filter(|(i, &x)|
    i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (index, x)| {\n        if index % 2 == 0 && *x % 2 != 0 {\n          \
    \  acc + x\n        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &v)| v % 2 != 0).map(|(_, &v)| v).sum()', "    let\
    \ lst_len = lst.len();\n    if lst_len == 0 {\n        return 0;\n    }\n    let\
    \ mut sum = 0;\n    for i in 0..lst_len {\n        if i % 2 == 0 && lst[i] % 2\
    \ != 0 {\n            sum += lst[i];\n        }\n    }\n    sum", "    let mut\
    \ tmp = lst.iter().enumerate().filter(|(i, x)| *i % 2 == 0 && *x % 2 != 0).map(|(_,\
    \ x)| x).sum();\n    tmp", '    lst.iter().enumerate().filter(|&(i, _)| i % 2
    == 0).map(|(_, x)| x).sum()', '  lst.iter().enumerate().filter(|&(i, _)| i % 2
    == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    x)| i % 2 == 0 && x % 2 != 0).map(|(i, x)| *x).sum()', "    let mut even_numbers\
    \ = Vec::new();\n    for i in 0..lst.len() {\n        if lst[i] % 2 == 0 {\n \
    \           even_numbers.push(lst[i]);\n        }\n    }\n    let mut sum = 0;\n\
    \    for i in 0..even_numbers.len() {\n        if i % 2 == 0 {\n            sum\
    \ += even_numbers[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        acc + match (i % 2, x % 2) {\n            (0, 1) =>\
    \ *x,\n            _ => 0,\n        }\n    })", "    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0)\n        .filter(|&(_, x)| x % 2 != 0)\n        .map(|(_, x)|\
    \ x)\n        .sum()", "    let mut lst = lst;\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()", "    let\
    \ mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if (i % 2)\
    \ == 0 && v % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum", '    lst.iter().enumerate().fold(0,
    |acc, (i, v)| if i % 2 == 0 { acc + v } else { acc })', "    let mut odd_sum =\
    \ 0;\n    for (i, x) in lst.iter().enumerate() {\n        if (i & 1) == 0 && (x\
    \ & 1) == 1 {\n            odd_sum += x;\n        }\n    }\n    odd_sum", '  lst.iter().enumerate().filter(|&(i,
    v)| i % 2 == 0 && v % 2 != 0).map(|(_, v)| v).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| *i % 2 == 0).map(|(_, x)| x).filter(|x| x % 2 != 0).sum()', "    let mut i\
    \ = 0;\n    let mut r = 0;\n    for n in lst {\n        if i % 2 == 0 && n % 2\
    \ != 0 {\n            r += n;\n        }\n        i += 1;\n    }\n    r", '    return
    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_, &v)| v % 2 !=
    0).map(|(_, &v)| v).sum();', '    lst.iter().enumerate().filter(|(i, &x)| x %
    2 == 1 && i % 2 == 0).map(|(_, &x)| x).sum()', '    return lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum();', "    let\
    \ mut sum = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i %\
    \ 2 == 0 && item % 2 != 0 {\n            sum += item;\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for (index, item) in lst.iter().enumerate() {\n     \
    \   if index % 2 == 0 && item % 2 != 0 {\n            sum += item;\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for (i, num) in lst.iter().enumerate()\
    \ {\n        if num % 2 != 0 && i % 2 == 0 {\n            sum += num;\n      \
    \  }\n    }\n    sum", '  lst.iter().filter(|x| x % 2 == 1).enumerate().filter(|&(_,
    _)| _ % 2 == 0).map(|&(_,x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    n)| n.is_odd() && i.is_even()).map(|(_,n)| *n).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if (i+1) % 2 == 0 && x % 2 != 0 {\n            acc\
    \ + x\n        } else {\n            acc\n        }\n    })", "    let mut sum\
    \ = 0;\n    for (idx, item) in lst.iter().enumerate() {\n        if idx % 2 ==\
    \ 0 && item % 2 != 0 {\n            sum += item;\n        }\n    }\n    sum",
  "    let mut result = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 && e % 2 != 0 {\n            result += e;\n        }\n    }\n   \
    \ result", "    let mut res = 0;\n    for (i, x) in lst.iter().enumerate() {\n\
    \        if i % 2 == 0 && x % 2 != 0 {\n            res += x;\n        }\n   \
    \ }\n    res", "    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum", "    let mut result = 0;\n    for i in 0..lst.len() {\n    \
    \    if i % 2 == 0 && lst[i] % 2 != 0 {\n            result += lst[i];\n     \
    \   }\n    }\n    result", '    lst.iter().enumerate().filter(|(i, &_)| i % 2
    == 0).filter(|(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()', "    let mut sum =\
    \ 0;\n    for (i, val) in lst.iter().enumerate() {\n        if i % 2 == 0 && val\
    \ % 2 != 0 {\n            sum += val;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|x|
    x.0 % 2 == 0).filter(|x| x.1 % 2 != 0).map(|x| x.1).sum()', '    lst.iter().filter(|n|
    **n % 2 == 1 && lst.iter().position(|x| *x == **n).unwrap() % 2 == 0).sum()',
  "  let mut odd = 0;\n  for (index, element) in lst.iter().enumerate() {\n    if\
    \ index % 2 == 0 && element % 2 != 0 {\n      odd += element;\n    }\n  }\n  odd",
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_, v)| v % 2
    != 0).map(|(_, v)| v).sum()', '    lst.iter().enumerate().filter(|(i, _)| i %
    2 == 0).filter(|(_, num)| num % 2 != 0).map(|(_, num)| num).sum()', '    lst.iter().enumerate().filter(|(i,
    &x)| x % 2 == 1 && i % 2 == 0).map(|(_, &x)| x).sum()', "  let mut res = 0;\n\
    \  for (i, num) in lst.iter().enumerate() {\n    if i % 2 == 0 && num % 2 != 0\
    \ {\n      res += num;\n    }\n  }\n  res", "    let mut result = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            result += n;\n        }\n    }\n    result", "    let mut sum = 0;\n\
    \    for (index, i) in lst.iter().enumerate() {\n        if index % 2 == 0 &&\
    \ i % 2 != 0 {\n            sum += i;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let\
    \ mut result = 0;\n    for (index, item) in lst.iter().enumerate() {\n       \
    \ if (index + 1) % 2 == 0 && item % 2 != 0 {\n            result += item;\n  \
    \      }\n    }\n    result", '    lst.iter().enumerate().filter(|&(i, _)| i %
    2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()', '  lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|x|
    x.0 % 2 == 0).map(|x| x.1).filter(|x| x % 2 != 0).sum()', "    let mut res = 0;\n\
    \    for (i, item) in lst.iter().enumerate() {\n        if i % 2 == 0 && item\
    \ % 2 != 0 {\n            res += item;\n        }\n    }\n    res", "    let (sum,\
    \ _) = lst.iter().enumerate().fold((0, false), |acc, (i, x)| {\n        if i %\
    \ 2 == 0 {\n            (acc.0, *x % 2 == 0)\n        } else {\n            (acc.0\
    \ + if acc.1 { *x } else { 0 }, acc.1)\n        }\n    });\n    sum", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        acc + if i % 2 == 0 && x % 2 != 0 {\n            *x\n\
    \        } else {\n            0\n        }\n    })", "    let mut sum = 0;\n\
    \    for i in 0..lst.len() {\n        let even_p = i % 2 == 0;\n        if even_p\
    \ && lst[i] % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum",
  '  lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, v)| v % 2 != 0).map(|(_,
    v)| v).sum()', '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,
    x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let mut sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n       \
    \     sum += v;\n        }\n    }\n    sum", "    let mut res = 0;\n    for (i,\
    \ v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n    \
    \        res += v;\n        }\n    }\n    res", "    lst.iter().enumerate().fold(0,\
    \ |sum, (i, v)| {\n        if i % 2 == 0 && *v % 2 != 0 {\n            sum + v\n\
    \        } else {\n            sum\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| *i % 2 == 0).map(|(_, n)| n).sum()', "    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n       \
    \     sum += x;\n        }\n    }\n    sum", "    //lst.filter((|x| (x % 2 ==\
    \ 0) && (x % 2 == 0))).fold(0,|x, y| x + y);\n    lst.iter().enumerate().filter(|(x,\
    \ _)| (*x % 2 == 0)).map(|(_, y)| *y).fold(0, |x, y| x + y)", '    lst.iter().enumerate().filter(|(i,
    _)| *i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| *x).sum()', '    lst.iter().enumerate().filter(|e|
    e.0 % 2 == 0).filter(|e| e.1 % 2 != 0).map(|e| e.1).sum()', '  lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()', '    lst.iter().enumerate().filter(|(i,
    x)| i % 2 == 0 && *x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, n)| n % 2 == 1).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, v)| v).filter(|&i| i % 2 != 0).sum()', "    let mut sum\
    \ = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e\
    \ % 2 != 0 {\n            sum += e;\n        }\n    }\n    sum", '  lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &e)| {\n        if i % 2 == 0 && e % 2 != 0 {\n            acc + e\n\
    \        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "  let odd\
    \ = lst.iter().filter(|&x| x % 2 != 0).collect::<Vec<_>>();\n  odd.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()", "    return lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    });", '    lst.iter().enumerate().filter(|(i,
    x)| i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()', "    let mut lst = lst;\n\
    \    lst.sort();\n    lst.dedup();\n    lst.iter().filter(|&x| x % 2 == 0).fold(0,\
    \ |acc, x| acc + x)", "    let mut sum = 0;\n    for i in 0..lst.len() {\n   \
    \     if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n       \
    \ }\n    }\n    sum", "    let mut res = 0;\n    for (i, &e) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && e % 2 != 0 {\n            res += e;\n        }\n\
    \    }\n    res", "    let mut total = 0;\n    for (i, num) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && num % 2 != 0 {\n            total += num;\n    \
    \    }\n    }\n    total", '    lst.iter().enumerate().fold(0, |acc, (i, v)| if
    i % 2 == 0 { acc + v } else { acc })', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let mut\
    \ result = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] %\
    \ 2 != 0 {\n            result += lst[i];\n        }\n    }\n    result", "  \
    \  let mut sum = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 0 && e % 2 != 0 {\n            sum += e;\n        }\n    }\n    sum",
  "    let mut result = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 &&\
    \ lst[i] % 2 != 0 {\n            result += lst[i];\n        }\n    }\n    result",
  "    let mut res = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 && item % 2 != 0 {\n            res += item;\n        }\n    }\n\
    \    res", "    let mut res = 0;\n    for i in 0..lst.len() {\n        if lst[i]\
    \ % 2 != 0 && i % 2 == 0 {\n            res += lst[i];\n        }\n    }\n   \
    \ res", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let mut count = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            count\
    \ += lst[i];\n        }\n    }\n    count", '    return lst.iter().enumerate().filter(|(i,
    v)| (i % 2) == 0 && (*v % 2) != 0).map(|(_, v)| *v).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (index, &n)| {\n        if index % 2 == 0 && n % 2 != 0 {\n          \
    \  acc + n\n        } else {\n            acc\n        }\n    })", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, v)| {\n        if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n\
    \        } else {\n            acc\n        }\n    })", "    let mut counter =\
    \ 0;\n    let mut result = 0;\n    for i in lst {\n        if i % 2 != 0 && counter\
    \ % 2 == 0 {\n            result += i;\n        }\n        counter += 1;\n   \
    \ }\n    result", "    let mut sum = 0;\n    for (index, value) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 0 && value % 2 != 0 {\n            sum += value;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n\
    \    }\n    sum", "    // Definition of the even number: n mod 2 == 0\n    //\
    \ The mod operation finds the remainder after dividing the left operand by the\
    \ right operand.\n    lst.iter()\n        .enumerate()\n        .filter(|(i, x)|\
    \ (i + 1) % 2 == 0 && x % 2 != 0)\n        .map(|(_, y)| y)\n        .sum()",
  '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)| n % 2 !=
    0).map(|(_, n)| n).sum()', "    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum", '    return lst.iter().filter(|x| *x % 2 == 1).enumerate().filter(|(i,
    _)| *i % 2 == 0).map(|(_, x)| *x).sum()', "    let mut result = 0;\n    for (i,\
    \ v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n    \
    \        result += v;\n        }\n    }\n    result", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, &x)| x).sum()', "  let mut res = 0;\n  for (i, a) in\
    \ lst.iter().enumerate() {\n    if (i & 1) == 0 && a & 1 == 1 {\n      res +=\
    \ a;\n    }\n  }\n  res", "    let mut sum = 0;\n    for (i, num) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && num % 2 != 0 {\n            sum += num;\n      \
    \  }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', "    let mut sum = 0;\n\
    \    for (i, n) in lst.iter().enumerate() {\n        if (i % 2 == 0) && (n % 2\
    \ != 0) {\n            sum += n;\n        }\n    }\n    sum", '  lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, v)| v % 2 != 0).map(|(_, v)| v).sum()', "    let\
    \ mut res = 0;\n    for (idx, num) in lst.iter().enumerate() {\n        if idx\
    \ % 2 == 0 && num % 2 != 0 {\n            res += num;\n        }\n    }\n    res",
  '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, v)| v).filter(|v|
    v % 2 != 0).sum()', "    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum", '    lst.iter().enumerate().filter(|(index, _)| index
    % 2 == 0).map(|(_, x)| x).filter(|x| *x % 2 != 0).sum()', "    let mut sum = 0;\n\
    \    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n   \
    \         sum += lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', "  let mut sum = 0;\n\
    \  for (i, &x) in lst.iter().enumerate() {\n    if i % 2 == 0 && x % 2 != 0 {\n\
    \      sum += x;\n    }\n  }\n  sum", '    lst.iter().filter(|&&i| i % 2 == 1).enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, i)| i).sum()', "    let mut result = 0;\n    for (index,\
    \ element) in lst.iter().enumerate() {\n        if index % 2 == 0 && element %\
    \ 2 != 0 {\n            result += element;\n        }\n    }\n    result", " \
    \   let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum",
  "    let mut result = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 && v % 2 != 0 {\n            result += v;\n        }\n    }\n   \
    \ result", "    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n\
    \        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n   \
    \ }\n    sum", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_,
    x)| x).sum()', "    let mut sum = 0;\n    for i in 1..lst.len() {\n        if\
    \ i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n        }\n   \
    \ }\n    sum", "    let mut vec: Vec<isize> = vec![];\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            vec.push(lst[i]);\n\
    \        }\n    }\n    vec.iter().sum()", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, &x)| x).filter(|&x| x % 2 != 0).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, &x)| x).sum()', "    let\
    \ mut result = 0;\n    for (i, num) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 0 && num % 2 != 0 {\n            result += num;\n        }\n    }\n \
    \   result", "    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum", "    let mut odd_sum = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            odd_sum += lst[i];\n\
    \        }\n    }\n    odd_sum", '    lst.iter().enumerate().fold(0, |acc, (i,
    n)| if i % 2 == 0 && n % 2 != 0 { acc + n } else { acc })', "    let mut sum =\
    \ 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n %\
    \ 2 != 0 {\n            sum += n;\n        }\n    }\n    sum", "    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum",
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_, n)| n % 2
    != 0).map(|(_, n)| n).sum()', "    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum", "    let mut sum = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            sum += j;\n        }\n\
    \    }\n    sum", "  let mut res = 0;\n  for i in 0..lst.len() {\n    let index\
    \ = i as isize;\n    if index % 2 == 0 && lst[i] % 2 != 0 {\n      res += lst[i];\n\
    \    }\n  }\n  res"]
stop_tokens:
- "\n}"
