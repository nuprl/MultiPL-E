name: HumanEval_51_remove_vowels
language: rust
results:
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpocwcejb1.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert('a');\n\
    \    vowels.insert('e');\n    vowels.insert('i');\n    vowels.insert('o');\n \
    \   vowels.insert('u');\n    vowels.insert('A');\n    vowels.insert('E');\n  \
    \  vowels.insert('I');\n    vowels.insert('O');\n    vowels.insert('U');\n   \
    \ text.chars().filter(|c| !vowels.contains(c)).collect()\n}\n\nfn main() {\n \
    \   let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp77wwvh20.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    let mut text_with_no_vowels = String::new();\n    for i in text.chars()\
    \ {\n        if !vowels.contains(&i) {\n            text_with_no_vowels.push(i);\n\
    \        }\n    }\n    text_with_no_vowels\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_ascii_lowercase() {\n            continue;\n        }\n\
    \        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n     \
    \       new_text.push(c);\n        }\n    }\n    new_text\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpal1gn8ji.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut result\
    \ = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpo_6k4r0m.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \           result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp5bmrdegg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpa724mas9.rs:13:31\n\
    \   |\n13 |     text.chars().filter(|&c| !is_vowel(c)).collect()\n   |       \
    \                        ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = String::new();\n    for i in text.chars() {\n \
    \       if i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u' && i != 'A'\
    \ && i != 'E' && i != 'I' && i != 'O' && i != 'U' {\n            s.push(i);\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res: String = String::new();\n    for c in text.chars()\
    \ {\n        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \           res.push(c);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp6sya6k47.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_lowercase_vowel()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_lowercase_vowel` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpr786o46i.rs:13:32\n   |\n13 |  \
    \   text.chars().filter(|c| !c.is_lowercase_vowel()).collect()\n   |         \
    \                       ^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_lowercase`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    text.chars().filter(|ch| !vowels.contains(ch)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = text.clone();\n    new_text.retain(|c| !is_vowel(c));\n\
    \    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpys5qv038.rs:14:26\n\
    \   |\n14 |     new_text.retain(|c| !is_vowel(c));\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // split the string into a vector of chars\n    let mut text:\
    \ Vec<char> = text.chars().collect();\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'];\n    // keep a vector with elements to remove\n\
    \    let mut to_remove: Vec<usize> = Vec::new();\n    // iterate through string\n\
    \    for i in 0..text.len() {\n        // if current character is a vowel\n  \
    \      if vowels.contains(&text[i]) {\n            // add it to the vector of\
    \ things to remove\n            to_remove.push(i);\n        }\n    }\n    // go\
    \ through things to remove and pop them from the end of the text\n    for i in\
    \ to_remove.iter().rev() {\n        text.remove(*i);\n    }\n    // convert back\
    \ to string\n    let mut text: String = text.into_iter().collect();\n    // return\
    \ result\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\";\n    text.chars().filter(|&x|\
    \ !vowels.contains(x)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !is_vowel(*x)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp0gn8tpks.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|x| !is_vowel(*x)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp1xs7o20e.rs:13:31\n\
    \   |\n13 |     text.chars().filter(|&c| !is_vowel(c)).collect()\n   |       \
    \                        ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c.is_ascii_lowercase() && c != &'a'\
    \ && c != &'e' && c != &'i' && c != &'o' && c != &'u').collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpb51g9sck.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    unimplemented!(\"remove_vowels('{}')\", text)\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: remove_vowels('')', /tmp/tmpghf0lu4i.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !ch.is_ascii_lowercase() || ch != 'a' && ch != 'e' && ch != 'i'\
    \ && ch != 'o' && ch != 'u' {\n            result.push(ch);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpe3a4m2zx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut text_chars:\
    \ Vec<char> = text.chars().collect();\n    let result: Vec<char> = text_chars.drain_filter(|c|\
    \ !vowels.contains(c)).collect();\n    result.iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: use of unstable library feature 'drain_filter': recently\
    \ added\n  --> /tmp/tmpje8w98pq.rs:15:40\n   |\n15 |     let result: Vec<char>\
    \ = text_chars.drain_filter(|c| !vowels.contains(c)).collect();\n   |        \
    \                                ^^^^^^^^^^^^\n   |\n   = note: see issue #43244\
    \ <https://github.com/rust-lang/rust/issues/43244> for more information\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0658`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpafglipux.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut chars: Vec<char> = text.chars().collect();\n    let\
    \ mut position: usize = 0;\n    while position < chars.len() {\n        if is_vowel(chars[position])\
    \ {\n            chars.remove(position);\n        } else {\n            position\
    \ += 1;\n        }\n    }\n    chars.into_iter().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp3ucph3l1.rs:16:12\n\
    \   |\n16 |         if is_vowel(chars[position]) {\n   |            ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return String::new();\n    }\n\
    \n    let mut counter = 0;\n    let mut res = String::new();\n    while counter\
    \ < text.len() {\n        if !text[counter..=counter].to_lowercase().starts_with('a')\n\
    \            && !text[counter..=counter].to_lowercase().starts_with('e')\n   \
    \         && !text[counter..=counter].to_lowercase().starts_with('i')\n      \
    \      && !text[counter..=counter].to_lowercase().starts_with('o')\n         \
    \   && !text[counter..=counter].to_lowercase().starts_with('u')\n        {\n \
    \           res.push(text[counter..=counter].to_string());\n        }\n      \
    \  counter += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1s__ip3v.rs:26:22\n   |\n\
    26 |             res.push(text[counter..=counter].to_string());\n   |        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut res =\
    \ text.chars().filter(|&x| !vowels.contains(&x)).collect::<String>();\n    res.make_ascii_lowercase();\n\
    \    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cbaa\"`,\n right: `\"cB\"`', /tmp/tmpfdaq5cx3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut text_buffer = String::new();\n    for c in text.chars()\
    \ {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' |\
    \ 'I' | 'O' | 'U' => {\n                // do nothing\n            }\n       \
    \     _ => {\n                text_buffer.push(c);\n            }\n        }\n\
    \    }\n    text_buffer\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    return text.chars().filter(|&x| !\"aeiouAEIOU\".contains(x)).collect::<String>();\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c.is_alphabetic() && !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpri3tz311.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_vowel() {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpxvo9w_sl.rs:15:15\n   |\n15 |         if !c.is_vowel()\
    \ {\n   |               ^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'];\n    let mut res = String::new();\n    for c in text.chars() {\n\
    \        if !vowels.contains(&c) {\n            res.push(c);\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\";\n    text.chars().filter(|c| !vowels.contains(*c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase() || !is_vowel(*c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp0gyaljkd.rs:13:57\n\
    \   |\n13 |     text.chars().filter(|c| !c.is_ascii_lowercase() || !is_vowel(*c)).collect()\n\
    \   |                                                         ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for c in text.chars()\
    \ {\n        match c {\n            'a' | 'A' | 'e' | 'E' | 'i' | 'I' | 'o' |\
    \ 'O' | 'u' | 'U' => (),\n            _ => new_text.push(c),\n        }\n    }\n\
    \    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in text.chars() {\n\
    \        if !is_vowel(c) {\n            res.push(c);\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpbmupl65q.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let v: Vec<char> = text.chars().filter(|c| !\"aeiouAEIOU\"\
    .contains(*c)).collect();\n    v.into_iter().collect()\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp7rxmqiih.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut text_chars: Vec<char> = text.chars().collect();\n \
    \   let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n   \
    \ let mut i = 0;\n    while i < text_chars.len() {\n        if vowels.contains(&text_chars[i])\
    \ {\n            text_chars.remove(i);\n        } else {\n            i += 1;\n\
    \        }\n    }\n    text_chars.into_iter().collect()\n}\n\nfn main() {\n  \
    \  let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !\"aeiou\".contains(*c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpfm1x1apq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut iter = text.chars();\n    let mut output = String::new();\n\
    \    loop {\n        match iter.next() {\n            Some(ch) => {\n        \
    \        if ch.is_ascii_lowercase() && ch != 'a' && ch != 'e' && ch != 'i' &&\
    \ ch != 'o' && ch != 'u' {\n                    output.push(ch);\n           \
    \     }\n            }\n            None => {\n                break;\n      \
    \      }\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpd53gqk3u.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmp1s0r1g82.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = String::new();\n    for c in text.chars() {\n \
    \       match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' |\
    \ 'O' | 'U' => {}\n            _ => s.push(c),\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|char| !is_vowel(*char)).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmph159bqi5.rs:13:33\n\
    \   |\n13 |     text.chars().filter(|char| !is_vowel(*char)).collect()\n   | \
    \                                ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    text.chars().filter(|c|\
    \ !vowels.contains(c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpz5p83_1q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_string = String::new();\n    for c in text.chars()\
    \ {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' |\
    \ 'I' | 'O' | 'U' => {},\n            _ => new_string.push(c),\n        }\n  \
    \  }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut res =\
    \ String::new();\n    for letter in text.chars() {\n        if !vowels.contains(&letter)\
    \ {\n            res.push(letter);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp4yzsdlk6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&c| !c.is_ascii_lowercase() || !\"aeiou\"\
    .contains(c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp5dggak9x.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // BEGIN SECRET\n    text.replace(|c: char| c.is_vowel(), \"\
    \")\n    // END SECRET\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpo8xle9s5.rs:14:30\n   |\n14 |     text.replace(|c: char|\
    \ c.is_vowel(), \"\")\n   |                              ^^^^^^^^ method not found\
    \ in `char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO: Implement remove_vowels function\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp60cr8cm5.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase() || c.to_lowercase().next().unwrap()\
    \ != 'a').collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp58i5bybn.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for character in text.chars()\
    \ {\n        if !character.is_ascii_lowercase() || !(\"aeiou\".contains(character))\
    \ {\n            result.push(character);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp1e7vuvw2.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp2rjl0nap.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    text.chars().filter(|c|\
    \ !vowels.contains(c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpvlva_5uy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&x| !is_vowel(x)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpswa6tid5.rs:13:31\n\
    \   |\n13 |     text.chars().filter(|&x| !is_vowel(x)).collect()\n   |       \
    \                        ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmphblat98w.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' |\
    \ 'I' | 'O' | 'U' => {}\n            _ => result.push(c),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::from(\"\");\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpzuagetms.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_ascii_lowercase() {\n            new_text.push(c);\n   \
    \     } else if !is_vowel(c) {\n            new_text.push(c);\n        }\n   \
    \ }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpipj0w9yj.rs:17:20\n\
    \   |\n17 |         } else if !is_vowel(c) {\n   |                    ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut answer = String::new();\n    for ch in text.chars()\
    \ {\n        if !ch.is_ascii_alphabetic() || !ch.is_ascii_lowercase() || ch !=\
    \ 'a' || ch != 'e' || ch != 'i' || ch != 'o' || ch != 'u' {\n            answer.push(ch);\n\
    \        }\n    }\n    answer\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpgghgsbz4.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if ch.is_ascii_alphabetic() && !\"aeiouAEIOU\".contains(ch) {\n \
    \           result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmphws372br.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !\"aeiouAEIOU\".contains(ch) {\n            result.push(ch);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    unimplemented!(\"remove vowels from {}\", text);\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: remove vowels from ', /tmp/tmppwqsm8nb.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !\"aeiouAEIOU\".contains(c) {\n            result.push(c);\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    return text.chars().filter(|c| !c.is_ascii_punctuation()).collect();\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpidt5n28p.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpca73syq7.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !\"aeiouAEIOU\".contains(*x)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !VOWELS.contains(x)).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpxg71qx37.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|x| !VOWELS.contains(x)).collect()\n   | \
    \                             ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut ret: String = String::new();\n    for c in text.chars()\
    \ {\n        if \"aeiouAEIOU\".contains(c) {\n            ret.push(c);\n     \
    \   }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"aei\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpplidkbr1.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    let mut result = String::new();\n    for ch in text.chars() {\n \
    \       if !vowels.contains(&ch) {\n            result.push(ch);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Ascii lowercase starts at 97 (0x61) and ends at 122 (0x7A).\n\
    \    const ASCII_LOWERCASE_START: u8 = 0x61;\n    const ASCII_LOWERCASE_END: u8\
    \ = 0x7A;\n\n    text.chars()\n        .filter(|ch| !((ch.is_ascii_lowercase()\
    \ && ch.is_ascii_alphabetic())\n            || (ch.is_ascii_uppercase() && ch.is_ascii_alphabetic())))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp6uz87wi3.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // unimplemented!(\"Write a function to remove vowels in {:?}\"\
    , text);\n    text.chars().filter(|c| {\n        c.to_lowercase().next().unwrap()\
    \ != 'a' &&\n        c.to_lowercase().next().unwrap() != 'e' &&\n        c.to_lowercase().next().unwrap()\
    \ != 'i' &&\n        c.to_lowercase().next().unwrap() != 'o' &&\n        c.to_lowercase().next().unwrap()\
    \ != 'u'\n    }).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| is_vowel(*c) == false).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmprkkm06ha.rs:13:29\n\
    \   |\n13 |     text.chars().filter(|c| is_vowel(*c) == false).collect()\n   |\
    \                             ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    text.chars().filter(|&c|\
    \ !vowels.contains(&c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp6i4_1ylt.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // Fill in code here.\n    //\n    // Uncomment the follow\
    \ to test your implementation.\n    //\n    // assert_eq!(remove_vowels(\"Hello,\
    \ I am an example\".to_string()), \"Hll, I m n xmpl\".to_string());\n    // assert_eq!(remove_vowels(\"\
    \".to_string()), \"\".to_string());\n    // assert_eq!(remove_vowels(\"a\".to_string()),\
    \ \"\".to_string());\n    // assert_eq!(remove_vowels(\"aeiou\".to_string()),\
    \ \"\".to_string());\n    // assert_eq!(remove_vowels(\"aeiouAEIOU\".to_string()),\
    \ \"\".to_string());\n    // assert_eq!(remove_vowels(\"aeiouAEIOU!@#$%^&*()\"\
    .to_string()), \"!@#$%^&*()\".to_string());\n    // assert_eq!(remove_vowels(\"\
    abcdef\".to_string()), \"bcdf\".to_string());\n    // assert_eq!(remove_vowels(\"\
    aaaaa\".to_string()), \"\".to_string());\n    // assert_eq!(remove_vowels(\"aaBAA\"\
    .to_string()), \"B\".to_string());\n    // assert_eq!(remove_vowels(\"zbcd\".to_string()),\
    \ \"zbcd\".to_string());\n    // assert_eq!(remove_vowels(\"aeiouAEIOU!@#$%^&*()\"\
    .to_string()), \"!@#$%^&*()\".to_string());\n    text\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpv1kek_5i.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut string_without_vowels = String::new();\n    for i in\
    \ text.chars() {\n        if !(\"aeiouAEIOU\".contains(i)) {\n            string_without_vowels.push(i);\n\
    \        }\n    }\n    string_without_vowels\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\";\n    text.chars().filter(|c| !vowels.contains(*c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_lowercase() || c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' {\n            new_text.push(c);\n        }\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"ae\\ni\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp5o986tw2.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !is_vowel(ch) {\n            result.push(ch);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp41m9etg2.rs:15:13\n\
    \   |\n15 |         if !is_vowel(ch) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !matches!(ch, 'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' |\
    \ 'O' | 'U') {\n            result.push(ch);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !vec!['a', 'e', 'i', 'o', 'u'].contains(x)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp8f69s82o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    unimplemented!(\"remove_vowels(\\'{}\\')\", text);\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: remove_vowels('')', /tmp/tmpo72cll4m.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&c| !c.is_vowel()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp8eazy8j0.rs:13:33\n   |\n13 |     text.chars().filter(|&c|\
    \ !c.is_vowel()).collect()\n   |                                 ^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut string = String::new();\n    for v in text.chars()\
    \ {\n        if v != 'a' && v != 'A' && v != 'e' && v != 'E' && v != 'i' && v\
    \ != 'I' && v != 'o' && v != 'O' && v != 'u' && v != 'U' {\n            string.push(v);\n\
    \        }\n    }\n    string\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn4dwogm6.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    fn is_vowel(c: char) -> bool {\n        match c {\n       \
    \     'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => true,\n   \
    \         _ => false,\n        }\n    }\n\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|ch| !\"aeiouAEIOU\".contains(*ch)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut text_without_vowels = String::new();\n    for c in\
    \ text.chars() {\n        if !(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n  \
    \          text_without_vowels.push(c);\n        }\n    }\n    text_without_vowels\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut no_vowels = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            no_vowels.push(c);\n        }\n  \
    \  }\n    no_vowels\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp4iwcxbsh.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_lowercase_vowel()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_lowercase_vowel` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmpfcvf0okq.rs:13:32\n   |\n13 |  \
    \   text.chars().filter(|c| !c.is_lowercase_vowel()).collect()\n   |         \
    \                       ^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_lowercase`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    text.chars().filter(|c| !vowels.contains(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpsh_4p3i4.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut result\
    \ = String::new();\n    for ch in text.chars() {\n        if !vowels.contains(&ch)\
    \ {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpoq6ymt9n.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&c| !c.is_ascii_lowercase() || !c.is_vowel()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp2qul3cj3.rs:13:60\n   |\n13 |     text.chars().filter(|&c|\
    \ !c.is_ascii_lowercase() || !c.is_vowel()).collect()\n   |                  \
    \                                          ^^^^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut vowels_set = HashSet::new();\n\
    \    for c in vowels.chars() {\n        vowels_set.insert(c);\n    }\n    let\
    \ mut output = String::new();\n    for c in text.chars() {\n        if !vowels_set.contains(&c)\
    \ {\n            output.push(c);\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmphvtz_3yd.rs:14:26\n   |\n14 |     let mut vowels_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !['a', 'e', 'i', 'o', 'u'].contains(c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpn8egu36s.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut result\
    \ = text;\n    let mut i = 0;\n    while i < result.len() {\n        if vowels.contains(&result.chars().nth(i).unwrap())\
    \ {\n            result.remove(i);\n        } else {\n            i += 1;\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpbi4agrlu.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO!\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpyi6lyotv.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut output = String::new();\n    for ch in text.chars()\
    \ {\n        if !ch.is_ascii_lowercase() || ch != 'a' && ch != 'e' && ch != 'i'\
    \ && ch != 'o' && ch != 'u' {\n            output.push(ch);\n        }\n    }\n\
    \    output\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpfd0_pyhb.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return text;\n    }\n\n    let\
    \ mut result = String::new();\n    for character in text.chars() {\n        if\
    \ !is_vowel(character) {\n            result.push(character);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpbzcc72jn.rs:19:13\n\
    \   |\n19 |         if !is_vowel(character) {\n   |             ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpenfm0i3x.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpl5yaeehq.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&c| !is_vowel(c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmppgyz8uq8.rs:13:31\n\
    \   |\n13 |     text.chars().filter(|&c| !is_vowel(c)).collect()\n   |       \
    \                        ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !VOWELS.contains(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmp4kppcm1w.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !VOWELS.contains(c)).collect()\n   | \
    \                             ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_string = String::new();\n    for c in text.chars()\
    \ {\n        if !\"aeiouAEIOU\".contains(c) {\n            new_string.push(c);\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    String::from(\"\")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpnxoxvg91.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmptm6ep3ls.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !is_vowel(*x)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpilmvstjn.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|x| !is_vowel(*x)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    return String::from(\"\");\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpizcswgtr.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut str_vowel = String::new();\n    for c in text.chars()\
    \ {\n        if !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            str_vowel.push(c);\n        }\n    }\n    str_vowel\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpc5wpiz5f.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in text.chars() {\n\
    \        if !\"aeiou\".contains(c) {\n            res.push(c);\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpmnyk2790.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u'\
    \ && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U' {\n       \
    \     result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels = HashSet::new();\n    vowels.insert('a');\n\
    \    vowels.insert('e');\n    vowels.insert('i');\n    vowels.insert('o');\n \
    \   vowels.insert('u');\n    vowels.insert('A');\n    vowels.insert('E');\n  \
    \  vowels.insert('I');\n    vowels.insert('O');\n    vowels.insert('U');\n\n \
    \   text.chars().filter(|&c| !vowels.contains(&c)).collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp9eksbpfy.rs:13:22\n   |\n13 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_vowel() {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpi1zqa2zs.rs:15:15\n   |\n15 |         if !c.is_vowel()\
    \ {\n   |               ^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars\
    \ = text.chars();\n    let mut result = String::new();\n    while let Some(letter)\
    \ = chars.next() {\n        if !vowels.contains(&letter) {\n            result.push(letter);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpejc3yqxx.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| x.is_ascii_alphabetic() && !\"aeiouAEIOU\"\
    .contains(*x)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpq1flvgzx.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !x.is_ascii_lowercase() || !x.is_ascii_uppercase()\
    \ || !vowels.contains(x)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `vowels` in this scope\n  --> /tmp/tmpyfhtdgz7.rs:13:84\n\
    \   |\n13 |     text.chars().filter(|x| !x.is_ascii_lowercase() || !x.is_ascii_uppercase()\
    \ || !vowels.contains(x)).collect()\n   |                                    \
    \                                                ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmppvouoiwn.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    return text.chars().filter(|c| !vec!['a', 'e', 'i', 'o', 'u'].contains(c)).collect();\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmppyw96jvq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut result\
    \ = text.chars().filter(|&c| !vowels.contains(&c)).collect::<String>();\n    if\
    \ result.is_empty() {\n        String::from(\"\")\n    } else {\n        result\n\
    \    }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp954qtk20.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res: String = String::new();\n    for i in text.chars()\
    \ {\n        if i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u' && i\
    \ != 'A' && i != 'E' && i != 'I' && i != 'O' && i != 'U' {\n            res.push(i);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !x.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmp_nxvoz6w.rs:13:32\n   |\n13 |     text.chars().filter(|x|\
    \ !x.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    String::from(text.chars().filter(|c| match c {\n        'a'\
    \ | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => false,\n        _ =>\
    \ true,\n    }).collect::<String>())\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|ch| !ch.is_ascii_alphabetic() || !ch.is_ascii_lowercase()\
    \ || !ch.is_ascii_uppercase() || !ch.is_alphabetic() || ch != 'a' && ch != 'A'\
    \ && ch != 'e' && ch != 'E' && ch != 'i' && ch != 'I' && ch != 'o' && ch != 'O'\
    \ && ch != 'u' && ch != 'U').collect()\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp08rd3wp0.rs:13:141\n\
    \   |\n13 | ...ascii_uppercase() || !ch.is_alphabetic() || ch != 'a' && ch !=\
    \ 'A' && ch != 'e' && ch != 'E' && ch != 'i' && ch != 'I' && ch != 'o' &&...\n\
    \   |                                                   ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp08rd3wp0.rs:13:154\n\
    \   |\n13 | ...se() || !ch.is_alphabetic() || ch != 'a' && ch != 'A' && ch !=\
    \ 'e' && ch != 'E' && ch != 'i' && ch != 'I' && ch != 'o' && ch != 'O' &&...\n\
    \   |                                                   ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp08rd3wp0.rs:13:167\n\
    \   |\n13 | ...s_alphabetic() || ch != 'a' && ch != 'A' && ch != 'e' && ch !=\
    \ 'E' && ch != 'i' && ch != 'I' && ch != 'o' && ch != 'O' && ch != 'u' &&...\n\
    \   |                                                   ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp08rd3wp0.rs:13:180\n\
    \   |\n13 | ...) || ch != 'a' && ch != 'A' && ch != 'e' && ch != 'E' && ch !=\
    \ 'i' && ch != 'I' && ch != 'o' && ch != 'O' && ch != 'u' && ch != 'U').c...\n\
    \   |                                                   ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp08rd3wp0.rs:13:193\n\
    \   |\n13 | ...' && ch != 'A' && ch != 'e' && ch != 'E' && ch != 'i' && ch !=\
    \ 'I' && ch != 'o' && ch != 'O' && ch != "
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp135rjkjr.rs:15:13\n\
    \   |\n15 |         if !is_vowel(c) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpsoj2wqh7.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase() || !c.is_ascii_uppercase()\
    \ || !is_vowel(*c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpiq9hbzdf.rs:13:84\n\
    \   |\n13 |     text.chars().filter(|c| !c.is_ascii_lowercase() || !c.is_ascii_uppercase()\
    \ || !is_vowel(*c)).collect()\n   |                                          \
    \                                          ^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // wrong\n    // let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    // let mut result = String::new();\n    // for character in text.chars()\
    \ {\n    //     if vowels.contains(&character) {\n    //         continue;\n \
    \   //     }\n    //     result.push(character);\n    // }\n    // result\n\n\
    \    // wrong\n    // let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    // let\
    \ mut result = String::new();\n    // for character in text.chars() {\n    //\
    \     if !vowels.contains(&character) {\n    //         result.push(character);\n\
    \    //     }\n    // }\n    // result\n\n    // wrong\n    // let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    // let mut result = String::new();\n    // for character\
    \ in text.chars() {\n    //     if !vowels.contains(&character) {\n    //    \
    \     result.push(character);\n    //     }\n    // }\n    // result\n\n    //\
    \ right\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    text.chars()\n \
    \       .filter(|character| !vowels.contains(character))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpxm9o3q3g.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    let mut ret_str = String::new();\n    for c in text.chars() {\n \
    \       if !vowels.contains(&c) {\n            ret_str.push(c);\n        }\n \
    \   }\n    ret_str\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_string = String::new();\n    for c in text.chars()\
    \ {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' |\
    \ 'I' | 'O' | 'U' => {}\n            _ => new_string.push(c),\n        }\n   \
    \ }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    text.chars().filter(|x|\
    \ !vowels.contains(x)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmphs622inh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        match ch {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' |\
    \ 'I' | 'O' | 'U' => (),\n            _ => result.push(ch),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&c| !c.is_ascii_lowercase() || c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u').collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmptspf2vz0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !\"aeiouAEIOU\".contains(*c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase() || !c.is_ascii_lowercase()\
    \ || !c.is_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate =\
    \ remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpl3crmgi6.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| {\n        match c {\n            'a'\
    \ | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => false,\n          \
    \  _ => true,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpq9rieui5.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in text.chars() {\n\
    \        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n     \
    \       res.push(c);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmprp68540y.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // We use regular expression to determine if each character\
    \ is a vowel or not.\n    // We remove those characters which are vowels and return\
    \ the remaining characters.\n    text.chars().filter(|character| !character.to_string().contains(r\"\
    [aeiou]\")).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmppacarcgm.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO\n    let mut result = String::new();\n    for s in\
    \ text.chars() {\n        if !s.is_lowercase() || s != 'a' && s != 'e' && s !=\
    \ 'i' && s != 'o' && s != 'u' {\n            result.push(s);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpewyq6s68.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| \"aeiouAEIOU\".contains(*x)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"aei\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpim3fotz_.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_lowercase() || !\"aeiou\".contains(c) {\n            new_text.push(c);\n\
    \        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpnkc8q9hy.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_ascii_lowercase() {\n            continue;\n        }\n\
    \        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => {}\n          \
    \  _ => result.push(c),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp74lfwzch.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' |\
    \ 'I' | 'O' | 'U' => {},\n            _ => result.push(c),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // We are using String::chars() to get all characters from\
    \ the String and use\n    // a for loop to go through each character of the String.\n\
    \    let mut result = String::new();\n    for ch in text.chars() {\n        //\
    \ We are using a match statement to decide if the character is\n        // a vowel\
    \ or not. We can use the match statement to match on\n        // any kind of data.\
    \ In this case, we are matching on a char.\n        match ch {\n            'a'\
    \ | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => { /* skip it */ }\n\
    \            _ => result.push(ch),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for i in text.chars()\
    \ {\n        if i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u' && i\
    \ != 'A' && i != 'E' && i != 'I' && i != 'O' && i != 'U' {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"];\n    let mut counter = 0;\n    for i in text.chars()\
    \ {\n        for j in &vowels {\n            if i.to_string() == *j {\n      \
    \          counter += 1;\n            }\n        }\n    }\n    let mut output\
    \ = text.clone();\n    for i in 0..counter {\n        output = output.replace(vowels[i],\
    \ \"\");\n    }\n    output\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp7kc27ccz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for x in text.chars()\
    \ {\n        match x {\n            'a' | 'A' | 'e' | 'E' | 'i' | 'I' | 'o' |\
    \ 'O' | 'u' | 'U' => { }\n            _ => result.push(x)\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut without_vowels = String::new();\n    for char in text.chars()\
    \ {\n        if !is_vowel(char) {\n            without_vowels.push(char);\n  \
    \      }\n    }\n    without_vowels\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp9lmau3gv.rs:15:13\n\
    \   |\n15 |         if !is_vowel(char) {\n   |             ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res = String::new();\n    for c in text.chars() {\n\
    \        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n     \
    \       res.push(c);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpa4wrr_g_.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|ch| \"aeiouAEIOU\".find(*ch).is_none()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|&c| !c.is_lowercase_vowel()).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_lowercase_vowel` found for type `char`\
    \ in the current scope\n  --> /tmp/tmpf63ay3dm.rs:13:33\n   |\n13 |     text.chars().filter(|&c|\
    \ !c.is_lowercase_vowel()).collect()\n   |                                 ^^^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_lowercase`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !x.is_ascii_lowercase() || x.to_lowercase().next().unwrap()\
    \ != 'a' && x.to_lowercase().next().unwrap() != 'e' && x.to_lowercase().next().unwrap()\
    \ != 'i' && x.to_lowercase().next().unwrap() != 'o' && x.to_lowercase().next().unwrap()\
    \ != 'u').collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpqorej5ci.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|ch| !\"aeiou\".contains(*ch)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp8nrmucev.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    String::from(\"\")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpfdg47ot1.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res: String = \"\".to_string();\n    for c in text.chars()\
    \ {\n        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \           res.push(c);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpg9ie9b25.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_vowel() {\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpfriy16m4.rs:15:15\n   |\n15 |         if !c.is_vowel()\
    \ {\n   |               ^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase() || !c.is_ascii_uppercase()\
    \ ||\n        !c.is_ascii_digit(10) || c != 'a' || c != 'e' || c != 'i' || c !=\
    \ 'o' || c != 'u' ||\n        c != 'A' || c != 'E' || c != 'I' || c != 'O' ||\
    \ c != 'U').collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpgvkhoc51.rs:14:12\n     |\n14   |         !c.is_ascii_digit(10)\
    \ || c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u' ||\n     |     \
    \       ^^^^^^^^^^^^^^ -- supplied 1 argument\n     |            |\n     |   \
    \         expected 0 arguments\n     |\nnote: associated function defined here\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpgvkhoc51.rs:14:36\n\
    \   |\n14 |         !c.is_ascii_digit(10) || c != 'a' || c != 'e' || c != 'i'\
    \ || c != 'o' || c != 'u' ||\n   |                                    ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpgvkhoc51.rs:14:48\n\
    \   |\n14 |         !c.is_ascii_digit(10) || c != 'a' || c != 'e' || c != 'i'\
    \ || c != 'o' || c != 'u' ||\n   |                                           \
    \     ^^ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpgvkhoc51.rs:14:60\n\
    \   |\n14 |         !c.is_ascii_digit(10) || c != 'a' || c != 'e' || c != 'i'\
    \ || c != 'o' || c != 'u' ||\n   |                                           \
    \                 ^^ no implementation for `&char == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmpgvkhoc51.rs:14:72\n   |\n14 |         !c.is_ascii_digit(10)\
    \ || c != 'a' || c != 'e' || c != 'i' || c != 'o' || c != 'u' ||\n   |       \
    \                                                                 ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    err"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !\"aeiou\".contains(*c)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpwys1ltgm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.replace(VOWELS, \"\")\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmp6gkd8rag.rs:13:18\n\
    \   |\n13 |     text.replace(VOWELS, \"\")\n   |                  ^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpawabv971.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    return text.chars().filter(|&c| !VOWELS.contains(c)).collect();\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmp_gwb4sqz.rs:13:38\n\
    \   |\n13 |     return text.chars().filter(|&c| !VOWELS.contains(c)).collect();\n\
    \   |                                      ^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|letter| !letter.is_ascii_lowercase() ||\
    \ !letter.is_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abcdef\\nghijklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpi0y3clxp.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut i = 0;\n    let mut vowels = String::new();\n    for\
    \ c in text.chars() {\n        if c == 'a' || c == 'A' || c == 'e' || c == 'E'\
    \ || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U' {\n\
    \            vowels.push(text.chars().nth(i).unwrap());\n        }\n        i\
    \ += 1;\n    }\n    text.chars().filter(|c| !vowels.contains(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `Fn<(char,)>` closure, found `char`\n    --> /tmp/tmp38s1zmby.rs:21:46\n\
    \     |\n21   |     text.chars().filter(|c| !vowels.contains(c)).collect()\n \
    \    |                                     -------- ^ expected an `Fn<(char,)>`\
    \ closure, found `char`\n     |                                     |\n     |\
    \                                     required by a bound introduced by this call\n\
    \     |\n     = help: the trait `Fn<(char,)>` is not implemented for `char`\n\
    \     = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&char`\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `&char`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider dereferencing here\n     |\n21   |     text.chars().filter(|c|\
    \ !vowels.contains(*c)).collect()\n     |                                    \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut empty_string = String::new();\n    for i in text.chars()\
    \ {\n        if i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u' && i\
    \ != 'A' && i != 'E' && i != 'I' && i != 'O' && i != 'U' {\n            empty_string.push(i);\n\
    \        }\n    }\n    empty_string\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut text_vec: Vec<char> = text.chars().collect();\n   \
    \ let mut i = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    while i < text_vec.len() {\n        if vowels.contains(&text_vec[i])\
    \ {\n            text_vec.remove(i);\n        } else {\n            i += 1;\n\
    \        }\n    }\n    text_vec.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for i in text.chars()\
    \ {\n        if !(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' ||\
    \ i == 'A' || i == 'E' || i == 'I' || i == 'O' || i == 'U') {\n            new_text.push(i);\n\
    \        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for s in text.chars()\
    \ {\n        if !is_vowel(s) {\n            new_text.push(s);\n        }\n   \
    \ }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp3n35r0hm.rs:15:13\n\
    \   |\n15 |         if !is_vowel(s) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase() || \"aeiou\"\
    .contains(*c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"ae\\ni\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpynbmuy24.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    fn is_vowel(ch: char) -> bool {\n        ch == 'a' || ch ==\
    \ 'e' || ch == 'i' || ch == 'o' || ch == 'u'\n    }\n\n    text.chars().filter(|ch|\
    \ !is_vowel(*ch)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp7keg43sy.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels: HashSet<char> = HashSet::new();\n    vowels.insert('a');\n\
    \    vowels.insert('e');\n    vowels.insert('i');\n    vowels.insert('o');\n \
    \   vowels.insert('u');\n    vowels.insert('A');\n    vowels.insert('E');\n  \
    \  vowels.insert('I');\n    vowels.insert('O');\n    vowels.insert('U');\n\n \
    \   let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ !vowels.contains(&ch) {\n            result.push(ch);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp671yau7e.rs:13:21\n\
    \   |\n13 |     let mut vowels: HashSet<char> = HashSet::new();\n   |        \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp671yau7e.rs:13:37\n\
    \   |\n13 |     let mut vowels: HashSet<char> = HashSet::new();\n   |        \
    \                             ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    if text.is_empty() {\n        return String::new();\n    }\n\
    \    text.chars()\n        .filter(|ch| !ch.is_ascii_lowercase() || ch != &'a'\
    \ && ch != &'e' && ch != &'i' && ch != &'o' && ch != &'u')\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp4znrq486.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut text = text;\n    while let Some(i) = text.find(|c:\
    \ char| c.is_ascii_lowercase() && VOWELS.contains(c)) {\n        text.remove(i);\n\
    \    }\n    text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `VOWELS` in this scope\n  --> /tmp/tmpzyh59wye.rs:14:71\n\
    \   |\n14 |     while let Some(i) = text.find(|c: char| c.is_ascii_lowercase()\
    \ && VOWELS.contains(c)) {\n   |                                             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut res = String::new();\n    for ch in text.chars() {\n\
    \        if !\"aeiouAEIOU\".contains(ch) {\n            res.push(ch);\n      \
    \  }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::from(\"\");\n    for c in text.chars()\
    \ {\n        if !c.is_ascii_alphabetic() || !c.is_ascii_lowercase() {\n      \
    \      continue;\n        }\n        if c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' {\n            result.push(c);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpy27upvp4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut vowels: Vec<char> = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut new_text: String = String::new();\n    for letter in text.chars()\
    \ {\n        if !vowels.contains(&letter) {\n            new_text.push(letter);\n\
    \        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmphvdyl3hf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|ch| {\n        match ch {\n          \
    \  'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => false,\n     \
    \       _ => true,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"\
    bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"\
    fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n\
    \    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n \
    \   assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmp6cngqmku.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let text_chars:\
    \ Vec<char> = text.chars().collect();\n    let mut result = String::new();\n \
    \   for i in text_chars {\n        if vowels.contains(&i) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmptnwjepsk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    unimplemented!(\"String '{}' without vowels\", text);\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: String '' without vowels',\
    \ /tmp/tmp0xmw7tpp.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase() || c != &'a'\
    \ && c != &'e' && c != &'i' && c != &'o' && c != &'u').collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmpm0ogc4tw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut text = text;\n    let mut vowels = HashSet::new();\n\
    \    vowels.insert('a');\n    vowels.insert('e');\n    vowels.insert('i');\n \
    \   vowels.insert('o');\n    vowels.insert('u');\n    vowels.insert('A');\n  \
    \  vowels.insert('E');\n    vowels.insert('I');\n    vowels.insert('O');\n   \
    \ vowels.insert('U');\n    text.retain(|c| !vowels.contains(&c));\n    text\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp6axhfgvf.rs:14:22\n   |\n14 |     let mut vowels = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' |\
    \ 'I' | 'O' | 'U' => {}\n            _ => result.push(c),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_lowercase() {\n            result.push(c);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\n\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp7rrmdba_.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.replace(|c: char| c.is_ascii_lowercase() && c.is_ascii_alphabetic()\
    \ && c.is_ascii_vowel(), \"\")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_vowel` found for type `char` in\
    \ the current scope\n  --> /tmp/tmp0f8ckomh.rs:13:83\n   |\n13 |     text.replace(|c:\
    \ char| c.is_ascii_lowercase() && c.is_ascii_alphabetic() && c.is_ascii_vowel(),\
    \ \"\")\n   |                                                                \
    \                   ^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `is_ascii`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut result = String::new();\n    for letter in text.chars()\
    \ {\n        match letter {\n            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E'\
    \ | 'I' | 'O' | 'U' => (),\n            _ => result.push(letter),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    text.chars().filter(|&ch| !vowels.contains(&ch)).collect()\n}\n\n\
    fn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_vowel()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_vowel` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpyxa3shoa.rs:13:32\n   |\n13 |     text.chars().filter(|c|\
    \ !c.is_vowel()).collect()\n   |                                ^^^^^^^^ method\
    \ not found in `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut s = text.chars().filter(|&c| !is_vowel(c)).collect::<String>();\n\
    \    s.shrink_to_fit();\n    s\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpfg0qfv0s.rs:13:43\n\
    \   |\n13 |     let mut s = text.chars().filter(|&c| !is_vowel(c)).collect::<String>();\n\
    \   |                                           ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    fn is_vowel(c: char) -> bool {\n        match c {\n       \
    \     'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => true,\n   \
    \         _ => false,\n        }\n    }\n\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if !is_vowel(c) {\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for letter in text.chars()\
    \ {\n        match letter {\n            'a' | 'A' | 'e' | 'E' | 'i' | 'I' | 'o'\
    \ | 'O' | 'u' | 'U' => {\n                continue;\n            }\n         \
    \   _ => {\n                new_text.push(letter);\n            }\n        }\n\
    \    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut str_buf = String::with_capacity(text.len());\n    for\
    \ char in text.chars() {\n        if !is_vowel(char) {\n            str_buf.push(char);\n\
    \        }\n    }\n    str_buf\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpd6aoeog_.rs:15:13\n\
    \   |\n15 |         if !is_vowel(char) {\n   |             ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    // TODO\n    let no_vowels: String = text.chars().filter(|&x|\
    \ !vec!['a', 'e', 'i', 'o', 'u'].contains(&x)).collect();\n    return no_vowels;\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmple6p94kg.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_lowercase() || !\"aeiou\"\
    .contains(*c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cBAA\"`,\n right: `\"cB\"`', /tmp/tmp66bfq3da.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let text_chars: Vec<char> = text.chars().collect();\n    let\
    \ mut result = String::new();\n    for c in text_chars {\n        match c {\n\
    \            'a' | 'A' | 'e' | 'E' | 'i' | 'I' | 'o' | 'O' | 'u' | 'U' => {}\n\
    \            _ => result.push(c),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c.is_ascii_alphabetic() && c.is_lowercase()\
    \ && c != &'a' && c != &'e' && c != &'i' && c != &'o' && c != &'u').collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpjlffunj0.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !c.is_ascii_alphabetic() || !c.is_ascii_lowercase()\
    \ || !is_vowel(*c)).collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpn4udu7fh.rs:13:85\n\
    \   |\n13 |     text.chars().filter(|c| !c.is_ascii_alphabetic() || !c.is_ascii_lowercase()\
    \ || !is_vowel(*c)).collect()\n   |                                          \
    \                                           ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| !is_vowel(*c)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpfc3os62m.rs:13:30\n\
    \   |\n13 |     text.chars().filter(|c| !is_vowel(*c)).collect()\n   |       \
    \                       ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|c| c.is_alphabetic() && c.to_lowercase().next().unwrap()\
    \ != 'a' && c.to_lowercase().next().unwrap() != 'e' && c.to_lowercase().next().unwrap()\
    \ != 'i' && c.to_lowercase().next().unwrap() != 'o' && c.to_lowercase().next().unwrap()\
    \ != 'u').collect()\n}\n\nfn main() {\n    let candidate = remove_vowels;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bcdfghjklm\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmp3nob0wen.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| !(x.is_ascii_lowercase() && (x == 'a'\
    \ || x == 'e' || x == 'i' || x == 'o' || x == 'u'))).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpwd1sw7hb.rs:13:60\n\
    \   |\n13 |     text.chars().filter(|x| !(x.is_ascii_lowercase() && (x == 'a'\
    \ || x == 'e' || x == 'i' || x == 'o' || x == 'u'))).collect()\n   |         \
    \                                                   ^^ no implementation for `&char\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpwd1sw7hb.rs:13:72\n   |\n13\
    \ |     text.chars().filter(|x| !(x.is_ascii_lowercase() && (x == 'a' || x ==\
    \ 'e' || x == 'i' || x == 'o' || x == 'u'))).collect()\n   |                 \
    \                                                       ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpwd1sw7hb.rs:13:84\n\
    \   |\n13 |     text.chars().filter(|x| !(x.is_ascii_lowercase() && (x == 'a'\
    \ || x == 'e' || x == 'i' || x == 'o' || x == 'u'))).collect()\n   |         \
    \                                                                           ^^\
    \ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpwd1sw7hb.rs:13:96\n\
    \   |\n13 |     text.chars().filter(|x| !(x.is_ascii_lowercase() && (x == 'a'\
    \ || x == 'e' || x == 'i' || x == 'o' || x == 'u'))).collect()\n   |         \
    \                                                                            \
    \           ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpwd1sw7hb.rs:13:108\n   |\n13 |     text.chars().filter(|x| !(x.is_ascii_lowercase()\
    \ && ("
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|ch| !is_vowel(*ch)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpbw23yfxi.rs:13:31\n\
    \   |\n13 |     text.chars().filter(|ch| !is_vowel(*ch)).collect()\n   |     \
    \                          ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    let mut new_text = String::new();\n    for c in text.chars()\
    \ {\n        if c.is_alphabetic() && !c.is_ascii_lowercase() {\n            new_text.push(c);\n\
    \        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"bcdf\\nghjklm\"`', /tmp/tmpqx7n4g0v.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// remove_vowels is a function that takes string and returns string without\
    \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfn remove_vowels(text: String)\
    \ -> String {\n    text.chars().filter(|x| x.is_alphabetic() && !is_vowel(*x)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
    )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"\
    fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"\
    eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\"\
    )), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")),\
    \ String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"\
    ybcd\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_vowel` in this scope\n  --> /tmp/tmpa8hnfd0r.rs:13:51\n\
    \   |\n13 |     text.chars().filter(|x| x.is_alphabetic() && !is_vowel(*x)).collect()\n\
    \   |                                                   ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
