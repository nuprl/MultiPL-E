name: HumanEval_98_count_upper
language: rust
prompt: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
  \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
  aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
  dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
  U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
  EEEE\")), 2);\n}\n"
completions: ['    unimplemented!();', "    // TODO: return the correct value\n  \
    \  -1", "    s.chars().enumerate().fold(0, |acc, (idx, c)| {\n        if idx %\
    \ 2 == 0 && is_upper_vowel(c) {\n            acc + 1\n        } else {\n     \
    \       acc\n        }\n    })", "  let chars = s.chars();\n  let mut count =\
    \ 0;\n  for (i, c) in chars.enumerate() {\n    if i % 2 == 0 && c.is_uppercase()\
    \ {\n      count += 1;\n    }\n  }\n  count", '    s.chars().enumerate().filter(|&(i,
    c)| (i % 2 == 0) && is_upper(c)).count() as isize', "    // Map used to simplify\
    \ the check for upper case\n    let vowels = HashMap::new(&[\n        ('a', true),\n\
    \        ('e', true),\n        ('i', true),\n        ('o', true),\n        ('u',\
    \ true)\n    ]);\n\n    let mut count = 0;\n    for (idx, ch) in s.chars().enumerate()\
    \ {\n        if (idx & 1) == 0 && vowels.get(&ch.to_lowercase().next().unwrap()).unwrap()\
    \ {\n            count += 1;\n        }\n    }\n    count", '    s.chars().enumerate().filter(|x|
    x.0 % 2 == 0).map(|x| x.1.is_uppercase() as isize).sum()', '    unimplemented!();',
  "    // Your code here\n    let mut uppercase = 0;\n    for (index, letter) in s.chars().enumerate()\
    \ {\n        if letter.is_uppercase() && index % 2 == 0 {\n            uppercase\
    \ += 1;\n        }\n    }\n    uppercase", "    if s.len() <= 1 {\n        return\
    \ 0;\n    }\n    let mut count = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    let vowel = \"aeiou\";\n    for (i, c) in s.chars().enumerate() {\n\
    \        if vowel.contains(c) && i % 2 == 0 {\n            count += 1;\n     \
    \   }\n    }\n    count", "    let mut count = 0;\n    let vowels = ['A', 'E',\
    \ 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(&c)\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", "  \
    \  let mut uppercase_vowels_even_indices = 0;\n    let vowels = ['A', 'E', 'I',\
    \ 'O', 'U'];\n    let chars = s.chars();\n    for (i, c) in chars.enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            uppercase_vowels_even_indices\
    \ += 1;\n        }\n    }\n    uppercase_vowels_even_indices", '    return 0;',
  "    let mut count = 0;\n    for i in s.chars().enumerate() {\n        if i.0 %\
    \ 2 == 0 && i.1.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count", "    //   Write your code here\n    return 0;", "    // TODO\n  \
    \  -1", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n \
    \       if (i % 2 == 0) && c.is_uppercase() {\n            count += 1;\n     \
    \   }\n    }\n    count", '    0', '    unimplemented!();', "    let mut count\
    \ = 0;\n    let mut vowels = Vec::new();\n    vowels.push('A');\n    vowels.push('E');\n\
    \    vowels.push('I');\n    vowels.push('O');\n    vowels.push('U');\n    let\
    \ chars: Vec<char> = s.chars().collect();\n    for (index, ch) in chars.iter().enumerate()\
    \ {\n        if (index % 2 == 0) && vowels.contains(ch) {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let mut count = 0;\n    for (i, ch) in\
    \ s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase() {\n    \
    \        count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for (index, character) in\
    \ s.chars().enumerate() {\n        if index % 2 == 0 && vowels.contains(&character)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.char_indices()\n\
    \        .filter(|&(idx, ch)| {\n            let even = (idx % 2) == 0;\n    \
    \        ch.is_uppercase() && even\n        })\n        .count() as isize", '    0',
  "    //unimplemented!()\n    let mut count = 0;\n    for (i,c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && is_vowel(c) && c.is_uppercase() {\n            count\
    \ += 1;\n        }\n    }\n    count", "    let mut counter = 0;\n    for (i,\
    \ c) in s.chars().enumerate() {\n        if (i % 2 == 0) && c.is_uppercase() {\n\
    \            counter += 1;\n        }\n    }\n    counter", "    let mut count\
    \ = 0;\n    let len = s.len();\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for i in 0..len {\n        if i % 2 == 0 && is_upper(chars[i]) {\n      \
    \      count += 1;\n        }\n    }\n    count", "    // TODO - add code here\n\
    \    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count", '    s.chars().enumerate().filter(|&(idx, c)| (idx % 2 == 0) && is_upper_vowel(c)).count()
    as isize', "    let mut c = 0;\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for (i, c) in chars.iter().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            c += 1;\n        }\n    }\n    c", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut r: isize\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            r += 1;\n        }\n    }\n    r", "    // implement\n    return\
    \ 0;", '    unimplemented!()', "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    let mut counter = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_uppercase() && i % 2 == 0 {\n            counter += 1;\n\
    \        }\n    }\n    counter", "    let mut c = 0;\n    let chars: Vec<char>\
    \ = s.chars().collect();\n    for (i, c) in chars.iter().enumerate() {\n     \
    \   if c.is_uppercase() && i % 2 == 0 {\n            c += 1;\n        }\n    }\n\
    \    c", "    let mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n\
    \    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(&c) &&\
    \ i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", '    return
    0;', "    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n  \
    \  for (i, c) in s.chars().enumerate() {\n        if vowels.contains(&c) && i\
    \ % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", "    s.chars().enumerate().fold(0,\
    \ |acc, (i, c)| {\n        if i % 2 == 0 && c.is_ascii_uppercase() {\n       \
    \     acc + 1\n        } else {\n            acc\n        }\n    })", '    return
    42;', "    s.chars().enumerate().fold(0, |count, (idx, c)| {\n        if idx %\
    \ 2 == 0 && is_upper(c) {\n            count + 1\n        } else {\n         \
    \   count\n        }\n    })", "    s.chars().enumerate().fold(0, |acc, (i, c)|\
    \ if i % 2 == 0 && c.is_uppercase() {\n        acc + 1\n    } else {\n       \
    \ acc\n    })", "    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        match c {\n       \
    \     'A' | 'E' | 'I' | 'O' | 'U' => if i % 2 == 0 {\n                count +=\
    \ 1;\n            },\n            _ => (),\n        }\n    }\n    count", "  \
    \  let mut counter = 0;\n    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n\
    \    let mut i = 0;\n    for c in s.chars() {\n        if i % 2 == 0 && vowels.contains(&c.to_string().as_str())\
    \ {\n            counter += 1;\n        }\n        i += 1;\n    }\n    counter",
  '    unimplemented!()', "    // let mut res = 0;\n    // for (i, c) in s.chars().enumerate()\
    \ {\n    //     if i % 2 == 0 && is_upper(c) {\n    //         res += 1;\n   \
    \ //     }\n    // }\n    // res\n    let num = s.chars().enumerate().filter(|x|\
    \ {\n        x.0 % 2 == 0 && is_upper(x.1)\n    }).count();\n    num as isize",
  "    // for each character in the string\n    // check if character is a vowel\n\
    \    // if vowel and even index, increment count\n\n    // count even number of\
    \ indices\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n\
    \        if i % 2 == 0 && is_vowel(c) && c.is_uppercase() {\n            count\
    \ += 1;\n        }\n    }\n    count", "    let mut count = 0;\n    for (i, c)\
    \ in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() {\n  \
    \          count += 1;\n        }\n    }\n    count", '    unimplemented!()',
  '    s.chars().enumerate().filter(|x|x.0 % 2 == 0).filter(|x|x.1.is_uppercase()).filter(|x|x.1.is_vowel()).count()
    as isize', "    s.chars().enumerate().fold(0, |count, (i, c)| {\n        if i\
    \ % 2 == 0 && c.is_uppercase() {\n            count + 1\n        } else {\n  \
    \          count\n        }\n    })", "    s.chars().enumerate().fold(0, |count,\
    \ (index, ch)| {\n        match index % 2 == 0 && ch.is_uppercase() {\n      \
    \      true => count + 1,\n            false => count,\n        }\n    })", " \
    \   let mut count = 0;\n    let mut index = 0;\n    for c in s.chars() {\n   \
    \     if index % 2 == 0 && c.is_uppercase() {\n            count += 1;\n     \
    \   }\n        index += 1;\n    }\n    count", '    unimplemented!()', "    let\
    \ mut count = 0;\n    for (i, ch) in s.chars().enumerate() {\n        if i % 2\
    \ == 0 && ch.is_uppercase() {\n            count += 1;\n        }\n    }\n   \
    \ count", "    let mut count = 0;\n    for (i, ch) in s.chars().enumerate() {\n\
    \        if i % 2 == 0 && ch.is_uppercase() {\n            count += 1;\n     \
    \   }\n    }\n    count", "    let mut sum = 0;\n    for (i, ch) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && ch.is_uppercase() {\n            sum += 1;\n   \
    \     }\n    }\n    sum", '    unimplemented!()', "    // TODO\n    0", "    let\
    \ mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2\
    \ == 0 && is_upper(c) {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i\
    \ % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    for (index, c) in s.chars().enumerate()\
    \ {\n        if index % 2 == 0 && c.is_uppercase() {\n            count += 1;\n\
    \        }\n    }\n    count", "    // TODO: Implement this function\n    s.chars().enumerate().fold(0,\
    \ |acc, (idx, c)| {\n        if idx % 2 == 0 && is_vowel(c) && c.is_uppercase()\
    \ {\n            acc + 1\n        } else {\n            acc\n        }\n    })",
  '    s.chars().enumerate().filter(|(n, c)| is_vowel(*c) && *n % 2 == 0).count()
    as isize', "    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n\
    \        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n      \
    \  }\n    }\n    count", "    s.chars().enumerate().filter(|x| x.0 % 2 == 0).filter(|x|\
    \ \n        match x.1 {\n            'A' | 'E' | 'I' | 'O' | 'U' => true,\n  \
    \          _ => false\n        }\n    ).count() as isize", "    // Complete this\
    \ function\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n\
    \        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n      \
    \  }\n    }\n    count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    // TODO\n    let mut count = 0;\n    for (i,\
    \ c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper_vowel(c) {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    let upper = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if upper.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    s.into_bytes()\n        .iter()\n        .enumerate()\n\
    \        .map(|(i, &c)| {\n            if i % 2 == 0 {\n                if c as\
    \ char == c.to_ascii_uppercase() {\n                    1\n                } else\
    \ {\n                    0\n                }\n            } else {\n        \
    \        0\n            }\n        })\n        .sum()", "    let mut vowel_count\
    \ = 0;\n    let mut is_even = true;\n    for c in s.chars() {\n        if is_even\
    \ && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  vowel_count += 1;\n        }\n        is_even = !is_even;\n    }\n    vowel_count",
  "    let v = vec!['A', 'E', 'I', 'O', 'U'];\n    let mut r = 0;\n    let u = s.to_uppercase();\n\
    \    for (i, c) in u.chars().enumerate() {\n        if i % 2 == 0 && v.contains(&c)\
    \ {\n            r += 1;\n        }\n    }\n    r", "    s.chars().enumerate().filter(|&(index,\
    \ char)| {\n        index % 2 == 0 && is_vowel(char) && char.is_uppercase()\n\
    \    }).count() as isize", "    // TODO\n    0", '    s.chars().enumerate().fold(0,
    |acc, (i, c)| acc + if i % 2 == 0 && is_upper_vowel(c) { 1 } else { 0 })', " \
    \   // TODO: Implement the solution here\n    -1", "    s.char_indices()\n   \
    \     .filter(|&(index, c)| index % 2 == 0 && c.is_uppercase())\n        .count()\
    \ as isize", '  s.chars().enumerate().fold(0, |acc, (i, c)| acc + (c.is_uppercase()
    && i % 2 == 0) as isize)', "    let mut counter = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_uppercase() && i % 2 == 0 {\n            counter += 1;\n\
    \        }\n    }\n    counter", "    // TODO Implement this function\n    unimplemented!();",
  "    let mut index = 0;\n    let mut count = 0;\n    for c in s.chars() {\n    \
    \    if index % 2 == 0 && c.is_uppercase() {\n            count += 1;\n      \
    \  }\n        index += 1;\n    }\n    count", "    let mut index = 0;\n    let\
    \ mut count = 0;\n    for c in s.chars() {\n        if c.is_uppercase() && index\
    \ % 2 == 0 {\n            count += 1;\n        }\n        index += 1;\n    }\n\
    \    count", "    // create a new string from s by mapping a function to each\
    \ character of the string\n    // map_chars will be a new string  with the function\
    \ applied to each char of s\n    let map_chars = s.chars().map(|c| {\n       \
    \ // create a string from the upper-case version of each character\n        let\
    \ s = c.to_uppercase().to_string();\n        // return the first character of\
    \ the string\n        s.chars().nth(0).unwrap()\n    });\n    // create a new\
    \ string, filter_chars, that contains only the characters in map_chars that are\
    \ vowels\n    let filter_chars = map_chars.filter(|c| {\n        // for each character,\
    \ check if it is a vowel\n        match c {\n            'A' => true,\n      \
    \      'E' => true,\n            'I' => true,\n            'O' => true,\n    \
    \        'U' => true,\n            _ => false,\n        }\n    });\n    // count\
    \ the number of vowels in the even-numbered indices of filter_chars\n    let mut\
    \ num_vowels = 0;\n    for i in 0..filter_chars.count() {\n        // count only\
    \ the even-numbered indices\n        if i % 2 == 0 {\n            num_vowels +=\
    \ 1;\n        }\n    }\n    // return the number of vowels\n    num_vowels", " \
    \   let mut res = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i\
    \ % 2 == 0 && c.is_uppercase() {\n            res += 1;\n        }\n    }\n  \
    \  res", "    // YOUR CODE HERE\n    let mut i = 0;\n    let mut count = 0;\n\
    \    for _c in s.chars() {\n        if i % 2 == 0 && _c.is_uppercase() {\n   \
    \         count += 1;\n        }\n        i += 1;\n    }\n    count", "    let\
    \ mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2\
    \ == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  "    s.char_indices()\n        .filter(|&(i, c)| (i % 2 == 0) && is_upper_vowel(c))\n\
    \        .count() as isize", "    let mut upper = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            upper += 1;\n        }\n    }\n    upper", "    s.chars().enumerate().fold(0,\
    \ |acc, (i, c)| {\n        match i % 2 == 0 && c.is_uppercase() {\n          \
    \  true => acc + 1,\n            false => acc,\n        }\n    })", "    s.chars().enumerate().fold(0,\
    \ |acc, (i, x)| match x {\n        'A' | 'E' | 'I' | 'O' | 'U' => if i % 2 ==\
    \ 0 { acc + 1 } else { acc },\n        _ => acc,\n    })", '    unimplemented!();',
  "    let mut total = 0;\n    for (idx, ch) in s.chars().enumerate() {\n        if\
    \ idx % 2 == 0 && ch.is_uppercase() {\n            total += 1;\n        }\n  \
    \  }\n    total", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", '    s.chars().enumerate().filter(|&(i, c)| (i %
    2 == 0) && c.is_uppercase()).count() as isize', "  // TODO: Implement\n  return\
    \ 0;", "    s.chars().enumerate().fold(0, |acc, (i, c)| {\n        if i % 2 ==\
    \ 0 && is_upper_vowel(c) {\n            acc + 1\n        } else {\n          \
    \  acc\n        }\n    })", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    s.chars().enumerate().fold(0, |acc, (i, x)|\
    \ {\n        if i % 2 == 0 && x.is_uppercase() {\n            return acc + 1;\n\
    \        }\n        acc\n    })", '    s.chars().enumerate().filter(|&(i, c)|
    i % 2 == 0 && c.is_uppercase()).count() as isize', '    s.chars().enumerate().filter(|&(i,
    c)| c.is_uppercase() && i % 2 == 0).count() as isize', "    s.chars().enumerate().fold(0,\
    \ |acc, (i, c)| {\n        if i % 2 == 0 && c.is_uppercase() {\n            acc\
    \ + 1\n        } else {\n            acc\n        }\n    })", "    // TODO\n \
    \   0", "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    s.chars()\n    \
    \    .enumerate()\n        .filter(|&(i, c)| vowels.contains(&c) && i % 2 == 0)\n\
    \        .count() as isize", "    s.chars().enumerate().fold(0, |acc, (i, c)|\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            acc + 1\n      \
    \  } else {\n            acc\n        }\n    })", '    unimplemented!()', '    unimplemented!()',
  '    s.chars().enumerate().filter(|&(i,c)| i % 2 == 0 && c.is_uppercase()).count()
    as isize', "    s.chars().enumerate().fold(0, |acc, (i, c)| if i % 2 == 0 && c.is_uppercase()\
    \ {\n        acc + 1\n    } else {\n        acc\n    })", "    s.chars().enumerate().fold(0,\
    \ |acc, (i, c)| {\n        match i % 2 == 0 && c.is_uppercase() {\n          \
    \  true => acc + 1,\n            false => acc,\n        }\n    })", '    unimplemented!();',
  "    // TODO\n    0", "    // TODO: Implement\n    0", "    return s.char_indices()\n\
    \            .filter(|(idx, c)| *idx % 2 == 0 && *c.is_uppercase())\n        \
    \    .map(|(_, _)| 1)\n            .sum();", "    let mut res = 0;\n    for (i,\
    \ c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() {\n\
    \            res += 1;\n        }\n    }\n    res", "    s.chars().enumerate().fold(0,\
    \ |mut acc, (i, c)| {\n        if i % 2 == 0 && c.is_uppercase() {\n         \
    \   acc += 1;\n        }\n        acc\n    })", "    let mut count = 0;\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    // YOUR CODE\
    \ HERE\n    unimplemented!();", "    // TODO\n    s.chars().enumerate().fold(0,\
    \ |acc, (idx, c)| {\n        if idx % 2 == 0 && c.is_uppercase() {\n         \
    \   acc + 1\n        } else {\n            acc\n        }\n    })", "    let mut\
    \ count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0\
    \ && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i\
    \ % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count", "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, v)| (i + 1) % 2 == 0 && vowels.contains(&v))\n\
    \        .count() as isize", "    let mut x = 0;\n    for i in 0..s.len() {\n\
    \        if i % 2 == 0 {\n            if is_vowel(s.chars().nth(i).unwrap()) {\n\
    \                x += 1;\n            }\n        }\n    }\n    x", "    let mut\
    \ count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0\
    \ && is_upper_vowel(c) {\n            count += 1;\n        }\n    }\n    count",
  "    if s.len() > 0 {\n        s.chars().enumerate().fold(0, |acc, (i, c)| acc +\
    \ (i % 2 == 0 && c.is_uppercase() as isize))\n    } else {\n        0\n    }",
  '    s.chars().enumerate().filter(|&(i, c)| c.is_uppercase() && i % 2 == 0).count()
    as isize', '    unimplemented!();', "    // YOUR CODE HERE\n    0", "    let mut\
    \ count = 0;\n    for (idx, c) in s.chars().enumerate() {\n        if (idx % 2\
    \ == 0) && c.is_uppercase() {\n            count += 1;\n        }\n    }\n   \
    \ count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n\
    \        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n      \
    \  }\n    }\n    count", "    let mut result = 0;\n    let s = s.to_uppercase();\n\
    \    for i in 1..s.len() {\n        if \"AEIOU\".contains(s.chars().nth(i).unwrap())\
    \ {\n            result += 1;\n        }\n    }\n    result", "    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!()',
  "    let mut counter = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ c.is_uppercase() && i % 2 == 0 {\n            counter += 1;\n        }\n   \
    \ }\n    counter", '    unimplemented!();', "    let vowels = vec!['A', 'E', 'I',\
    \ 'O', 'U'];\n    let mut count = 0;\n    for (index, c) in s.chars().enumerate()\
    \ {\n        if index % 2 == 0 && vowels.contains(&c) {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let length = s.len();\n    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", '    return s.chars().enumerate().filter(|(idx,
    char)| *idx % 2 == 0 && is_upper(char)).count() as isize;', "    s.char_indices()\n\
    \        .filter(|(i, c)| c.is_uppercase() && i % 2 == 0)\n        .count() as\
    \ isize", "    let mut counter = 0;\n    for (index, c) in s.chars().enumerate()\
    \ {\n        if index % 2 == 0 && c.is_uppercase() {\n            counter += 1;\n\
    \        }\n    }\n    counter", "    let mut count = 0;\n    for (index, letter)\
    \ in s.chars().enumerate() {\n        if index % 2 == 0 && letter.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars().enumerate().fold(0,\
    \ |mut a, (i, c)| {\n        if i % 2 == 0 && c.is_uppercase() {\n           \
    \ a += 1;\n        }\n        a\n    })", "    s.chars().enumerate().filter(|&(i,\
    \ c)| {\n        c.is_uppercase() && i % 2 == 0\n    }).count() as isize", " \
    \   let mut sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i\
    \ % 2 == 0 && c.is_uppercase() {\n            sum += 1;\n        }\n    }\n  \
    \  sum", '    return 0;', "    // TODO: Implement this function.\n    let mut\
    \ c = 0;\n    for (i, ch) in s.chars().enumerate() {\n        if i % 2 == 0 &&\
    \ ch.is_uppercase() {\n            c += 1;\n        }\n    }\n    c", "  let vowels\
    \ = \"AEIOU\";\n  let mut count = 0;\n  for (i, c) in s.chars().enumerate() {\n\
    \    if vowels.contains(c) && i % 2 == 0 {\n      count += 1;\n    }\n  }\n  count",
  "    let mut sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i %\
    \ 2 == 0 && c.is_uppercase() {\n            sum += 1;\n        }\n    }\n    sum",
  "    let mut count = 0;\n    for (index, letter) in s.chars().enumerate() {\n  \
    \      if index % 2 == 0 && letter.is_uppercase() {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && is_upper(c) {\n            count += 1;\n       \
    \ }\n    }\n    count", "    let mut number = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            number += 1;\n \
    \       }\n    }\n    number", "    let mut count = 0;\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n        }\n  \
    \  }\n    count", '    unimplemented!();', "    let mut counter = 0;\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            counter += 1;\n        }\n    }\n    counter", "    let mut count\
    \ = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    let chars: Vec<char>\
    \ = s.chars().collect();\n    for (i, &c) in chars.iter().enumerate() {\n    \
    \    for &v in vowels.iter() {\n            if i % 2 == 0 && c == v {\n      \
    \          count += 1;\n            }\n        }\n    }\n    count", "    let\
    \ mut c = 0;\n    for (i, ch) in s.chars().enumerate() {\n        if i % 2 ==\
    \ 0 && ch.is_uppercase() {\n            c += 1;\n        }\n    }\n    c", " \
    \   let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut n = 0;\n    let c: Vec<char> = s.chars().collect();\n\
    \    for i in 0..s.len() {\n        if i % 2 == 0 && is_upper_vowel(c[i]) {\n\
    \            n += 1;\n        }\n    }\n    n", '    unimplemented!()', "    let\
    \ mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2\
    \ == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for (i, x) in s.chars().enumerate() {\n        if i\
    \ % 2 == 0 && x.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count", "    s.chars().enumerate().fold(0, |acc, (i,c)| {\n        if i %\
    \ 2 == 0 && c.is_uppercase() {\n            acc + 1\n        } else {\n      \
    \      acc\n        }\n    })", "  // TODO: implement this function\n  return\
    \ 0;", "    // your code goes here\n    let vowels = \"AEIOU\";\n    let mut count\
    \ = 0;\n    let mut index = 0;\n    for c in s.chars() {\n        if vowels.contains(c)\
    \ && index % 2 == 0 {\n            count += 1;\n        }\n        index += 1;\n\
    \    }\n    count", '    s.chars().enumerate().fold(0, |acc, (i, c)| acc + if
    i % 2 == 0 && c.is_uppercase() { 1 } else { 0 })', "    s.chars().enumerate().fold(0,\
    \ |count, (i, c)| {\n        if i % 2 == 0 && c.is_uppercase() {\n           \
    \ count + 1\n        } else {\n            count\n        }\n    })", "    let\
    \ mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if is_upper(c)\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", "  let\
    \ mut result = 0;\n  for (index, c) in s.chars().enumerate() {\n    if index %\
    \ 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n   \
    \   result += 1;\n    }\n  }\n  result", '    count_condition(s, |c| c.is_ascii_uppercase()
    && is_even(c))', "    let mut count = 0;\n    for (i, letter) in s.chars().enumerate()\
    \ {\n        if letter.is_uppercase() && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let vowels = ['A', 'E', 'I', 'O', 'U'];\n\
    \    let mut v_count = 0;\n    for (i, c) in s.chars().enumerate() {\n       \
    \ if i % 2 == 0 && vowels.contains(&c) {\n            v_count += 1;\n        }\n\
    \    }\n    v_count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if (i % 2 == 0) && c.is_uppercase() {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for (index, letter)\
    \ in s.chars().enumerate() {\n        match letter {\n            'A' | 'E' |\
    \ 'I' | 'O' | 'U' => if index % 2 == 0 {\n                count += 1;\n      \
    \      },\n            _ => (),\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.bytes().enumerate().filter(|&(i,\
    \ b)| i % 2 == 0 && b >= b'A' && b <= b'Z').count() as isize", "    let mut count\
    \ = 0;\n    for (i, ch) in s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut n: isize\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            n += 1;\n        }\n    }\n    n", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if (i % 2 == 0) && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        match c {\n       \
    \     'A' | 'E' | 'I' | 'O' | 'U' => {\n                if i % 2 == 0 {\n    \
    \                count += 1;\n                }\n            }\n            _\
    \ => (),\n        }\n    }\n    count", "    s.as_bytes()\n        .iter()\n \
    \       .enumerate()\n        .filter(|(i, c)| {\n            *i % 2 == 0 && is_upper(*c)\n\
    \        })\n        .count() as isize", "    let mut count = 0;\n    let vowels\
    \ = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate() {\n  \
    \      if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n     \
    \   }\n    }\n    count", "    let mut c = 0;\n    let mut c_upper = 0;\n    for\
    \ i in s.chars() {\n        if c % 2 == 0 {\n            if i.is_uppercase() {\n\
    \                c_upper += 1;\n            }\n        }\n        c += 1;\n  \
    \  }\n    c_upper", '    unimplemented!();', "    // TODO: Implement this function\n\
    \    s.chars().enumerate().filter(|&(i, _)| i % 2 == 0)\n        .filter(|&(_,\
    \ c)| c.is_uppercase())\n        .count() as isize", "    let mut count = 0;\n\
    \    let mut vowel = HashSet::new();\n    vowel.insert('A');\n    vowel.insert('E');\n\
    \    vowel.insert('I');\n    vowel.insert('O');\n    vowel.insert('U');\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowel.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    let mut i = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n        i += 1;\n    }\n\
    \    count", "    // REPLACE ME WITH YOUR IMPLEMENTATION\n    unimplemented!()",
  "    let vowels = \"AEIOU\";\n    let mut count = 0;\n    for (idx, c) in s.chars().enumerate()\
    \ {\n        if idx % 2 == 0 && vowels.contains(c) {\n            count += 1;\n\
    \        }\n    }\n    count", "    // TODO\n    0", "    // YOUR CODE HERE\n\
    \    s.chars().enumerate().fold(0, |acc, (i, c)| {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            acc + 1\n        } else {\n            acc\n        }\n    })",
  "    s.chars().enumerate().fold(0, |total, (i, c)| {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            total + 1\n        } else {\n            total\n        }\n \
    \   })", "    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n\
    \    let mut idx = 0;\n    for c in s.chars() {\n        if vowels.contains(&c)\
    \ && idx % 2 == 0 {\n            count += 1;\n        }\n        idx += 1;\n \
    \   }\n    count", "    s.chars().enumerate().fold(0, |acc, (i, c)| {\n      \
    \  if i % 2 == 0 && c.is_uppercase() {\n            acc + 1\n        } else {\n\
    \            acc\n        }\n    })", '    s.chars().enumerate().filter(|&(i,
    c)| c.is_uppercase() && i % 2 == 0).count() as isize', "    // YOUR CODE HERE\n\
    \    unimplemented!();", "    let mut n = 0;\n    for i in s.chars().enumerate()\
    \ {\n        if i.0 % 2 == 0 && i.1.is_uppercase() {\n            n += 1;\n  \
    \      }\n    }\n    n"]
stop_tokens:
- "\n}"
