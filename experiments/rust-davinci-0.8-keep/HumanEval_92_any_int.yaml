name: HumanEval_92_any_int
language: rust
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
  \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n///\
  \ any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) -> bool\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
  \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
  \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
  \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
  \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
  \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
completions: ["    x.is_integer() && y.is_integer() && z.is_integer() &&\n       \
    \ (x == y + z || y == x + z || z == x + y)", '    ((x + y) == z || (x + z) ==
    y || (y + z) == x) && (x.is_integer() && y.is_integer() && z.is_integer())', '    (x
    - y).abs() + (x - z).abs() == y + z && (x - y).abs() == x - y && (x - z).abs()
    == x - z', "    let sum = x + y + z;\n    if x.round() == sum - y - z {\n    \
    \    return true;\n    } else if y.round() == sum - x - z {\n        return true;\n\
    \    } else if z.round() == sum - x - y {\n        return true;\n    }\n    false",
  '    x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || x == y
    - z || x == z - y)', "    x.is_finite() && y.is_finite() && z.is_finite() &&\n\
    \        (x + y == z || x + z == y || y + z == x)", "    // a `f64` can't be passed\
    \ to a `u8`\n    (x.round() == y.round() + z.round())\n        || (y.round() ==\
    \ x.round() + z.round())\n        || (z.round() == x.round() + y.round())", " \
    \   // if either of the values are not ints return false\n    if x.fract() !=\
    \ 0.0 || y.fract() != 0.0 || z.fract() != 0.0 {\n        return false;\n    }\n\
    \    // if any two of the values add up to the 3rd return true\n    x + y == z\
    \ || x + z == y || y + z == x", '    ((x + y == z) || (x + z == y) || (y + z ==
    x)) && (x.is_integer() && y.is_integer() && z.is_integer())', "    if x.is_finite()\
    \ && y.is_finite() && z.is_finite() {\n        return (x + y == z) || (x + z ==\
    \ y) || (y + z == x);\n    }\n    false", "    let sum = x + y + z;\n    if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n        x == sum - y - z || y == sum\
    \ - x - z || z == sum - x - y\n    } else {\n        false\n    }", "    if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n        if x + y == z || x + z == y ||\
    \ y + z == x {\n            return true;\n        }\n    }\n    false", "    //\
    \ check if any of the three numbers are equal to the sum of the other two\n  \
    \  x == y + z || y == x + z || z == x + y", "    if x.floor() == x && y.floor()\
    \ == y && z.floor() == z {\n        if x == y + z || y == x + z || z == x + y\
    \ {\n            return true;\n        }\n    }\n    false", '    x.floor() ==
    y.floor() + z.floor() || y.floor() == x.floor() + z.floor() || z.floor() == x.floor()
    + y.floor()', '    return x.floor() == y.floor() + z.floor() || y.floor() == x.floor()
    + z.floor() || z.floor() == x.floor() + y.floor();', '    x.is_integer() && y.is_integer()
    && z.is_integer() && (x == y + z || y == x + z || z == x + y)', "    x.fract()\
    \ == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 &&\n        (x == y + z || y\
    \ == x + z || z == x + y)", "    fn any_int2(x: i64, y: i64, z: i64) -> bool {\n\
    \        (x + y == z) || (x + z == y) || (y + z == x)\n    }\n    match (x.fract(),\
    \ y.fract(), z.fract()) {\n        (0.0, 0.0, 0.0) => any_int2(x as i64, y as\
    \ i64, z as i64),\n        _ => false,\n    }", "    if x == (y + z) || y == (x\
    \ + z) || z == (x + y) {\n        return true;\n    } else {\n        return false;\n\
    \    }", '    [x, y, z].iter().any(|&e| e == x + y + z - e && e % 1.0 == 0.0)',
  "    let x = if x.fract() == 0.0 { x as i64 } else { return false };\n    let y\
    \ = if y.fract() == 0.0 { y as i64 } else { return false };\n    let z = if z.fract()\
    \ == 0.0 { z as i64 } else { return false };\n    x == y + z || y == x + z ||\
    \ z == x + y", "    let numbers = vec![x, y, z];\n    numbers\n        .iter()\n\
    \        .enumerate()\n        .any(|(index, number)| numbers.iter().any(|x| x\
    \ == &(number + numbers[index]) && x.fract() == 0.0))", "    let mut result =\
    \ false;\n    if (x - y).abs() as u64 == z as u64 || (x - z).abs() as u64 == y\
    \ as u64 {\n        result = true;\n    }\n    result", "    let mut number_vec\
    \ = vec![x, y, z];\n    number_vec.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    number_vec[0] == number_vec[1] - number_vec[2]", "    let x_round = x.round();\n\
    \    let y_round = y.round();\n    let z_round = z.round();\n    let sum = x_round\
    \ + y_round;\n    if (x == sum && x == x_round && y == y_round) || (y == sum &&\
    \ y == y_round && x == x_round) {\n        return true;\n    }\n    let sum =\
    \ x_round + z_round;\n    if (x == sum && x == x_round && z == z_round) || (z\
    \ == sum && z == z_round && x == x_round) {\n        return true;\n    }\n   \
    \ let sum = y_round + z_round;\n    if (y == sum && y == y_round && z == z_round)\
    \ || (z == sum && z == z_round && y == y_round) {\n        return true;\n    }\n\
    \    false", '    x == y + z || y == x + z || z == x + y', '    (x.is_integer()
    && y.is_integer() && z.is_integer()) && (x + y == z || x + z == y || y + z ==
    x)', "    if x.is_integer() && y.is_integer() && z.is_integer() {\n        x ==\
    \ y + z || y == x + z || z == x + y\n    } else {\n        false\n    }", "  \
    \  x.is_integer() && y.is_integer() && z.is_integer() &&\n        ((x + y == z)\
    \ || (x + z == y) || (y + z == x))", "    let x = x.round();\n    let y = y.round();\n\
    \    let z = z.round();\n    if x == y + z || y == x + z || z == x + y {\n   \
    \     return true;\n    }\n    false", "    let x = x.round();\n    let y = y.round();\n\
    \    let z = z.round();\n    x == y + z || y == x + z || z == x + y", "    let\
    \ x_is_int = x.fract() == 0.0;\n    let y_is_int = y.fract() == 0.0;\n    let\
    \ z_is_int = z.fract() == 0.0;\n    let any_is_float = !x_is_int || !y_is_int\
    \ || !z_is_int;\n    let (x, y, z) = (x as i64, y as i64, z as i64);\n    if x\
    \ + y == z || x + z == y || y + z == x {\n        return !any_is_float;\n    }\n\
    \    false", "    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0\
    \ {\n        return x == y + z || y == x + z || z == x + y;\n    }\n    false",
  "    // TODO!\n    let mut result = false;\n    if (x % 1.0 == 0.0) && (y % 1.0\
    \ == 0.0) && (z % 1.0 == 0.0) {\n        if (x == y + z) || (y == x + z) || (z\
    \ == x + y) {\n            result = true;\n        }\n    }\n    result", "  \
    \  let x_int = x.floor() == x;\n    let y_int = y.floor() == y;\n    let z_int\
    \ = z.floor() == z;\n    let xy_sum = x + y;\n    let xz_sum = x + z;\n    let\
    \ yz_sum = y + z;\n    (x_int && y_int && z_int) && (x == xy_sum || x == xz_sum\
    \ || y == xy_sum || y == yz_sum || z == xz_sum || z == yz_sum)", "    let mut\
    \ ab = x + y;\n    let mut bc = y + z;\n    let mut ac = x + z;\n    if x.trunc()\
    \ == x && y.trunc() == y && z.trunc() == z {\n        return ab.trunc() == z ||\
    \ bc.trunc() == x || ac.trunc() == y;\n    }\n    false", "    let sum = x + y\
    \ + z;\n    x == sum - x - y || y == sum - x - z || z == sum - x - y", '    (x
    + y == z || x + z == y || y + z == x) && x.fract() == 0.0 && y.fract() == 0.0
    && z.fract() == 0.0', '    (x == y + z) || (y == x + z) || (z == x + y)', "  \
    \  x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 &&\n        (x ==\
    \ y + z || y == x + z || z == x + y)", '    (x + y == z || x + z == y || y + z
    == x) && (x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0)', "    //\
    \ let mut result = false;\n    // if (x + y == z) || (x + z == y) || (y + z ==\
    \ x) {\n    //     result = true;\n    // }\n    // result\n    (x + y == z) ||\
    \ (x + z == y) || (y + z == x)", '    (x == y + z || y == x + z || z == x + y)
    && (x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0)', "    fn is_int(x:\
    \ f64) -> bool {\n        x == x.floor()\n    }\n    if is_int(x) && is_int(y)\
    \ && is_int(z) {\n        if x + y == z || x + z == y || y + z == x {\n      \
    \      return true;\n        }\n    }\n    false", "    if x.is_i64() && y.is_i64()\
    \ && z.is_i64() {\n        return x == y + z || y == x + z || z == x + y;\n  \
    \  }\n    false", '    (x - y).abs() == z || (x - z).abs() == y || (y - z).abs()
    == x', "    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if\
    \ x + y == z || x + z == y || y + z == x {\n            return true;\n       \
    \ }\n    }\n    false", '    (x.is_integer() && y.is_integer() && z.is_integer())
    && (x == y + z || y == x + z || z == x + y)', "    let sum: f64 = x + y + z;\n\
    \    let sum: bool = sum.fract() == 0.0;\n    x.fract() == 0.0 && y.fract() ==\
    \ 0.0 && z.fract() == 0.0 && sum", "    if !x.is_integer() || !y.is_integer()\
    \ || !z.is_integer() {\n        return false;\n    }\n    if x + y == z || x +\
    \ z == y || y + z == x {\n        return true;\n    }\n    false", "    (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n        (x == y + z || y == x + z ||\
    \ z == x + y)", "    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        return x == y + z || y == x + z || z == x + y;\n    }\n    false", " \
    \   if x.trunc() == x && y.trunc() == y && z.trunc() == z {\n        if x == y\
    \ + z || y == x + z || z == x + y {\n            return true;\n        }\n   \
    \ }\n    false", "    if x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 {\n\
    \        return x == y + z || y == x + z || z == x + y;\n    }\n    false", '    (x
    + y == z || x + z == y || y + z == x) && x.is_integer() && y.is_integer() && z.is_integer()',
  '    x == y + z || y == x + z || z == x + y', "    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        if x == y + z || y == x + z || z == x + y {\n \
    \           return true;\n        }\n    }\n    false", "    if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n        return x == y + z || y == x +\
    \ z || z == x + y;\n    }\n    false", "    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        x == y + z || y == x + z || z == x + y\n    } else\
    \ {\n        false\n    }", '    x.is_integer() && y.is_integer() && z.is_integer()
    && (x == y + z || y == x + z || z == x + y)', "    if x.floor() == x && y.floor()\
    \ == y && z.floor() == z {\n        if x == y + z || y == x + z || z == x + y\
    \ {\n            return true;\n        }\n    }\n    false", "    let sum: f64\
    \ = x + y + z;\n    sum == x.floor() + y.floor() + z.floor()", "    let x = x.trunc();\n\
    \    let y = y.trunc();\n    let z = z.trunc();\n    if x == y + z || y == x +\
    \ z || z == x + y {\n        true\n    } else {\n        false\n    }", "    (x\
    \ - y).abs() < std::f64::EPSILON && x.is_sign_positive()\n        || (x - z).abs()\
    \ < std::f64::EPSILON && x.is_sign_positive()\n        || (y - z).abs() < std::f64::EPSILON\
    \ && y.is_sign_positive()", "    if x.is_integer() && y.is_integer() && z.is_integer()\
    \ {\n        if x + y == z || x + z == y || y + z == x {\n            return true;\n\
    \        }\n    }\n    false", "    let mut result = false;\n    if (x == y +\
    \ z) && (x.fract() == 0.0) && (y.fract() == 0.0) && (z.fract() == 0.0) {\n   \
    \     result = true;\n    } else if (y == x + z) && (x.fract() == 0.0) && (y.fract()\
    \ == 0.0) && (z.fract() == 0.0) {\n        result = true;\n    } else if (z ==\
    \ x + y) && (x.fract() == 0.0) && (y.fract() == 0.0) && (z.fract() == 0.0) {\n\
    \        result = true;\n    }\n    result", '    (x + y == z) | (x + z == y)
    | (y + z == x)', "    if x == y + z && x.fract() == 0. {\n        return true;\n\
    \    }\n    if y == x + z && y.fract() == 0. {\n        return true;\n    }\n\
    \    if z == x + y && z.fract() == 0. {\n        return true;\n    }\n    false",
  "    let xi = x.floor() == x;\n    let yi = y.floor() == y;\n    let zi = z.floor()\
    \ == z;\n    let is_int = xi && yi && zi;\n    let xy = x == y + z;\n    let xz\
    \ = x == z + y;\n    let yz = y == x + z;\n    if is_int && (xy || xz || yz) {\n\
    \        true\n    } else {\n        false\n    }", "    let sum = x + y + z;\n\
    \    x.trunc() + y.trunc() + z.trunc() == sum && (x == sum || y == sum || z ==\
    \ sum)", "    let ints = [x, y, z];\n    let mut flag = false;\n    for i in 0..3\
    \ {\n        for j in 0..3 {\n            if j != i {\n                for k in\
    \ 0..3 {\n                    if k != i && k != j {\n                        if\
    \ ints[j] + ints[k] == ints[i] {\n                            flag = true;\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    flag", "    if (x.is_sign_positive() || x.is_sign_negative())\
    \ && (y.is_sign_positive() || y.is_sign_negative()) && (z.is_sign_positive() ||\
    \ z.is_sign_negative()) {\n        return x + y == z || x + z == y || y + z ==\
    \ x;\n    }\n    false", "    if x.is_integer() && y.is_integer() && z.is_integer()\
    \ {\n        return x == y + z || y == x + z || z == x + y;\n    }\n    false",
  '    (x == y + z || y == x + z || z == x + y) && x.is_integer() && y.is_integer()
    && z.is_integer()', "    if x.is_integer() && y.is_integer() && z.is_integer()\
    \ {\n        (x == y + z) || (y == x + z) || (z == x + y)\n    } else {\n    \
    \    false\n    }", '    (x.trunc() == y.trunc() + z.trunc()) || (y.trunc() ==
    x.trunc() + z.trunc()) || (z.trunc() == x.trunc() + y.trunc())', "    if x.is_finite()\
    \ && y.is_finite() && z.is_finite() {\n        x == y + z || y == x + z || z ==\
    \ x + y\n    } else {\n        false\n    }", '    x.is_integer() && y.is_integer()
    && z.is_integer() && (x + y == z || x + z == y || y + z == x)', '    x == y +
    z || y == x + z || z == x + y', "    x.is_integer() && y.is_integer() && z.is_integer()\
    \ &&\n        (x + y == z || x + z == y || y + z == x)", "    if x.is_finite()\
    \ && y.is_finite() && z.is_finite() {\n        (x == y + z) || (y == x + z) ||\
    \ (z == x + y)\n    } else {\n        false\n    }", '    (x == y + z || y ==
    x + z || z == x + y) && (x.fract() == 0.0 && y.fract() == 0.0 && z.fract() ==
    0.0)', "    let sum: f64 = x + y + z;\n    if x.trunc() == x && y.trunc() == y\
    \ && z.trunc() == z {\n        return sum % 2.0 == 0.0;\n    }\n    false", " \
    \   let mut res = false;\n    if (x - y - z).abs() < 1e-10 || (y - x - z).abs()\
    \ < 1e-10 || (z - x - y).abs() < 1e-10 {\n        res = true;\n    }\n    res",
  "    if x.fract() != 0.0\n        && y.fract() != 0.0\n        && z.fract() != 0.0\n\
    \        && (x + y == z || x + z == y || y + z == x)\n    {\n        true\n  \
    \  } else {\n        false\n    }", '    (x == y + z) || (y == x + z) || (z ==
    x + y)', "    let x = x.round();\n    let y = y.round();\n    let z = z.round();\n\
    \    return x == y + z || y == x + z || z == x + y;", "    let mut result = false;\n\
    \    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if x ==\
    \ y + z || y == x + z || z == x + y {\n            result = true;\n        }\n\
    \    }\n    result", "    let mut largest = x;\n    let mut sum = 0.0;\n    if\
    \ y > largest {\n        largest = y;\n    }\n    if z > largest {\n        largest\
    \ = z;\n    }\n    sum = x + y + z - largest;\n    if largest == sum {\n     \
    \   return true;\n    }\n    return false;", '    (x + y == z) || (x + z == y)
    || (y + z == x)', "    let array = [x, y, z];\n    let sum = array.iter().sum::<f64>();\n\
    \    array.iter().any(|&x| (sum - x).abs() < std::f64::EPSILON && x.fract() ==\
    \ 0.0)", "    let x_is_int = x.floor() == x;\n    let y_is_int = y.floor() ==\
    \ y;\n    let z_is_int = z.floor() == z;\n    if !x_is_int || !y_is_int || !z_is_int\
    \ {\n        return false;\n    }\n    let sum = x + y + z;\n    let (first, second,\
    \ third) = (x, y, z);\n    first == second + third || second == first + third\
    \ || third == first + second", "    if x.is_finite() == false || y.is_finite()\
    \ == false || z.is_finite() == false {\n        return false;\n    }\n\n    if\
    \ x == y + z || y == x + z || z == x + y {\n        return true;\n    }\n    false",
  "    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n        x ==\
    \ y + z || y == x + z || z == x + y\n    } else {\n        false\n    }", "  \
    \  let mut result = false;\n    if x.is_integer() && y.is_integer() && z.is_integer()\
    \ {\n        if x == y + z || y == x + z || z == x + y {\n            result =\
    \ true;\n        }\n    }\n    result", "    let sum: i32 = x.round() as i32 +\
    \ y.round() as i32 + z.round() as i32;\n    let any_int = if x.round() as i32\
    \ == sum / 2 {\n        true\n    } else if y.round() as i32 == sum / 2 {\n  \
    \      true\n    } else if z.round() as i32 == sum / 2 {\n        true\n    }\
    \ else {\n        false\n    };\n    any_int", "    if x == y + z || y == x +\
    \ z || z == x + y {\n        if x == x.round() && y == y.round() && z == z.round()\
    \ {\n            return true;\n        }\n    }\n    false", "    return x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n        (x + y == z || x + z == y ||\
    \ y + z == x);", "    let sum = x + y + z;\n    let is_int = sum.fract() == 0.0;\n\
    \    let xy = x + y;\n    let xz = x + z;\n    let yz = y + z;\n    let xyz =\
    \ xy + z;\n    let x_is_int = x.fract() == 0.0;\n    let y_is_int = y.fract()\
    \ == 0.0;\n    let z_is_int = z.fract() == 0.0;\n    let xy_is_int = xy.fract()\
    \ == 0.0;\n    let xz_is_int = xz.fract() == 0.0;\n    let yz_is_int = yz.fract()\
    \ == 0.0;\n    let xyz_is_int = xyz.fract() == 0.0;\n    if is_int {\n       \
    \ if x_is_int && y_is_int && z_is_int {\n            return true;\n        }\n\
    \        if x_is_int && yz_is_int && z_is_int {\n            return true;\n  \
    \      }\n        if x_is_int && y_is_int && xz_is_int {\n            return true;\n\
    \        }\n        if x_is_int && yz_is_int && xyz_is_int {\n            return\
    \ true;\n        }\n        if xy_is_int && y_is_int && z_is_int {\n         \
    \   return true;\n        }\n        if xy_is_int && y_is_int && xz_is_int {\n\
    \            return true;\n        }\n        if xy_is_int && yz_is_int && xz_is_int\
    \ {\n            return true;\n        }\n        if xyz_is_int && y_is_int &&\
    \ z_is_int {\n            return true;\n        }\n        if xyz_is_int && y_is_int\
    \ && xz_is_int {\n            return true;\n        }\n        if xyz_is_int &&\
    \ yz_is_int && xz_is", '    x == y + z || y == x + z || z == x + y', "    if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n        return x == y + z || y == x +\
    \ z || z == x + y;\n    } else {\n        return false;\n    }", "    if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n        return x == y + z || y == x +\
    \ z || z == x + y;\n    }\n    false", "    // your code here\n    true", "  \
    \  if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n        x ==\
    \ y + z || y == x + z || z == x + y\n    } else {\n        false\n    }", "  \
    \  if x.is_finite() && y.is_finite() && z.is_finite() {\n        if x == y + z\
    \ || y == x + z || z == x + y {\n            return true;\n        }\n    }\n\
    \    false", "    let mut arr = [x, y, z];\n    arr.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    let [a, b, c] = arr;\n    a == b + c", "    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        if x == y + z || y == x + z || z == x + y {\n \
    \           return true;\n        }\n    }\n    false", '    x == y + z || y ==
    x + z || z == x + y', "    let x = x.trunc();\n    let y = y.trunc();\n    let\
    \ z = z.trunc();\n    let sum = x + y + z;\n    let mut count = 0;\n    if x ==\
    \ sum - y - z {\n        count += 1;\n    }\n    if y == sum - x - z {\n     \
    \   count += 1;\n    }\n    if z == sum - x - y {\n        count += 1;\n    }\n\
    \    return count == 1;", "    if x.floor() == x && y.floor() == y && z.floor()\
    \ == z {\n        if x + y == z || x + z == y || y + z == x {\n            return\
    \ true;\n        }\n    }\n    false", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && (x + y == z || x + z == y || y + z == x)', "    if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n        if x == y + z || y == x + z ||\
    \ z == x + y {\n            return true;\n        }\n    }\n    false", '    (x
    + y == z || x + z == y || y + z == x) && (x.fract() == 0.0 && y.fract() == 0.0
    && z.fract() == 0.0)', "    if x.is_sign_positive() && y.is_sign_positive() &&\
    \ z.is_sign_positive() {\n        (x + y == z) || (x + z == y) || (y + z == x)\n\
    \    } else {\n        false\n    }", '    ((x - y).abs() == z) || ((x - z).abs()
    == y) || ((y - z).abs() == x)', "    if !x.is_integer() || !y.is_integer() ||\
    \ !z.is_integer() {\n        return false;\n    }\n    if x + y == z || x + z\
    \ == y || y + z == x {\n        return true;\n    }\n    false", '    x.trunc()
    == y.trunc() + z.trunc() || y.trunc() == x.trunc() + z.trunc() || z.trunc() ==
    x.trunc() + y.trunc()', "    if x.is_sign_positive() && y.is_sign_positive() &&\
    \ z.is_sign_positive() {\n        let sum = (x + y + z) as i64;\n        println!(\"\
    any_int: {}\", sum);\n        if sum == x as i64 || sum == y as i64 || sum ==\
    \ z as i64 {\n            return true;\n        }\n    }\n    false", "    let\
    \ (sum, num) = if x.floor() == x && y.floor() == y && z.floor() == z {\n     \
    \   (x + y, z)\n    } else if x.floor() == x && y.floor() == y {\n        (x +\
    \ z, y)\n    } else if x.floor() == x && z.floor() == z {\n        (y + z, x)\n\
    \    } else if y.floor() == y && z.floor() == z {\n        (x + y, z)\n    } else\
    \ {\n        (0.0, 0.0)\n    };\n    (sum.floor() == sum && num.floor() == num)\
    \ && sum == num", "    if x.fract() != 0. && y.fract() != 0. && z.fract() != 0.\
    \ {\n        return false;\n    }\n    let sum: f64 = x + y + z;\n    let mut\
    \ numbers: Vec<f64> = vec![x, y, z];\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    if numbers[0] + numbers[1] == numbers[2] {\n        return true;\n    }\n\
    \    if numbers[0] + numbers[2] == numbers[1] {\n        return true;\n    }\n\
    \    if numbers[1] + numbers[2] == numbers[0] {\n        return true;\n    }\n\
    \    return false;", '    x.is_integer() && y.is_integer() && z.is_integer() &&
    (x + y == z || x + z == y || y + z == x)', '    (x == y + z || y == x + z || z
    == x + y) && (x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0)', "  \
    \  let sum: f64 = x + y + z;\n    if sum.round() == sum {\n        return true;\n\
    \    } else {\n        return false;\n    }", "    (x.trunc() + y.trunc() == z.trunc())\n\
    \        || (x.trunc() + z.trunc() == y.trunc())\n        || (y.trunc() + z.trunc()\
    \ == x.trunc())", "    let sum: f64 = x + y + z;\n    if !x.is_integer() || !y.is_integer()\
    \ || !z.is_integer() {\n        return false;\n    }\n    if x == sum / 2.0 ||\
    \ y == sum / 2.0 || z == sum / 2.0 {\n        return true;\n    }\n    false",
  "    let mut temp = [x, y, z];\n    temp.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    let new = (temp[0] + temp[1]) as i64;\n    let new2 = temp[2] as i64;\n \
    \   new == new2", "    let vec = vec![x, y, z];\n    if vec.iter().filter(|&v|\
    \ v.fract() != 0.0).count() > 0 {\n        return false;\n    }\n    for (i, _v)\
    \ in vec.iter().enumerate() {\n        for (j, _v) in vec.iter().enumerate() {\n\
    \            for (k, _v) in vec.iter().enumerate() {\n                if i !=\
    \ j && i != k && j != k {\n                    if vec[i] == vec[j] + vec[k] {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n    }\n    false", "    if !(x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0) {\n        return false;\n    }\n    (x\
    \ + y == z) || (x + z == y) || (y + z == x)", "    // Your code goes here\n  \
    \  unimplemented!()", "    //(x.is_integer() && y.is_integer() && z.is_integer())\
    \ &&\n    //(x == y + z || y == x + z || z == x + y)\n    [x, y, z].iter().any(|n|\
    \ {\n        let xyz = [x, y, z].iter().fold(0f64, |acc, n| acc + n);\n      \
    \  n.is_integer() && xyz - n == n\n    })", "    let x_int = x.trunc() == x;\n\
    \    let y_int = y.trunc() == y;\n    let z_int = z.trunc() == z;\n    if x_int\
    \ && y_int && z_int {\n        if x + y == z || x + z == y || y + z == x {\n \
    \           return true;\n        }\n    }\n    false", "    let (x, y, z) = (x.floor(),\
    \ y.floor(), z.floor());\n    x == y + z || y == x + z || z == x + y", "    [x,\
    \ y, z].iter().filter(|&f| f.trunc() == *f).count() == 3 &&\n        [x, y, z].iter().filter(|&f|\
    \ {\n            let mut other = [x, y, z].iter().filter(|&f2| f2 != f).collect::<Vec<_>>();\n\
    \            let sum = other[0] + other[1];\n            sum == *f\n        }).count()\
    \ >= 1", '    (x.is_integer() && y.is_integer() && z.is_integer()) && ((x == y
    + z) || (y == x + z) || (z == x + y))', "    if x.is_finite() && y.is_finite()\
    \ && z.is_finite() {\n        if (x + y == z) || (x + z == y) || (y + z == x)\
    \ {\n            return true;\n        }\n    }\n    false", "    let sum: f64\
    \ = x + y + z;\n    x == sum || y == sum || z == sum", '    x.is_integer() &&
    y.is_integer() && z.is_integer() && (x == y + z || y == x + z || z == x + y)',
  "    if x == (y + z) && y == (x + z) && z == (x + y) && x == x.round() && y == y.round()\
    \ && z == z.round() {\n        return true;\n    }\n    false", '    x.round()
    + y.round() == z.round() || x.round() + z.round() == y.round() || y.round() +
    z.round() == x.round()', '    x + y == z || x + z == y || y + z == x', '    (x.fract()
    == 0.0 && y.fract() == 0.0 && z.fract() == 0.0) && (x + y == z || x + z == y ||
    y + z == x)', '    x.floor() == y.floor() + z.floor() || y.floor() == x.floor()
    + z.floor() || z.floor() == x.floor() + y.floor()', '    (x.is_integer() && y.is_integer()
    && z.is_integer()) && (x == y + z || y == x + z || z == x + y)', "    let mut\
    \ result = false;\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \        result = x == y + z || y == x + z || z == x + y;\n    }\n    result",
  "    (x.floor() == x && y.floor() == y && z.floor() == z) &&\n        (x + y ==\
    \ z || x + z == y || y + z == x)", "    if !x.is_finite() || !y.is_finite() ||\
    \ !z.is_finite() {\n        return false;\n    }\n    let v = vec![x, y, z];\n\
    \    let mut sum = 0.0;\n    for i in v.iter() {\n        sum += i;\n    }\n \
    \   if sum.is_finite() {\n        for i in v.iter() {\n            if sum - i\
    \ == i {\n                return true;\n            }\n        }\n    }\n    false",
  '    (x + y == z || x + z == y || y + z == x) && (x == x.trunc() && y == y.trunc()
    && z == z.trunc())', "    if x.is_integer() && y.is_integer() && z.is_integer()\
    \ {\n        x == y + z || y == x + z || z == x + y\n    } else {\n        false\n\
    \    }", "    let sum: f64 = x + y + z;\n    (sum % 2.0 == 0.0) && (sum % 3.0\
    \ == 0.0)", "    if x.is_integer() && y.is_integer() && z.is_integer() {\n   \
    \     if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false", "    (x.fract() == 0.0 && y.fract() == 0.0 && z.fract()\
    \ == 0.0) &&\n        (x == y + z || y == x + z || z == x + y)", "    let x =\
    \ x.round();\n    let y = y.round();\n    let z = z.round();\n    if x == y +\
    \ z || x + y == z || x + z == y {\n        true\n    } else {\n        false\n\
    \    }", "    let a = x.floor() == x;\n    let b = y.floor() == y;\n    let c\
    \ = z.floor() == z;\n    if a && b && c {\n        x + y == z || x + z == y ||\
    \ y + z == x\n    } else {\n        false\n    }", '    return (x % 1.0 == 0.0
    && y % 1.0 == 0.0 && z % 1.0 == 0.0) && (x == y + z || y == x + z || z == x +
    y);', "    if x.is_finite() && y.is_finite() && z.is_finite() {\n        x ==\
    \ y + z || y == x + z || z == x + y\n    } else {\n        false\n    }", "  \
    \  x.is_integer() && y.is_integer() && z.is_integer() &&\n        ((x == y + z)\
    \ || (y == x + z) || (z == x + y))", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && (x + y == z || x + z == y || y + z == x)', "    if x.is_sign_positive()\
    \ && y.is_sign_positive() && z.is_sign_positive() {\n        if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n            if x == y + z || y == x +\
    \ z || z == x + y {\n                return true;\n            }\n        }\n\
    \    }\n    false", '    (x.is_integer() && y.is_integer() && z.is_integer())
    && (x + y == z || x + z == y || y + z == x)', '    (x - y).abs() == z || (x -
    z).abs() == y || (y - z).abs() == x', '    x.is_integer() && y.is_integer() &&
    z.is_integer() && (x + y == z || x + z == y || y + z == x)', "    if x.round()\
    \ == y.round() + z.round() || y.round() == x.round() + z.round() || z.round()\
    \ == x.round() + y.round() {\n        true\n    } else {\n        false\n    }",
  "    if x.is_finite() && y.is_finite() && z.is_finite() {\n        let sum = x +\
    \ y;\n        x == sum - z || y == sum - z || z == sum - x\n    } else {\n   \
    \     false\n    }", "    if x.is_integer() && y.is_integer() && z.is_integer()\
    \ {\n        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false", '    x.is_integer() && y.is_integer() && z.is_integer()
    && ((x + y == z) || (x + z == y) || (y + z == x))', "    let mut output = false;\n\
    \    let mut total = 0.0;\n    let mut not_sum = vec![];\n    let mut sum_vec\
    \ = vec![];\n    let mut sum = 0.0;\n    let mut num = 0.0;\n    let mut sum_bool\
    \ = false;\n    let mut num_bool = false;\n    let mut vec = vec![x, y, z];\n\
    \    for i in vec.iter() {\n        if i % 1.0 == 0.0 {\n            not_sum.push(i);\n\
    \        } else {\n            sum_vec.push(i);\n        }\n    }\n    if sum_vec.len()\
    \ > 1 {\n        return false;\n    }\n    for i in not_sum.iter() {\n       \
    \ total += i;\n    }\n    for i in sum_vec.iter() {\n        if i % 1.0 == 0.0\
    \ {\n            sum_bool = true;\n        } else {\n            num_bool = true;\n\
    \        }\n        sum += i;\n        num += i;\n    }\n    if sum_bool == true\
    \ && num_bool == false {\n        if total - num == num {\n            output\
    \ = true;\n        }\n    }\n    output", "    let mut vec = vec![x, y, z];\n\
    \    vec.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let [a, b, c] = vec;\n\
    \    a.is_integer() && b.is_integer() && c.is_integer() && a + b == c", "    if\
    \ x.is_integer() && y.is_integer() && z.is_integer() {\n        if x == y + z\
    \ || y == x + z || z == x + y {\n            return true;\n        }\n    }\n\
    \    false", '    (x + y == z) || (x + z == y) || (y + z == x)', '    (x + y ==
    z || x + z == y || y + z == x) && (x.is_integer() && y.is_integer() && z.is_integer())',
  '    (x.floor() == x) && (y.floor() == y) && (z.floor() == z) && (x + y == z ||
    x + z == y || y + z == x)', '    (x + y == z || x + z == y || y + z == x) && x.fract()
    == 0.0 && y.fract() == 0.0 && z.fract() == 0.0', "    let x_int = x.is_integer();\n\
    \    let y_int = y.is_integer();\n    let z_int = z.is_integer();\n    let sum\
    \ = x + y + z;\n    if x_int && y_int && z_int {\n        if x == sum / 2.0 {\n\
    \            return true;\n        } else if y == sum / 2.0 {\n            return\
    \ true;\n        } else if z == sum / 2.0 {\n            return true;\n      \
    \  }\n    }\n    false", "    (x.is_integer() && y.is_integer() && z.is_integer())\
    \ &&\n        (x + y == z || x + z == y || y + z == x)", '    (x == y + z || y
    == x + z || z == x + y) && x.is_integer() && y.is_integer() && z.is_integer()',
  "    let numbers = vec![x, y, z];\n    let mut sum = 0.0;\n    for number in numbers.iter()\
    \ {\n        if (*number % 1.0) != 0.0 {\n            return false;\n        }\n\
    \        sum += number;\n    }\n    let third_number = sum - x - y;\n    let mut\
    \ contains_sum = false;\n    for number in numbers.iter() {\n        if *number\
    \ == third_number {\n            contains_sum = true;\n        }\n    }\n    contains_sum",
  '    x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || y == x
    + z || z == x + y)', "    let x_i = x.round() as i64;\n    let y_i = y.round()\
    \ as i64;\n    let z_i = z.round() as i64;\n    let x_f = x.floor() as i64;\n\
    \    let y_f = y.floor() as i64;\n    let z_f = z.floor() as i64;\n    (x_i ==\
    \ y_f + z_f) || (y_i == x_f + z_f) || (z_i == x_f + y_f)", "    if x.trunc() ==\
    \ x && y.trunc() == y && z.trunc() == z {\n        if x == y + z || y == x + z\
    \ || z == x + y {\n            return true;\n        }\n    }\n    false", " \
    \   if x.is_integer() && y.is_integer() && z.is_integer() {\n        (x == y +\
    \ z) || (y == x + z) || (z == x + y)\n    } else {\n        false\n    }", '    x.is_integer()
    && y.is_integer() && z.is_integer() && (x == y + z || y == x + z || z == x + y)',
  "    // Write code here\n    unimplemented!();", "    let mut is_int = false;\n\
    \    if x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 {\n        is_int =\
    \ true;\n    }\n    return is_int && (x == y + z || x == y - z || x == z - y);",
  "    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n        if x\
    \ == y + z || y == x + z || z == x + y {\n            return true;\n        }\n\
    \    }\n    false", '    (x == y + z || y == x + z || z == x + y) && (x.is_sign_positive()
    && y.is_sign_positive() && z.is_sign_positive())', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer() &&\n        (x == y + z || y == x + z || z == x + y)", '    (x
    + y == z || x + z == y || y + z == x) && (x.fract() == 0.0 && y.fract() == 0.0
    && z.fract() == 0.0)', "    if x.is_integer() && y.is_integer() && z.is_integer()\
    \ {\n        return x + y == z || x + z == y || y + z == x;\n    }\n    false",
  "    let x_y_sum = x + y;\n    let y_z_sum = y + z;\n    let x_z_sum = x + z;\n\
    \    if x_y_sum == z || y_z_sum == x || x_z_sum == y {\n        return true;\n\
    \    } else {\n        return false;\n    }", "    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        x == y + z || y == x + z || z == x + y\n    } else\
    \ {\n        false\n    }", "    let is_int = |x: f64| x.floor() == x;\n    is_int(x)\
    \ && is_int(y) && is_int(z) &&\n        (x + y == z || x + z == y || y + z ==\
    \ x)", "    if x == 0.0 && y == 0.0 && z == 0.0 {\n        false\n    } else if\
    \ x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 {\n        x == y + z ||\
    \ y == x + z || z == x + y\n    } else {\n        false\n    }", '    (x + y ==
    z || x + z == y || y + z == x) && x.is_integer() && y.is_integer() && z.is_integer()',
  "    let mut v = vec![x, y, z];\n    v.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    v[0] + v[1] == v[2] && x.floor() == x && y.floor() == y && z.floor() == z",
  "    let mut sum = x + y + z;\n    let mut int = x.round() + y.round() + z.round();\n\
    \    if int == sum {\n        return true;\n    }\n    return false;", "    let\
    \ mut list = vec![x, y, z];\n    list.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    if list[0].is_sign_positive() && list[1].is_sign_positive() && list[2].is_sign_positive()\n\
    \        && list[0].trunc() == list[0] && list[1].trunc() == list[1] && list[2].trunc()\
    \ == list[2]\n    {\n        return true;\n    }\n    false", '    x.is_integer()
    && y.is_integer() && z.is_integer() && ((x + y == z) || (x + z == y) || (y + z
    == x))', "    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false", '    (x == y + z || y == x + z || z == x + y) && x.is_integer()
    && y.is_integer() && z.is_integer()']
stop_tokens:
- "\n}"
