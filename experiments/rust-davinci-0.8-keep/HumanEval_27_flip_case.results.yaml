name: HumanEval_27_flip_case
language: rust
results:
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            flipped.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped.push(c.to_ascii_uppercase());\n       \
    \ }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip case for {}\", string);\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip case for ', /tmp/tmpdu73klet.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            result.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut buffer = String::with_capacity(string.len());\n\
    \    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n        \
    \    buffer.push(c.to_ascii_lowercase());\n        } else {\n            buffer.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    buffer\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().collect::<String>());\n\
    \        } else {\n            flipped.push(c.to_lowercase().collect::<String>());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp020g6ds4.rs:8:26\n  |\n8 |\
    \             flipped.push(c.to_uppercase().collect::<String>());\n  |       \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp020g6ds4.rs:10:26\n\
    \   |\n10 |             flipped.push(c.to_lowercase().collect::<String>());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.swap_case()).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpq4q164ae.rs:5:30\n  |\n5 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped_string = String::new();\n    for c\
    \ in string.chars() {\n        if c.is_ascii_lowercase() {\n            flipped_string.push(c.to_ascii_uppercase());\n\
    \        } else {\n            flipped_string.push(c.to_ascii_lowercase());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        x if x.is_lowercase()\
    \ => x.to_uppercase().next().unwrap(),\n        x if x.is_uppercase() => x.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpefx4gii6.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = String::new();\n    for character\
    \ in string.chars() {\n        if character.is_uppercase() {\n            result.push(character.to_lowercase().next().unwrap());\n\
    \        } else {\n            result.push(character.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Return a copy of {} but with the case\
    \ flipped\", string)\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Return a copy of  but with\
    \ the case flipped', /tmp/tmpgxs826iv.rs:5:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| match x {\n        'a'...'z'\
    \ => x.to_ascii_uppercase(),\n        'A'...'Z' => x.to_ascii_lowercase(),\n \
    \       _ => x,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"flip_case('{}')\", string);\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: flip_case('')', /tmp/tmphpirki8v.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => (c as u8 - 'a' as u8 + 'A' as u8) as char,\n            'A'...'Z'\
    \ => (c as u8 - 'A' as u8 + 'a' as u8) as char,\n            _ => c,\n       \
    \ }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqun1ynj3.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut ret = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            ret.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            ret.push(c.to_uppercase().next().unwrap());\n \
    \       }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi303af3p.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n  unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphed9ruis.rs:5:3\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            new_string.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            new_string.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.is_ascii_uppercase() { c.to_ascii_lowercase()\
    \ } else { c.to_ascii_uppercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `{`\n\
    \ --> /tmp/tmp4d6wnixo.rs:5:51\n  |\n5 |     string.chars().map(|c| c.is_ascii_uppercase()\
    \ { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() }).collect()\n  | \
    \                                                 -^ expected one of `)`, `,`,\
    \ `.`, `?`, or an operator\n  |                                              \
    \    |\n  |                                                  help: missing `,`\n\
    \nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `else`\n\
    \ --> /tmp/tmp4d6wnixo.rs:5:78\n  |\n5 |     string.chars().map(|c| c.is_ascii_uppercase()\
    \ { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() }).collect()\n  | \
    \                                                                            \
    \ ^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due\
    \ to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp11wum0c7.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| x.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpvnydv5m6.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // \u5C06\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u5B57\
    \u7B26\u6570\u7EC4\n    let mut chars = string.chars();\n    // \u5C06\u5B57\u7B26\
    \u6570\u7EC4\u8F6C\u6362\u4E3A\u5B57\u7B26\u8FED\u4EE3\u5668\n    let mut iter\
    \ = chars.map(|c| c.to_ascii_lowercase());\n    // \u5C06\u5B57\u7B26\u8FED\u4EE3\
    \u5668\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\n    let new_string: String = iter.collect();\n\
    \    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpez5b70fl.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\n\
    \        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()\
    \ } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_lowercase().next().unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmp4dml9v6w.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let chars: Vec<char> = string.chars().collect();\n\
    \    let flipped: Vec<char> = chars.iter().map(|c| flip_char(*c)).collect();\n\
    \    flipped.iter().collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `flip_char` in this scope\n --> /tmp/tmp40xg0j7c.rs:6:51\n\
    \  |\n6 |     let flipped: Vec<char> = chars.iter().map(|c| flip_char(*c)).collect();\n\
    \  |                                                   ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n    \
    \    c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().nth(0).unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().nth(0).unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            result.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().collect::<String>());\n\
    \        } else {\n            flipped.push(c.to_uppercase().collect::<String>());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8x3blj4w.rs:8:26\n  |\n8 |\
    \             flipped.push(c.to_lowercase().collect::<String>());\n  |       \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8x3blj4w.rs:10:26\n\
    \   |\n10 |             flipped.push(c.to_uppercase().collect::<String>());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpikbrivx0.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| match x {\n        x if x.is_ascii_lowercase()\
    \ => x.to_ascii_uppercase(),\n        x if x.is_ascii_uppercase() => x.to_ascii_lowercase(),\n\
    \        _ => x,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().collect::<String>()\n        } else {\n    \
    \        c.to_lowercase().collect::<String>()\n        }\n    }).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp9n8feuv.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut s = String::with_capacity(string.len());\n\
    \    for c in string.chars() {\n        s.push(c.to_ascii_uppercase().to_ascii_lowercase());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmppbgugri8.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()\
    \ } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n  string.chars().map(|x| x.to_lowercase().next().unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpc0xq_kao.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut output: String = String::new();\n    for i\
    \ in string.chars() {\n        if i.is_lowercase() {\n            output.push(i.to_uppercase().to_string());\n\
    \        } else {\n            output.push(i.to_lowercase().to_string());\n  \
    \      }\n    }\n    output\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpphxiz9ie.rs:8:25\n  |\n8 |\
    \             output.push(i.to_uppercase().to_string());\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpphxiz9ie.rs:10:25\n   |\n10 |\
    \             output.push(i.to_lowercase().to_string());\n   |               \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().collect::<String>()\n        } else {\n    \
    \        c.to_lowercase().collect::<String>()\n        }\n    }).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpinaa9px7.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Flip character case, as described in the function\
    \ docstring.\n    string.chars().map(|c| {\n        match c {\n            'a'...'z'\
    \ => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|char| if char.is_uppercase() {\
    \ char.to_lowercase().next().unwrap() } else { char.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|char| {\n        if char.is_ascii_lowercase()\
    \ {\n            char.to_ascii_uppercase()\n        } else {\n            char.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().collect::<String>(),\n        c if c.is_uppercase() => c.to_lowercase().collect::<String>(),\n\
    \        _ => c.to_string(),\n    }).collect::<String>()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            new_string.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            new_string.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n    \
    \    c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut string = string;\n    let string_len = string.len();\n\
    \    for i in 0..string_len {\n        let mut character = string.remove(i);\n\
    \        if character.is_ascii_uppercase() {\n            character = character.to_ascii_lowercase();\n\
    \        } else {\n            character = character.to_ascii_uppercase();\n \
    \       }\n        string.insert(i, character);\n    }\n    string\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmph21oo00g.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp58rdc6t4.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpvucugjp7.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for character\
    \ in string.chars() {\n        if character.is_ascii_lowercase() {\n         \
    \   flipped.push(character.to_ascii_uppercase());\n        } else if character.is_ascii_uppercase()\
    \ {\n            flipped.push(character.to_ascii_lowercase());\n        } else\
    \ {\n            flipped.push(character);\n        }\n    }\n    flipped\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            flipped.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped.push(c.to_ascii_uppercase());\n       \
    \ }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.swap_case()).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpemjh9wo4.rs:5:30\n  |\n5 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbvxyp4kf.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"flip_case({})\", string)\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: flip_case()', /tmp/tmpi4wopfhi.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut output = String::new();\n    for c in string.chars()\
    \ {\n        output.push(if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        });\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp032pn1jj.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut chars = string.chars();\n    match chars.next()\
    \ {\n        None => string,\n        Some(c) => format!(\"{}{}\",\n         \
    \                  c.to_lowercase().to_string(),\n                           flip_case(chars.collect()))\n\
    \    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmppjp1dkw3.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n  unimplemented!(\"Flip the case of the string '{}'\",\
    \ string);\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip the case of the string\
    \ ''', /tmp/tmplz9p1sbv.rs:5:3\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // TODO: Write your solution here\n    let mut flipped\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            flipped.push(c.to_ascii_uppercase());\n        } else {\n   \
    \         flipped.push(c.to_ascii_lowercase());\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|ch| if ch.is_lowercase() {\n  \
    \      ch.to_uppercase().nth(0).unwrap()\n    } else {\n        ch.to_lowercase().nth(0).unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Hint: The `.to_uppercase()` and `.to_lowercase()`\
    \ methods might be helpful\n    let mut result: String = \"\".to_string();\n \
    \   for character in string.chars() {\n        if character.is_ascii_uppercase()\
    \ {\n            result.push(character.to_ascii_lowercase());\n        } else\
    \ {\n            result.push(character.to_ascii_uppercase());\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // flip_case(&String) -> &String\n    let mut new_string\
    \ = String::new();\n    for character in string.chars() {\n        if character.is_lowercase()\
    \ {\n            new_string.push(character.to_uppercase().next().unwrap());\n\
    \        } else if character.is_uppercase() {\n            new_string.push(character.to_lowercase().next().unwrap());\n\
    \        } else {\n            new_string.push(character);\n        }\n    }\n\
    \    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // .chars() method produces an iterator over the characters\
    \ of a string\n    string.chars().map(|c| {\n        if c.is_lowercase() {\n \
    \           c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpek21_0ro.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            new_string.push(c.to_ascii_uppercase());\n\
    \        } else {\n            new_string.push(c.to_ascii_lowercase());\n    \
    \    }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' ... 'z'\
    \ => (c as u8 - 'a' as u8 + 'A' as u8) as char,\n        'A' ... 'Z' => (c as\
    \ u8 - 'A' as u8 + 'a' as u8) as char,\n        _ => c,\n    }).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped_case = String::with_capacity(string.len());\n\
    \    for letter in string.chars() {\n        if letter.is_ascii_uppercase() {\n\
    \            flipped_case.push(letter.to_ascii_lowercase());\n        } else {\n\
    \            flipped_case.push(letter.to_ascii_uppercase());\n        }\n    }\n\
    \    flipped_case\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip all the letters in string to\
    \ their opposite case\")\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip all the letters in string\
    \ to their opposite case', /tmp/tmpv_r9xbgv.rs:5:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| {\n        if x.is_uppercase()\
    \ {\n            x.to_lowercase().collect::<String>()\n        } else {\n    \
    \        x.to_uppercase().collect::<String>()\n        }\n    }).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.is_ascii_lowercase() ? c.to_ascii_uppercase()\
    \ : c.to_ascii_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: casts cannot be followed by a method call\n --> /tmp/tmpth26wtm8.rs:5:53\n\
    \  |\n5 |     string.chars().map(|c| c.is_ascii_lowercase() ? c.to_ascii_uppercase()\
    \ : c.to_ascii_lowercase()).collect()\n  |                                   \
    \                  ^^^^^^^^^^^^^^^^^^^^^^----\n  |                           \
    \                                                |\n  |                      \
    \                                                     help: remove the type ascription\n\
    \nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `c`\n --> /tmp/tmpth26wtm8.rs:5:53\n\
    \  |\n5 |     string.chars().map(|c| c.is_ascii_lowercase() ? c.to_ascii_uppercase()\
    \ : c.to_ascii_lowercase()).collect()\n  |                                   \
    \                 -^ expected one of `)`, `,`, `.`, `?`, or an operator\n  | \
    \                                                   |\n  |                   \
    \                                 help: missing `,`\n\nerror[E0425]: cannot find\
    \ value `c` in this scope\n --> /tmp/tmpth26wtm8.rs:5:53\n  |\n5 |     string.chars().map(|c|\
    \ c.is_ascii_lowercase() ? c.to_ascii_uppercase() : c.to_ascii_lowercase()).collect()\n\
    \  |                                                     ^ expecting a type here\
    \ because of type ascription\n\nerror[E0412]: cannot find type `c` in this scope\n\
    \ --> /tmp/tmpth26wtm8.rs:5:78\n  |\n5 |     string.chars().map(|c| c.is_ascii_lowercase()\
    \ ? c.to_ascii_uppercase() : c.to_ascii_lowercase()).collect()\n  |          \
    \                                                                    ^ expecting\
    \ a type here because of type ascription\n\nerror[E0061]: this function takes\
    \ 1 argument but 2 arguments were supplied\n   --> /tmp/tmpth26wtm8.rs:5:20\n\
    \    |\n5   |     string.chars().map(|c| c.is_ascii_lowercase() ? c.to_ascii_uppercase()\
    \ : c.to_ascii_lowercase()).collect()\n    |                    ^^^ ----------------------------\
    \ ----------------------------------------------- supplied 2 arguments\n    |\
    \                    |\n    |                    expected 1 argument\n    |\n\
    note: associated function defined here\n\nerro"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut res = String::with_capacity(string.len());\n\
    \    for ch in string.chars() {\n        if ch.is_ascii_uppercase() {\n      \
    \      res.push(ch.to_ascii_lowercase());\n        } else {\n            res.push(ch.to_ascii_uppercase());\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqwe592gq.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = String::new();\n    for c in string.chars()\
    \ {\n        result.push(match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n\
    \            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n     \
    \   });\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8twfhcaq.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqq4trq47.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'..='z'\
    \ => c.to_ascii_uppercase(),\n        'A'..='Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.is_uppercase() {\n       \
    \ c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `{`\n\
    \ --> /tmp/tmpjitafqrk.rs:5:45\n  |\n5 |     string.chars().map(|c| c.is_uppercase()\
    \ {\n  |                                            -^ expected one of `)`, `,`,\
    \ `.`, `?`, or an operator\n  |                                            |\n\
    \  |                                            help: missing `,`\n\nerror: expected\
    \ one of `)`, `,`, `.`, `?`, or an operator, found keyword `else`\n --> /tmp/tmpjitafqrk.rs:7:7\n\
    \  |\n7 |     } else {\n  |       ^^^^ expected one of `)`, `,`, `.`, `?`, or\
    \ an operator\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut chars = string.chars();\n    let mut final\
    \ = String::new();\n    while let Some(c) = chars.next() {\n        final.push(c.to_ascii_uppercase().to_ascii_lowercase());\n\
    \    }\n    final\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found reserved keyword `final`\n --> /tmp/tmp02e15bxl.rs:6:13\n\
    \  |\n6 |     let mut final = String::new();\n  |             ^^^^^ expected identifier,\
    \ found reserved keyword\n  |\nhelp: escape `final` to use it as an identifier\n\
    \  |\n6 |     let mut r#final = String::new();\n  |             ++\n\nerror: expected\
    \ expression, found reserved keyword `final`\n --> /tmp/tmp02e15bxl.rs:8:9\n \
    \ |\n8 |         final.push(c.to_ascii_uppercase().to_ascii_lowercase());\n  |\
    \         ^^^^^ expected expression\n\nerror: expected expression, found reserved\
    \ keyword `final`\n  --> /tmp/tmp02e15bxl.rs:10:5\n   |\n10 |     final\n   |\
    \     ^^^^^ expected expression\n\nerror: aborting due to 3 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5n1mmf0c.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip the case of {}\", string)\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip the case of ', /tmp/tmp4a7qyvra.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // TODO: Implement this function.\n\n    string.chars().map(|x|\
    \ match x {\n        'a' ... 'z' => char::from(x as u8 + 'A' as u8 - 'a' as u8),\n\
    \        'A' ... 'Z' => char::from(x as u8 + 'a' as u8 - 'A' as u8),\n       \
    \ _ => x\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut res = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            res.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            res.push(c.to_uppercase().next().unwrap());\n \
    \       }\n    }\n    res\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped_case_chars: Vec<char> = Vec::new();\n\
    \    for c in string.chars() {\n        match c.is_lowercase() {\n           \
    \ true => flipped_case_chars.push(c.to_uppercase().next().unwrap()),\n       \
    \     false => flipped_case_chars.push(c.to_lowercase().next().unwrap()),\n  \
    \      }\n    }\n    flipped_case_chars.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|character| match character {\n\
    \        character if character.is_ascii_uppercase() => character.to_ascii_lowercase(),\n\
    \        character if character.is_ascii_lowercase() => character.to_ascii_uppercase(),\n\
    \        _ => character,\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvviwxs5w.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpq_k6wd0n.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7fng_613.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|character| {\n        if character.is_lowercase()\
    \ {\n            character.to_uppercase().collect::<String>()\n        } else\
    \ {\n            character.to_lowercase().collect::<String>()\n        }\n   \
    \ }).collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.swap_case()).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpjmvl_lpk.rs:5:30\n  |\n5 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        // flip lowercase\
    \ to uppercase\n        c if c.is_lowercase() => c.to_uppercase().next().unwrap(),\n\
    \        // flip uppercase to lowercase\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        // leave other characters unchanged\n        c => c,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n            c\
    \ if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n            _ => c,\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.is_ascii_uppercase() {\n \
    \                                c.to_ascii_lowercase()\n                    \
    \         } else {\n                                 c.to_ascii_uppercase()\n\
    \                             }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `{`\n\
    \ --> /tmp/tmp294mqik9.rs:5:51\n  |\n5 |     string.chars().map(|c| c.is_ascii_uppercase()\
    \ {\n  |                                                  -^ expected one of `)`,\
    \ `,`, `.`, `?`, or an operator\n  |                                         \
    \         |\n  |                                                  help: missing\
    \ `,`\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword\
    \ `else`\n --> /tmp/tmp294mqik9.rs:7:32\n  |\n7 | ...                   } else\
    \ {\n  |                         ^^^^ expected one of `)`, `,`, `.`, `?`, or an\
    \ operator\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| if x.is_uppercase() { x.to_lowercase().next().unwrap()\
    \ } else { x.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // return string.to_lowercase();\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n    \
    \    c.to_uppercase().collect::<String>()\n    } else {\n        c.to_lowercase().collect::<String>()\n\
    \    }).collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp630a0m53.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp5fjpenbl.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\
    \ c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyqt_6qsc.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // TODO: implement this function\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp60kfpa0p.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut string = string;\n    string.make_ascii_lowercase();\n\
    \    string.chars().map(|c| if c.is_lowercase() {\n        c.to_ascii_uppercase()\n\
    \    } else {\n        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp12fhayco.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|character| {\n        if character.is_lowercase()\
    \ {\n            character.to_uppercase().next().unwrap()\n        } else {\n\
    \            character.to_lowercase().next().unwrap()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_lowercase().next().unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpeb0694e8.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpaukcx54k.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| if x.is_ascii_lowercase() {\
    \ x.to_ascii_uppercase() } else { x.to_ascii_lowercase() }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        let new_char = match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n\
    \            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n     \
    \   };\n        flipped.push(new_char);\n    }\n    flipped\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfsp7vrv9.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n  string.chars().map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap()\
    \ } else { c.to_lowercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::with_capacity(string.len());\n\
    \    for c in string.chars() {\n        flipped.push(c.to_ascii_uppercase());\n\
    \    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpd0vdsspp.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| match x {\n        'a'..='z'\
    \ => x.to_ascii_uppercase(),\n        'A'..='Z' => x.to_ascii_lowercase(),\n \
    \       _ => x,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmper63airr.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = String::with_capacity(string.len());\n\
    \    for character in string.chars() {\n        if character.is_ascii_lowercase()\
    \ {\n            result.push(character.to_ascii_uppercase());\n        } else\
    \ {\n            result.push(character.to_ascii_lowercase());\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpojqn5mf6.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()\
    \ } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().to_string());\n\
    \        } else {\n            flipped.push(c.to_lowercase().to_string());\n \
    \       }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5yv5e_ox.rs:8:26\n  |\n8 |\
    \             flipped.push(c.to_uppercase().to_string());\n  |               \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5yv5e_ox.rs:10:26\n   |\n10 |\
    \             flipped.push(c.to_lowercase().to_string());\n   |              \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1vdydqry.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let flipped_string: String = string\n        .chars()\n\
    \        .map(|character| match character.is_lowercase() {\n            true =>\
    \ character.to_uppercase().next().unwrap(),\n            false => character.to_lowercase().next().unwrap(),\n\
    \        })\n        .collect();\n    flipped_string\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut chars = string.chars();\n    let mut new_string\
    \ = String::new();\n    while let Some(c) = chars.next() {\n        let new_char\
    \ = if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n    \
    \    } else {\n            c.to_uppercase().next().unwrap()\n        };\n    \
    \    new_string.push(new_char);\n    }\n    new_string\n}\n\nfn main() {\n   \
    \ let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    return string.chars().map(|x| {\n        if x.is_lowercase()\
    \ {\n            x.to_uppercase().next().unwrap()\n        } else {\n        \
    \    x.to_lowercase().next().unwrap()\n        }\n    }).collect::<String>();\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|character| match character {\n\
    \        character if character.is_ascii_uppercase() => character.to_ascii_lowercase(),\n\
    \        character if character.is_ascii_lowercase() => character.to_ascii_uppercase(),\n\
    \        _ => character,\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| match x {\n        'a'..='z'\
    \ => x.to_ascii_uppercase(),\n        'A'..='Z' => x.to_ascii_lowercase(),\n \
    \       _ => x,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.swap_case()).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmplo36hdcj.rs:5:30\n  |\n5 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flip: String = String::from(\"\");\n    for\
    \ char in string.chars() {\n        if char.is_lowercase() {\n            flip.push(char.to_uppercase().next().unwrap());\n\
    \        } else {\n            flip.push(char.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flip\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n    \
    \    c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.is_uppercase() {\n       \
    \ c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `{`\n\
    \ --> /tmp/tmpybyf3paj.rs:5:45\n  |\n5 |     string.chars().map(|c| c.is_uppercase()\
    \ {\n  |                                            -^ expected one of `)`, `,`,\
    \ `.`, `?`, or an operator\n  |                                            |\n\
    \  |                                            help: missing `,`\n\nerror: expected\
    \ one of `)`, `,`, `.`, `?`, or an operator, found keyword `else`\n --> /tmp/tmpybyf3paj.rs:7:7\n\
    \  |\n7 |     } else {\n  |       ^^^^ expected one of `)`, `,`, `.`, `?`, or\
    \ an operator\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut res = String::new();\n    for ch in string.chars()\
    \ {\n        if ch.is_ascii_lowercase() {\n            res.push(ch.to_ascii_uppercase());\n\
    \        } else {\n            res.push(ch.to_ascii_lowercase());\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptgzy5c8n.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped_string = String::new();\n    for character\
    \ in string.chars() {\n        if character.is_lowercase() {\n            flipped_string.push(character.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(character.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Your code here\n\n    return string;\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpi29dymlf.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // TODO: Implement me!\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdu8eh3q2.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut ret_string = String::new();\n    for char in\
    \ string.chars() {\n        match char.is_uppercase() {\n            true => ret_string.push(char.to_lowercase().collect::<Vec<char>>()[0]),\n\
    \            false => ret_string.push(char.to_uppercase().collect::<Vec<char>>()[0]),\n\
    \        }\n    }\n    ret_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpxl5dar3j.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|ch| match ch {\n        'a'...'z'\
    \ => ch.to_ascii_uppercase(),\n        'A'...'Z' => ch.to_ascii_lowercase(),\n\
    \        _ => ch,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n  let mut letters = string.into_bytes();\n  for i in 0..letters.len()\
    \ {\n    if letters[i] > 64 && letters[i] < 91 {\n      letters[i] += 32;\n  \
    \  } else if letters[i] > 96 && letters[i] < 123 {\n      letters[i] -= 32;\n\
    \    }\n  }\n  String::from_utf8(letters).unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n    \
    \    c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n  string.chars().map(|c| match c {\n    'a'...'z' => (c\
    \ as u8 - 'a' as u8 + 'A' as u8) as char,\n    'A'...'Z' => (c as u8 - 'A' as\
    \ u8 + 'a' as u8) as char,\n    _ => c,\n  }).collect()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.swap_case()).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpysbrs__6.rs:5:30\n  |\n5 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp0jwstni5.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().collect::<String>());\n\
    \        } else {\n            flipped.push(c.to_uppercase().collect::<String>());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7ok1gdo7.rs:8:26\n  |\n8 |\
    \             flipped.push(c.to_lowercase().collect::<String>());\n  |       \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ok1gdo7.rs:10:26\n\
    \   |\n10 |             flipped.push(c.to_uppercase().collect::<String>());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp7mhrivnd.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            flipped.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            flipped.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // TODO: implement me!\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplgxtvwrx.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for character\
    \ in string.chars() {\n        if character.is_lowercase() {\n            flipped.push(character.to_uppercase().next().unwrap());\n\
    \        } else if character.is_uppercase() {\n            flipped.push(character.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(character);\n        }\n    }\n  \
    \  flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut new_string = String::new();\n    for char in\
    \ string.chars() {\n        new_string.push(if char.is_uppercase() {\n       \
    \     char.to_lowercase().to_string()\n        } else {\n            char.to_uppercase().to_string()\n\
    \        });\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptp05xmxn.rs:8:13\n  |\n8 |\
    \             char.to_lowercase().to_string()\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmptp05xmxn.rs:10:13\n   |\n10 |             char.to_uppercase().to_string()\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| {\n        if x.is_uppercase()\
    \ {\n            x.to_lowercase().next().unwrap()\n        } else {\n        \
    \    x.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // This is one way to create a String from a vector.\n\
    \    let mut result = String::new();\n    for c in string.chars() {\n        if\
    \ c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            result.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpkyvjfp1r.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let flipped_string: String = string\n        .chars()\n\
    \        .map(|c| {\n            if c.is_uppercase() {\n                c.to_lowercase().next().unwrap()\n\
    \            } else {\n                c.to_uppercase().next().unwrap()\n    \
    \        }\n        })\n        .collect();\n    flipped_string\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|x| if x.is_uppercase() { x.to_lowercase().nth(0).unwrap()\
    \ } else { x.to_uppercase().nth(0).unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut chars = string.chars();\n    let mut result\
    \ = String::new();\n    while let Some(ch) = chars.next() {\n        if ch.is_uppercase()\
    \ {\n            result.push(ch.to_lowercase().to_string());\n        } else {\n\
    \            result.push(ch.to_uppercase().to_string());\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptd0y7bsx.rs:9:25\n  |\n9 |\
    \             result.push(ch.to_lowercase().to_string());\n  |               \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptd0y7bsx.rs:11:25\n   |\n11 |\
    \             result.push(ch.to_uppercase().to_string());\n   |              \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|ch| match ch {\n        x if x.is_ascii_lowercase()\
    \ => x.to_ascii_uppercase(),\n        x if x.is_ascii_uppercase() => x.to_ascii_lowercase(),\n\
    \        _ => ch,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip case for {}\", string);\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip case for ', /tmp/tmpp4c3gvqn.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"flip case of string {}\", string);\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: flip case of string ', /tmp/tmps1x24nx0.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // TODO (EXERCISE 2)\n    let mut new_string = String::new();\n\
    \    for c in string.chars() {\n        match c {\n            'a'...'z' => new_string.push(c.to_ascii_uppercase()),\n\
    \            'A'...'Z' => new_string.push(c.to_ascii_lowercase()),\n         \
    \   _ => new_string.push(c),\n        }\n    }\n    new_string\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip the case of string: {}\", string);\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip the case of string: ',\
    \ /tmp/tmpt8hs7n3i.rs:5:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       x if x.is_lowercase() => x.to_uppercase().next().unwrap(),\n         \
    \   x if x.is_uppercase() => x.to_lowercase().next().unwrap(),\n            _\
    \ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpuip9cpyl.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpi5ehczhk.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2dcp4oq7.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut out = String::new();\n    for c in string.chars()\
    \ {\n        out.push(match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n\
    \            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n     \
    \   });\n    }\n    out\n}\n\nfn main() {\n    let candidate = flip_case;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()\
    \ } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpkmexmysm.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            flipped.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped.push(c.to_ascii_uppercase());\n       \
    \ }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip case on {}\", string);\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip case on ', /tmp/tmpj8t80oh8.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp50jaym06.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut out = String::new();\n    for c in string.chars()\
    \ {\n        out.push(c.to_ascii_uppercase().to_ascii_lowercase());\n    }\n \
    \   out\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpsr1fo92r.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        let flipped_char = if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        };\n        flipped.push(flipped_char);\n\
    \    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7ga8zdo4.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Turn the string into a char vec.\n    let mut chars:\
    \ Vec<char> = string.chars().collect();\n\n    // Loop through all chars, flipping\
    \ them.\n    for i in 0..chars.len() {\n        if chars[i].is_uppercase() {\n\
    \            chars[i] = chars[i].to_lowercase().next().unwrap();\n        } else\
    \ {\n            chars[i] = chars[i].to_uppercase().next().unwrap();\n       \
    \ }\n    }\n\n    // Reassemble the string from the char vec.\n    let mut new_string\
    \ = String::new();\n    for c in chars {\n        new_string.push(c);\n    }\n\
    \n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // flipped_string = \"\"\n    // loop\n    //     \
    \ convert character at index i to uppercase or lowercase\n    //      add to flipped_string\n\
    \    // return flipped_string\n    let mut flipped_string = String::new();\n \
    \   for character in string.chars() {\n        flipped_string.push(match character\
    \ {\n            'a'...'z' => character.to_ascii_uppercase(),\n            'A'...'Z'\
    \ => character.to_ascii_lowercase(),\n            _ => character,\n        });\n\
    \    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
