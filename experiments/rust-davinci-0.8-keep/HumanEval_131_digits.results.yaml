name: HumanEval_131_digits
language: rust
results:
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let string = n.to_string();\n    let mut product = 1;\n    for character in\
    \ string.chars() {\n        if let Some(value) = character.to_digit(10) {\n  \
    \          if value % 2 != 0 {\n                product *= value as isize;\n \
    \           }\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptpua7oz6.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!()\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplbqhwemx.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|c| c % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpydwgtlxa.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let s = n.to_string();\n    let mut acc = 1;\n    for c in s.chars() {\n \
    \       let n = c.to_digit(10).unwrap() as isize;\n        if n % 2 == 1 {\n \
    \           acc *= n;\n        }\n    }\n    acc\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpo68pwmgj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let n = n.to_string();\n    n.chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmq7xg4gg.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut product = 1;\n    for x in n.to_string().chars() {\n        let x\
    \ = x.to_digit(10).unwrap() as isize;\n        if x % 2 == 1 {\n            product\
    \ *= x;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6n1gzu6f.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpd9_30ycn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n    let mut acc = 1;\n    let mut num\
    \ = n;\n    while num > 0 {\n        let digit = num % 10;\n        if digit %\
    \ 2 != 0 {\n            acc *= digit;\n        }\n        num /= 10;\n    }\n\
    \    acc\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpb209508n.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut n = n;\n    let mut r: isize = 1;\n    while n > 0 {\n        let\
    \ d = n % 10;\n        if d % 2 == 1 {\n            r *= d;\n        }\n     \
    \   n /= 10;\n    }\n    r\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphh_d_j6r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!();\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx38nyzvw.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .filter(|x| x % 2 == 1)\n        .fold(1, |acc, x| acc * x as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp38j6b63w.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| {\n            c.to_digit(10)\n\
    \                .map(|d| d as isize)\n                .filter(|d| d % 2 == 1)\n\
    \        })\n        .product()\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpb3zp2xa9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   return 0;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp6lnmvpwq.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| {\n            let\
    \ n = c.to_digit(10).unwrap();\n            if n % 2 == 1 {\n                Some(n\
    \ as isize)\n            } else {\n                None\n            }\n     \
    \   })\n        .product()\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6_369lnk.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   // Enumerate all digits, then map to products of only the odd ones\n    n.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|x| x % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq7osxpp9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpx01fscfg.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7dtzpoo3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|c| *c % 2 == 1)\n        .fold(1, |a, b| a * b as isize)\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp20lsdc8v.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap())\n\
    \        .filter(|x| x % 2 != 0)\n        .fold(1, |acc, x| acc * x as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_gwgfhf5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut prod = 1;\n    let mut n = n;\n    while n > 0 {\n        let curr\
    \ = n % 10;\n        if curr % 2 == 1 {\n            prod *= curr;\n        }\n\
    \        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl85soipx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!()\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptrky0vgk.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfqo2hmqf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let str_n = n.to_string();\n    str_n.chars().filter(|c| c.is_digit(10)).map(|c|\
    \ c.to_digit(10).unwrap() as isize).filter(|c| c % 2 != 0).product()\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpaim8u1qc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp6h_sarc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmpy2s37d9g.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8tz8z763.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .filter(|n| n % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmpk8mhhjo4.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n\n    let mut product = 1;\n    let\
    \ mut n = n;\n\n    while n > 0 {\n        let digit = n % 10;\n        if digit\
    \ % 2 != 0 {\n            product *= digit;\n        }\n        n /= 10;\n   \
    \ }\n\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8hnycjkq.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |a, b| a * b as isize)\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppyzmdd2b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, x| acc * x as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7avhngky.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|c| c as isize)\n        .filter(|c| c % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4k4t1arx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|n| n.to_digit(10).unwrap())\n\
    \        .filter(|n| n % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmp52ju1ihx.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .filter(|&i| i % 2 == 1)\n        .fold(1, |x, y| x * y as isize)\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptzrn61op.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpf_pj_vg6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut m = n;\n    let mut product = 1;\n    while m > 0 {\n        let digit\
    \ = m % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n        m /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdib98opm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   // YOUR CODE HERE\n    0\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp39ry5_7d.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut sum = 1;\n    for i in n.to_string().chars() {\n        let j = i.to_digit(10).unwrap();\n\
    \        if j % 2 != 0 {\n            sum *= j;\n        }\n    }\n    if sum\
    \ == 1 {\n        0\n    } else {\n        sum\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjn1_rd__.rs:18:9\n   |\n\
    7  | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n18 |         sum\n   |         ^^^ expected\
    \ `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n18 |         sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|d| d.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmps4a34aqb.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .filter(|x| x % 2 == 1)\n        .fold(1, |acc, x| acc * x as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjwedcc_d.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut product = 1;\n    for c in n.to_string().chars() {\n        let v\
    \ = c.to_digit(10).unwrap();\n        if v % 2 == 1 {\n            product *=\
    \ v as isize;\n        }\n    }\n    return product;\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpadjynpzo.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   return n.to_string().chars().filter(|&c| c.is_digit(10) && c.to_digit(10).unwrap()\
    \ % 2 == 1).map(|c| c.to_digit(10).unwrap() as isize).product();\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfas9juy7.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit\
    \ = n % 10;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt__5xu7v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!()\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyuzvojry.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|d| d.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmpyabn8ox5.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfu0f6kyl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| {\n            c.to_digit(10)\n\
    \                .expect(\"Could not parse digit from string\") as isize\n   \
    \     })\n        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp473rz1kg.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!();\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt50wi5xm.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut r = 1;\n    for c in n.to_string().chars() {\n        if let Some(d)\
    \ = c.to_digit(10) {\n            if d % 2 == 1 {\n                r *= d as isize;\n\
    \            }\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp77fn2hil.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n    let rem = n % 10;\n    if rem %\
    \ 2 == 0 {\n        return digits(n / 10);\n    }\n    return rem * digits(n /\
    \ 10);\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpt4ymb4eo.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let string = n.to_string();\n    let digits: Vec<char> = string.chars().collect();\n\
    \    let mut res = 1;\n    for c in digits {\n        let num = c.to_digit(10).unwrap();\n\
    \        if num % 2 == 1 {\n            res *= num;\n        }\n    }\n    if\
    \ res == 1 {\n        0\n    } else {\n        res\n    }\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptgi6ahws.rs:20:9\n   |\n\
    7  | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n20 |         res\n   |         ^^^ expected\
    \ `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n20 |         res.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmpl8u019k5.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|i| i.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|i| i % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgc758ko7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp71_e2zaa.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut prod = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit\
    \ = n % 10;\n        if digit % 2 == 1 {\n            prod *= digit;\n       \
    \ }\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcpdh0go7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphb3jcuv8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|n| n % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpax82w08w.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiikto4y0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut value = n;\n    let mut res = 1;\n    while value > 0 {\n        let\
    \ digit = value % 10;\n        if digit % 2 != 0 {\n            res *= digit;\n\
    \        }\n        value /= 10;\n    }\n    return res;\n}\n\nfn main() {\n \
    \   let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj477zge4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n < 10 {\n        return if n % 2 == 1 { n } else { 0 };\n    }\n\n   \
    \ let last_digit = n % 10;\n    let factor = if last_digit % 2 == 1 { last_digit\
    \ } else { 0 };\n    factor * digits(n / 10)\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpq0rqjwhu.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    for i in n.to_string().chars() {\n        if i.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            result *= i.to_digit(10).unwrap() as isize;\n      \
    \  }\n    }\n    if result == 1 {\n        0\n    } else {\n        result\n \
    \   }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp3fergvpc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .filter(|x| x % 2 == 1)\n        .product() as isize\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp9celzw_j.rs:12:10\n\
    \   |\n12 |         .product() as isize\n   |          ^^^^^^^ cannot infer type\
    \ for type parameter `P` declared on the associated function `product`\n   |\n\
    \   = note: type must be known at this point\nhelp: consider specifying the type\
    \ argument in the method call\n   |\n12 |         .product::<P>() as isize\n \
    \  |                 +++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt0ozfffm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| {\n            if\
    \ c.is_digit(10) {\n                let d = c.to_digit(10).unwrap();\n       \
    \         if d % 2 == 1 {\n                    Some(d as isize)\n            \
    \    } else {\n                    None\n                }\n            } else\
    \ {\n                None\n            }\n        })\n        .product()\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyrb60b7y.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!();\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpeyf5f79_.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   return n.to_string().chars().filter(|x|x.to_digit(10).unwrap() % 2 == 1).map(|x|x.to_digit(10).unwrap()\
    \ as isize).product();\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6tzb4rsx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|i| i as isize)\n        .fold(1, |acc, x| if x % 2 == 0 { acc }\
    \ else { acc * x })\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpa8dpp550.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    for c in n.to_string().chars() {\n        let digit\
    \ = c.to_digit(10).unwrap();\n        if digit % 2 == 1 {\n            result\
    \ *= digit as isize;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnunpxt9p.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut prod = 1;\n    for ch in n.to_string().chars() {\n        if ch.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            prod *= ch.to_digit(10).unwrap() as isize;\n       \
    \ }\n    }\n    if prod == 1 {\n        0\n    } else {\n        prod\n    }\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpzo_73_jq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|c| c % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmpn7_7wrg_.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7rguntu5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut prod = 1;\n    for i in n.to_string().chars() {\n        let n = i.to_digit(10).unwrap()\
    \ as isize;\n        if n % 2 == 1 {\n            prod *= n;\n        }\n    }\n\
    \    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdve5jygl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut res = 1;\n    for i in n.to_string().chars() {\n        let i = i.to_digit(10).unwrap()\
    \ as isize;\n        if i % 2 == 1 {\n            res *= i;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpo8j4tien.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|c| c % 2 == 1)\n        .fold(1, |acc, c| acc * c as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpc15did7y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!();\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp43qekkpo.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut r: isize = 1;\n    for d in n.to_string().chars() {\n        match\
    \ d.to_digit(10) {\n            Some(dd) => if dd % 2 == 1 { r *= dd as isize;\
    \ },\n            None => {},\n        }\n    }\n    return r;\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpd4m_bouy.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|d| (d as isize) % 2)\n        .product()\n}\n\nfn main() {\n  \
    \  let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `5`', /tmp/tmpksfn8hfd.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   return n.to_string().chars().filter(|&c| c.is_digit(10) && (c.to_digit(10).unwrap()\
    \ & 1) == 1).map(|c| c.to_digit(10).unwrap() as isize).product();\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpr4tlc839.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n\n    let mut n = n;\n    let mut res\
    \ = 1;\n    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 ==\
    \ 1 {\n            res *= digit;\n        }\n        n /= 10;\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjbwfby7n.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1lvy7l_9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|n| n % 2 == 1)\n        .fold(1, |acc, x| acc * x as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpomzp_5qt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| {\n            c.to_digit(10)\n\
    \                .map(|d| d as isize)\n                .filter(|&d| d % 2 == 1)\n\
    \        })\n        .product()\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8daox25w.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|ch| ch.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj037b5y_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|ch| ch.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsycoz6vi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut acc = 1;\n    for i in n.to_string().chars() {\n        let mut i:\
    \ isize = i.to_digit(10).unwrap() as isize;\n        if i % 2 == 1 {\n       \
    \     acc *= i;\n        }\n    }\n    acc\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgnjp9f_6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap())\n\
    \        .fold(1, |product, x| {\n            if x % 2 == 1 {\n              \
    \  product * x as isize\n            } else {\n                product\n     \
    \       }\n        })\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp60bjufcd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&x| x % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9dl3vqno.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut res = 1;\n    for i in 0..n.to_string().len() {\n        let d = (n.to_string().chars().nth(i).unwrap()\
    \ as isize) - ('0' as isize);\n        if d % 2 == 1 {\n            res *= d;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5o5pat5d.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|d| d.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |a, d| a * d as isize)\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeu2609m5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |a, x| a * x as isize)\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1o0xxte4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    for c in n.to_string().chars() {\n        if c.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            result *= c.to_digit(10).unwrap() as isize;\n      \
    \  }\n    }\n    if result == 1 {\n        0\n    } else {\n        result\n \
    \   }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxixj7hn0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |p, d| p * d as isize)\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgo0r5cd8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|d| d as isize)\n        .filter(|d| d % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwquwfjjt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .filter(|x| x % 2 == 1)\n        .fold(1, |acc, cur| acc * cur as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpd5o48w93.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|d| d.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfbl4dqa7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut res = 1;\n    for c in n.to_string().chars() {\n        if c.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            res *= c.to_digit(10).unwrap() as isize;\n        }\n\
    \    }\n    if res == 1 {\n        0\n    } else {\n        res\n    }\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpuxifmvku.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n < 10 {\n        if n % 2 == 1 {\n            return n;\n        } else\
    \ {\n            return 0;\n        }\n    } else {\n        let mut num = n;\n\
    \        let mut prod = 1;\n        while num > 0 {\n            let last_digit\
    \ = num % 10;\n            if last_digit % 2 == 1 {\n                prod *= last_digit;\n\
    \            }\n            num /= 10;\n        }\n        return prod;\n    }\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmu1rcml7.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|n| n % 2 == 1)\n        .fold(1, |acc, n| acc * n as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5euydhyc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut numbers: Vec<char> = n.to_string().chars().collect();\n    let mut\
    \ result: isize = 1;\n    for number in numbers {\n        let num: isize = number.to_string().parse().unwrap();\n\
    \        if num % 2 != 0 {\n            result *= num;\n        }\n    }\n   \
    \ if result != 1 {\n        return result;\n    }\n    0\n}\n\nfn main() {\n \
    \   let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpghaasre_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut odd_prod = 1;\n    let mut number = n;\n    while number > 0 {\n \
    \       let digit = number % 10;\n        if digit % 2 != 0 {\n            odd_prod\
    \ *= digit;\n        }\n        number /= 10;\n    }\n    odd_prod\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjqoeqoyj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .filter(|&d| d % 2 == 1)\n        .fold(1, |m, d| m * d as isize)\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzwipvj9s.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let s = n.to_string();\n    let mut sum = 1;\n    for c in s.chars() {\n \
    \       if let Some(num) = c.to_digit(10) {\n            if num % 2 == 1 {\n \
    \               sum *= num as isize;\n            }\n        }\n    }\n    if\
    \ sum == 1 {\n        0\n    } else {\n        sum\n    }\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpar2b40r4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut prod = 1;\n    for c in n.to_string().chars() {\n        let c = c.to_digit(10).unwrap()\
    \ as usize;\n        if c % 2 == 1 {\n            prod *= c as isize;\n      \
    \  }\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4jki61kt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let v: Vec<isize> = n.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as isize).collect();\n    v.iter().fold(1, |acc, &x| if x % 2 == 0 { acc } else\
    \ { acc * x })\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8tf7zk6e.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmplf0nks1t.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut prod = 1;\n    let mut rem = n;\n    while rem > 0 {\n        let\
    \ curr = rem % 10;\n        if curr % 2 != 0 {\n            prod *= curr;\n  \
    \      }\n        rem /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5sdon403.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut ret = 1;\n    for &c in n.to_string().chars() {\n        let d = (c\
    \ as isize) - ('0' as isize);\n        if d & 1 == 1 {\n            ret *= d;\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpay31118e.rs:9:9\n  |\n9 |\
    \     for &c in n.to_string().chars() {\n  |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n  |         |\n  |         expected\
    \ `char`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `c`\n  |\n  = note:   expected type `char`\n          found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   // your code here\n    let mut product = 1;\n    for digit in n.to_string().chars()\
    \ {\n        let d = digit.to_digit(10).unwrap() as isize;\n        if d % 2 ==\
    \ 1 {\n            product *= d;\n        }\n    }\n    product\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_am9dfj2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| {\n            let\
    \ digit = c.to_digit(10).unwrap();\n            if digit % 2 == 1 {\n        \
    \        Some(digit as isize)\n            } else {\n                None\n  \
    \          }\n        })\n        .product()\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphs04_hqf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    for (i, c) in n.to_string().chars().enumerate() {\n\
    \        if i % 2 == 0 {\n            result *= c.to_digit(10).unwrap() as isize;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpm76vlwa8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&n| n % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyky6h5c8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut prod = 1;\n    for &c in n.to_string().chars() {\n        let val\
    \ = c.to_digit(10).unwrap() as isize;\n        if val % 2 == 1 {\n           \
    \ prod *= val;\n        }\n    }\n    prod\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph3x3zxlu.rs:9:9\n  |\n9 |\
    \     for &c in n.to_string().chars() {\n  |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n  |         |\n  |         expected\
    \ `char`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `c`\n  |\n  = note:   expected type `char`\n          found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!();\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu2vgy3dj.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap())\n\
    \        .filter(|x| *x % 2 != 0)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmpg4_j1ahq.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    let digits = n.to_string();\n    for c in digits.chars()\
    \ {\n        let digit = c.to_digit(10).unwrap() as isize;\n        if digit %\
    \ 2 == 1 {\n            result *= digit;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeh67a4u9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n    let mut current = n;\n    let mut\
    \ result = 1;\n    while current > 0 {\n        let digit = current % 10;\n  \
    \      if digit % 2 == 1 {\n            result *= digit;\n        }\n        current\
    \ /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n \
    \   assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpchdd20kk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpc4znnbja.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmplsotphn8.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4882ww5u.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| {\n            c.to_digit(10)\n\
    \                .map(|x| x as isize)\n                .filter(|&x| x % 2 == 1)\n\
    \        })\n        .product()\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdzx6qwa9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|d| d as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt3rymmlz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|n| n % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1slu46no.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|digit| digit.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|digit| digit % 2 != 0)\n        .product()\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpa7rw0kge.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6mr_7ffp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n < 0 {\n        panic!(\"Negative number {} not allowed\", n);\n    }\n\
    \    if n < 10 {\n        return if n % 2 == 1 { n } else { 0 };\n    }\n    let\
    \ digit = digits(n / 10);\n    let remainder = n % 10;\n    if remainder % 2 ==\
    \ 1 {\n        digit * remainder\n    } else {\n        digit\n    }\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|x| x % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzcej1ka3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!()\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0hfz7fxo.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap())\n\
    \        .filter(|x| x % 2 != 0)\n        .fold(1, |a, b| a * b as isize)\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmqa9xuu9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|&x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3_kn7v3p.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut res = 1;\n    let mut num = n;\n    while num > 0 {\n        let tmp\
    \ = num % 10;\n        if tmp % 2 != 0 {\n            res *= tmp;\n        }\n\
    \        num /= 10;\n    }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxyewnuxi.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|c| c as isize)\n        .filter(|n| n % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp02cs9ugk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&c| c % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmpx6ue43zx.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgdbedxl5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|s| s.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&x| x % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp57ek19qz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpaz4x07eh.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   // if n == 0 {\n    //     return 0;\n    // }\n\n    // let mut num = n;\n\
    \    // let mut product = 1;\n    // while num > 0 {\n    //     let mut rem =\
    \ num % 10;\n    //     if rem % 2 != 0 {\n    //         product *= rem;\n  \
    \  //     }\n    //     num /= 10;\n    // }\n\n    // return product;\n\n   \
    \ n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n \
    \       .filter(|&d| d % 2 != 0)\n        .product() as isize\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpmvfs6djv.rs:28:10\n\
    \   |\n28 |         .product() as isize\n   |          ^^^^^^^ cannot infer type\
    \ for type parameter `P` declared on the associated function `product`\n   |\n\
    \   = note: type must be known at this point\nhelp: consider specifying the type\
    \ argument in the method call\n   |\n28 |         .product::<P>() as isize\n \
    \  |                 +++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut res = 1;\n    for c in n.to_string().chars() {\n        let num =\
    \ c.to_digit(10).unwrap();\n        if num % 2 == 1 {\n            res *= num\
    \ as isize;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmz30uv1w.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    let mut copy = n;\n    while copy > 0 {\n       \
    \ let digit = copy % 10;\n        if digit % 2 != 0 {\n            result *= digit;\n\
    \        }\n        copy /= 10;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp20n6yhzi.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|c| c as isize)\n        .filter(|&c| c % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnvw8yvyn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|ch| ch.to_digit(10))\n\
    \        .map(|digit| (digit % 2 != 0) as isize * digit as isize)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpbh5m8so8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n\n    let mut n = n;\n    let mut sum\
    \ = 1;\n    while n > 0 {\n        let v = n % 10;\n        if v % 2 != 0 {\n\
    \            sum *= v;\n        }\n        n /= 10;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmplp3niu_f.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .fold(1, |r, x| if x % 2 == 1 { r * x } else { r })\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvo0cyikd.rs:11:45\n   |\n\
    11 |         .fold(1, |r, x| if x % 2 == 1 { r * x } else { r })\n   |       \
    \                                      ^ expected `isize`, found `u32`\n\nerror[E0277]:\
    \ cannot multiply `isize` by `u32`\n  --> /tmp/tmpvo0cyikd.rs:11:43\n   |\n11\
    \ |         .fold(1, |r, x| if x % 2 == 1 { r * x } else { r })\n   |        \
    \                                   ^ no implementation for `isize * u32`\n  \
    \ |\n   = help: the trait `Mul<u32>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|c| c as isize)\n        .filter(|c| c % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9j2_p4p5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   // TODO write the body of the function\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbcht0y7v.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n\n    n % 10 * digits(n / 10)\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp499f2z5b.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| {\n            c.to_digit(10)\n\
    \                .map(|d| d as isize)\n                .filter(|&d| d % 2 == 1)\n\
    \        })\n        .product()\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpw2dq86s9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut res = 1;\n    let mut digits = String::new();\n    digits.push_str(&n.to_string());\n\
    \    for digit in digits.chars() {\n        if digit.to_digit(10).unwrap() % 2\
    \ == 1 {\n            res *= digit.to_digit(10).unwrap() as isize;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp527amdls.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    for d in n.to_string().chars() {\n        let num\
    \ = d.to_digit(10).unwrap() as isize;\n        if num % 2 == 1 {\n           \
    \ result *= num;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuoqww21x.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpk13vv4bn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| match c.to_digit(10)\
    \ {\n            Some(digit) => {\n                if digit % 2 == 1 {\n     \
    \               Some(digit as isize)\n                } else {\n             \
    \       None\n                }\n            }\n            None => None,\n  \
    \      })\n        .product()\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4fzdhqob.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|i| i % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpifb3sydr.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|d| d.to_digit(10))\n\
    \        .map(|d| d as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwwahwnkq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut prod = 1;\n    for c in n.to_string().chars() {\n        if c.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            prod *= c.to_digit(10).unwrap() as isize;\n        }\n\
    \    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjof50qg8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .filter(|x| x % 2 == 1)\n        .fold(1, |acc, x| acc * x as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmvpdo4gc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut output = 1;\n    let mut number = n;\n    while number > 0 {\n   \
    \     let digit = number % 10;\n        if digit % 2 != 0 {\n            output\
    \ *= digit;\n        }\n        number /= 10;\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp39vxp745.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2f7ojhfo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let s = n.to_string();\n    let mut result = 1;\n    for c in s.chars() {\n\
    \        let i = c.to_digit(10).unwrap() as isize;\n        if i % 2 == 1 {\n\
    \            result *= i;\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwlgy99yg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    for i in n.to_string().chars() {\n        if i.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            result *= i.to_digit(10).unwrap() as isize;\n      \
    \  }\n    }\n    if result == 1 {\n        0\n    } else {\n        result\n \
    \   }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpsgyhqt6t.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!();\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_z_bcccw.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&n| n % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmpta4nc1w4.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n\n    let digit = n % 10;\n    if digit\
    \ % 2 == 0 {\n        return digits(n / 10);\n    }\n\n    digit * digits(n /\
    \ 10)\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpoil2gobu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut digits = Vec::new();\n    let mut n = n;\n    while n > 0 {\n    \
    \    digits.push(n % 10);\n        n /= 10;\n    }\n    digits.iter().fold(1,\
    \ |a, &b| if b % 2 == 1 { a * b } else { a })\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpik4h3ero.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|c| c % 2 != 0)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1ylznqro.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmplq3tpwtw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   unimplemented!();\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpysfs8yuu.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n    let digit = n % 10;\n    if digit\
    \ % 2 == 0 {\n        return digits(n / 10);\n    }\n    digit * digits(n / 10)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpqe5ntxjd.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&c| c % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppqxod9la.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut v: Vec<char> = n.to_string().chars().collect();\n    v.remove(0);\n\
    \    let mut digits: Vec<isize> = Vec::new();\n    for i in v {\n        digits.push(i.to_digit(10).unwrap()\
    \ as isize);\n    }\n    let mut odd_digits: Vec<isize> = Vec::new();\n    for\
    \ i in digits {\n        if i % 2 != 0 {\n            odd_digits.push(i);\n  \
    \      }\n    }\n    if odd_digits.len() == 0 {\n        return 0;\n    }\n  \
    \  odd_digits.iter().product()\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpjiij2_a4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut n = n;\n    let mut result = 1;\n    loop {\n        let mut last_digit\
    \ = n % 10;\n        if last_digit == 0 {\n            return 0;\n        }\n\
    \        if last_digit % 2 == 1 {\n            result *= last_digit;\n       \
    \ }\n        n /= 10;\n        if n == 0 {\n            break;\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpv83i9j2v.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9dsiwk2b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut result = 1;\n    let mut x = n;\n    while x > 0 {\n        let r\
    \ = x % 10;\n        if r % 2 == 1 {\n            result *= r;\n        }\n  \
    \      x /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbc9wqom3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| x.to_digit(10))\n\
    \        .filter(|x| x % 2 == 1)\n        .fold(1, |acc, x| acc * x as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnoz1zywf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n    let mut n = n;\n    let mut result\
    \ = 1;\n    while n > 0 {\n        let current = n % 10;\n        if current %\
    \ 2 != 0 {\n            result *= current;\n        }\n        n /= 10;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpszh1yjir.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut r = 1;\n    let mut x = n;\n    while x > 0 {\n        let last_digit\
    \ = x % 10;\n        if last_digit % 2 == 1 {\n            r *= last_digit;\n\
    \        }\n        x /= 10;\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdmx0ziu_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&n| n % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmplfn1hhdm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|&c| c % 2 == 1)\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Product<u32>` is not satisfied\n\
    \    --> /tmp/tmp5sqwe2z6.rs:12:10\n     |\n12   |         .product()\n     |\
    \          ^^^^^^^ the trait `Product<u32>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Product<A>`:\n\
    \               <f32 as Product<&'a f32>>\n               <f32 as Product>\n \
    \              <f64 as Product<&'a f64>>\n               <f64 as Product>\n  \
    \             <i128 as Product<&'a i128>>\n               <i128 as Product>\n\
    \               <i16 as Product<&'a i16>>\n               <i16 as Product>\n \
    \            and 20 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|d| d as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7lwyl9u8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut x = n;\n    let mut product = 1;\n    while x > 0 {\n        let digit\
    \ = x % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n        x /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqqs4wpzj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit\
    \ = n % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0qpf9nfd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwfrm804r.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut product = 1;\n    for c in n.to_string().chars() {\n        let digit\
    \ = c.to_digit(10).unwrap() as isize;\n        if digit % 2 == 1 {\n         \
    \   product *= digit;\n        }\n    }\n    product\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7ngq9cwc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n    n % 10 * digits(n / 10)\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpqc48tnik.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n    let d = n % 10;\n    if d % 2 ==\
    \ 0 {\n        return digits(n / 10);\n    }\n    return d * digits(n / 10);\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp78jfkorq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut product = 1;\n    for i in n.to_string().chars() {\n        let num\
    \ = i.to_digit(10).unwrap() as isize;\n        if num % 2 != 0 {\n           \
    \ product *= num;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp_619k64.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut buf = String::new();\n    buf.push_str(&n.to_string());\n    let mut\
    \ res = 1;\n    for ch in buf.chars() {\n        let digit = ch.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            res *= digit;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxt7yri4g.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut product = 1;\n    for x in n.to_string().chars() {\n        let i\
    \ = x.to_digit(10).unwrap() as isize;\n        if i % 2 == 1 {\n            product\
    \ *= i;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuacsp2g7.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|&n| n % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnas0zef9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut num = n;\n    let mut result = 1;\n    while num > 0 {\n        let\
    \ last_digit = num % 10;\n        if last_digit % 2 != 0 {\n            result\
    \ *= last_digit;\n        }\n        num /= 10;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj2lfkyuz.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   fn helper(n: isize, acc: isize) -> isize {\n        if n < 10 {\n        \
    \    if n % 2 == 1 {\n                acc * n\n            } else {\n        \
    \        acc\n            }\n        } else {\n            let digit = n % 10;\n\
    \            if digit % 2 == 1 {\n                helper(n / 10, acc * digit)\n\
    \            } else {\n                helper(n / 10, acc)\n            }\n  \
    \      }\n    }\n    helper(n, 1)\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg7rskk00.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .filter(|d| d % 2 == 1)\n        .product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl92edqp1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, d| acc * d as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbqw8l2_x.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|x| x as isize)\n        .filter(|&x| x % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5_3u4lui.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   // your code here!\n    let mut output = 1;\n    let mut str = n.to_string();\n\
    \    while str.len() != 0 {\n        let first_char = str.chars().next().unwrap();\n\
    \        let first_int = first_char.to_digit(10).unwrap();\n        if first_int\
    \ % 2 == 1 {\n            output *= first_int as isize;\n        }\n        str\
    \ = str.chars().skip(1).collect();\n    }\n    output\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmvf4ohy8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n == 0 {\n        return 0;\n    }\n    let mut count = 1;\n    for c in\
    \ format!(\"{}\", n).chars() {\n        if c != '0' && c != '2' && c != '4' &&\
    \ c != '6' && c != '8' {\n            count *= c.to_digit(10).unwrap() as isize;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8cbbz3ug.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   if n < 0 {\n        digits(-n)\n    } else if n < 10 {\n        if n % 2 ==\
    \ 1 {\n            n\n        } else {\n            0\n        }\n    } else {\n\
    \        let next = digits(n / 10);\n        if next == 0 {\n            if n\
    \ % 2 == 1 {\n                n % 10\n            } else {\n                0\n\
    \            }\n        } else {\n            if n % 2 == 1 {\n              \
    \  (n % 10) * next\n            } else {\n                next\n            }\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |prod, d| prod * (d as isize))\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgjoenal7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .filter(|d| d % 2 == 1)\n        .fold(1, |acc, i| acc * i as isize)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp66vi_jc7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|d| d as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsarbbk2v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|x| {\n            let\
    \ digit = x.to_digit(10);\n            if digit % 2 == 1 {\n                Some(digit)\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .fold(1, |acc, x| acc * x as isize)\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `Option<u32>` by `{integer}`\n  --> /tmp/tmphf5ug4d_.rs:12:22\n\
    \   |\n12 |             if digit % 2 == 1 {\n   |                ----- ^ - {integer}\n\
    \   |                |\n   |                Option<u32>\n\nerror[E0605]: non-primitive\
    \ cast: `Option<u32>` as `isize`\n  --> /tmp/tmphf5ug4d_.rs:18:33\n   |\n18 |\
    \         .fold(1, |acc, x| acc * x as isize)\n   |                          \
    \       ^^^^^^^^^^ an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0369, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n\
    \        .map(|d| d as isize)\n        .filter(|&d| d % 2 == 1)\n        .product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphwvt90o5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n\
    /// digits(4)  == 0\n/// digits(235) == 15\nfn digits(n: isize) -> isize {\n \
    \   let mut digits: Vec<isize> = vec![];\n    let mut temp = n;\n    while temp\
    \ > 0 {\n        digits.push(temp % 10);\n        temp /= 10;\n    }\n    digits.into_iter().fold(1,\
    \ |acc, x| {\n        if x % 2 == 0 {\n            acc\n        } else {\n   \
    \         acc * x\n        }\n    })\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6cdvh3w2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
