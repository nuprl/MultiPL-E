name: HumanEval_66_digitSum
language: rust
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// digitSum(\"\
  \") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\") => 67\n/// digitSum(\"\
  helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n/// digitSum(\"aAaaaXa\") =>\
  \ 153\nfn digitSum(s: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
  abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
  woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
  \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
  You arE Very Smart\")), 327);\n}\n"
completions: ['    s.chars().filter(|&x| x.is_uppercase()).map(|x| x as isize).sum()',
  '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()', '  s.chars().fold(0,
    |acc, c| acc + c as isize)', "    // your code here\n    let numbers: Vec<isize>\
    \ = s.chars().map(|c| c as isize).collect();\n    let mut sum = 0;\n    for num\
    \ in numbers {\n        if num > 96 && num < 123 {\n            sum += num - 32;\n\
    \        } else {\n            sum += num;\n        }\n    }\n    sum", '    s.chars().fold(0,
    |acc, item| acc + item as isize)', "    if s.is_empty() {\n        return 0;\n\
    \    }\n    let mut sum = 0;\n    for ch in s.chars() {\n        if ch >= 'A'\
    \ && ch <= 'Z' {\n            sum += ch as isize;\n        }\n    }\n    sum",
  "    s.bytes().fold(0, |sum, byte| {\n        if byte >= 65 && byte <= 90 {\n  \
    \          sum + byte as isize\n        } else {\n            sum\n        }\n\
    \    })", '    s.chars().fold(0, |sum, c| sum + c as isize).checked_sub(32 * s.len()
    as isize).unwrap_or(0)', "    let mut sum = 0;\n    for ch in s.chars() {\n  \
    \      if ch.is_uppercase() {\n            sum += ch as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        let ci = c as isize;\n\
    \        if ci >= 65 && ci <= 90 {\n            sum += ci;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        let\
    \ mut c = c as isize;\n        if c > 96 {\n            c -= 32;\n        }\n\
    \        sum += c;\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    //s.chars().filter(|&x| x.is_uppercase()).map(|x| x as\
    \ isize).sum()\n    s.chars().filter(|&x| x.is_ascii_uppercase()).map(|x| x as\
    \ isize).sum()", '    s.bytes().filter(|c| c.is_ascii_uppercase()).map(|x| x as
    isize).sum()', "  let mut i: isize = 0;\n  for x in s.chars() {\n    let c = x\
    \ as usize;\n    if c > 64 && c < 91 {\n      i += c as isize;\n    }\n  }\n \
    \ i", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        match c {\n           \
    \ 'A'..='Z' => sum += (c as isize) - 64,\n            _ => continue,\n       \
    \ }\n    }\n    sum", '    s.chars().filter(|x| x.is_uppercase()).fold(0, |acc,
    x| acc + x as isize)', "    // your code here\n    s.chars().fold(0, |acc, e|\
    \ {\n        acc + if e.is_ascii_uppercase() { e as isize } else { 0 }\n    })",
  "    if s.is_empty() {\n        return 0;\n    }\n    s.chars().filter(|x| x.is_uppercase()).map(|x|\
    \ x as isize).sum()", '    s.chars().fold(0, |acc, c| acc + c as isize)', '    unimplemented!()',
  '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|&c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let sum: isize = s.chars().filter(|&x| x.is_uppercase()).map(|x|\
    \ x as isize).sum();\n    sum", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            sum += c as isize;\n        }\n\
    \    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.bytes().map(|b| if b >= 65 && b <= 90 { b as isize } else { 0 }).sum()',
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', '    s.into_bytes().iter().fold(0,
    |acc, &x| acc + (x as isize - 64) * if x < 97 { 1 } else { 0 })', '    s.chars().fold(0,
    |sum, c| if c.is_ascii_uppercase() { sum + c as isize } else { sum })', '  s.chars().fold(0,
    |acc, ch| acc + ch as isize)', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.into_bytes().iter().map(|b| b as isize).filter(|b|
    *b > 90).sum()', "    s.chars().fold(0, |acc, c| acc + ((c as u8) - ('a' as u8))\
    \ % 32)", '    unimplemented!()', "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            sum += c as isize;\n   \
    \     }\n    }\n    sum", "    s.chars().filter(|c| c.is_uppercase()).map(|c|\
    \ (c as isize) - (b'A' as isize) + 1).sum()", '    return s.chars().filter(|&c|
    c.is_ascii_uppercase()).map(|c| (c as u8) as isize).sum();', "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    s.chars().fold(0, |sum, x|\
    \ {\n        if x.is_uppercase() {\n            sum + x as isize\n        } else\
    \ {\n            sum\n        }\n    })", '    s.chars().fold(0, |acc, c| acc
    + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        match c.to_uppercase().next() {\n\
    \            Some(u) => sum += u as isize,\n            None => {}\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n    }\n\
    \    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    // Your code here\n    let mut result = 0;\n    for c in s.chars() {\n    \
    \    if c.is_ascii_uppercase() {\n            result += c as isize;\n        }\n\
    \    }\n    result", '    s.chars().filter(|x| x.is_uppercase()).map(|x| x as
    isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|&c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    let upper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for x in s.chars() {\n        if upper.contains(x)\
    \ {\n            sum += x as isize;\n        }\n    }\n    sum", '    return s.chars().filter(|&c|
    c.is_uppercase()).map(|c| (c as u8) as isize).sum();', '    s.chars().filter(|ch|
    ch.is_uppercase()).map(|ch| ch as isize).sum()', '  s.as_bytes().iter().fold(0,
    |acc, x| acc + (if *x >= 65 && *x <= 90 { *x as isize } else { 0 }))', "    let\
    \ mut res = 0;\n    for i in s.chars() {\n        if i.is_uppercase() {\n    \
    \        res += i as isize;\n        }\n    }\n    res", "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", '    s.into_bytes().iter().map(|ch|
    isize::from(*ch)).sum()', "    s.chars().fold(0, |acc, x| {\n        if x.is_uppercase()\
    \ {\n            return acc + x as isize\n        }\n        acc\n    })", '    s.chars().filter(|x|
    x.is_uppercase()).map(|x| x as isize).sum()', '  s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    // Your code here!\n    s.chars().filter(|c| c.is_uppercase()).map(|c|\
    \ (c as isize) - 'A' as isize + 1).sum()", '    s.as_bytes().iter().fold(0, |acc,
    &x| acc + (x as isize))', "    let mut count = 0;\n    for i in s.chars() {\n\
    \        if i.is_uppercase() {\n            count += i as isize;\n        }\n\
    \    }\n    count", "    let mut result = 0isize;\n    for c in s.chars() {\n\
    \        let val = c as isize;\n        if val >= 65 && val <= 90 {\n        \
    \    result += val;\n        }\n    }\n    result", '    s.chars().fold(0, |acc,
    x| acc + x as isize)', '    s.chars().fold(0, |sum, c| sum + c as isize)', '    s.chars().filter(|&c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    s.chars().fold(0, |sum, c| {\n        match c {\n   \
    \         'A'..='Z' => sum + (c as isize),\n            _ => sum,\n        }\n\
    \    })", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().fold(0isize, |sum, c| sum + c as isize)', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    unimplemented!()', '    s.chars().fold(0,
    |acc, cur| acc + cur as isize)', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.bytes().map(|byte| byte as isize).filter(|byte| *byte >= 65 && *byte <= 90).sum()',
  "    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase() {\n            acc\
    \ + c as isize\n        } else {\n            acc\n        }\n    })", "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", "  let chars: Vec<char>\
    \ = s.chars().collect();\n  let mut sum: isize = 0;\n  for i in 0..chars.len()\
    \ {\n    if chars[i].is_uppercase() {\n      sum += chars[i] as isize;\n    }\n\
    \  }\n  sum", '    s.chars().filter(|ch| ch.is_uppercase()).map(|ch| ch as isize).sum()',
  "  let mut sum = 0;\n  for ch in s.chars() {\n    let x = ch as isize;\n    if 65\
    \ <= x && x <= 90 {\n      sum += x;\n    }\n  }\n  sum", "    // Your code here\n\
    \    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        let code = c as isize;\n        if code\
    \ >= 65 && code <= 90 {\n            sum += code;\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for c in s.chars() {\n        let c = c as isize;\n \
    \       if c >= 65 && c <= 90 {\n            sum += c;\n        }\n    }\n   \
    \ sum", "    s.chars().fold(0, |acc, cur| {\n        if cur.is_uppercase() {\n\
    \            acc + cur as isize\n        } else {\n            acc\n        }\n\
    \    })", "    // your code here\n    0", '    s.into_bytes().iter().map(|a| *a
    as isize).sum()', "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + c as isize\n        } else {\n            acc\n       \
    \ }\n    })", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.bytes().fold(0, |a, b| a + (b - 64) * (b < 97) as isize)', '    s.chars().filter(|&c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().fold(0, |sum, c|
    sum + if c.is_uppercase() { c as isize } else { 0 })', "    let mut sum = 0;\n\
    \    let mut capital = 0;\n    for i in s.chars() {\n        if i.is_alphabetic()\
    \ {\n            capital = i.to_ascii_uppercase() as isize;\n            sum +=\
    \ capital - 64;\n        }\n    }\n    sum", "    s.chars().fold(0, |sum, c| {\n\
    \        if c.is_uppercase() {\n            sum + (c as isize)\n        } else\
    \ {\n            sum\n        }\n    })", "    s.chars().fold(0, |acc, x| {\n\
    \        acc + if x.is_ascii_uppercase() {\n            x as isize\n        }\
    \ else {\n            0\n        }\n    })", '    s.as_bytes().iter().map(|&c|
    if c >= 65 && c <= 90 { c as isize } else { 0 }).sum()', '    s.as_bytes().iter().map(|&c|
    (c as isize - 64) % 32).fold(0, |acc, v| acc + v)', "    // your code here\n \
    \   s.chars().fold(0, |a, b| {\n        if b.is_ascii_uppercase() {\n        \
    \    a + b as isize\n        } else {\n            a\n        }\n    })", '    s.chars().fold(0,
    |acc, x| acc + x as isize * if x.is_ascii_uppercase() { 1 } else { 0 })', "  let\
    \ upper_chars = s.chars().filter(|c| c.is_uppercase());\n  let ascii_list = upper_chars.map(|c|\
    \ c as isize);\n  ascii_list.sum()", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let up_chars: Vec<char> = s.chars().filter(|c| c.is_uppercase()).collect();\n\
    \    let mut res: isize = 0;\n    for up_char in up_chars {\n        res += up_char\
    \ as isize;\n    }\n    res", '    s.chars().fold(0isize, |acc, x| if x.is_ascii_uppercase()
    { acc + x as isize } else { acc })', "    let mut sum = 0;\n    for ch in s.chars()\
    \ {\n        if ch.is_ascii_uppercase() {\n            sum += ch as isize;\n \
    \       }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    (c as u8) as isize).sum()', "    //\n    s.chars().filter(|c| c.is_uppercase()).map(|c|\
    \ (c as isize) - 55).sum()", '    s.chars().filter(|&x| x.is_uppercase()).map(|x|
    x as isize).sum()', "    s.chars().fold(0, |acc, ch| {\n        if ch.is_uppercase()\
    \ {\n            acc + ch as isize\n        } else {\n            acc\n      \
    \  }\n    })", '    s.chars().filter(|x| x.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()', "    if\
    \ s.is_empty() {\n        return 0;\n    }\n    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.as_bytes().iter().fold(0, |acc, x| acc + (*x
    as isize - 64) * (*x as isize - 64) / (*x as isize - 96))', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "  let mut sum = 0;\n  for i in s.chars() {\n    if i.is_uppercase() {\n      sum\
    \ += i as isize;\n    }\n  }\n  sum", '    s.as_bytes().iter().map(|c| (c - 64)
    as isize).sum()', '    s.chars().fold(0, |acc, x| acc + x as isize)', "    let\
    \ chars = s.chars();\n    chars.filter(|&c| c.is_uppercase()).map(|c| (c as u8)\
    \ as isize).sum()", "    let sum: isize = s.chars().map(|x| if x.is_ascii_uppercase()\
    \ {\n        x as isize\n    } else {\n        0\n    }).sum();\n    sum", " \
    \   s.chars().fold(0, |a, c| {\n        if c.is_uppercase() {\n            a +\
    \ (c as isize)\n        } else {\n            a\n        }\n    })", "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        let i = c as isize;\n      \
    \  if i >= 65 && i <= 90 {\n            sum += i;\n        }\n    }\n    sum",
  "    return s.chars().map(|c| {\n        let code = c as u8;\n        if code <\
    \ 97 {\n            code as isize\n        } else {\n            0\n        }\n\
    \    }).sum();", "    let mut counter = 0;\n    for c in s.chars() {\n       \
    \ if c.is_ascii_uppercase() {\n            counter += c as isize;\n        }\n\
    \    }\n    counter", '    s.chars().filter(|x| x.is_uppercase()).map(|x| x as
    isize).sum()', '  unimplemented!()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().fold(0, |sum, c| sum + if c.is_lowercase()
    { 0 } else { c as isize })', '    s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    if s.is_empty() { return 0; }\n    s.chars().map(|c|\
    \ if c.is_ascii_uppercase() { c as isize } else { 0 }).sum()", "    s.chars().fold(0,\
    \ |sum, c| {\n        match c {\n            'A'..='Z' => sum + c as isize,\n\
    \            _ => sum,\n        }\n    })", '    s.chars().filter(|&x| x.is_uppercase()).map(|x|
    x as isize).sum()', '    s.chars().filter(|&x| x.is_uppercase()).map(|x| x as
    isize).sum()', '    s.chars().fold(0, |sum, ch| sum + ch as isize)', '    s.chars().fold(0,
    |sum, c| sum + if c.is_uppercase() { c as isize } else { 0 })', '    unimplemented!();',
  "    let mut sum = 0;\n    let len = s.len();\n    for i in 0..len {\n        let\
    \ ascii_code = s.as_bytes()[i] as isize;\n        if ascii_code >= 65 && ascii_code\
    \ <= 90 {\n            sum += ascii_code;\n        }\n    }\n    sum", '    s.chars().fold(0,
    |s, c| s + c as isize - 64)', "  let mut sum = 0;\n  for c in s.chars() {\n  \
    \  match c.to_digit(10) {\n      Some(x) => sum += x as isize,\n      None =>\
    \ sum += c as isize,\n    }\n  }\n  sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    (c as isize) - 39).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n \
    \       let value = c as u8;\n        if value >= 65 && value <= 90 {\n      \
    \      sum += value as isize;\n        }\n    }\n    sum", "    if s.is_empty()\
    \ { return 0; }\n    let s = s.chars().map(|x| x as isize);\n    s.clone().filter(|x|\
    \ x.is_ascii_uppercase()).sum::<isize>() + s.clone().filter(|x| x.is_ascii_lowercase()).sum::<isize>()",
  '    return s.chars().map(|c| c as isize).filter(|c| *c >= 65 && *c <= 90).sum()',
  '    s.chars().fold(0, |sum, c| sum + (c as isize) - 32)', '  s.chars().fold(0,
    |sum, ch| if ch.is_uppercase() { sum + ch as isize - 64 } else { sum })', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| (c as isize) - 64).sum()', "    let mut sum = 0;\n \
    \   for i in s.chars() {\n        if i.is_uppercase() {\n            sum += i\
    \ as isize;\n        }\n    }\n    sum", "    // Your code here\n    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    // Please add your code here\n    let chars = s.chars();\n\
    \    let mut sum: isize = 0;\n    for c in chars {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '  s.chars().fold(0,
    |acc, x| if x.is_uppercase() { acc + x as isize } else { acc })', '    s.chars().filter(|x|
    x.is_uppercase()).map(|x| x as isize).sum()', '    unimplemented!();', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut result = 0;\n    let\
    \ mut chars = s.chars();\n    while let Some(c) = chars.next() {\n        let\
    \ num = c as isize;\n        if num > 64 && num < 91 {\n            result +=\
    \ num;\n        }\n    }\n    result", "    s.bytes().map(|b| match b {\n    \
    \    65...90 => b as isize,\n        _ => 0,\n    }).sum()", '    s.chars().fold(0,
    |acc, c| acc + c as isize)', "    // your code here\n    let mut sum: isize =\
    \ 0;\n    for c in s.chars() {\n        match c.to_digit(10) {\n            Some(num)\
    \ => {\n                if c.is_uppercase() {\n                    sum += num\
    \ as isize;\n                }\n            }\n            None => {}\n      \
    \  }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n     \
    \   if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n \
    \   }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| (c as u8) as isize).sum()', "    s.as_bytes().iter().map(|&c|\
    \ (c - b'A') as isize).sum()", "    let mut sum = 0;\n    for ch in s.chars()\
    \ {\n        match ch.to_digit(10) {\n            Some(num) => sum += num as isize,\n\
    \            None => continue,\n        }\n    }\n    sum", '    s.chars().fold(0,
    |sum, ch| sum + (ch as isize))', "    // your code\n    return 0;", '    s.chars().filter(|x|
    x.is_uppercase()).map(|c| c as isize).sum()', "  let mut result = 0;\n  for c\
    \ in s.chars() {\n    let mut n = c as isize;\n    if n >= 65 && n <= 90 {\n \
    \     result += n;\n    }\n  }\n  result", '    s.chars().fold(0, |acc, ch| acc
    + (ch as isize).wrapping_sub(64))', '    s.chars().fold(0, |x, c| if c.is_ascii_uppercase()
    { x + c as isize } else { x })', '    return s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum();', '    s.chars().fold(0, |acc, c| acc + if c.is_uppercase()
    { (c as u8) as isize } else { 0 })', '    s.chars().fold(0, |a, b| a + if b.is_ascii_uppercase()
    { b as isize } else { 0 })', "    let mut res = 0;\n    for ch in s.chars() {\n\
    \        if ch.is_uppercase() {\n            res += ch as isize;\n        }\n\
    \    }\n    res", "    let mut sum = 0;\n    for c in s.chars() {\n        match\
    \ c.to_digit(10) {\n            Some(v) => sum += (v as isize),\n            None\
    \ => {}\n        }\n    }\n    sum", '    return s.chars().map(|c| (c as u8)).filter(|&x|
    x >= 65 && x <= 90).sum();', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let upper_case = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  \
    \  s.chars().filter(|x| upper_case.contains(x)).map(|x| x as isize).sum()", '    s.chars().fold(0,
    |acc, x| acc + x as isize)', "  let mut sum = 0;\n  for c in s.chars() {\n   \
    \ if c.is_uppercase() {\n      sum += c as isize;\n    }\n  }\n  sum", "  let\
    \ mut sum = 0;\n  for c in s.chars() {\n    if c.is_ascii_uppercase() {\n    \
    \  sum += c as isize;\n    }\n  }\n  sum", '    s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for i in s.chars() {\n        if i.is_uppercase() {\n\
    \            sum += i as isize;\n        }\n    }\n    sum", "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        match c {\n            'A'...'Z' => sum += c as isize,\n\
    \            _ => (),\n        }\n    }\n    sum", '    s.chars().fold(0, |acc,
    c| if c.is_ascii_uppercase() { acc + c as isize } else { acc })', "    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        if ch.is_uppercase() {\n      \
    \      sum += ch as isize;\n        }\n    }\n    sum", '    s.chars().filter(|&c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for ch\
    \ in s.chars() {\n        if ch.is_uppercase() {\n            sum += ch as isize;\n\
    \        }\n    }\n    sum", '  return s.chars().filter(|x| x.is_uppercase()).map(|x|
    x as isize).sum();', "    s.chars().fold(0, |sum, c| {\n        if c.is_uppercase()\
    \ {\n            sum + c as isize\n        } else {\n            sum\n       \
    \ }\n    })", "    let mut sum = 0;\n    for ch in s.chars() {\n        if ch.is_uppercase()\
    \ {\n            sum += ch as isize;\n        }\n    }\n    sum", '    s.chars().fold(0,
    |acc, c| acc + c as isize)']
stop_tokens:
- "\n}"
