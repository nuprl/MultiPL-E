name: HumanEval_26_remove_duplicates
language: rust
results:
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    let mut result = Vec::new();\n   \
    \ for n in numbers {\n        if !set.contains(&n) {\n            set.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp337ngy16.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_xq8dzal.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().cloned().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmppq0_hj9n.rs:6:39\n\
    \  |\n6 |     numbers.iter().cloned().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                       ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut memo: HashMap<isize, isize> = HashMap::new();\n    for i in numbers\
    \ {\n        let counter = memo.entry(i).or_insert(0);\n        *counter += 1;\n\
    \    }\n    numbers.into_iter().filter(|&x| memo[&x] == 1).collect()\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpp1ff9fbv.rs:6:19\n\
    \  |\n6 |     let mut memo: HashMap<isize, isize> = HashMap::new();\n  |     \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpp1ff9fbv.rs:6:43\n\
    \  |\n6 |     let mut memo: HashMap<isize, isize> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    let mut result = Vec::new();\n   \
    \ for number in numbers {\n        if !set.contains(&number) {\n            set.insert(number);\n\
    \            result.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmppngq6e87.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for num in numbers {\n        if !result.contains(&num)\
    \ {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpubl7itcd.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpl79ssp4u.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for number in numbers {\n        if !seen.contains(&number) {\n           \
    \ result.push(number);\n            seen.insert(number);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpge_w0vvo.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp15j9qh9v.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut deduped: Vec<isize> = Vec::new();\n    for n in numbers {\n \
    \       if !deduped.contains(&n) {\n            deduped.push(n);\n        }\n\
    \    }\n    deduped\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpai7j0rtd.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut temp = Vec::new();\n    for x in numbers {\n        if !temp.contains(&x)\
    \ {\n            temp.push(x);\n        }\n    }\n    temp\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmz772i46.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for number in numbers {\n        if !seen.contains(&number) {\n         \
    \   result.push(number);\n            seen.insert(number);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpxflfz_4c.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpxflfz_4c.rs:7:36\n  |\n7 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpvc3kz4ky.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpil4ri9vo.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO #1: implement\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpf0iw1r17.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1l6nvjoq.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v2 = vec![];\n    for i in numbers {\n        if !v2.contains(&i)\
    \ {\n            v2.push(i);\n        }\n    }\n    v2\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpb2917iex.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  let mut result = Vec::new();\n  let mut set = HashSet::new();\n  for &number\
    \ in numbers.iter() {\n    if !set.contains(&number) {\n      result.push(number);\n\
    \      set.insert(number);\n    }\n  }\n  result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpimsonsb0.rs:7:17\n  |\n7 |   let mut set = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = Vec::new();\n    for\
    \ number in numbers {\n        if !seen.contains(&number) {\n            result.push(number);\n\
    \            seen.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbu8jlhr_.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp33pfm1c1.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut repeated = Vec::new();\n  \
    \  for n in numbers {\n        if !repeated.contains(&n) {\n            if result.contains(&n)\
    \ {\n                result.remove_item(&n);\n                repeated.push(n);\n\
    \            } else {\n                result.push(n);\n            }\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp2kvpvewj.rs:11:24\n   |\n11 |          \
    \       result.remove_item(&n);\n   |                        ^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `remove`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    for number in numbers {\n        if\
    \ !unique.contains(&number) {\n            unique.push(number);\n        }\n \
    \   }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp6jmgl7xx.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // array for keeping track of duplicates\n    let mut duplicates: [bool;\
    \ 101] = [false; 101];\n    let mut result: Vec<isize> = Vec::new();\n\n    for\
    \ n in numbers {\n        if !duplicates[n as usize] {\n            result.push(n);\n\
    \            duplicates[n as usize] = true;\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2vap1vbp.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut items: BTreeSet<isize> = BTreeSet::new();\n    let mut result:\
    \ Vec<isize> = Vec::new();\n\n    for n in numbers {\n        if items.contains(&n)\
    \ {\n            continue;\n        }\n        items.insert(n);\n        result.push(n);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpz1pti4jy.rs:6:20\n\
    \  |\n6 |     let mut items: BTreeSet<isize> = BTreeSet::new();\n  |         \
    \           ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `BTreeSet`\n --> /tmp/tmpz1pti4jy.rs:6:38\n\
    \  |\n6 |     let mut items: BTreeSet<isize> = BTreeSet::new();\n  |         \
    \                             ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut uniques:\
    \ Vec<isize> = Vec::new();\n\n    for num in numbers {\n        if !seen.contains(&num)\
    \ {\n            uniques.push(num);\n            seen.insert(num);\n        }\n\
    \    }\n\n    uniques\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp16ln3s_v.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp16ln3s_v.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::new();\n    for number in numbers {\n \
    \       if !unique_numbers.contains(&number) {\n            unique_numbers.push(number);\n\
    \        }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpjg6njyrd.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // the structure which will hold the list of numbers. We create the structure\n\
    \    // with a capacity equal to the length of the input list to avoid unnecessary\n\
    \    // reallocations.\n    let mut result = Vec::with_capacity(numbers.len());\n\
    \n    // we use a HashSet to keep track of numbers we already encountered.\n \
    \   let mut encountered = HashSet::new();\n\n    // we iterate over all numbers\
    \ in the input list\n    for num in numbers {\n        // if we haven't encountered\
    \ this number before, add it to both the\n        // result list and the set of\
    \ encountered numbers.\n        if !encountered.contains(&num) {\n           \
    \ result.push(num);\n            encountered.insert(num);\n        }\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmptxgfvjid.rs:12:27\n   |\n12 |     let mut encountered = HashSet::new();\n\
    \   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().fold(HashSet::new(), |mut set, number| {\n      \
    \  if set.contains(&number) {\n            set\n        } else {\n           \
    \ set.insert(number);\n            set\n        }\n    }).into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9vp2u5dn.rs:6:30\n  |\n6 |     numbers.into_iter().fold(HashSet::new(),\
    \ |mut set, number| {\n  |                              ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out: Vec<isize> = Vec::new();\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for number in numbers {\n        if !seen.contains(&number)\
    \ {\n            out.push(number);\n            seen.insert(number);\n       \
    \ }\n    }\n    out\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpjyjck331.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpjyjck331.rs:7:36\n  |\n7 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut dupes = HashSet::new();\n    let mut result = Vec::new();\n \
    \   for num in numbers {\n        if !dupes.contains(&num) {\n            result.push(num);\n\
    \            dupes.insert(num);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqx0qewgl.rs:6:21\n  |\n6 |     let mut dupes = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in numbers {\n        if !result.contains(&i)\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgf58fz_d.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = HashSet::new();\n    let mut unique_numbers_list\
    \ = Vec::new();\n\n    for number in numbers {\n        if !unique_numbers.contains(&number)\
    \ {\n            unique_numbers.insert(number);\n            unique_numbers_list.push(number);\n\
    \        }\n    }\n\n    unique_numbers_list\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp689jz0ng.rs:6:30\n  |\n6 |     let mut unique_numbers = HashSet::new();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for num in numbers {\n        if !seen.contains(&num) {\n\
    \            seen.insert(num);\n            result.push(num);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpo2d3v09z.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpo2d3v09z.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for num in numbers {\n        if !seen.contains(&num) {\n            unique.push(num);\n\
    \            seen.insert(num);\n        }\n    }\n    unique\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpkibsc44w.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut uniques = Vec::new();\n    for n in numbers {\n        if !uniques.contains(&n)\
    \ {\n            uniques.push(n);\n        }\n    }\n    uniques\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxf7eto5f.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvzkatjo6.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut counter = HashMap::new();\n\
    \    for i in numbers {\n        let count = counter.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    for i in numbers {\n        let count = counter.get(&i).unwrap();\n\
    \        if *count == 1 {\n            result.push(i);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpfs016zgv.rs:7:23\n  |\n7 |     let mut counter = HashMap::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut n = numbers;\n    n.sort();\n    n.dedup();\n    n\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmo3hongu.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut answer = Vec::new();\n    for number in numbers {\n        if\
    \ !answer.contains(&number) {\n            answer.push(number);\n        }\n \
    \   }\n    answer\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpcnvy6a8w.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    let mut vec = Vec::new();\n    for\
    \ num in numbers {\n        if !set.contains(&num) {\n            set.insert(num);\n\
    \            vec.push(num);\n        }\n    }\n    vec\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpnr8azsyf.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp43i2tqu.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpb8lpkhh8.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp81uh0fom.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut out = Vec::new();\n    for\
    \ number in numbers {\n        if !seen.contains(&number) {\n            seen.insert(number);\n\
    \            out.push(number);\n        }\n    }\n    out\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpreeqm6cf.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut previous_numbers = HashSet::new();\n    let mut unique_numbers\
    \ = Vec::new();\n\n    for number in numbers {\n        if !previous_numbers.contains(&number)\
    \ {\n            unique_numbers.push(number);\n        }\n        previous_numbers.insert(number);\n\
    \    }\n\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpnkjibgfz.rs:6:32\n  |\n6 |     let mut previous_numbers = HashSet::new();\n\
    \  |                                ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut hash: HashMap<isize, isize> = HashMap::new();\n    for number\
    \ in numbers {\n        let c = hash.entry(number).or_insert(0);\n        *c +=\
    \ 1;\n    }\n    let mut answer: Vec<isize> = Vec::new();\n    for number in numbers\
    \ {\n        if hash[&number] == 1 {\n            answer.push(number);\n     \
    \   }\n    }\n    answer\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpravlkrha.rs:6:19\n\
    \  |\n6 |     let mut hash: HashMap<isize, isize> = HashMap::new();\n  |     \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpravlkrha.rs:6:43\n\
    \  |\n6 |     let mut hash: HashMap<isize, isize> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = vec![];\n    for n in numbers {\n        if !unique.contains(&n)\
    \ {\n            unique.push(n);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppxpwujc8.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for x in numbers {\n        if res.contains(&x)\
    \ {\n            continue;\n        }\n        res.push(x);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpqnpb3ga_.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    let mut ans = Vec::new();\n    for\
    \ i in &numbers {\n        if !set.contains(i) {\n            set.insert(*i);\n\
    \            ans.push(*i);\n        }\n    }\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgukmmobr.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    let mut duplicates = Vec::new();\n\n\
    \    for num in numbers {\n        if unique.contains(&num) {\n            duplicates.push(num);\n\
    \        } else {\n            unique.push(num);\n        }\n    }\n\n    let\
    \ mut result = Vec::new();\n    for num in numbers {\n        if !duplicates.contains(&num)\
    \ {\n            result.push(num);\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpefu3nrsu.rs:18:16\n\
    \    |\n5   | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    |\
    \                      ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n...\n9   |     for num in numbers\
    \ {\n    |                ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n18  |     for num in numbers {\n    |                ^^^^^^^\
    \ value used here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `numbers`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n9\
    \   |     for num in &numbers {\n    |                +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    let mut out = Vec::new();\n    for\
    \ i in numbers {\n        if !set.contains(&i) {\n            set.insert(i);\n\
    \            out.push(i);\n        }\n    }\n    out\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmput93mzb2.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for n in numbers {\n        if !seen.contains(&n) {\n            result.push(n);\n\
    \            seen.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9n8n8fa9.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpesfdotox.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = vec![];\n    for i in numbers {\n        if !unique.contains(&i)\
    \ {\n            unique.push(i);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfb6mbut7.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut deduped: Vec<isize> = Vec::new();\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for num in numbers {\n        if !seen.contains(&num)\
    \ {\n            seen.insert(num);\n            deduped.push(num);\n        }\n\
    \    }\n    deduped\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3cm093wb.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp3cm093wb.rs:7:36\n  |\n7 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    //TODO\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2nqw3h05.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers;\n    let mut duplicates = HashSet::new();\n\
    \    let mut uniques = Vec::new();\n\n    for n in numbers.drain(..) {\n     \
    \   if duplicates.contains(&n) {\n            continue;\n        }\n        if\
    \ uniques.contains(&n) {\n            duplicates.insert(n);\n            continue;\n\
    \        }\n        uniques.push(n);\n    }\n\n    uniques\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpkbailiq0.rs:7:26\n  |\n7 |     let mut duplicates = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // todo!()\n    let mut new_list = Vec::new();\n    let mut set = HashSet::new();\n\
    \    for x in numbers {\n        if !set.contains(&x) {\n            new_list.push(x);\n\
    \            set.insert(x);\n        }\n    }\n    new_list\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp_15vurnz.rs:8:19\n  |\n8 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n   \
    \ for n in numbers {\n        if !set.contains(&n) {\n            result.push(n);\n\
    \            set.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp0fkb789k.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: remove duplicates\n    Vec::new()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpmr3fvjho.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut map = HashMap::new();\n   \
    \ for number in numbers {\n        if map.get(&number).is_none() {\n         \
    \   map.insert(number, 1);\n            result.push(number);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpo1w5ixg4.rs:7:19\n  |\n7 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  // You code goes here\n  vec![]\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpiz4ksvw7.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  let mut result = Vec::new();\n  let mut previous = None;\n  for &num in\
    \ numbers.iter() {\n    if previous != Some(num) {\n      result.push(num);\n\
    \    }\n    previous = Some(num);\n  }\n  result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpot79pdsu.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::<isize>::new();\n    let mut seen = HashSet::<isize>::new();\n\
    \    for number in numbers {\n        if !seen.contains(&number) {\n         \
    \   result.push(number);\n            seen.insert(number);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpmevjtqf0.rs:7:20\n  |\n7 |     let mut seen = HashSet::<isize>::new();\n\
    \  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().fold(vec![], |mut acc, x| {\n        if !acc.contains(&x)\
    \ {\n            acc.push(x);\n        }\n        acc\n    })\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpn1l4anrq.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for n in numbers {\n        if !seen.contains(&n) {\n   \
    \         seen.insert(n);\n            result.push(n);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpj78z31xi.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpj78z31xi.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: implement\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpu6fk63jw.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut found = HashSet::new();\n \
    \   for x in numbers {\n        if !found.contains(&x) {\n            result.push(x);\n\
    \            found.insert(x);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpnaidyiq_.rs:7:21\n  |\n7 |     let mut found = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: Complete function\n    vec![]\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpbhyvjhwy.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n  \
    \  for n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpz95j2gkm.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n  \
    \  for number in numbers {\n        if !seen.contains(&number) {\n           \
    \ seen.insert(number);\n            result.push(number);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpyw3alrtm.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::new();\n    for n in numbers {\n      \
    \  if !unique_numbers.contains(&n) {\n            unique_numbers.push(n);\n  \
    \      }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmps_u2emck.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: implement function\n    let mut unique = Vec::new();\n    for\
    \ number in numbers {\n        if !unique.contains(&number) {\n            unique.push(number);\n\
    \        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpqp7fcbjm.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_vec = Vec::new();\n    for i in numbers {\n        if !new_vec.contains(&i)\
    \ {\n            new_vec.push(i);\n        }\n    }\n    new_vec\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2glr3j61.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers;\n    let mut duplicates = HashSet::new();\n\
    \    let mut removed = HashSet::new();\n    for i in 0..numbers.len() {\n    \
    \    if !removed.contains(&i) {\n            if duplicates.contains(&numbers[i])\
    \ {\n                removed.insert(i);\n            } else {\n              \
    \  duplicates.insert(numbers[i]);\n            }\n        }\n    }\n    numbers.retain(|i|\
    \ !removed.contains(&i));\n    numbers\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpzcpekn8v.rs:7:26\n  |\n7 |     let mut duplicates = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpzcpekn8v.rs:8:23\n\
    \  |\n8 |     let mut removed = HashSet::new();\n  |                       ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for n in numbers {\n        if !seen.contains(&n) {\n            result.push(n);\n\
    \            seen.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpdc1q4ju1.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_vec = Vec::new();\n    for n in numbers {\n        if !new_vec.contains(&n)\
    \ {\n            new_vec.push(n);\n        }\n    }\n    new_vec\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpos3lt8z3.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    for i in numbers {\n        if !v.contains(&i)\
    \ {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmphkhlnmow.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpild6905m.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::new();\n    for n in numbers {\n      \
    \  if !unique_numbers.contains(&n) {\n            unique_numbers.push(n);\n  \
    \      }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpv6z3pac8.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for number in numbers {\n        if !seen.contains(&number) {\n           \
    \ result.push(number);\n            seen.insert(number);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplvcodn65.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut map = std::collections::HashMap::new();\n    let mut result =\
    \ Vec::new();\n    for n in numbers {\n        let count = map.entry(n).or_insert(0);\n\
    \        *count += 1;\n    }\n    for n in numbers {\n        if map[&n] == 1\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpwsczqoy8.rs:12:14\n\
    \    |\n5   | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    |\
    \                      ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n\
    \    |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n12  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut in_result = HashSet::new();\n\
    \    for number in numbers {\n        if !in_result.contains(&number) {\n    \
    \        result.push(number);\n            in_result.insert(number);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplq39n5wy.rs:7:25\n  |\n7 |     let mut in_result = HashSet::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    use std::collections::HashSet;\n    let mut hs = HashSet::new();\n  \
    \  let mut result = Vec::new();\n    for n in numbers {\n        if !hs.contains(&n)\
    \ {\n            hs.insert(n);\n            result.push(n);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpcrsfo_o6.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpr3iem0lo.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpe6sf92s0.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3h5envzf.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut xs = HashSet::new();\n    let mut res = Vec::new();\n    for\
    \ n in numbers {\n        if !xs.contains(&n) {\n            xs.insert(n);\n \
    \           res.push(n);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqdcpk_ee.rs:6:18\n  |\n6 |     let mut xs = HashSet::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    for num in numbers {\n        if !unique.contains(&num)\
    \ {\n            unique.push(num);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpwc5ecifk.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: implement\n    vec![]\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpsxfvu3n2.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = std::collections::HashSet::new();\n    let mut result =\
    \ Vec::new();\n    for num in numbers {\n        if !set.contains(&num) {\n  \
    \          set.insert(num);\n            result.push(num);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpnboa9s0k.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.len() == 0 {\n        return Vec::new();\n    }\n\n    let\
    \ mut res = Vec::new();\n    let mut tmp = HashSet::new();\n    for num in numbers\
    \ {\n        if !tmp.contains(&num) {\n            res.push(num);\n          \
    \  tmp.insert(num);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmptb6pi7ku.rs:11:19\n   |\n11 |     let mut tmp = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut nvec = Vec::new();\n    for\
    \ n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            nvec.push(n);\n        }\n    }\n    nvec\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpldxgaqqo.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_numbers = Vec::new();\n    let mut seen = Vec::new();\n \
    \   for num in numbers {\n        if !seen.contains(&num) {\n            new_numbers.push(num);\n\
    \            seen.push(num);\n        }\n    }\n    new_numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpaomgt7ap.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n  \
    \  for number in numbers {\n        if !seen.contains(&number) {\n           \
    \ seen.insert(number);\n            result.push(number);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpayw1si1m.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpa7iy_af_.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::new();\n    let mut number_counts = HashMap::new();\n\
    \n    for number in numbers {\n        *number_counts.entry(number).or_insert(0)\
    \ += 1;\n    }\n\n    for number in numbers {\n        if number_counts[&number]\
    \ == 1 {\n            unique_numbers.push(number);\n        }\n    }\n\n    unique_numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp9ftklwiq.rs:7:29\n  |\n7 |     let mut number_counts = HashMap::new();\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut num_list = Vec::new();\n\
    \    for i in numbers {\n        if !seen.contains(&i) {\n            seen.insert(i);\n\
    \            num_list.push(i);\n        }\n    }\n    num_list\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmphe4shxiy.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut added = HashSet::new();\n \
    \   for n in numbers {\n        if !added.contains(&n) {\n            result.push(n);\n\
    \            added.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpwhtdetqo.rs:7:21\n  |\n7 |     let mut added = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut rv = Vec::new();\n    let mut set = HashSet::new();\n    for\
    \ n in numbers {\n        if !set.contains(&n) {\n            rv.push(n);\n  \
    \          set.insert(n);\n        }\n    }\n    rv\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp63t30mlc.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: solve this task\n    unimplemented!();\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppjk6_9x7.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut num_count = HashMap::new();\n    let mut new_numbers = Vec::new();\n\
    \n    for number in numbers {\n        *num_count.entry(number).or_insert(0) +=\
    \ 1;\n    }\n\n    for number in numbers {\n        if num_count[&number] == 1\
    \ {\n            new_numbers.push(number);\n        }\n    }\n\n    new_numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp3uay_7cd.rs:6:25\n  |\n6 |     let mut num_count = HashMap::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.sort();\n \
    \   numbers_copy.dedup();\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpcwt9qhnh.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut sorted = numbers.clone();\n    sorted.sort();\n    let mut to_return\
    \ = Vec::new();\n    for i in 1..sorted.len() {\n        if sorted[i - 1] != sorted[i]\
    \ {\n            to_return.push(sorted[i - 1]);\n        }\n    }\n    to_return.push(sorted[sorted.len()\
    \ - 1]);\n    to_return\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp0m0ejka0.rs:14:27\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    for num in numbers {\n        if !unique.contains(&num)\
    \ {\n            unique.push(num);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpw7n4hzy8.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = std::collections::HashSet::new();\n    let mut ret = Vec::new();\n\
    \    for &n in &numbers {\n        if seen.contains(&n) {\n            continue;\n\
    \        }\n        seen.insert(n);\n        ret.push(n);\n    }\n    ret\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpd6de_ikd.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = vec![];\n    let mut counts = HashMap::new();\n\
    \n    for num in numbers {\n        let count = counts.entry(num).or_insert(0);\n\
    \        *count += 1;\n    }\n\n    for num in numbers {\n        if counts[&num]\
    \ == 1 {\n            unique_numbers.push(num);\n        }\n    }\n\n    unique_numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpd3t8pm8c.rs:7:22\n  |\n7 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut vec = Vec::new();\n    let mut set = HashSet::new();\n    for\
    \ i in numbers {\n        if !set.contains(&i) {\n            vec.push(i);\n \
    \           set.insert(i);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpks1srclm.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().collect::<BTreeSet<_>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmp_9svx6io.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<BTreeSet<_>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out: Vec<isize> = Vec::new();\n    for n in numbers {\n     \
    \   if !out.contains(&n) {\n            out.push(n);\n        }\n    }\n    out\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp4usq2txb.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for number in numbers {\n        if !result.contains(&number)\
    \ {\n            result.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpa8f42nzh.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().unique().collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unique` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp9wjbd1rg.rs:6:25\n  |\n6 |     numbers.into_iter().unique().collect()\n\
    \  |                         ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // XXX\n    let mut set: HashSet<isize> = HashSet::new();\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    for x in numbers {\n        if !set.contains(&x)\
    \ {\n            set.insert(x);\n            result.push(x);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7exaemri.rs:7:18\n\
    \  |\n7 |     let mut set: HashSet<isize> = HashSet::new();\n  |             \
    \     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp7exaemri.rs:7:35\n  |\n7 |  \
    \   let mut set: HashSet<isize> = HashSet::new();\n  |                       \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcytnfi16.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp15rwu_i3.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp85c7g7iz.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut output = Vec::new();\n  \
    \  for n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            output.push(n);\n        }\n    }\n    output\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpk3marpkt.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers;\n    numbers.sort();\n    let mut unique =\
    \ vec![];\n    for i in 0..numbers.len() {\n        if i == 0 || numbers[i] !=\
    \ numbers[i - 1] {\n            unique.push(numbers[i]);\n        }\n    }\n \
    \   unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbe3smmeh.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out: Vec<isize> = Vec::new();\n    let mut unique: HashSet<isize>\
    \ = HashSet::new();\n    for n in numbers {\n        if !unique.contains(&n) {\n\
    \            out.push(n);\n            unique.insert(n);\n        }\n    }\n \
    \   out\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp68ab2tsz.rs:7:21\n\
    \  |\n7 |     let mut unique: HashSet<isize> = HashSet::new();\n  |          \
    \           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp68ab2tsz.rs:7:38\n\
    \  |\n7 |     let mut unique: HashSet<isize> = HashSet::new();\n  |          \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    let mut unique_set = HashSet::new();\n\
    \    for n in numbers {\n        if !unique_set.contains(&n) {\n            unique.push(n);\n\
    \            unique_set.insert(n);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp_jok882l.rs:7:26\n  |\n7 |     let mut unique_set = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n  \
    \  for num in numbers {\n        if !seen.contains(&num) {\n            seen.insert(num);\n\
    \            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgn0nrb1q.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // One way of doing it.\n    // Use HashSet to remove the duplicates\
    \ and HashMap to preserve the order.\n    // let mut set = HashSet::new();\n \
    \   // let mut result = Vec::new();\n    // let mut map = HashMap::new();\n  \
    \  // for num in numbers {\n    //     if !set.contains(&num) {\n    //      \
    \   set.insert(num);\n    //         result.push(num);\n    //     }\n    // \
    \    map.insert(num, num);\n    // }\n    // result.sort_by_key(|num| map.get(num).unwrap());\n\
    \    // result\n\n    // Shorter version of the above\n    let mut map = HashMap::new();\n\
    \    let mut result = Vec::new();\n    for num in numbers {\n        match map.insert(num,\
    \ num) {\n            Some(_) => (),\n            None => result.push(num),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpkgdw66n4.rs:22:19\n   |\n22 |     let mut map = HashMap::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    use std::collections::HashSet;\n    let mut result = Vec::new();\n  \
    \  let mut set = HashSet::new();\n    for n in numbers {\n        if !set.contains(&n)\
    \ {\n            result.push(n);\n            set.insert(n);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpu65c8v34.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9vwcw3s2.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  let mut numbers = numbers;\n  numbers.sort();\n  let mut nums_unique =\
    \ Vec::new();\n  let mut last_num = isize::MIN;\n  for num in numbers {\n    if\
    \ num != last_num {\n      nums_unique.push(num);\n    }\n    last_num = num;\n\
    \  }\n  nums_unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkh7f5v4q.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let numbers_set: HashSet<isize> = numbers.iter().cloned().collect();\n\
    \    let mut result: Vec<isize> = Vec::new();\n    for number in numbers {\n \
    \       if numbers_set.contains(&number) {\n            result.push(number);\n\
    \            numbers_set.remove(&number);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp6fe6pjwf.rs:6:22\n\
    \  |\n6 |     let numbers_set: HashSet<isize> = numbers.iter().cloned().collect();\n\
    \  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut uniques = Vec::new();\n    for number in numbers {\n        if\
    \ !uniques.contains(&number) {\n            uniques.push(number);\n        }\n\
    \    }\n    uniques\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpn6w3gsnu.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n  \
    \  for i in numbers {\n        if !seen.contains(&i) {\n            seen.insert(i);\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpnutikxz8.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out: Vec<isize> = Vec::new();\n    let mut count = 0;\n    for\
    \ i in numbers {\n        count = 0;\n        for j in &out {\n            if\
    \ i == *j {\n                count += 1;\n            }\n        }\n        if\
    \ count == 0 {\n            out.push(i);\n        }\n    }\n    out\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpiwump_3_.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut num_dict = HashMap::new();\n    for i in &numbers {\n       \
    \ if num_dict.contains_key(i) {\n            *num_dict.get_mut(i).unwrap() +=\
    \ 1;\n        } else {\n            num_dict.insert(*i, 1);\n        }\n    }\n\
    \    numbers.into_iter().filter(|&i| num_dict[&i] == 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpoao1lq1z.rs:6:24\n  |\n6 |     let mut num_dict = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut unique: Vec<isize>\
    \ = Vec::new();\n\n    for number in numbers {\n        if !seen.contains(&number)\
    \ {\n            seen.insert(number);\n            unique.push(number);\n    \
    \    }\n    }\n\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp1cizfoi0.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp1cizfoi0.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = HashSet::new();\n    let mut result = Vec::new();\n\
    \    for n in numbers {\n        if !unique.contains(&n) {\n            unique.insert(n);\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpeqagzx_o.rs:6:22\n  |\n6 |     let mut unique = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut appeared_numbers = HashSet::new();\n\
    \    for number in numbers {\n        if !appeared_numbers.contains(&number) {\n\
    \            result.push(number);\n            appeared_numbers.insert(number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpbg7oqca6.rs:7:32\n  |\n7 |     let mut appeared_numbers = HashSet::new();\n\
    \  |                                ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut prev: isize = -1;\n    let mut iter = numbers.iter();\n    let\
    \ mut out = Vec::new();\n    while let Some(num) = iter.next() {\n        if prev\
    \ != *num {\n            out.push(*num);\n        }\n        prev = *num;\n  \
    \  }\n    out\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpvqcn0nx4.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut unique: Vec<isize>\
    \ = Vec::new();\n\n    for x in numbers {\n        if !seen.contains(&x) {\n \
    \           seen.insert(x);\n            unique.push(x);\n        }\n    }\n\n\
    \    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpxjkqe_l9.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpxjkqe_l9.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().cloned().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpo3o2uyzm.rs:6:39\n\
    \  |\n6 |     numbers.iter().cloned().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                       ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpo08gzs8o.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for number in numbers {\n        if !result.contains(&number)\
    \ {\n            result.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_0h6p6lq.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut list: Vec<isize> = Vec::new();\n    for n in numbers {\n    \
    \    if !list.contains(&n) {\n            list.push(n);\n        }\n    }\n  \
    \  list\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmptld9l4d0.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut keep = Vec::new();\n    for\
    \ n in numbers {\n        if !seen.contains(&n) {\n            seen.insert(n);\n\
    \            keep.push(n);\n        }\n    }\n    keep\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplwfix9d1.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = Vec::new();\n    let mut occurences = HashMap::new();\n\
    \    for number in numbers {\n        if occurences.contains_key(&number) {\n\
    \            occurences.insert(number, 2);\n        } else {\n            occurences.insert(number,\
    \ 1);\n        }\n    }\n    for number in numbers {\n        if occurences.get(&number).unwrap()\
    \ == &1 {\n            ret.push(number);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpwv5gx517.rs:7:26\n  |\n7 |     let mut occurences = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut already_seen = Vec::new();\n\
    \    for num in numbers {\n        if !already_seen.contains(&num) {\n       \
    \     result.push(num);\n            already_seen.push(num);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmptp_okwn_.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // To be able to compare them we need to convert the data to sets\n \
    \   let duplicates: HashSet<isize> = numbers.iter().cloned().collect();\n    let\
    \ mut result: Vec<isize> = Vec::new();\n    // Collecting the result\n    for\
    \ elem in duplicates {\n        result.push(elem);\n    }\n    // sorting them\
    \ because the order matters\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3y91xxs5.rs:7:21\n\
    \  |\n7 |     let duplicates: HashSet<isize> = numbers.iter().cloned().collect();\n\
    \  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_unique = Vec::new();\n    for n in numbers {\n      \
    \  if !numbers_unique.contains(&n) {\n            numbers_unique.push(n);\n  \
    \      }\n    }\n    numbers_unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpukl6ctfh.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp0mmzd2ip.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n   \
    \ for number in numbers {\n        if !set.contains(&number) {\n            result.push(number);\n\
    \            set.insert(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpn6ppnnfi.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // We need to keep order, so we'll use a LinkedHashSet.\n    let mut\
    \ set = LinkedHashSet::new();\n    for number in numbers {\n        set.insert(number);\n\
    \    }\n    set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `LinkedHashSet`\n\
    \ --> /tmp/tmpi0he3_ju.rs:7:19\n  |\n7 |     let mut set = LinkedHashSet::new();\n\
    \  |                   ^^^^^^^^^^^^^ use of undeclared type `LinkedHashSet`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::<isize>::new();\n    for n in numbers {\n        if\
    \ !res.contains(&n) {\n            res.push(n);\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmphr5uoy6r.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let unique: HashSet<isize> = numbers.into_iter().collect();\n    unique.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7ni5m0__.rs:6:17\n\
    \  |\n6 |     let unique: HashSet<isize> = numbers.into_iter().collect();\n  |\
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut unique: Vec<isize>\
    \ = Vec::new();\n    for n in numbers {\n        if !seen.contains(&n) {\n   \
    \         seen.insert(n);\n            unique.push(n);\n        }\n    }\n   \
    \ unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmppdvc5uwb.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmppdvc5uwb.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut nums = numbers;\n    let mut last_insert = vec![];\n    for item\
    \ in nums.clone() {\n        let mut index = 0;\n        for i in 0..nums.len()\
    \ {\n            if nums[i] == item {\n                index += 1;\n         \
    \   }\n        }\n        if index == 1 {\n            last_insert.push(item);\n\
    \        }\n    }\n    last_insert\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::new();\n    for n in numbers {\n      \
    \  if !unique_numbers.contains(&n) {\n            unique_numbers.push(n);\n  \
    \      }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp0jfk27ze.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut buf = Vec::new();\n    for n in numbers {\n        if !buf.contains(&n)\
    \ {\n            buf.push(n);\n        }\n    }\n    buf\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp7rvt_c9i.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n  \
    \  for number in numbers {\n        if !seen.contains(&number) {\n           \
    \ seen.insert(number);\n            result.push(number);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpuz02m08h.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().collect::<VecDeque<_>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `VecDeque` in this scope\n --> /tmp/tmprszag672.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<VecDeque<_>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::VecDeque;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out = vec![];\n    for i in numbers {\n        if !out.contains(&i)\
    \ {\n            out.push(i);\n        }\n    }\n    out\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpypd80vy6.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphrun0qqs.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_numbers = vec![];\n    for num in numbers {\n        if !new_numbers.contains(&num)\
    \ {\n            new_numbers.push(num);\n        }\n    }\n    new_numbers\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmqfj6k9x.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    let mut unique_numbers = HashSet::new();\n\
    \    for n in numbers {\n        if !unique_numbers.contains(&n) {\n         \
    \   res.push(n);\n            unique_numbers.insert(n);\n        }\n    }\n  \
    \  res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpfpw116k0.rs:7:30\n  |\n7 |     let mut unique_numbers = HashSet::new();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpz95nydkp.rs:6:35\n\
    \  |\n6 |     numbers.into_iter().collect::<HashSet<isize>>().into_iter().collect()\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut nums = Vec::new();\n    for n in numbers {\n        if !nums.contains(&n)\
    \ {\n            nums.push(n);\n        }\n    }\n    nums\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp996qmk8j.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    return numbers;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp4y45hd3f.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    let mut non_duplicate_numbers\
    \ = Vec::new();\n\n    for number in numbers {\n        if !numbers_set.contains(&number)\
    \ {\n            non_duplicate_numbers.push(number);\n            numbers_set.insert(number);\n\
    \        }\n    }\n\n    non_duplicate_numbers\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp48gee0mz.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = vec![];\n    for number in numbers {\n     \
    \   if !unique_numbers.contains(&number) {\n            unique_numbers.push(number);\n\
    \        }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpgm5to6n8.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_vec = Vec::new();\n    let mut value_hash = HashMap::new();\n\
    \    for number in numbers {\n        if value_hash.contains_key(&number) {\n\
    \            continue;\n        } else {\n            value_hash.insert(number,\
    \ 1);\n            new_vec.push(number);\n        }\n    }\n    new_vec\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp301x_2js.rs:7:26\n  |\n7 |     let mut value_hash = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut used = HashSet::new();\n  \
    \  for num in numbers {\n        if !used.contains(&num) {\n            result.push(num);\n\
    \            used.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpf1blvvl9.rs:7:20\n  |\n7 |     let mut used = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_vec = Vec::new();\n    let mut seen = HashSet::new();\n \
    \   for n in numbers {\n        if !seen.contains(&n) {\n            new_vec.push(n);\n\
    \            seen.insert(n);\n        }\n    }\n    new_vec\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpui3wwgvb.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut non_duplicates: Vec<isize> = Vec::new();\n    for &number in\
    \ numbers.iter() {\n        if non_duplicates.contains(&number) {\n          \
    \  continue;\n        }\n        non_duplicates.push(number);\n    }\n    non_duplicates\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpj61nhpoj.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_list = Vec::new();\n    for num in numbers {\n        if\
    \ !new_list.contains(&num) {\n            new_list.push(num);\n        }\n   \
    \ }\n    new_list\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2jg2w_8n.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for n in numbers {\n        if !seen.contains(&n) {\n   \
    \         seen.insert(n);\n            result.push(n);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpqzml4emv.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpqzml4emv.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut memo: HashMap<isize, bool> = HashMap::new();\n    let mut result:\
    \ Vec<isize> = Vec::new();\n\n    for n in numbers {\n        if memo.contains_key(&n)\
    \ {\n            *memo.get_mut(&n).unwrap() = false;\n        } else {\n     \
    \       memo.insert(n, true);\n        }\n    }\n\n    for (n, keep) in memo {\n\
    \        if keep {\n            result.push(n);\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp530rl5_d.rs:6:19\n\
    \  |\n6 |     let mut memo: HashMap<isize, bool> = HashMap::new();\n  |      \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp530rl5_d.rs:6:42\n\
    \  |\n6 |     let mut memo: HashMap<isize, bool> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut histogram = HashMap::new();\n    for number in numbers {\n  \
    \      let counter = histogram.entry(number).or_insert(0);\n        *counter +=\
    \ 1;\n    }\n    numbers.into_iter().filter(|&number| histogram[&number] == 1).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpfn2d1er3.rs:6:25\n  |\n6 |     let mut histogram = HashMap::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpacfi2jfi.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  let mut unique_numbers = vec![];\n  for number in numbers {\n    if !unique_numbers.contains(&number)\
    \ {\n      unique_numbers.push(number);\n    }\n  }\n  unique_numbers\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpw1_bjjbh.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn8oj_62g.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n   \
    \ for number in numbers {\n        if !set.contains(&number) {\n            result.push(number);\n\
    \            set.insert(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmps9e5wsdb.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::<isize>::new();\n    let mut used = HashSet::<isize>::new();\n\
    \    for i in numbers {\n        if !used.contains(&i) {\n            result.push(i);\n\
    \            used.insert(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpe5xkvy98.rs:7:20\n  |\n7 |     let mut used = HashSet::<isize>::new();\n\
    \  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers;\n    numbers.dedup();\n    numbers\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpo3gorx4o.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut aux: Vec<isize> = Vec::new();\n    for n in numbers {\n     \
    \   if !aux.contains(&n) {\n            aux.push(n);\n        }\n    }\n    aux\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpiia6y0_w.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    for number in numbers {\n        if\
    \ !unique.contains(&number) {\n            unique.push(number);\n        }\n \
    \   }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbz261m8m.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut unique = vec![];\n    for\
    \ number in numbers {\n        if !seen.contains(&number) {\n            seen.insert(number);\n\
    \            unique.push(number);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpexols_hv.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for num in numbers {\n        if result.contains(&num)\
    \ {\n            continue;\n        } else {\n            result.push(num);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpklzp_hy2.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut deduped = Vec::new();\n    for item in numbers {\n        if\
    \ !deduped.contains(&item) {\n            deduped.push(item);\n        }\n   \
    \ }\n    deduped\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_2ezom8i.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for n in numbers {\n        if !result.contains(&n)\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp3bbdpaes.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = Vec::new();\n    let mut result = Vec::new();\n    for\
    \ num in numbers {\n        if !seen.contains(&num) {\n            seen.push(num);\n\
    \            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmprm05ncfb.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // HashSet<T> automatically keeps only unique elements\n    let set:\
    \ HashSet<isize> = numbers.into_iter().collect();\n    set.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpsx2bna2a.rs:7:14\n\
    \  |\n7 |     let set: HashSet<isize> = numbers.into_iter().collect();\n  |  \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5t9tbdcn.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5ru7i8ha.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut count = HashMap::new();\n \
    \   for number in numbers {\n        count.entry(number).and_modify(|value| *value\
    \ += 1).or_insert(1);\n    }\n    for number in numbers {\n        if count[&number]\
    \ == 1 {\n            result.push(number);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpkxqsnena.rs:7:21\n  |\n7 |     let mut count = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers;\n    numbers.sort();\n    let mut previous\
    \ = None;\n    numbers.retain(|&item| {\n        let keep = previous.map_or(true,\
    \ |prev| prev != item);\n        previous = Some(item);\n        keep\n    });\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp2wru5aau.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n   \
    \ for number in numbers {\n        if !set.contains(&number) {\n            result.push(number);\n\
    \            set.insert(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpdiegt082.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    let mut unique_numbers:\
    \ Vec<isize> = Vec::new();\n\n    for number in numbers {\n        if !seen.contains(&number)\
    \ {\n            seen.insert(number);\n            unique_numbers.push(number);\n\
    \        }\n    }\n\n    unique_numbers\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpvyrup_ta.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpvyrup_ta.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for n in numbers {\n        if !seen.contains(&n) {\n            result.push(n);\n\
    \            seen.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp4lt90z80.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpf8tz80c3.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n   \
    \ for &n in &numbers {\n        if !set.contains(&n) {\n            result.push(n);\n\
    \            set.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpspc3b_fb.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n   \
    \ for i in numbers {\n        if !set.contains(&i) {\n            result.push(i);\n\
    \            set.insert(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp7ef2yo0q.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpd9e8actn.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n  let mut unique = HashSet::new();\n  let mut unique_list = Vec::new();\n\
    \  for n in numbers {\n    if !unique.contains(&n) {\n      unique.insert(n);\n\
    \      unique_list.push(n);\n    }\n  }\n  unique_list\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp6br_vwd3.rs:6:20\n  |\n6 |   let mut unique = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.len() < 2 {\n        return numbers;\n    }\n\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    let mut keepers: Vec<isize> = Vec::new();\n\
    \n    for x in numbers {\n        if seen.contains(&x) {\n            continue;\n\
    \        }\n        seen.insert(x);\n        keepers.push(x);\n    }\n\n    keepers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp7ni7gb8e.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp7ni7gb8e.rs:10:36\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    let mut unique = Vec::new();\n   \
    \ for number in numbers {\n        if !set.contains(&number) {\n            set.insert(number);\n\
    \            unique.push(number);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmprr0u0yu0.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
