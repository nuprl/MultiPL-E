name: HumanEval_97_multiply
language: rust
results:
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a % 10) * (b % 10)) %\
    \ 10\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp71akbg3w.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut ma = a;\n    let\
    \ mut mb = b;\n    if ma < 0 {\n        ma = ma * -1;\n    }\n    if mb < 0 {\n\
    \        mb = mb * -1;\n    }\n    let mut result = ma % 10 * mb % 10;\n    if\
    \ result > 9 {\n        result = result % 10;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp8_s1ymsm.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let product = a * b;\n\
    \    return product % 10;\n}\n\nfn main() {\n    let candidate = multiply;\n \
    \   assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp6v0omise.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  (a%10) * (b%10)\n}\n\nfn\
    \ main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1xxtzoqs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    return (a % 10) * (b %\
    \ 10);\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpmrgrjfwy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp0035482k.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = (a % 10).abs();\n\
    \    let b = (b % 10).abs();\n    return a * b;\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs() % 10 * b.abs()\
    \ % 10\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp21mgbhzu.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a.abs();\n\
    \    let mut b = b.abs();\n    let mut product = 0;\n    while a > 0 {\n     \
    \   product += b;\n        a -= 1;\n    }\n    product\n}\n\nfn main() {\n   \
    \ let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `60976`,\n right: `16`', /tmp/tmpzi33g2r_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_str = a.to_string();\n\
    \    let b_str = b.to_string();\n    let a_unit = a_str.chars().nth(a_str.len()\
    \ - 1).unwrap().to_digit(10).unwrap();\n    let b_unit = b_str.chars().nth(b_str.len()\
    \ - 1).unwrap().to_digit(10).unwrap();\n    (a_unit * b_unit) as isize\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpanqucoox.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpbq39hb1j.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut prod = 0;\n   \
    \ let mut prod_1 = a % 10;\n    let mut prod_2 = b % 10;\n    prod = prod_1 *\
    \ prod_2;\n    prod\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpnubav3ol.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpsvcmh9ei.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut prod = a * b;\n\
    \    while prod >= 10 {\n        prod /= 10;\n    }\n    prod\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpkav01f1w.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpj15mv39p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let x = a % 10;\n    let\
    \ y = b % 10;\n    x * y\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpoenr6_9v.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp5fc7644n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpp8pq1et_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a % 10) * (b % 10)) as\
    \ isize\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp2u0l6l40.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a % 10) * (b % 10)) %\
    \ 10\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp4_np0qhn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpdk69luo0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpvcezz0tp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs()\n        .to_string()\n\
    \        .chars()\n        .last()\n        .unwrap()\n        .to_digit(10)\n\
    \        .unwrap() as isize\n        * b.abs()\n            .to_string()\n   \
    \         .chars()\n            .last()\n            .unwrap()\n            .to_digit(10)\n\
    \            .unwrap() as isize\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    // Get the unit digit\n\
    \    fn get_unit_digit(n: isize) -> isize {\n        let s = n.to_string();\n\
    \        let ch = s.chars().nth(s.len() - 1).unwrap();\n        return ch.to_digit(10).unwrap()\
    \ as isize;\n    }\n\n    return get_unit_digit(a) * get_unit_digit(b);\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    if a < 0 { return multiply(-a,\
    \ b); }\n    if b < 0 { return multiply(a, -b); }\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    return (a.abs() % 10) *\
    \ (b.abs() % 10);\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpyndxuni6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1easbemg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs() * b.abs() % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmphf3tzl2p.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpk04h1_1y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a % 10) * (b % 10)) as\
    \ isize\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpod3r9uaj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let result = a * b;\n \
    \   (result % 10) as isize\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp1vidk1e2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  (a % 10) * (b % 10)\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpklijjf6b.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a%10) * (b%10)\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpv12dc8m9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    if a * b == 0 { return\
    \ 0; }\n    let mut aa = a.abs();\n    let mut bb = b.abs();\n    while aa > 9\
    \ { aa /= 10; }\n    while bb > 9 { bb /= 10; }\n    aa * bb\n}\n\nfn main() {\n\
    \    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n   \
    \ assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n\
    \    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n\
    \    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n\
    \    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `16`', /tmp/tmpykl4kvfl.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let abs_a = a.abs();\n\
    \    let abs_b = b.abs();\n    let product = abs_a * abs_b;\n    product % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp1qwtwfe2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    // return the product of\
    \ two unit digits\n    // Take the modulus 10 of each, then multiply and return\n\
    \    (a%10)*(b%10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpzh5hre38.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut prod = a * b;\n\
    \    prod = prod % 10;\n    prod\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpltexyswl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    // unimplemented!(\"Multiply\
    \ {} by {}\", a, b);\n    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n\
    \        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n    a % 10 *\
    \ b % 10\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp4hgd9gla.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    if a > 0 { a.abs() % 10\
    \ } else { a.abs() % 10 } *\n    if b > 0 { b.abs() % 10 } else { b.abs() % 10\
    \ }\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppfg9navv.rs:10:16\n   |\n\
    10 |     if a > 0 { a.abs() % 10 } else { a.abs() % 10 } *\n   |     -----------^^^^^^^^^^^^------------------------\n\
    \   |     |          |\n   |     |          expected `()`, found `isize`\n   |\
    \     expected this to be `()`\n   |\nhelp: consider using a semicolon here\n\
    \   |\n10 |     if a > 0 { a.abs() % 10 } else { a.abs() % 10 }; *\n   |     \
    \                                               +\nhelp: you might have meant\
    \ to return this value\n   |\n10 |     if a > 0 { return a.abs() % 10; } else\
    \ { a.abs() % 10 } *\n   |                ++++++             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppfg9navv.rs:10:38\n   |\n10 |     if a > 0 {\
    \ a.abs() % 10 } else { a.abs() % 10 } *\n   |     ---------------------------------^^^^^^^^^^^^--\n\
    \   |     |                                |\n   |     |                     \
    \           expected `()`, found `isize`\n   |     expected this to be `()`\n\
    \   |\nhelp: consider using a semicolon here\n   |\n10 |     if a > 0 { a.abs()\
    \ % 10 } else { a.abs() % 10 }; *\n   |                                      \
    \              +\nhelp: you might have meant to return this value\n   |\n10 |\
    \     if a > 0 { a.abs() % 10 } else { return a.abs() % 10; } *\n   |        \
    \                              ++++++             +\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmppfg9navv.rs:10:53\n   |\n10 |       if\
    \ a > 0 { a.abs() % 10 } else { a.abs() % 10 } *\n   |  _____________________________________________________^\n\
    11 | |     if b > 0 { b.abs() % 10 } else { b.abs() % 10 }\n   | |___________________________________________________^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_end = a % 10;\n \
    \   let b_end = b % 10;\n    a_end * b_end\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpgu4lawey.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() * b.abs()) % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpjr6wuzt_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  a.abs() % 10 * b.abs() %\
    \ 10\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmprkydx0on.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut res: isize = a\
    \ * b;\n    loop {\n        if res < 10 {\n            break;\n        }\n   \
    \     res = res / 10;\n    }\n    res\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpgw2stky8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1fs5dafi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a * b\n}\n\nfn main() {\n\
    \    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n   \
    \ assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n\
    \    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n\
    \    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n\
    \    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `60976`,\n right: `16`', /tmp/tmpm2p6_gc0.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqvc82vie.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let abs_a = a.abs();\n\
    \    let abs_b = b.abs();\n    let (a, b) = (abs_a % 10, abs_b % 10);\n    a *\
    \ b\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() * b.abs()) % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpfw0048sh.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp630guso0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_unit = a.abs() %\
    \ 10;\n    let b_unit = b.abs() % 10;\n    let sign = if (a < 0 && b >= 0) ||\
    \ (a >= 0 && b < 0) { -1 } else { 1 };\n    sign * a_unit * b_unit\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpdi0mq049.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs() * b.abs() % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpwg5b15s_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let abs_a = a.abs();\n\
    \    let abs_b = b.abs();\n    let mut a_units_digit = abs_a % 10;\n    let mut\
    \ b_units_digit = abs_b % 10;\n    if a < 0 {\n        a_units_digit *= -1;\n\
    \    }\n    if b < 0 {\n        b_units_digit *= -1;\n    }\n    return a_units_digit\
    \ * b_units_digit;\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1zyn0p3u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let digits = (a.abs() %\
    \ 10, b.abs() % 10);\n    match (a < 0, b < 0) {\n        (true, true) => digits.0\
    \ * digits.1,\n        (true, false) => -(digits.0 * digits.1),\n        (false,\
    \ true) => -(digits.0 * digits.1),\n        (false, false) => digits.0 * digits.1,\n\
    \    }\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpgf_fv09g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a % 10) * (b % 10)) as\
    \ isize\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqoampivz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a.abs();\n\
    \    let mut b = b.abs();\n    a %= 10;\n    b %= 10;\n    a * b\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  a.abs() * b.abs() % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpxv3knjft.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  a.abs() * b.abs() % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp7bjgkjpr.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  (a % 10) * (b % 10)\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp_o1qzm0k.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  return (a % 10) * (b % 10);\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp8_bg6myb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp3zhonq29.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmph00rjpy6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() * b.abs()) % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpbqgqta6b.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() * b.abs()) % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpzdjwfk__.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpeiqcanq9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a.abs();\n\
    \    let mut b = b.abs();\n    let mut c = 1;\n    while a > 10 {\n        a =\
    \ a / 10;\n    }\n    while b > 10 {\n        b = b / 10;\n    }\n    a * b *\
    \ c\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `16`', /tmp/tmpj5kq242w.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpk7p4qm39.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = (a % 10).abs();\n\
    \    let b = (b % 10).abs();\n    a * b\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp2so_usyr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp49eez_ev.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpf5lmu8n5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  (a % 10) * (b % 10)\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpijwxhfei.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a % 10) * (b % 10)) as\
    \ isize\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpvwh9hu7a.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    // This can be done with\
    \ some casting and modulus, but I think\n    // the digits approach is more interesting.\n\
    \    if a < 0 {\n        return multiply(-a, b);\n    }\n    if b < 0 {\n    \
    \    return multiply(a, -b);\n    }\n    let mut x: isize = 1;\n    let mut y:\
    \ isize = 1;\n    for c in a.to_string().chars() {\n        x *= c.to_digit(10).unwrap()\
    \ as isize;\n    }\n    for c in b.to_string().chars() {\n        y *= c.to_digit(10).unwrap()\
    \ as isize;\n    }\n    x * y\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `256`,\n right: `16`', /tmp/tmpslbcjqrr.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    if a < 0 {\n        return\
    \ multiply(-a, b);\n    }\n    if b < 0 {\n        return multiply(a, -b);\n \
    \   }\n    if a == 0 || b == 0 {\n        return 0;\n    }\n    a % 10 * b % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpvaphc2s2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpvco8akuf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmptx3ba0kv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n \
    \   return 0;\n  }\n  (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpc9wextk6.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_units = a % 10;\n\
    \    let b_units = b % 10;\n    a_units * b_units\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp39uqff1b.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    let a = a % 10;\n    let b = b % 10;\n    return a * b;\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    return (a % 10) * (b %\
    \ 10);\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpblbfk_s1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a.abs();\n\
    \    let mut b = b.abs();\n    a %= 10;\n    b %= 10;\n    a * b\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpylfu1upr.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 { return\
    \ 0 }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp7v69xm_1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut digits: Vec<isize>\
    \ = vec![];\n    let mut mult: isize = 1;\n    let mut a = a;\n    let mut b =\
    \ b;\n    while a > 0 {\n        digits.push(a % 10);\n        a /= 10;\n    }\n\
    \    while b > 0 {\n        digits.push(b % 10);\n        b /= 10;\n    }\n  \
    \  for digit in digits {\n        mult *= digit;\n    }\n    mult\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `256`,\n right: `16`', /tmp/tmpql756rt_.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpvyk8u1un.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpmhmdwm2q.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    a % 10 * b % 10\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpelqcsg6j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a: isize = (a % 10).abs();\n\
    \    let b: isize = (b % 10).abs();\n    a * b\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmps86oedvc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a % 10 * b % 10\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp1izi6_dk.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut n1 = a.abs();\n\
    \    let mut n2 = b.abs();\n    let mut product = 0;\n    while n1 > 0 {\n   \
    \     let last1 = n1 % 10;\n        n1 /= 10;\n        while n2 > 0 {\n      \
    \      let last2 = n2 % 10;\n            n2 /= 10;\n            product += last1\
    \ * last2;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `56`,\n right: `16`', /tmp/tmpgts2_d5f.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    return if a == 0 || b ==\
    \ 0 { 0 } else { (a.abs() % 10) * (b.abs() % 10) };\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  return (a % 10) * (b % 10);\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp3om3p01h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpicbu9nqz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpeoq21pce.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqf7057rm.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_units = a % 10;\n\
    \    let b_units = b % 10;\n    a_units * b_units\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpzb_jwo7g.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a % 10) * (b % 10)) as\
    \ isize\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpjnvhtk94.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpb04n7i87.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpjx42pyw2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = a * -1;\n    }\n    if b < 0 {\n   \
    \     b = b * -1;\n    }\n    let x = a % 10;\n    let y = b % 10;\n    return\
    \ x * y;\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let result = a * b;\n \
    \   let mut str_result = result.to_string();\n    let str_result_len = str_result.len();\n\
    \    if str_result_len >= 2 {\n        str_result.remove(str_result_len - 2);\n\
    \    }\n    str_result.parse::<isize>().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6096`,\n right: `16`', /tmp/tmp_8015udp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut unit = 0;\n   \
    \ if a < 0 {\n        unit += a % 10;\n    } else {\n        unit += a % 10;\n\
    \    }\n    if b < 0 {\n        unit += b % 10;\n    } else {\n        unit +=\
    \ b % 10;\n    }\n    unit\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `16`', /tmp/tmp44dho5lz.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let (a, b) = (a.abs(),\
    \ b.abs());\n    let (a, b) = (a % 10, b % 10);\n    a * b\n}\n\nfn main() {\n\
    \    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n   \
    \ assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n\
    \    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n\
    \    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n\
    \    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpumxgqlvq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqluwkpl1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut i: isize = 0;\n\
    \    for _ in 0..2 {\n        if a % 10 == 0 || b % 10 == 0 {\n            i +=\
    \ 1;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    if i == 2 {\n\
    \        return 0;\n    }\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpzffoirzm.rs:15:9\n\
    \   |\n9  | fn multiply(a: isize, b: isize) -> isize {\n   |             - help:\
    \ consider making this binding mutable: `mut a`\n...\n15 |         a /= 10;\n\
    \   |         ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot\
    \ assign to immutable argument `b`\n  --> /tmp/tmpzffoirzm.rs:16:9\n   |\n9  |\
    \ fn multiply(a: isize, b: isize) -> isize {\n   |                       - help:\
    \ consider making this binding mutable: `mut b`\n...\n16 |         b /= 10;\n\
    \   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = (a % 10).abs();\n\
    \    let b = (b % 10).abs();\n    a * b\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    return a.abs() % 10 * b.abs()\
    \ % 10;\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpk44vi19h.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut (a, b) = (a, b);\n\
    \    while a >= 10 {\n        a /= 10;\n    }\n    while b >= 10 {\n        b\
    \ /= 10;\n    }\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "error: `mut` must be attached to each individual binding\n  --> /tmp/tmpab8dzn_g.rs:10:9\n\
    \   |\n10 |     let mut (a, b) = (a, b);\n   |         ^^^^^^^^^^ help: add `mut`\
    \ to each binding: `(mut a, mut b)`\n   |\n   = note: `mut` may be followed by\
    \ `variable` and `variable @ pattern`\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpnmxa3ifq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpa14bndxz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpjjcp5mck.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let diga = a.abs() % 10;\n\
    \    let digb = b.abs() % 10;\n    diga * digb\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut result = 0;\n \
    \   let mut a = a;\n    let mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n\
    \    if b < 0 {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n \
    \   result\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let product = a * b;\n\
    \    let string_product = product.to_string();\n    let last_digit = &string_product[string_product.len()\
    \ - 1..];\n    return last_digit.parse::<isize>().unwrap();\n}\n\nfn main() {\n\
    \    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n   \
    \ assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n\
    \    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n\
    \    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n\
    \    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpb35nldph.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let units = |n: isize|\
    \ (n - n / 10 * 10).abs();\n    units(a) * units(b)\n}\n\nfn main() {\n    let\
    \ candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs() % 10 * b.abs()\
    \ % 10\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpdb9dq48u.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpd9a1e2l2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs() % 10 * b.abs()\
    \ % 10\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp34aqbvk6.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    // unit digit is last digit,\
    \ so take modulo 10\n    ((a % 10) * (b % 10)) as isize\n}\n\nfn main() {\n  \
    \  let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpuq71y0sx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    ((a%10) * (b%10)) as isize\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpxhlncd8b.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let (a, b) = (a.abs(),\
    \ b.abs());\n    let a = a % 10;\n    let b = b % 10;\n    a * b\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp54dxssu6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_abs = a.abs();\n\
    \    let b_abs = b.abs();\n    let a_unit = a_abs % 10;\n    let b_unit = b_abs\
    \ % 10;\n    let result = a_unit * b_unit;\n    if (a >= 0 && b >= 0) || (a <\
    \ 0 && b < 0) {\n        result\n    } else {\n        -result\n    }\n}\n\nfn\
    \ main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpq6iaxxjf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpq081ehyl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp_baq1qhc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpxrxrdlmm.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp_9enf9gv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp6kuv9cec.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpde87qtpt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a: isize = a.abs()\
    \ % 10;\n    let b: isize = b.abs() % 10;\n    return a * b;\n}\n\nfn main() {\n\
    \    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n   \
    \ assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n\
    \    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n\
    \    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n\
    \    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    return (a % 10) * (b %\
    \ 10);\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpekqwo1k9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n  let mut a_last = a % 10;\n\
    \  let mut b_last = b % 10;\n  if a_last < 0 {\n    a_last = -a_last;\n  }\n \
    \ if b_last < 0 {\n    b_last = -b_last;\n  }\n  a_last * b_last\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mod_a = a % 10;\n \
    \   let mod_b = b % 10;\n    mod_a * mod_b\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp3srz7ckx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2ewd1vfn.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    fn unit_digit(n: isize)\
    \ -> isize {\n        n % 10\n    }\n    unit_digit(a) * unit_digit(b)\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphwq8jt3f.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpm50dmi7t.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs() % 10 * b.abs()\
    \ % 10\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp9pnm95p0.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let product = a * b;\n\
    \    let mut n = product;\n    let mut r = 0;\n    while n > 0 {\n        r =\
    \ n % 10;\n        n = n / 10;\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpaileycgm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_digit = a % 10;\n\
    \    let b_digit = b % 10;\n    a_digit * b_digit\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp25bje824.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp7yhmlma6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    a.abs() * b.abs() % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmphcb527k0.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let digit_a = a.abs() %\
    \ 10;\n    let digit_b = b.abs() % 10;\n    digit_a * digit_b\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() * b.abs()) % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpz47st0zr.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp6pbshba7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() * b.abs()) % 10\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp_5g1nyne.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n\
    \        return 0;\n    }\n    let mut a = a;\n    let mut b = b;\n    let mut\
    \ unit_digit_a = 0;\n    let mut unit_digit_b = 0;\n    while a > 0 {\n      \
    \  unit_digit_a = a % 10;\n        a /= 10;\n    }\n    while b > 0 {\n      \
    \  unit_digit_b = b % 10;\n        b /= 10;\n    }\n    unit_digit_a * unit_digit_b\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `16`', /tmp/tmppb2_kagr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpx7sdd4ke.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut prod: isize = 1;\n\
    \    let mut arr: Vec<isize> = vec![a, b];\n    let mut i: usize = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] == 0 {\n            i += 1;\n           \
    \ continue;\n        }\n        prod *= arr[i] % 10;\n        arr[i] /= 10;\n\
    \        i += 1;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmppb0ej60p.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut ret = a % 10 *\
    \ b % 10;\n    ret\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp2s41e3us.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1netc513.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    return a % 10 * b % 10;\n\
    }\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmps5ngwfu_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut result = 1;\n \
    \   let mut a = a;\n    let mut b = b;\n    while a > 0 {\n        result *= a\
    \ % 10;\n        a /= 10;\n    }\n    while b > 0 {\n        result *= b % 10;\n\
    \        b /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = multiply;\n\
    \    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `256`,\n right: `16`', /tmp/tmpns34innb.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = (a % 10).abs();\n\
    \    let b = (b % 10).abs();\n    a * b\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let (a, b) = (a.abs(),\
    \ b.abs());\n    let (a, b) = (a % 10, b % 10);\n    a * b\n}\n\nfn main() {\n\
    \    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n   \
    \ assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n\
    \    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n\
    \    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n\
    \    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp9ku86mcb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_unit = a % 10;\n\
    \    let b_unit = b % 10;\n    a_unit * b_unit\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphhnnvhxh.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpyk3exb7n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpuf7ttl7h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut res = a * b;\n\
    \    while res > 9 {\n        res = res / 10;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n\
    \    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851),\
    \ 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67),\
    \ 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1),\
    \ 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmpto075hnk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmplfn3515i.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a%10) * (b%10)\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpxuuk2twy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    fn get_unit_digit(x: isize)\
    \ -> isize {\n        let abs_x = x.abs();\n        let mut div = 1;\n       \
    \ while div <= abs_x {\n            div *= 10;\n        }\n        div /= 10;\n\
    \        abs_x % div\n    }\n    get_unit_digit(a) * get_unit_digit(b)\n}\n\n\
    fn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `576`,\n right: `16`', /tmp/tmpdx6idwwe.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut rem = a % 10;\n\
    \    let mut rem2 = b % 10;\n    rem * rem2\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmputedq2t7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
