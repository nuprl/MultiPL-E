name: HumanEval_45_triangle_area
language: rust
results:
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let res = 0.5 * a as f64 * h as f64;\n    res\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = (a as f64 * h as f64) / 2.0;\n    area\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * a as f64 * h as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a = a as f64;\n    let h = h as f64;\n    (a * h) / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let res = a as f64 * h as f64 * 0.5;\n    println!(\"{}\", res);\n    res\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: "7.5\n2\n40\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a * h) as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a * h) as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    f64::from(a) * f64::from(h) / 2.0\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n -->\
    \ /tmp/tmpxf6v28q2.rs:5:5\n  |\n5 |     f64::from(a) * f64::from(h) / 2.0\n  |\
    \     ^^^^^^^^^ the trait `From<isize>` is not implemented for `f64`\n  |\n  =\
    \ help: the following other types implement trait `From<T>`:\n            <f32\
    \ as From<i16>>\n            <f32 as From<i8>>\n            <f32 as From<u16>>\n\
    \            <f32 as From<u8>>\n            <f64 as From<f32>>\n            <f64\
    \ as From<i16>>\n            <f64 as From<i32>>\n            <f64 as From<i8>>\n\
    \          and 67 others\n\nerror[E0277]: the trait bound `f64: From<isize>` is\
    \ not satisfied\n --> /tmp/tmpxf6v28q2.rs:5:20\n  |\n5 |     f64::from(a) * f64::from(h)\
    \ / 2.0\n  |                    ^^^^^^^^^ the trait `From<isize>` is not implemented\
    \ for `f64`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <f32 as From<i16>>\n            <f32 as From<i8>>\n            <f32\
    \ as From<u16>>\n            <f32 as From<u8>>\n            <f64 as From<f32>>\n\
    \            <f64 as From<i16>>\n            <f64 as From<i32>>\n            <f64\
    \ as From<i8>>\n          and 67 others\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \  (a as f64 * h as f64) / 2f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    if a < 0 || h < 0 {\n        return 0f64;\n    }\n    ((a as f64) * (h as\
    \ f64)) / 2f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    // a is side, h is high\n    let area = (a as f64 * h as f64) / 2.0;\n  \
    \  area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64 / 2.0) * h as f64).abs()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2 as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    // input\n    assert!(a > 0);\n    assert!(h > 0);\n    // output\n    (a\
    \ * h / 2) as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7.0`,\n right: `7.5`', /tmp/tmpcz5_bdqb.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = 0.5 * (a as f64) * (h as f64);\n    println!(\"Area: {}\", area);\n\
    \    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: "Area: 7.5\nArea: 2\nArea: 40\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \  (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a: f64 = a as f64;\n    let h: f64 = h as f64;\n    0.5 * a * h\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3),\
    \ 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8),\
    \ 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * (a as f64) * (h as f64)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    // calculate the area of triangle\n    (a as f64 * h as f64) / 2.0\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3),\
    \ 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8),\
    \ 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * a as f64 * h as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * (a as f64) * (h as f64)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let res = (a as f64) * (h as f64) / 2.0;\n    res\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (0.5 * a as f64 * h as f64) as f64\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = (a as f64) * (h as f64) / 2.0;\n    area\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n  \
    \  assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let s = a as f64;\n    let h = h as f64;\n    0.5 * s * h\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * a as f64 * h as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let res = (a * h) as f64 / 2.0;\n    res\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    if a <= 0 || h <= 0 {\n        return 0.0;\n    }\n    (a as f64 * h as f64)\
    \ / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    f64::from(a * h) / 2f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n -->\
    \ /tmp/tmp8_sbs0cs.rs:5:5\n  |\n5 |     f64::from(a * h) / 2f64\n  |     ^^^^^^^^^\
    \ the trait `From<isize>` is not implemented for `f64`\n  |\n  = help: the following\
    \ other types implement trait `From<T>`:\n            <f32 as From<i16>>\n   \
    \         <f32 as From<i8>>\n            <f32 as From<u16>>\n            <f32\
    \ as From<u8>>\n            <f64 as From<f32>>\n            <f64 as From<i16>>\n\
    \            <f64 as From<i32>>\n            <f64 as From<i8>>\n          and\
    \ 67 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return 0.5 * a as f64 * h as f64;\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \  let A = (a * h) as f64 / 2_f64;\n  A\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let triangle_area = 0.5 * a as f64 * h as f64;\n    triangle_area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3),\
    \ 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8),\
    \ 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    if a <= 0 || h <= 0 {\n        panic!(\"Side a cannot be less than 0!\");\n\
    \    }\n    let result = 0.5 * a as f64 * h as f64;\n    result\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64 / 2.0)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * a as f64 * h as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return a as f64 * h as f64 / 2.0;\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    // TODO: Fill this function according to docstring\n    (a * h) as f64 /\
    \ 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64 / 2.0) * h as f64).round() / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4.0`,\n right: `7.5`', /tmp/tmp5wql1_a7.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64 / 2.0).floor()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7.0`,\n right: `7.5`', /tmp/tmp7z8e8u73.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = 0.5 * a as f64 * h as f64;\n    area\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return (a as f64) * (h as f64) / 2.0;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let x = a as f64;\n    let y = h as f64;\n    x * y / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a = a as f64;\n    let h = h as f64;\n    let area = a * h / 2.0;\n \
    \   area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64 / 2_f64).abs()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a = a as f64;\n    let h = h as f64;\n    a * h / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a = a as f64;\n    let h = h as f64;\n    (a * h) / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (0.5 * a as f64 * h as f64) as f64\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpchihubww.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = (a as f64 * h as f64) / 2.0;\n    area\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * (a as f64) * (h as f64)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9lr76_fn.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * a as f64 * h as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let float_a = a as f64;\n    let float_h = h as f64;\n    (float_a * float_h)\
    \ / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a = a as f64;\n    let h = h as f64;\n    (a * h) / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a * h) as f64 / 2.0).abs()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    f64::from(a * h) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n -->\
    \ /tmp/tmpdrh5qkl3.rs:5:5\n  |\n5 |     f64::from(a * h) / 2.0\n  |     ^^^^^^^^^\
    \ the trait `From<isize>` is not implemented for `f64`\n  |\n  = help: the following\
    \ other types implement trait `From<T>`:\n            <f32 as From<i16>>\n   \
    \         <f32 as From<i8>>\n            <f32 as From<u16>>\n            <f32\
    \ as From<u8>>\n            <f64 as From<f32>>\n            <f64 as From<i16>>\n\
    \            <f64 as From<i32>>\n            <f64 as From<i8>>\n          and\
    \ 67 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = (a as f64 * h as f64) / 2f64;\n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcyx50prf.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvdrxvvn9.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = (a as f64) * (h as f64) / 2.0;\n    area\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n  \
    \  assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * a as f64 * h as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64 / 2.0).abs()\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = (a as f64 * h as f64) / 2.0;\n    area\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64 / 2.0).round()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.0`,\n right: `7.5`', /tmp/tmpkvm7h8bo.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    // TODO\n    let x = a * h;\n    x as f64 / 2.0\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return (a as f64) * (h as f64) / 2.0;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (0.5 * a as f64 * h as f64) as f64\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return (a as f64) * (h as f64) / 2.0;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a * h) as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = (a as f64 * h as f64) / 2 as f64;\n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n \
    \   assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return ((a as f64) * (h as f64)) / 2.0;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7nyle74v.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (0.5 * a as f64 * h as f64) as f64\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return (a as f64 * h as f64) / 2.0;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * a as f64 * h as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    // First we compute by casting both arguments to f64.\n    let result = (a\
    \ as f64) * (h as f64) / 2.0;\n    // then we print it.\n    println!(\"triangle\
    \ area with f64: {}\", result);\n    // and we return it.\n    result\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3),\
    \ 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8),\
    \ 40.0);\n}\n"
  stdout: "triangle area with f64: 7.5\ntriangle area with f64: 2\ntriangle area with\
    \ f64: 40\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let float_a = a as f64;\n    let float_h = h as f64;\n    0.5 * float_a *\
    \ float_h\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let res = (a * h) as f64;\n    res / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * a as f64 * h as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5*(a as f64)*(h as f64)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    0.5 * (a as f64) * (h as f64)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a = a as f64;\n    let h = h as f64;\n    (a * h) / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let  area: f64 = ((a as f64) * (h as f64)) / 2.0;\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return (0.5 * a as f64 * h as f64).round();\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.0`,\n right: `7.5`', /tmp/tmp_l35ftog.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2 as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let area = (a as f64 * h as f64) / 2f64;\n    area\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n   \
    \ assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return a as f64 * h as f64 / 2.0;\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \  if a <= 0 || h <= 0 {\n    return 0.0;\n  }\n  (a as f64 * h as f64) / 2.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (0.5 * a as f64 * h as f64) as f64\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let t_area = (a as f64) * (h as f64) / 2.0;\n    t_area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n \
    \   assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) / 2_f64\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyrk9or49.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    if a < 0 || h < 0 {\n        return 0.0;\n    }\n    return (a as f64 * h\
    \ as f64) / 2.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64 / 2.0).round() / 1.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.0`,\n right: `7.5`', /tmp/tmp3pjl40fl.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    a as f64 * h as f64 / 2 as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a = a as f64;\n    let h = h as f64;\n    a * h / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a = a as f64;\n    let h = h as f64;\n    (a * h) / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n\
    \    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    return (0.5 * a as f64 * h as f64) as f64;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    let a_f64 = a as f64;\n    let h_f64 = h as f64;\n    a_f64 * h_f64 / 2.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5,\
    \ 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10,\
    \ 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64 / 2.0).abs()\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64) * (h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    ((a as f64) * (h as f64)) as f64 / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2,\
    \ 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given length of a side and high return area for a triangle.\n/// >>>\
    \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n\
    \    (a as f64 * h as f64) / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n\
    \    assert_eq!(candidate(10, 8), 40.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
