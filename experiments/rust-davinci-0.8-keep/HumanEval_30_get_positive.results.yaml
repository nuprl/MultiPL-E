name: HumanEval_30_get_positive
language: rust
results:
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO return a list with only positive numbers\n    l.into_iter().filter(|&x|\
    \ x > 0).collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for n in l {\n        if\
    \ n > 0 {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut temp = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            temp.push(i);\n        }\n    }\n    temp\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzt61zqrp.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = Vec::new();\n    for num in l {\n     \
    \   if num > 0 {\n            positive.push(num);\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r = Vec::new();\n    for i in l {\n        if i >\
    \ 0 {\n            r.push(i);\n        }\n    }\n    r\n}\n\nfn main() {\n   \
    \ let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positives = Vec::new();\n    for num in l {\n    \
    \    if num > 0 {\n            positives.push(num);\n        }\n    }\n    positives\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos_list = Vec::new();\n    for n in l {\n       \
    \ if n > 0 {\n            pos_list.push(n);\n        }\n    }\n    pos_list\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n  unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpk8ue0m18.rs:7:3\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for el in l\
    \ {\n        if el > 0 {\n            result.push(el);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut output = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            output.push(i);\n        }\n    }\n    output\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9sco_too.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    return vec![];\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpe0udqu5g.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    for elem in l {\n        if\
    \ elem > 0 {\n            ret.push(elem);\n        }\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpui_viao6.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    Vec::new()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpauakvmba.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplu49k_h3.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|v| v > &0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // l.iter().filter(|&n| n > &0).cloned().collect()\n    l.into_iter().filter(|&n|\
    \ n > 0).collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // C++ code:\n    // vector<int> result;\n    // for (int\
    \ v : l) {\n    //     if (v > 0) {\n    //         result.push_back(v);\n   \
    \ //     }\n    // }\n    // return result;\n    l.into_iter().filter(|x| *x >\
    \ 0).collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpexb9kmuk.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphc0lrc65.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    for x in l {\n        if x\
    \ > 0 {\n            ret.push(x);\n        }\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    Vec::new()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmplygf89we.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3clt5qev.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for x in l {\n\
    \        if x > 0 {\n            result.push(x);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3w036grl.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4diqz029.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpk1txtk1m.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpj7vlew_1.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpy2njag9i.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_bwqozk8.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_l = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            new_l.push(i);\n        }\n    }\n    new_l\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let v: Vec<isize> = l.into_iter().filter(|x| x > &0).collect();\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive_list: Vec<isize> = Vec::new();\n    for i\
    \ in l {\n        if i > 0 {\n            positive_list.push(i);\n        }\n\
    \    }\n    positive_list\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for num in l {\n        if\
    \ num > 0 {\n            res.push(num);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for number in l {\n    \
    \    if number > 0 {\n            result.push(number);\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: implement your solution here\n    let mut r: Vec<isize>\
    \ = Vec::new();\n    for i in l.iter() {\n        if *i > 0 {\n            r.push(*i);\n\
    \        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_aw8rrnq.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut m = Vec::new();\n    for i in l {\n        if i >\
    \ 0 {\n            m.push(i);\n        }\n    }\n    m\n}\n\nfn main() {\n   \
    \ let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            vec.push(i);\n        }\n    }\n    vec\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpalklij12.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            ret.push(i);\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for el in l {\n        if el\
    \ > 0 {\n            res.push(el);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphel38ae8.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_list = Vec::new();\n    for n in l {\n       \
    \ if n > 0 {\n            new_list.push(n);\n        }\n    }\n    new_list\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8cul_5ys.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|v| *v > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut out = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            out.push(i);\n        }\n    }\n    out\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbxn386uy.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjvh1tevu.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    vec![]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpb39svnbf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpasyk0o18.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r = Vec::new();\n    for x in l {\n        if x >\
    \ 0 {\n            r.push(x);\n        }\n    }\n    r\n}\n\nfn main() {\n   \
    \ let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7rb1hl7g.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vector = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            vector.push(i);\n        }\n    }\n    vector\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpd3o6zmc6.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpg3vaayxq.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpy4h82l_j.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    //~^ ERROR this function's return type contains a borrowed\
    \ value\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main() {\n  \
    \  let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positives = Vec::new();\n    for i in &l {\n     \
    \   if *i > 0 {\n            positives.push(*i);\n        }\n    }\n    positives\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpexb1gmf5.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for e in l {\n        if\
    \ e > 0 {\n            result.push(e);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i >\
    \ 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmph7_egou4.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut k = vec![];\n    for i in l.iter() {\n        if *i\
    \ > 0 {\n            k.push(*i);\n        }\n    }\n    k\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos: Vec<isize> = Vec::new();\n    for n in l {\n\
    \        if n > 0 {\n            pos.push(n);\n        }\n    }\n    pos\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvuq3c23w.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            pos.push(i);\n        }\n    }\n    pos\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpl3ogmjhu.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // replace this\n    Vec::new()\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmppvyr7tlb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive_numbers = Vec::new();\n    for n in l {\n\
    \        if n > 0 {\n            positive_numbers.push(n);\n        }\n    }\n\
    \    positive_numbers\n}\n\nfn main() {\n    let candidate = get_positive;\n \
    \   assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0qbp1zru.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpukl_jopr.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: Implement your solution here\n    let mut result\
    \ = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphjkkgdeg.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let ret = l.iter().filter(|x| **x > 0).map(|x| *x).collect();\n\
    \    return ret;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpod6yl7yy.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for element\
    \ in l {\n        if element > 0 {\n            result.push(element);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxp9qqs85.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbaytd22x.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            ret.push(i);\n        }\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for item in\
    \ l {\n        if item > 0 {\n            result.push(item);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // implement this function\n    let mut list: Vec<isize> =\
    \ Vec::new();\n    for i in 0..l.len() {\n        if l[i] > 0 {\n            list.push(l[i]);\n\
    \        }\n    }\n    list\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8a9wahdu.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i >\
    \ 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // Code here!\n    l.into_iter().filter(|&x| x > 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // hint: call is_positive()\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjelzxvo6.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpnq1cwdc8.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_vec = Vec::new();\n    for num in l {\n      \
    \  if num > 0 {\n            new_vec.push(num);\n        }\n    }\n    new_vec\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpagkvgo7q.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n  l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu9fhu5lf.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcw_tidpx.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r: Vec<isize> = Vec::new();\n    for e in l {\n  \
    \      if e > 0 {\n            r.push(e);\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpc40nd4bs.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r: Vec<isize> = Vec::new();\n    for e in l {\n  \
    \      if e > 0 {\n            r.push(e);\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i >\
    \ 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: write code here\n    let mut result: Vec<isize> =\
    \ Vec::new();\n    for item in l {\n        if item > 0 {\n            result.push(item);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let result = l.into_iter().filter(|i| *i > 0).collect();\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i >\
    \ 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5xcw1ln8.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&n| n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for num in l {\n        if num\
    \ > 0 {\n            v.push(num);\n        }\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // Hint: You might consider using the .filter and .collect\
    \ methods.\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvetpikxp.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&e| e > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_l: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            new_l.push(i);\n        }\n    }\n    new_l\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.retain(|x| *x > 0);\n    l\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: implement!\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplvz0hi55.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_l = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            new_l.push(i);\n        }\n    }\n    new_l\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l1 = Vec::new();\n    for x in l {\n        if x >\
    \ 0 {\n            l1.push(x);\n        }\n    }\n    l1\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    Vec::new()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpzco2rc9j.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO: Implement this function.\n    l.into_iter().filter(|n|\
    \ n > &0).collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n   \
    \ assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive_numbers = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            positive_numbers.push(i);\n        }\n    }\n\
    \    positive_numbers\n}\n\nfn main() {\n    let candidate = get_positive;\n \
    \   assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n  let mut vec: Vec<isize> = Vec::new();\n  for e in l {\n    if\
    \ e > 0 {\n      vec.push(e);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1afx3zhn.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let v = l.iter().filter(|x| *x > &0).cloned().collect();\n\
    \    return v;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplnjm1qnc.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret_vec = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            ret_vec.push(i);\n        }\n    }\n    ret_vec\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphome2ip5.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgw6m3zme.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = Vec::new();\n    for num in l {\n     \
    \   if num > 0 {\n            positive.push(num);\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_fbjln88.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&i| i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos = Vec::new();\n    for elem in l {\n        if\
    \ elem > 0 {\n            pos.push(elem);\n        }\n    }\n    pos\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    for i in &l {\n        if *i\
    \ > 0 {\n            ret.push(*i);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp08k16uty.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r: Vec<isize> = Vec::new();\n    for i in l {\n  \
    \      if i > 0 {\n            r.push(i);\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppvj08f1q.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive_vec = Vec::new();\n    for i in &l {\n  \
    \      if *i > 0 {\n            positive_vec.push(*i);\n        }\n    }\n   \
    \ positive_vec\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    vec![]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpmfb3nf0m.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7g__7bah.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l2 = Vec::new();\n    for x in l {\n        if x >\
    \ 0 {\n            l2.push(x);\n        }\n    }\n    l2\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmph3pmqi_c.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
