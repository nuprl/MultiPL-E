name: HumanEval_87_get_row
language: rust
prompt: "/// You are given a 2 dimensional data, as a nested lists,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the list,\n\
  /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// get_row([\n/// [1,2,3,4,5,6],\n/// [1,2,3,4,1,6],\n\
  /// [1,2,3,4,5,1]\n/// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// get_row([],\
  \ 1) == []\n/// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>,\
  \ x: isize) -> Vec<(isize, isize)> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1,\
  \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0,\
  \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2,\
  \ 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4,\
  \ 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1),\
  \ (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3,\
  \ 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5,\
  \ 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1),\
  \ vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5,\
  \ 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1),\
  \ Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize,\
  \ isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]],\
  \ 3), vec![(2, 2)]);\n}\n"
completions: ["    let mut res: Vec<(isize, isize)> = Vec::new();\n    for (i, row)\
    \ in lst.iter().enumerate() {\n        for (j, cell) in row.iter().enumerate()\
    \ {\n            if *cell == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i,\
    \ row) in lst.iter().enumerate() {\n        let mut tmp: Vec<(isize, isize)> =\
    \ Vec::new();\n        for (j, item) in row.iter().enumerate() {\n           \
    \ if *item == x {\n                tmp.push((i as isize, j as isize));\n     \
    \       }\n        }\n        tmp.sort_by(|a, b| {\n            if a.1 > b.1 {\n\
    \                std::cmp::Ordering::Less\n            } else {\n            \
    \    std::cmp::Ordering::Greater\n            }\n        });\n        for t in\
    \ tmp {\n            result.push(t);\n        }\n    }\n    result", "    let\
    \ mut result: Vec<(isize, isize)> = vec![];\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x, _) in row.iter().enumerate() {\n            result.push((y\
    \ as isize, x as isize));\n        }\n    }\n    result", "    let mut ret = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, v) in row.iter().enumerate()\
    \ {\n            if v == &x {\n                ret.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    ret.sort_by(|a, b| {\n        let (a_row,\
    \ a_col) = *a;\n        let (b_row, b_col) = *b;\n        a_row.cmp(&b_row).then(b_col.cmp(&a_col))\n\
    \    });\n    ret", "    // fizz_buzz(n: isize) -> Vec<String> {\n    //     vec![\n\
    \    //         (0..n).map(|x| if x % 15 == 0 { \"FizzBuzz\".to_string() } else\
    \ if x % 3 == 0 { \"Fizz\".to_string() } else if x % 5 == 0 { \"Buzz\".to_string()\
    \ } else { x.to_string() }).collect()\n    //     ]\n    // }\n    // // let mut\
    \ v = Vec::new();\n    // (0..n).map(|x| if x % 15 == 0 { \"FizzBuzz\".to_string()\
    \ } else if x % 3 == 0 { \"Fizz\".to_string() } else if x % 5 == 0 { \"Buzz\"\
    .to_string() } else { x.to_string() }).collect()\n    // (0..n).map(|x| if x %\
    \ 15 == 0 { \"FizzBuzz\".to_string() } else if x % 3 == 0 { \"Fizz\".to_string()\
    \ } else if x % 5 == 0 { \"Buzz\".to_string() } else { x.to_string() }).collect()\n\
    \    // .map(|x| if x % 15 == 0 { \"FizzBuzz\".to_string() } else if x % 3 ==\
    \ 0 { \"Fizz\".to_string() } else if x % 5 == 0 { \"Buzz\".to_string() } else\
    \ { x.to_string() }).collect()\n    // lst.iter().enumerate().map(|(index, x)|\
    \ if x % 15 == 0 { \"FizzBuzz\".to_string() } else if x % 3 == 0 { \"Fizz\".to_string()\
    \ } else if x % 5 == 0 { \"Buzz\".to_string() } else { x.to_string() }).collect()\n\
    \    // let mut v = Vec::new();\n    // for i in 0..n {\n    //     if i % 15\
    \ == 0 {\n    //         v.push(\"FizzBuzz\".to_string());\n    //     } else\
    \ if i % 3 == 0 {\n    //         v.push(\"Fizz\".to_string());\n    //     }\
    \ else if i %", "    let mut lst: Vec<(isize, isize)> = Vec::new();\n    for (i,\
    \ row) in lst.iter().enumerate() {\n        for (j, val) in row.iter().enumerate()\
    \ {\n            if val == &x {\n                lst.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    let mut lst = lst;\n    lst.sort_by(|a,\
    \ b| {\n        if a.0 < b.0 {\n            std::cmp::Ordering::Less\n       \
    \ } else if a.0 > b.0 {\n            std::cmp::Ordering::Greater\n        } else\
    \ {\n            b.1.cmp(&a.1)\n        }\n    });\n    lst", "    let mut result:\
    \ Vec<(isize, isize)> = vec![];\n    for (idx, val) in lst.iter().enumerate()\
    \ {\n        for (idx2, val2) in val.iter().enumerate() {\n            if val2\
    \ == &x {\n                result.push((idx as isize, idx2 as isize));\n     \
    \       }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 != b.0\
    \ {\n            a.0.cmp(&b.0)\n        } else {\n            b.1.cmp(&a.1)\n\
    \        }\n    });\n    result", "    lst.iter()\n        .enumerate()\n    \
    \    .map(|(row, vec)| vec.iter().enumerate().filter(|(_, v)| **v == x))\n   \
    \     .flatten()\n        .map(|(col, _)| (row as isize, col as isize))\n    \
    \    .collect()", "    let mut result: Vec<(isize, isize)> = Vec::new();\n   \
    \ for row in 0..lst.len() {\n        for column in 0..lst[row].len() {\n     \
    \       if lst[row][column] == x {\n                result.push((row as isize,\
    \ column as isize));\n            }\n        }\n    }\n    result.sort_by(|a,\
    \ b| {\n        if a.0 == b.0 {\n            a.1.cmp(&b.1)\n        } else {\n\
    \            a.0.cmp(&b.0)\n        }\n    });\n    result.reverse();\n    result",
  "    let mut res: Vec<(isize, isize)> = vec![];\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, val) in row.iter().enumerate() {\n            if *val ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    let mut sorter = |(y1, x1): &(isize, isize), (y2, x2): &(isize,\
    \ isize)| {\n        if y1 == y2 {\n            return x2.cmp(x1);\n        }\n\
    \        y1.cmp(y2)\n    };\n    res.sort_by(sorter);\n    res", "    let mut\
    \ res: Vec<(isize, isize)> = vec![];\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, col) in row.iter().enumerate() {\n            if *col ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    let mut res = res;\n    res.sort_by(|a, b| {\n        if\
    \ a.0 < b.0 {\n            Ordering::Less\n        } else if a.0 > b.0 {\n   \
    \         Ordering::Greater\n        } else {\n            b.1.cmp(&a.1)\n   \
    \     }\n    });\n    res", "    let mut lst: Vec<Vec<isize>> = lst;\n    lst.iter_mut().for_each(|r|\
    \ r.reverse());\n    lst.sort_by(|a, b| b.len().cmp(&a.len()));\n    lst.iter().enumerate().flat_map(|(i,\
    \ r)| {\n        r.iter().enumerate().filter_map(move |(j, &v)| {\n          \
    \  if v == x {\n                Some((i as isize, j as isize))\n            }\
    \ else {\n                None\n            }\n        })\n    }).collect()",
  "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x1, el) in row.iter().enumerate() {\n            if el == &x\
    \ {\n                res.push((y as isize, x1 as isize));\n            }\n   \
    \     }\n    }\n    res.sort_by(|(row1, col1), (row2, col2)| {\n        if row1\
    \ != row2 {\n            row1.cmp(row2)\n        } else {\n            col2.cmp(col1)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (y, row) in lst.iter().enumerate() {\n        for (x, &val) in row.iter().enumerate()\
    \ {\n            if val == x {\n                res.push((y as isize, x as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        let (a_y,\
    \ a_x) = a;\n        let (b_y, b_x) = b;\n        a_y.cmp(b_y).then(b_x.cmp(a_x))\n\
    \    });\n    res", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|(_, &v)| v == x)\n                .map(move |(j, _)| (i as isize,\
    \ j as isize))\n        })\n        .sorted_by(|&(r1, c1), &(r2, c2)| {\n    \
    \        (r1, -c1).cmp(&(r2, -c2))\n        })\n        .collect()", "    let\
    \ mut res: Vec<(isize, isize)> = Vec::new();\n    for (row, line) in lst.iter().enumerate()\
    \ {\n        for (col, elem) in line.iter().enumerate() {\n            if *elem\
    \ == x {\n                res.push((row as isize, col as isize));\n          \
    \  }\n        }\n    }\n    res.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n\
    \    });\n    res", "    let mut res: Vec<(isize, isize)> = vec![];\n    for (i,\
    \ row) in lst.iter().enumerate() {\n        for (j, e) in row.iter().enumerate()\
    \ {\n            if *e == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        let fst =\
    \ a.0.cmp(&b.0);\n        match fst {\n            Ordering::Equal => b.1.cmp(&a.1),\n\
    \            Ordering::Less => fst,\n            Ordering::Greater => fst,\n \
    \       }\n    });\n    res", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|(_, elem)| **elem == x)\n                .map(move |(j, _)| (i as\
    \ isize, j as isize))\n        })\n        .collect()", "    let mut vec: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  let mut y = row.len() as isize;\n        for j in row.iter() {\n          \
    \  if *j == x {\n                vec.push((i as isize, y - 1));\n            }\n\
    \            y -= 1;\n        }\n    }\n    vec.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    vec", "    lst.iter()\n        .enumerate()\n        .flat_map(|(row, item)|\
    \ {\n            item.iter()\n                .enumerate()\n                .filter(|&(_,\
    \ x_)| x_ == &x)\n                .map(move |(col, _)| (row as isize, col as isize))\n\
    \        })\n        .sorted_by(|a, b| {\n            if a.0 == b.0 {\n      \
    \          a.1.cmp(&b.1).reverse()\n            } else {\n                a.0.cmp(&b.0)\n\
    \            }\n        })\n        .collect()", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for y in 0..lst.len() {\n        let row = &lst[y];\n\
    \        for z in 0..row.len() {\n            if row[z] == x {\n             \
    \   res.push((y as isize, z as isize));\n            }\n        }\n    }\n   \
    \ res.sort_by(|a, b| match a.0.cmp(&b.0) {\n        Ordering::Equal => b.1.cmp(&a.1),\n\
    \        Ordering::Less => Ordering::Less,\n        Ordering::Greater => Ordering::Greater,\n\
    \    });\n    res", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|(_, &v)| v == x)\n                .map(move |(j, _)| (i as isize,\
    \ j as isize))\n        })\n        .sorted_by(|&(r1, c1), &(r2, c2)| (r1, -c1).cmp(&(r2,\
    \ -c2)))\n        .collect()", "    if lst.is_empty() {\n        return vec![];\n\
    \    }\n    let mut res: Vec<(isize, isize)> = vec![];\n    for (i, y) in lst.iter().enumerate()\
    \ {\n        for (j, z) in y.iter().enumerate() {\n            if *z == x {\n\
    \                res.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n            return\
    \ b.1.cmp(&a.1);\n        }\n        a.0.cmp(&b.0)\n    });\n    res", "    let\
    \ mut coordinates: Vec<(isize, isize)> = vec![];\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x, &value) in row.iter().enumerate() {\n            if value\
    \ == x {\n                coordinates.push((y as isize, x as isize));\n      \
    \      }\n        }\n    }\n    coordinates.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    coordinates", "    let mut res: Vec<(isize, isize)> =\
    \ Vec::new();\n    let mut i = 0;\n    for row in lst {\n        let mut j = 0;\n\
    \        for col in row {\n            if col == x {\n                res.push((i,\
    \ j));\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n            a.1.cmp(&b.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    res.reverse();\n\
    \    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in\
    \ 0..lst.len() {\n        let row = &lst[i];\n        for j in 0..row.len() {\n\
    \            if row[j] == x {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|(r1, c1), (r2, c2)| r1.cmp(r2).then(c2.cmp(c1)));\n\
    \    result", "    lst.iter()\n        .enumerate()\n        .flat_map(|(y, row)|\
    \ {\n            row.iter()\n                .enumerate()\n                .filter(|(_,\
    \ &element)| element == x)\n                .map(move |(x, _)| (y as isize, x\
    \ as isize))\n        })\n        .sorted_by(|(row1, col1), (row2, col2)| {\n\
    \            row1.cmp(row2).then_with(|| col2.cmp(col1))\n        })\n       \
    \ .collect()", "    // get row and column numbers of the x\n    let mut indices\
    \ = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j,\
    \ &v) in row.iter().enumerate() {\n            if v == x {\n                indices.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    // sort by rows\n\
    \    indices.sort_by(|a, b| a.0.cmp(&b.0));\n    // sort by columns\n    indices.sort_by(|a,\
    \ b| a.1.cmp(&b.1).reverse());\n    indices", "    let mut xs: Vec<(isize, isize)>\
    \ = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        let mut\
    \ j = row.len() as isize;\n        while let Some(e) = row.get(j as usize) {\n\
    \            if e == &x {\n                xs.push((i as isize, j));\n       \
    \     }\n            j -= 1;\n        }\n    }\n    xs.sort_by(|(x1, y1), (x2,\
    \ y2)| x1.cmp(x2).then(y2.cmp(y1)));\n    xs", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut rows = 0;\n    for row in lst {\n       \
    \ let mut cols = 0;\n        for col in row {\n            if col == x {\n   \
    \             result.push((rows, cols));\n            }\n            cols += 1;\n\
    \        }\n        rows += 1;\n    }\n    result.sort_by(|a, b| {\n        (a.0,\
    \ -a.1).cmp(&(b.0, -b.1))\n    });\n    result", "    lst.iter()\n        .enumerate()\n\
    \        .flat_map(|(i, row)| {\n            row.iter()\n                .enumerate()\n\
    \                .filter(|(_, &y)| y == x)\n                .map(move |(j, _)|\
    \ (i as isize, j as isize))\n        })\n        .sorted_by(|&(i, j), &(i2, j2)|\
    \ {\n            if i == i2 {\n                Ord::cmp(&j2, &j)\n           \
    \ } else {\n                Ord::cmp(&i, &i2)\n            }\n        })\n   \
    \     .collect()", "    lst.iter()\n        .enumerate()\n        .flat_map(|(row,\
    \ v)| {\n            v.iter()\n                .enumerate()\n                .filter(|(_,\
    \ elem)| **elem == x)\n                .map(move |(col, _)| (row as isize, col\
    \ as isize))\n        })\n        .sorted_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)))\n\
    \        .collect()", "    lst.iter()\n        .enumerate()\n        .map(|(row,\
    \ v)| {\n            v.iter()\n                .enumerate()\n                .filter(|(_,\
    \ y)| **y == x)\n                .map(|(col, _)| (row as isize, col as isize))\n\
    \                .collect::<Vec<(isize, isize)>>()\n        })\n        .flatten()\n\
    \        .collect::<Vec<(isize, isize)>>()", "    let mut results = Vec::new();\n\
    \    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n           \
    \ if lst[i][j] == x {\n                results.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    results.sort_by(|a, b| {\n        if a.0\
    \ == b.0 {\n            a.1.cmp(&b.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    results", "    let mut out = vec![];\n    for (y, xs)\
    \ in lst.iter().enumerate() {\n        for (x_i, x_) in xs.iter().enumerate()\
    \ {\n            if *x_ == x {\n                out.push((y as isize, x_i as isize));\n\
    \            }\n        }\n    }\n    out.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    out", "    let (mut x_pos, mut y_pos) = Vec::new();\n    for (i, row) in\
    \ lst.iter().enumerate() {\n        for (j, cell) in row.iter().enumerate() {\n\
    \            if cell == &x {\n                x_pos.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    x_pos.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            a.1.cmp(&b.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    for i in 0..x_pos.len() {\n        if x_pos[i].0 == x_pos[i\
    \ - 1].0 {\n            x_pos.swap(i, i - 1);\n        }\n    }\n    for i in\
    \ 0..x_pos.len() {\n        if x_pos[i].0 == x_pos[i - 1].0 {\n            x_pos.swap(i,\
    \ i - 1);\n        }\n    }\n    for i in 0..x_pos.len() {\n        if x_pos[i].0\
    \ == x_pos[i - 1].0 {\n            x_pos.swap(i, i - 1);\n        }\n    }\n \
    \   x_pos", "    let mut res: Vec<(isize, isize)> = vec![];\n    if lst.len()\
    \ == 0 {\n        return res;\n    }\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, el) in row.iter().enumerate() {\n            if *el == x\
    \ {\n                res.push((i as isize, j as isize));\n            }\n    \
    \    }\n    }\n    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n           \
    \ b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n\
    \    res", "    let mut locations: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, &val) in row.iter().enumerate()\
    \ {\n            if val == x {\n                locations.push((i as isize, j\
    \ as isize));\n            }\n        }\n    }\n    locations.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    locations", "    let mut row_vec: Vec<(isize, isize)> = Vec::new();\n   \
    \ if lst.len() == 0 {\n        return row_vec;\n    }\n    for (row_index, row)\
    \ in lst.iter().enumerate() {\n        if row.len() == 0 {\n            continue;\n\
    \        }\n        for (col_index, col) in row.iter().enumerate() {\n       \
    \     if *col == x {\n                row_vec.push((row_index as isize, col_index\
    \ as isize));\n            }\n        }\n    }\n    // sort by row in ascending\
    \ order\n    row_vec.sort_by(|a, b| a.0.cmp(&b.0));\n    // sort by column in\
    \ descending order\n    row_vec.sort_by(|a, b| b.1.cmp(&a.1));\n    row_vec",
  "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for i in 0..lst.len() {\n\
    \        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n       \
    \         res.push((i as isize, j as isize));\n            }\n        }\n    }\n\
    \    res.sort_by(|a, b| {\n        if a.0 != b.0 {\n            a.0.cmp(&b.0)\n\
    \        } else {\n            b.1.cmp(&a.1)\n        }\n    });\n    res", " \
    \   let mut result: Vec<(isize, isize)> = vec![];\n    for (idx, row) in lst.iter().enumerate()\
    \ {\n        for (i, v) in row.iter().enumerate() {\n            if v == &x {\n\
    \                result.push((idx as isize, i as isize));\n            }\n   \
    \     }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n       \
    \     b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n\
    \    });\n    result", "    let mut res: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut i = 0;\n    for r in lst {\n        let mut j = r.len() as isize -\
    \ 1;\n        for c in r {\n            if c == x {\n                res.push((i,\
    \ j));\n            }\n            j -= 1;\n        }\n        i += 1;\n    }\n\
    \    res.sort_by(|a, b| (a.0, b.1).cmp(&(b.0, a.1)));\n    res", "    let mut\
    \ coords: Vec<(isize, isize)> = Vec::new();\n    let mut rows = 0;\n    for row\
    \ in lst {\n        let mut cols = 0;\n        for col in row {\n            if\
    \ x == col {\n                coords.push((rows, cols));\n            }\n    \
    \        cols += 1;\n        }\n        rows += 1;\n    }\n    coords.sort_by(|a,\
    \ b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n\
    \            a.0.cmp(&b.0)\n        }\n    });\n    coords", "    let mut result:\
    \ Vec<(isize, isize)> = vec![];\n    for (y, sub_lst) in lst.iter().enumerate()\
    \ {\n        for (x1, &x2) in sub_lst.iter().enumerate() {\n            if x2\
    \ == x {\n                result.push((y as isize, x1 as isize));\n          \
    \  }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n\
    \            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n    \
    \    }\n    });\n    result", "    let mut ret: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate()\
    \ {\n            if *col == x {\n                ret.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    ret.sort_by(|&(i, _), &(j, _)| i.cmp(&j));\n\
    \    ret.sort_by(|&(_, i), &(_, j)| j.cmp(&i));\n    ret", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, elem) in row.iter().enumerate() {\n            if *elem == x {\n  \
    \              res.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a, b| a.1.cmp(&b.1));\n    res.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    res", "    let mut res: Vec<(isize, isize)> = vec![];\n    let mut i = 0;\n\
    \    for row in lst {\n        let mut j = 0;\n        for elem in row {\n   \
    \         if elem == x {\n                res.push((i, j));\n            }\n \
    \           j += 1;\n        }\n        i += 1;\n    }\n    res.sort_by(|a, b|\
    \ {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n  \
    \          a.0.cmp(&b.0)\n        }\n    });\n    res", "    let mut r: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, col) in row.iter().enumerate() {\n            if *col == x {\n    \
    \            r.push((i as isize, j as isize));\n            }\n        }\n   \
    \ }\n    r.sort_by(|a, b| {\n        if a.0 == b.0 {\n            a.1.cmp(&b.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    r", "  \
    \  let mut res: Vec<(isize, isize)> = vec![];\n    for i in 0..lst.len() {\n \
    \       for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n        \
    \        res.push((i as isize, j as isize));\n            }\n        }\n    }\n\
    \    res.sort_by(|a, b| {\n        if a.0 != b.0 {\n            return a.0.cmp(&b.0);\n\
    \        }\n        b.1.cmp(&a.1)\n    });\n    res", "    let mut res: Vec<(isize,\
    \ isize)> = vec![];\n    let rows = lst.len();\n    let cols = lst[0].len();\n\
    \    for i in 0..rows {\n        for j in 0..cols {\n            if lst[i][j]\
    \ == x {\n                res.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0));\n    for i in 0..res.len()\
    \ {\n        res[i].0 = i as isize;\n    }\n    res.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in\
    \ 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j]\
    \ == x {\n                result.push((i as isize, j as isize));\n           \
    \ }\n        }\n    }\n    result.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n\
    \    });\n    result", "    let mut lst: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut i = 0;\n    for r in lst {\n        let mut j = 0;\n        for c\
    \ in r {\n            if c == x {\n                lst.push((i, j));\n       \
    \     }\n            j += 1;\n        }\n        i += 1;\n    }\n    lst.sort_by(|&(y1,\
    \ x1), &(y2, x2)| {\n        match y1.cmp(&y2) {\n            Ordering::Equal\
    \ => {\n                match x2.cmp(&x1) {\n                    Ordering::Equal\
    \ => Ordering::Equal,\n                    Ordering::Greater => Ordering::Greater,\n\
    \                    Ordering::Less => Ordering::Less,\n                }\n  \
    \          }\n            Ordering::Greater => Ordering::Greater,\n          \
    \  Ordering::Less => Ordering::Less,\n        }\n    });\n    lst", "    let mut\
    \ lst2: Vec<(isize, isize)> = Vec::new();\n    let mut count = 0;\n    for item\
    \ in lst {\n        let mut count2 = 0;\n        for item2 in item {\n       \
    \     if item2 == x {\n                lst2.push((count, count2));\n         \
    \   }\n            count2 += 1;\n        }\n        count += 1;\n    }\n    lst2.sort_by(|a,\
    \ b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n    });\n    lst2", "    let\
    \ mut coordinates: Vec<(isize, isize)> = Vec::new();\n    if lst.len() == 0 {\n\
    \        return coordinates;\n    }\n    let mut i = 0;\n    let mut j = 0;\n\
    \    while i < lst.len() {\n        while j < lst[i].len() {\n            if lst[i][j]\
    \ == x {\n                coordinates.push((i as isize, j as isize));\n      \
    \      }\n            j += 1;\n        }\n        j = 0;\n        i += 1;\n  \
    \  }\n    coordinates.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    coordinates",
  "    // TODO\n    let mut lst = lst;\n    lst.iter_mut().enumerate().for_each(|(idx,\
    \ v)| {\n        let vec = v.iter()\n        .enumerate()\n        .filter(|&(_,\
    \ x1)| x1 == &x)\n        .map(|(idx1, _)| (idx as isize, idx1 as isize))\n  \
    \      .collect::<Vec<(isize, isize)>>();\n        *v = vec;\n    });\n    lst.sort_by(|a,\
    \ b| a[0].1.cmp(&b[0].1));\n    lst.into_iter().flat_map(|v| v).collect()", " \
    \   let mut res: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        let mut row_i = i as isize;\n        let mut column_i = 0;\n    \
    \    for (j, _) in row.iter().enumerate() {\n            if row[j] == x {\n  \
    \              res.push((row_i, j as isize - column_i));\n                column_i\
    \ += 1;\n            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if\
    \ a.0 < b.0 {\n            Ordering::Less\n        } else if a.0 > b.0 {\n   \
    \         Ordering::Greater\n        } else {\n            if a.1 > b.1 {\n  \
    \              Ordering::Less\n            } else if a.1 < b.1 {\n           \
    \     Ordering::Greater\n            } else {\n                Ordering::Equal\n\
    \            }\n        }\n    });\n    res", "    if lst.is_empty() {\n     \
    \   return vec![];\n    }\n    let mut x_positions: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                x_positions.push((i as isize,\
    \ j as isize));\n            }\n        }\n    }\n    x_positions.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    let mut x_positions_sorted: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut last_row: Option<isize> = None;\n    for\
    \ (i, j) in x_positions {\n        if last_row.is_none() || i > last_row.unwrap()\
    \ {\n            x_positions_sorted.extend(x_positions_sorted.drain(..).rev());\n\
    \            last_row = Some(i);\n        }\n        x_positions_sorted.push((i,\
    \ j));\n    }\n    x_positions_sorted.extend(x_positions_sorted.drain(..).rev());\n\
    \    x_positions_sorted", "    lst.iter()\n        .enumerate()\n        .filter_map(|(row,\
    \ l)| {\n            l.iter()\n                .enumerate()\n                .filter_map(|(col,\
    \ &el)| if el == x { Some((row as isize, col as isize)) } else { None })\n   \
    \     })\n        .collect::<Vec<(isize, isize)>>()", "    let mut out = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &x1) in row.iter().enumerate()\
    \ {\n            if x1 == x {\n                out.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    out.sort_by(|a, b| a.1.cmp(&b.1).reverse().then(a.0.cmp(&b.0)));\n\
    \    out", "    let mut result: Vec<(isize, isize)> = vec![];\n    let mut counter:\
    \ isize = 0;\n    for i in lst {\n        let mut col_counter: isize = 0;\n  \
    \      for j in i {\n            if j == x {\n                result.push((counter,\
    \ col_counter));\n            }\n            col_counter += 1;\n        }\n  \
    \      counter += 1;\n    }\n    result.sort_by(|a, b| {\n        let (ref y1,\
    \ ref x1) = *a;\n        let (ref y2, ref x2) = *b;\n        y1.cmp(y2).then(x2.cmp(x1))\n\
    \    });\n    result", "    let mut result: Vec<(isize, isize)> = vec![];\n  \
    \  for (i, item) in lst.iter().enumerate() {\n        for (j, elem) in item.iter().enumerate()\
    \ {\n            if *elem == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| (a.0, -a.1).cmp(&(b.0,\
    \ -b.1)));\n    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (index, row) in lst.iter().enumerate() {\n        for (item_index, item)\
    \ in row.iter().enumerate() {\n            if *item == x {\n                result.push((index\
    \ as isize, item_index as isize));\n            }\n        }\n    }\n    result.sort_by(|a,\
    \ b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n\
    \            a.0.cmp(&b.0)\n        }\n    });\n    result", "    let mut coords:\
    \ Vec<(isize, isize)> = vec![];\n    let mut r = 0;\n    for row in lst {\n  \
    \      let mut c = 0;\n        for elem in row {\n            if elem == x {\n\
    \                coords.push((r, c));\n            }\n            c += 1;\n  \
    \      }\n        r += 1;\n    }\n    // sort the coordinates\n    coords.sort_by(|a,\
    \ b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    coords", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, item) in row.iter().enumerate() {\n            if *item == x {\n  \
    \              res.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a, b| (a.0, b.1).cmp(&(b.0, a.1)));\n    res", "    let\
    \ mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, item) in row.iter().enumerate() {\n            if item ==\
    \ &x {\n                result.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| a.partial_cmp(b).unwrap());\n   \
    \ result", "    lst.iter()\n        .enumerate()\n        .flat_map(|(y, row)|\
    \ {\n            row.iter()\n                .enumerate()\n                .filter(|(_,\
    \ &num)| num == x)\n                .map(move |(x, _)| (y as isize, x as isize))\n\
    \        })\n        .sorted_by(|a, b| {\n            let y = a.0.cmp(&b.0);\n\
    \            if y == std::cmp::Ordering::Equal {\n                b.1.cmp(&a.1)\n\
    \            } else {\n                y\n            }\n        })\n        .collect()",
  "    let mut result: Vec<(isize, isize)> = vec![];\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, elem) in row.iter().enumerate() {\n            if *elem ==\
    \ x {\n                result.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| {\n        match a.0.cmp(&b.0) {\n\
    \            Ordering::Equal => b.1.cmp(&a.1),\n            Ordering::Less =>\
    \ Ordering::Less,\n            Ordering::Greater => Ordering::Greater,\n     \
    \   }\n    });\n    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (row, a_row) in lst.iter().enumerate() {\n        for (col, a_col) in\
    \ a_row.iter().enumerate() {\n            if x == *a_col {\n                result.push((row\
    \ as isize, col as isize));\n            }\n        }\n    }\n    result.sort_by(|a,\
    \ b| (a.0, -a.1).cmp(&(b.0, -b.1)));\n    result", "    lst.iter()\n        .enumerate()\n\
    \        .flat_map(|(i, r)| {\n            r.iter()\n                .enumerate()\n\
    \                .filter(|&(_, &e)| e == x)\n                .map(|(j, _)| (i\
    \ as isize, j as isize))\n        })\n        .collect()", "    let mut coords:\
    \ Vec<(isize, isize)> = vec![];\n    for (i, row) in lst.iter().enumerate() {\n\
    \        for (j, col) in row.iter().enumerate() {\n            if *col == x {\n\
    \                coords.push((i as isize, j as isize));\n            }\n     \
    \   }\n    }\n    coords.sort_by(|a, b| {\n        if a.0 != b.0 {\n         \
    \   return a.0.cmp(&b.0);\n        }\n        b.1.cmp(&a.1)\n    });\n    coords",
  "    let mut s: Vec<(isize, isize)> = Vec::new();\n    for i in 0..lst.len() {\n\
    \        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n       \
    \         s.push((i as isize, j as isize));\n            }\n        }\n    }\n\
    \    s.sort_by(|&(_, a), &(_, b)| b.cmp(&a));\n    s.sort_by(|&(a, _), &(b, _)|\
    \ a.cmp(&b));\n    s", "    let mut res: Vec<(isize, isize)> = vec![];\n    let\
    \ mut i = 0;\n    for row in lst {\n        let mut j = 0;\n        for col in\
    \ row {\n            if col == x {\n                res.push((i, j));\n      \
    \      }\n            j += 1;\n        }\n        i += 1;\n    }\n    let mut\
    \ cmp = |a: &(isize, isize), b: &(isize, isize)| -> std::cmp::Ordering {\n   \
    \     if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n         \
    \   a.0.cmp(&b.0)\n        }\n    };\n    res.sort_by(cmp);\n    res", "    let\
    \ mut res: Vec<(isize, isize)> = vec![];\n    let mut y = 0;\n    for row in lst\
    \ {\n        let mut x = 0;\n        for num in row {\n            if num == x\
    \ {\n                res.push((y, x));\n            }\n            x += 1;\n \
    \       }\n        y += 1;\n    }\n    res.sort_by(|a, b| (a.0, -a.1).cmp(&(b.0,\
    \ -b.1)));\n    res", "    let mut result: Vec<(isize, isize)> = vec![];\n   \
    \ let mut row = 0;\n    for i in lst {\n        let mut col = 0;\n        for\
    \ j in i {\n            if j == x {\n                result.push((row, col));\n\
    \            }\n            col += 1;\n        }\n        row += 1;\n    }\n \
    \   result.sort_by(|a, b| {\n        if a.0 == b.0 {\n            a.1.cmp(&b.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    result.reverse();\n\
    \    result", "    let mut res: Vec<(isize, isize)> = vec![];\n    for (i, row)\
    \ in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, el) in row.iter().enumerate()\
    \ {\n            if *el == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| match (a.0, b.0) {\n\
    \        (x, y) if x == y => b.1.cmp(&a.1),\n        (x, y) => x.cmp(&y),\n  \
    \  });\n    res", "    // sort by row and column\n    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (row, sub_list) in lst.iter().enumerate() {\n\
    \        for (col, num) in sub_list.iter().enumerate() {\n            if *num\
    \ == x {\n                res.push((row as isize, col as isize));\n          \
    \  }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n  \
    \          b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n      \
    \  }\n    });\n    res", "    lst.iter()\n        .enumerate()\n        .flat_map(|(y,\
    \ v)| {\n            v.iter()\n                .enumerate()\n                .filter(|&(_,\
    \ &i)| i == x)\n                .map(move |(x, _)| (y as isize, x as isize))\n\
    \        })\n        .sorted_by(|&(y, x), &(y1, x1)| {\n            let ycmp =\
    \ y.cmp(&y1);\n            if ycmp == Ordering::Equal {\n                return\
    \ x1.cmp(&x);\n            }\n            ycmp\n        })\n        .collect()",
  "    lst.iter()\n        .enumerate()\n        .map(|(i, arr)| arr.iter().enumerate().filter(|&(_,\
    \ &v)| v == x))\n        .flat_map(|v| v)\n        .map(|(j, _)| (i as isize,\
    \ j as isize))\n        .collect()", "    let mut result: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_index = 0;\n    for row in lst {\n        let\
    \ mut col_index = 0;\n        for col in row {\n            if col == x {\n  \
    \              result.push((row_index, col_index));\n            }\n         \
    \   col_index += 1;\n        }\n        row_index += 1;\n    }\n    result.sort_by(|&a,\
    \ &b| {\n        let &(row_a, col_a) = a;\n        let &(row_b, col_b) = b;\n\
    \        if row_a == row_b {\n            col_b.cmp(&col_a)\n        } else {\n\
    \            row_a.cmp(&row_b)\n        }\n    });\n    result", "    let mut\
    \ result: Vec<(isize, isize)> = vec![];\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, v) in row.iter().enumerate() {\n            if v == &x {\n\
    \                result.push((i as isize, j as isize));\n            }\n     \
    \   }\n    }\n    result.sort_by(|a, b| if a.0 == b.0 { b.1.cmp(&a.1) } else {\
    \ a.0.cmp(&b.0) });\n    result", "    let mut row_indices = lst\n        .iter()\n\
    \        .enumerate()\n        .map(|(i, row)| {\n            row.iter()\n   \
    \             .enumerate()\n                .filter(|(_, &value)| value == x)\n\
    \                .map(|(j, _)| (i as isize, j as isize))\n                .collect::<Vec<(isize,\
    \ isize)>>()\n        })\n        .collect::<Vec<Vec<(isize, isize)>>>();\n  \
    \  row_indices.retain(|v| !v.is_empty());\n    row_indices.sort_by(|x, y| {\n\
    \        if x[0].0 < y[0].0 {\n            Ordering::Less\n        } else if x[0].0\
    \ > y[0].0 {\n            Ordering::Greater\n        } else {\n            if\
    \ x[0].1 > y[0].1 {\n                Ordering::Less\n            } else if x[0].1\
    \ < y[0].1 {\n                Ordering::Greater\n            } else {\n      \
    \          Ordering::Equal\n            }\n        }\n    });\n    row_indices.iter().flat_map(|v|\
    \ v.iter()).cloned().collect()", "    // TODO\n    let mut ret = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &el) in row.iter().enumerate()\
    \ {\n            if el == x {\n                ret.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    ret.sort_by(|a, b| {\n        let (row1,\
    \ col1) = *a;\n        let (row2, col2) = *b;\n        if row1 == row2 {\n   \
    \         col2.cmp(&col1)\n        } else {\n            row1.cmp(&row2)\n   \
    \     }\n    });\n    ret", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n           \
    \ if lst[i][j] == x {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0\
    \ == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    result", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    if lst.len() == 0 {\n        return res;\n    }\n    let mut row = 0;\n \
    \   for i in lst {\n        let mut col = 0;\n        for j in i {\n         \
    \   if j == x {\n                res.push((row, col));\n            }\n      \
    \      col += 1;\n        }\n        row += 1;\n    }\n    return res;", "   \
    \ let mut ret = vec![];\n    for (ri, row) in lst.iter().enumerate() {\n     \
    \   for (ci, &item) in row.iter().enumerate() {\n            if item == x {\n\
    \                ret.push((ri as isize, ci as isize));\n            }\n      \
    \  }\n    }\n    ret.sort_by(|&(_, a), &(_, b)| b.cmp(&a));\n    ret.sort_by(|&(a,\
    \ _), &(b, _)| a.cmp(&b));\n    ret", "    let mut rtn: Vec<(isize, isize)> =\
    \ vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j, num)\
    \ in row.iter().enumerate() {\n            if *num == x {\n                rtn.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    // sort by column\n\
    \    rtn.sort_by(|a, b| (a.1).cmp(&b.1));\n    // sort by row\n    rtn.sort_by(|a,\
    \ b| (a.0).cmp(&b.0));\n    rtn", "    //let mut res: Vec<(isize, isize)> = vec![];\n\
    \    let res: Vec<(isize, isize)> = lst.iter()\n        .enumerate()\n       \
    \ .map(|(i, v)| {\n            v.iter()\n                .enumerate()\n      \
    \          .filter(|&(_, n)| n == &x)\n                .map(|(j, _)| (i as isize,\
    \ j as isize))\n                .collect::<Vec<(isize, isize)>>()\n        })\n\
    \        .flat_map(|x| x)\n        .collect();\n    res", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    lst.iter()\n        .enumerate()\n   \
    \     .flat_map(|(i, row)| {\n            row.iter()\n                .enumerate()\n\
    \                .filter(|(_, &y)| y == x)\n                .map(move |(j, _)|\
    \ (i as isize, j as isize))\n        })\n        .collect()", "    let mut res:\
    \ Vec<(isize, isize)> = Vec::new();\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        for (j, e) in v.iter().enumerate() {\n            if *e == x {\n\
    \                res.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a, b| {\n        match (a.0).cmp(&b.0) {\n          \
    \  Ordering::Equal => {\n                match (b.1).cmp(&a.1) {\n           \
    \         Ordering::Equal => Ordering::Equal,\n                    Ordering::Greater\
    \ => Ordering::Greater,\n                    Ordering::Less => Ordering::Less,\n\
    \                }\n            }\n            Ordering::Greater => Ordering::Greater,\n\
    \            Ordering::Less => Ordering::Less,\n        }\n    });\n    res",
  "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for (index, arr) in lst.iter().enumerate()\
    \ {\n        let mut rev = arr.clone();\n        rev.reverse();\n        for (index2,\
    \ i) in rev.iter().enumerate() {\n            if *i == x {\n                res.push((index\
    \ as isize, arr.len() as isize - index2 as isize - 1))\n            }\n      \
    \  }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    res",
  "    lst.iter()\n        .enumerate()\n        .map(|(i, r)| r.iter().enumerate().filter(|(_,\
    \ a)| **a == x))\n        .flat_map(|e| e)\n        .map(|(i, _)| (i as isize,\
    \ i as isize))\n        .collect()", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        let row_a\
    \ = a.0;\n        let row_b = b.0;\n        let col_a = a.1;\n        let col_b\
    \ = b.1;\n        match row_a.cmp(&row_b) {\n            Ordering::Less => Ordering::Less,\n\
    \            Ordering::Greater => Ordering::Greater,\n            Ordering::Equal\
    \ => col_b.cmp(&col_a),\n        }\n    });\n    res", "    let mut result: Vec<(isize,\
    \ isize)> = vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for\
    \ (j, item) in row.iter().enumerate() {\n            if *item == x {\n       \
    \         result.push((i as isize, j as isize));\n            }\n        }\n \
    \   }\n    result.sort_by(|a, b| {\n        if a.0 < b.0 {\n            std::cmp::Ordering::Less\n\
    \        } else if a.0 > b.0 {\n            std::cmp::Ordering::Greater\n    \
    \    } else {\n            a.1.cmp(&b.1).reverse()\n        }\n    });\n    result",
  "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, row)| {\n        \
    \    row.iter()\n                .enumerate()\n                .filter(|(_, &n)|\
    \ n == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n    \
    \    })\n        .sorted_by(|(i1, j1), (i2, j2)| match i1.cmp(i2) {\n        \
    \    Ordering::Equal => j2.cmp(j1),\n            other => other,\n        })\n\
    \        .collect()", "    let mut vec: Vec<(isize, isize)> = Vec::new();\n  \
    \  let mut y = 0;\n    for row in lst {\n        let mut ind = 0;\n        for\
    \ item in row {\n            if item == x {\n                vec.push((y, ind));\n\
    \            }\n            ind += 1;\n        }\n        y += 1;\n    }\n   \
    \ vec.sort_by(|&a, &b| (a.0, -a.1).cmp(&(b.0, -b.1)));\n    vec", "    let mut\
    \ res: Vec<(isize, isize)> = Vec::new();\n    let mut iter = 0;\n    for x in\
    \ lst {\n        let mut iter2 = 0;\n        for x2 in x {\n            if x2\
    \ == x {\n                res.push((iter, iter2));\n            }\n          \
    \  iter2 += 1;\n        }\n        iter += 1;\n    }\n    res.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    res.sort_by(|a, b| a.0.cmp(&b.0));\n    res", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, v) in lst.iter().enumerate() {\n        for\
    \ (j, vv) in v.iter().enumerate() {\n            if *vv == x {\n             \
    \   result.push((i as isize, j as isize));\n            }\n        }\n    }\n\
    \    result.sort_by(|a, b| match a.0.cmp(&b.0) {\n        Ordering::Equal => b.1.cmp(&a.1),\n\
    \        r => r,\n    });\n    result", "    lst.iter()\n        .enumerate()\n\
    \        .map(|(y, row)| row.iter().enumerate().filter(|(_, z)| **z == x))\n \
    \       .flatten()\n        .map(|(z, _)| (y as isize, z as isize))\n        .collect()",
  "    lst.iter()\n        .enumerate()\n        .filter_map(|(i, r)| {\n        \
    \    let j = r.iter().position(|&c| c == x);\n            j.map(|j| (i as isize,\
    \ j as isize))\n        })\n        .sorted_by(|&(i1, j1), &(i2, j2)| {\n    \
    \        if i1 < i2 {\n                Ordering::Less\n            } else if i1\
    \ > i2 {\n                Ordering::Greater\n            } else {\n          \
    \      j2.cmp(&j1)\n            }\n        })\n        .collect()", "    // Your\
    \ code goes here\n    lst.iter()\n        .enumerate()\n        .map(|(i, v)|\
    \ {\n            v.iter()\n                .enumerate()\n                .filter(|(_,\
    \ &y)| y == x)\n                .map(|(j, _)| (i as isize, j as isize))\n    \
    \            .collect::<Vec<(isize, isize)>>()\n        })\n        .flatten()\n\
    \        .collect::<Vec<(isize, isize)>>()", "    lst.iter()\n        .enumerate()\n\
    \        .map(|(i, line)| {\n            line.iter()\n                .rev()\n\
    \                .enumerate()\n                .filter(|(_, &n)| n == x)\n   \
    \             .map(|(j, _)| (i as isize, j as isize))\n                .collect::<Vec<(isize,\
    \ isize)>>()\n        })\n        .flatten()\n        .collect()", "    let mut\
    \ result: Vec<(isize, isize)> = vec![];\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, item) in row.iter().enumerate() {\n            if item ==\
    \ &x {\n                result.push((i as isize, j as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n    \
    \        b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n\
    \    });\n    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, e) in row.iter().enumerate()\
    \ {\n            if *e == x {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| {\n        let (x1,\
    \ y1) = *a;\n        let (x2, y2) = *b;\n        (x1, -y1).cmp(&(x2, -y2))\n \
    \   });\n    result", "    // implement the function here\n    let mut result:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_count = 0;\n    for row in\
    \ lst {\n        let mut col_count = 0;\n        for col in row {\n          \
    \  if col == x {\n                result.push((row_count, col_count));\n     \
    \       }\n            col_count += 1;\n        }\n        row_count += 1;\n \
    \   }\n    result.sort_by(|x, y| {\n        x.0.cmp(&y.0).then(y.1.cmp(&x.1))\n\
    \    });\n    result", "    let mut lst: Vec<(isize, isize)> = Vec::new();\n \
    \   for (i, j) in lst.iter().enumerate() {\n        for (k, l) in j.iter().enumerate()\
    \ {\n            if *l == x {\n                lst.push((i as isize, k as isize));\n\
    \            }\n        }\n    }\n    lst.sort_by(|&(i, j), &(k, l)| {\n     \
    \   if i == k {\n            Ord::cmp(&l, &j)\n        } else {\n            Ord::cmp(&i,\
    \ &k)\n        }\n    });\n    lst", "    let mut result: Vec<(isize, isize)>\
    \ = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j,\
    \ num) in row.iter().enumerate() {\n            if *num == x {\n             \
    \   result.push((i as isize, j as isize));\n            }\n        }\n    }\n\
    \    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    result",
  "    if lst.is_empty() {\n        return vec![];\n    }\n    let mut counter = 0;\n\
    \    let mut result = vec![];\n    let mut row_counter = 0;\n    for row in lst\
    \ {\n        let mut col_counter = 0;\n        for col in row {\n            if\
    \ col == x {\n                result.push((row_counter, col_counter));\n     \
    \       }\n            col_counter += 1;\n        }\n        row_counter += 1;\n\
    \    }\n    result.sort_by(|a, b| {\n        if a.0 < b.0 {\n            return\
    \ std::cmp::Ordering::Less;\n        } else if a.0 > b.0 {\n            return\
    \ std::cmp::Ordering::Greater;\n        } else {\n            if a.1 < b.1 {\n\
    \                return std::cmp::Ordering::Greater;\n            } else if a.1\
    \ > b.1 {\n                return std::cmp::Ordering::Less;\n            } else\
    \ {\n                return std::cmp::Ordering::Equal;\n            }\n      \
    \  }\n    });\n    result", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, v) in lst.iter().enumerate() {\n        for (j, val) in v.iter().enumerate()\
    \ {\n            if *val == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for (idx,\
    \ item) in lst.iter().enumerate() {\n        for (idx2, item2) in item.iter().enumerate()\
    \ {\n            if item2 == &x {\n                res.push((idx as isize, idx2\
    \ as isize));\n            }\n        }\n    }\n    res.sort_by(|a, b| (a.0, b.1).cmp(&(b.0,\
    \ a.1)));\n    res", "    // your code\n    let mut result: Vec<(isize, isize)>\
    \ = Vec::new();\n    for (y, row) in lst.iter().enumerate() {\n        for (x,\
    \ _) in row.iter().enumerate() {\n            if row[x] == x as isize {\n    \
    \            result.push((y as isize, x as isize));\n            }\n        }\n\
    \    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    result",
  "    let mut ans: Vec<(isize, isize)> = vec![];\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        for (u, v) in j.iter().enumerate() {\n            if *v == x {\n\
    \                ans.push((i as isize, u as isize));\n            }\n        }\n\
    \    }\n    let mut ans1 = ans.clone();\n    ans1.sort_by(|&a, &b| {\n       \
    \ if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    ans1", "    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &y) in row.iter().enumerate()\
    \ {\n            if y == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 < b.0\
    \ {\n            std::cmp::Ordering::Less\n        } else if a.0 > b.0 {\n   \
    \         std::cmp::Ordering::Greater\n        } else {\n            b.1.cmp(&a.1)\n\
    \        }\n    });\n    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, j) in lst.iter().enumerate() {\n        for (k, l) in j.iter().enumerate()\
    \ {\n            if *l == x {\n                result.push((i as isize, k as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0\
    \ < b.0 {\n            std::cmp::Ordering::Less\n        } else if a.0 > b.0 {\n\
    \            std::cmp::Ordering::Greater\n        } else {\n            b.1.cmp(&a.1)\n\
    \        }\n    });\n    result", "    let mut ans: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, &k) in row.iter().enumerate()\
    \ {\n            if k == x {\n                ans.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    ans.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    ans", "    // your code here\n    let mut coordinates:\
    \ Vec<(isize, isize)> = Vec::new();\n    if lst.len() == 0 {\n        return coordinates;\n\
    \    }\n    for (i, row) in lst.iter().enumerate() {\n        for (j, elem) in\
    \ row.iter().enumerate() {\n            if *elem == x {\n                coordinates.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    coordinates.sort_by(|a,\
    \ b| {\n        if a.0 < b.0 {\n            std::cmp::Ordering::Less\n       \
    \ } else if a.0 > b.0 {\n            std::cmp::Ordering::Greater\n        } else\
    \ {\n            if a.1 > b.1 {\n                std::cmp::Ordering::Less\n  \
    \          } else if a.1 < b.1 {\n                std::cmp::Ordering::Greater\n\
    \            } else {\n                std::cmp::Ordering::Equal\n           \
    \ }\n        }\n    });\n    coordinates", "    let mut y = 0;\n    let mut result\
    \ = Vec::new();\n    for row in lst {\n        for (i, item) in row.iter().enumerate()\
    \ {\n            if item == &x {\n                result.push((y, i as isize));\n\
    \            }\n        }\n        y += 1;\n    }\n    result.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    result", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, v)|\
    \ {\n            v.iter()\n                .enumerate()\n                .filter(|(_,\
    \ &y)| y == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n\
    \        })\n        .sorted_by(|a, b| {\n            a.0\n                .cmp(&b.0)\n\
    \                .then_with(|| b.1.cmp(&a.1))\n        })\n        .collect()",
  "    lst.iter()\n        .enumerate()\n        .flat_map(|(y, row)| {\n        \
    \    row.iter()\n                .enumerate()\n                .filter(|(_, &n)|\
    \ n == x)\n                .map(move |(x, _)| (y as isize, x as isize))\n    \
    \    })\n        .sorted_by(|&(y1, x1), &(y2, x2)| {\n            y1.cmp(&y2).then_with(||\
    \ x2.cmp(&x1))\n        })\n        .collect()", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, item) in row.iter().enumerate() {\n            if *item == x {\n  \
    \              res.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    res",
  "    let mut result: Vec<(isize, isize)> = vec![];\n    for (index_row, item_row)\
    \ in lst.iter().enumerate() {\n        for (index_col, item_col) in item_row.iter().enumerate()\
    \ {\n            if *item_col == x {\n                result.push((index_row as\
    \ isize, index_col as isize));\n            }\n        }\n    }\n    result.sort_by(|a,\
    \ b| match a.0.cmp(&b.0) {\n        Ordering::Equal => b.1.cmp(&a.1),\n      \
    \  x => x,\n    });\n    result", "    // TODO\n    vec![]", "    let mut res:\
    \ Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, elem) in row.iter().enumerate() {\n            if *elem ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    res.sort_by(|tup1, tup2| tup1.1.cmp(&tup2.1));\n    res.sort_by(|tup1,\
    \ tup2| tup1.0.cmp(&tup2.0));\n    res", "    let mut res: Vec<(isize, isize)>\
    \ = Vec::new();\n    for (i, v) in lst.iter().enumerate() {\n        for (j, &v)\
    \ in v.iter().enumerate() {\n            if v == x {\n                res.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    res.sort_by(|a,\
    \ b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    res", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len()\
    \ {\n            if lst[i][j] == x {\n                res.push((i as isize, j\
    \ as isize));\n            }\n        }\n    }\n    let mut sorted = res.clone();\n\
    \    sorted.sort_by(|a, b| a.0.cmp(&b.0));\n    let mut result: Vec<(isize, isize)>\
    \ = Vec::new();\n    for i in 0..sorted.len() {\n        let mut arr: Vec<(isize,\
    \ isize)> = Vec::new();\n        for j in 0..res.len() {\n            if sorted[i].0\
    \ == res[j].0 {\n                arr.push(res[j]);\n            }\n        }\n\
    \        arr.sort_by(|a, b| b.1.cmp(&a.1));\n        for i in 0..arr.len() {\n\
    \            result.push(arr[i]);\n        }\n    }\n    result", "    let mut\
    \ res: Vec<(isize, isize)> = Vec::new();\n    for (i, line) in lst.iter().enumerate()\
    \ {\n        for (j, &num) in line.iter().enumerate() {\n            if num ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    res.sort_by(|a, b| if a.0 == b.0 { b.1.cmp(&a.1) } else {\
    \ a.0.cmp(&b.0) });\n    res", "    let mut ret: Vec<(isize, isize)> = Vec::new();\n\
    \    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n           \
    \ if lst[i][j] == x {\n                ret.push((i as isize, j as isize));\n \
    \           }\n        }\n    }\n    ret.sort_by(|a, b| {\n        if a.0 == b.0\
    \ {\n            if a.1 > b.1 {\n                std::cmp::Ordering::Less\n  \
    \          } else {\n                std::cmp::Ordering::Greater\n           \
    \ }\n        } else if a.0 > b.0 {\n            std::cmp::Ordering::Greater\n\
    \        } else {\n            std::cmp::Ordering::Less\n        }\n    });\n\
    \    ret", "    if lst.is_empty() {\n        return vec![];\n    }\n    let mut\
    \ result: Vec<(isize, isize)> = Vec::new();\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x, &val) in row.iter().enumerate() {\n            if val ==\
    \ x {\n                result.push((y as isize, x as isize));\n            }\n\
    \        }\n    }\n    result.sort_by(|&(a, b), &(x, y)| a.cmp(&x).then(y.cmp(&b)));\n\
    \    result", "    lst.iter()\n        .enumerate()\n        .map(|(i, row)| {\n\
    \            row.iter()\n                .enumerate()\n                .filter(|(_,\
    \ v)| **v == x)\n                .map(|(j, _)| (i as isize, j as isize))\n   \
    \             .collect::<Vec<(isize, isize)>>()\n        })\n        .flatten()\n\
    \        .collect::<Vec<(isize, isize)>>()", "    let mut res: Vec<(isize, isize)>\
    \ = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len()\
    \ {\n            if lst[i][j] == x {\n                res.push((i as isize, j\
    \ as isize));\n            }\n        }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for (i, row)\
    \ in lst.iter().enumerate() {\n        for (j, y) in row.iter().enumerate() {\n\
    \            if *y == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|x, y| {\n        let s = x.0.cmp(&y.0);\n\
    \        if s == Ordering::Equal {\n            y.1.cmp(&x.1)\n        } else\
    \ {\n            s\n        }\n    });\n    res", "    let mut ans: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n      \
    \  for (j, num) in row.iter().enumerate() {\n            if *num == x {\n    \
    \            ans.push((i as isize, j as isize));\n            }\n        }\n \
    \   }\n    ans.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    ans", "    lst.iter()\n\
    \        .enumerate()\n        .flat_map(|(i, v)| {\n            v.iter()\n  \
    \              .enumerate()\n                .filter(|&(_, n)| n == &x)\n    \
    \            .map(|(j, _)| (i as isize, j as isize))\n        })\n        .sorted_by(|&(r1,\
    \ c1), &(r2, c2)| match r1.cmp(&r2) {\n            Ordering::Equal => c2.cmp(&c1),\n\
    \            other => other,\n        })\n        .collect()", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut ret = vec![];\n    for i in 0..lst.len()\
    \ {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n   \
    \             ret.push((i as isize, j as isize));\n            }\n        }\n\
    \    }\n    ret.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    ret",
  "    let mut lst = lst;\n    lst.iter_mut()\n        .enumerate()\n        .map(|(i,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|&(_, &el)| el == x)\n                .map(|(j, _)| (i as isize,\
    \ j as isize))\n                .collect::<Vec<(isize, isize)>>()\n        })\n\
    \        .flatten()\n        .collect::<Vec<(isize, isize)>>()", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (y, xs) in lst.iter().enumerate() {\n        for (x2, v) in xs.iter().enumerate()\
    \ {\n            if *v == x {\n                res.push((y as isize, x2 as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 < b.0\
    \ {\n            Ordering::Less\n        } else if a.0 > b.0 {\n            Ordering::Greater\n\
    \        } else {\n            b.1.cmp(&a.1)\n        }\n    });\n    res", " \
    \   // Write your code here\n    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut count: isize = 0;\n    for i in 0..lst.len() {\n        for j in\
    \ 0..lst[i].len() {\n            if lst[i][j] == x {\n                result.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    result.sort_by(|a,\
    \ b| {\n        let a = (a.0, -a.1);\n        let b = (b.0, -b.1);\n        a.cmp(&b)\n\
    \    });\n    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate()\
    \ {\n            if *col == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n   \
    \     let res = a.0.cmp(&b.0);\n        if res == std::cmp::Ordering::Equal {\n\
    \            b.1.cmp(&a.1)\n        } else {\n            res\n        }\n   \
    \ });\n    result", "    lst.iter()\n        .enumerate()\n        .flat_map(|(r,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|&(_, c)| c == &x)\n                .map(move |(c, _)| (r as isize,\
    \ c as isize))\n        })\n        .collect()", "    if lst.is_empty() {\n  \
    \      return vec![];\n    }\n    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    for (y, row) in lst.iter().enumerate() {\n        for (x1, col) in row.iter().enumerate()\
    \ {\n            if *col == x {\n                res.push((y as isize, x1 as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 < b.0\
    \ {\n            return Ordering::Less;\n        }\n        if a.0 > b.0 {\n \
    \           return Ordering::Greater;\n        }\n        if a.1 > b.1 {\n   \
    \         return Ordering::Less;\n        }\n        if a.1 < b.1 {\n        \
    \    return Ordering::Greater;\n        }\n        Ordering::Equal\n    });\n\
    \    res", "    let mut result: Vec<(isize, isize)> = vec![];\n    for (i, row)\
    \ in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n   \
    \     if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n         \
    \   a.0.cmp(&b.0)\n        }\n    });\n    result", "    lst.iter()\n        .enumerate()\n\
    \        .filter_map(|(i, xs)| {\n            let indices = xs.iter().enumerate().filter_map(|(j,\
    \ &x1)| {\n                if x1 == x {\n                    Some((i as isize,\
    \ j as isize))\n                } else {\n                    None\n         \
    \       }\n            });\n            indices.collect::<Vec<(isize, isize)>>()\n\
    \        })\n        .flatten()\n        .collect::<Vec<(isize, isize)>>()", " \
    \   let mut res: Vec<(isize, isize)> = vec![];\n    for y in 0..lst.len() {\n\
    \        for z in 0..lst[y].len() {\n            if lst[y][z] == x {\n       \
    \         res.push((y as isize, z as isize));\n            }\n        }\n    }\n\
    \    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    res", "    //\
    \ your code here\n    unimplemented!();", "    let mut x: Vec<(isize, isize)>\
    \ = lst\n        .iter()\n        .enumerate()\n        .flat_map(|(y, x)| {\n\
    \            x.iter()\n                .enumerate()\n                .filter(|(_,\
    \ z)| z == &&x)\n                .map(|(x, _)| (y as isize, x as isize))\n   \
    \     })\n        .collect();\n    x.sort_by(|a, b| {\n        if a.0 == b.0 {\n\
    \            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n    \
    \    }\n    });\n    x", "    let mut row_col_pairs: Vec<(isize, isize)> = Vec::new();\n\
    \    for (row_idx, row) in lst.iter().enumerate() {\n        for (col_idx, col)\
    \ in row.iter().enumerate() {\n            if *col == x {\n                row_col_pairs.push((row_idx\
    \ as isize, col_idx as isize));\n            }\n        }\n    }\n    row_col_pairs.sort_by(|a,\
    \ b| (a.0, -a.1).cmp(&(b.0, -b.1)));\n    row_col_pairs", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut coords: Vec<(isize, isize)> =\
    \ vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j, &num)\
    \ in row.iter().enumerate() {\n            if num == x {\n                coords.push((i\
    \ as isize, j as isize));\n            }\n        }\n    }\n    coords.sort_by(|a,\
    \ b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    coords", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut size = lst.len();\n    for i in 0..size {\n\
    \        let mut size2 = lst[i].len();\n        for j in 0..size2 {\n        \
    \    if lst[i][j] == x {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut res: Vec<(isize, isize)> = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate()\
    \ {\n            if *col == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    let mut result: Vec<(isize, isize)> = vec![];\n    for (i, line)\
    \ in lst.iter().enumerate() {\n        for (j, y) in line.iter().enumerate() {\n\
    \            if x == *y {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| (a.0, -a.1).cmp(&(b.0,\
    \ -b.1)));\n    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (row, col) in lst.iter().enumerate() {\n        for (j, value) in col.iter().enumerate()\
    \ {\n            if *value == x {\n                result.push((row as isize,\
    \ j as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n\
    \        if a.0 < b.0 {\n            Ordering::Less\n        } else if a.0 > b.0\
    \ {\n            Ordering::Greater\n        } else {\n            b.1.cmp(&a.1)\n\
    \        }\n    });\n    result", "    lst.iter()\n        .enumerate()\n    \
    \    .flat_map(|(y, row)| {\n            row.iter()\n                .rev()\n\
    \                .enumerate()\n                .filter(|(_, n)| n == &&x)\n  \
    \              .map(move |(x, _)| (y as isize, x as isize))\n        })\n    \
    \    .collect()", "    let mut result: Vec<(isize, isize)> = vec![];\n    for\
    \ (row, sub_list) in lst.iter().enumerate() {\n        for (column, element) in\
    \ sub_list.iter().enumerate() {\n            if *element == x {\n            \
    \    result.push((row as isize, column as isize));\n            }\n        }\n\
    \    }\n    result.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    result", " \
    \   lst.iter()\n        .enumerate()\n        .filter_map(|(y, r)| {\n       \
    \     r.iter()\n                .enumerate()\n                .filter_map(|(x,\
    \ e)| if *e == x { Some((y as isize, x as isize)) } else { None })\n         \
    \       .collect::<Vec<(isize, isize)>>()\n        })\n        .flatten()\n  \
    \      .collect::<Vec<(isize, isize)>>()", "    let mut res: Vec<(isize, isize)>\
    \ = Vec::new();\n    for (y, row) in lst.iter().enumerate() {\n        for (x1,\
    \ x2) in row.iter().enumerate() {\n            if *x2 == x {\n               \
    \ res.push((y as isize, x1 as isize));\n            }\n        }\n    }\n    res.sort_by(|a,\
    \ b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    res", "    let mut coords: Vec<(isize,\
    \ isize)> = vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for\
    \ (j, elm) in row.iter().enumerate() {\n            if *elm == x {\n         \
    \       coords.push((i as isize, j as isize));\n            }\n        }\n   \
    \ }\n    // Sorting by column, then row\n    coords.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n\
    \    coords", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, row)|\
    \ {\n            row.iter()\n                .enumerate()\n                .filter(|&(_,\
    \ &item)| item == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n\
    \        })\n        .sorted_by(|&(i, j), &(i1, j1)| {\n            match i.cmp(&i1)\
    \ {\n                Ordering::Equal => j1.cmp(&j),\n                Ordering::Less\
    \ => Ordering::Less,\n                Ordering::Greater => Ordering::Greater,\n\
    \            }\n        })\n        .collect()", "    let mut ret = vec![];\n\
    \    for (row, v) in lst.iter().enumerate() {\n        for (col, e) in v.iter().enumerate()\
    \ {\n            if *e == x {\n                ret.push((row as isize, col as\
    \ isize));\n            }\n        }\n    }\n    ret.sort_by(|a, b| {\n      \
    \  let (x1, y1) = *a;\n        let (x2, y2) = *b;\n        if x1 == x2 {\n   \
    \         return y2.cmp(&y1);\n        }\n        x1.cmp(&x2)\n    });\n    ret",
  "    let mut row = Vec::new();\n    let mut col = Vec::new();\n    let mut res =\
    \ Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n\
    \            if lst[i][j] == x {\n                row.push(i as isize);\n    \
    \            col.push(j as isize);\n            }\n        }\n    }\n    row.sort();\n\
    \    col.sort();\n    col.reverse();\n    let mut i = 0;\n    while i < row.len()\
    \ {\n        res.push((row[i], col[i]));\n        i += 1;\n    }\n    res", " \
    \   lst.iter()\n        .enumerate()\n        .map(|(i, xs)| xs.iter().enumerate().filter(|&(_,\
    \ &a)| a == x))\n        .flat_map(|xs| xs.map(|(j, _)| (i as isize, j as isize)))\n\
    \        .collect()", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i,\
    \ row)| {\n            row.iter()\n                .enumerate()\n            \
    \    .filter(|&(_, &y)| y == x)\n                .map(move |(j, _)| (i as isize,\
    \ j as isize))\n        })\n        .collect()", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut i = 0;\n    for row in lst {\n        let\
    \ mut j = 0;\n        for num in row {\n            if num == x {\n          \
    \      result.push((i, j));\n            }\n            j += 1;\n        }\n \
    \       i += 1;\n    }\n    result.sort_by(|a, b| if a.0 == b.0 { b.1.cmp(&a.1)\
    \ } else { a.0.cmp(&b.0) });\n    result", "    let mut result: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut rows = 0;\n    for row in lst {\n        let mut\
    \ cols = 0;\n        for col in row {\n            if col == x {\n           \
    \     result.push((rows, cols));\n            }\n            cols += 1;\n    \
    \    }\n        rows += 1;\n    }\n    result.sort_by(|a, b| (a.0).cmp(&b.0));\n\
    \    result.sort_by(|a, b| (b.1).cmp(&a.1));\n    result", "    let mut res: Vec<(isize,\
    \ isize)> = Vec::new();\n    for y in 0..lst.len() {\n        for x1 in 0..lst[y].len()\
    \ {\n            if lst[y][x1] == x {\n                res.push((y as isize, x1\
    \ as isize));\n            }\n        }\n    }\n    res.sort_by(|a, b| {\n   \
    \     a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n    });\n    res", "    let mut coordinates:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row = 0;\n    for vect in lst\
    \ {\n        let mut column = vect.len() as isize - 1;\n        for num in vect\
    \ {\n            if num == &x {\n                coordinates.push((row, column));\n\
    \            }\n            column -= 1;\n        }\n        row += 1;\n    }\n\
    \    coordinates.sort_by(|a, b| (a.0, b.1).cmp(&(b.0, a.1)));\n    coordinates",
  "    let mut result: Vec<(isize, isize)> = vec![];\n    for row in 0..lst.len()\
    \ {\n        for column in 0..lst[row].len() {\n            if lst[row][column]\
    \ == x {\n                result.push((row as isize, column as isize));\n    \
    \        }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0\
    \ {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    result", "    let mut vec = vec![];\n    for (i, item)\
    \ in lst.iter().enumerate() {\n        for (j, item2) in item.iter().enumerate()\
    \ {\n            if *item2 == x {\n                vec.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    vec.sort_by(|a, b| {\n      \
    \  if a.0 != b.0 {\n            a.0.cmp(&b.0)\n        } else {\n            b.1.cmp(&a.1)\n\
    \        }\n    });\n    vec", "    let mut v = Vec::new();\n    for (i, row)\
    \ in lst.iter().enumerate() {\n        for (j, &x_) in row.iter().enumerate()\
    \ {\n            if x_ == x {\n                v.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    v.sort_by(|&a, &b| {\n        if a.0 !=\
    \ b.0 {\n            a.0.cmp(&b.0)\n        } else {\n            b.1.cmp(&a.1)\n\
    \        }\n    });\n    v", "    if lst.is_empty() {\n        return vec![];\n\
    \    }\n    let mut result: Vec<(isize, isize)> = Vec::new();\n    let mut row_index\
    \ = 0;\n    for row in lst {\n        let mut col_index = 0;\n        for el in\
    \ row {\n            if el == x {\n                result.push((row_index, col_index));\n\
    \            }\n            col_index += 1;\n        }\n        row_index += 1;\n\
    \    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n            a.1.cmp(&b.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    result.reverse();\n\
    \    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (y, row) in lst.iter().enumerate() {\n        for (x, value) in row.iter().enumerate()\
    \ {\n            if *value == x {\n                result.push((y as isize, x\
    \ as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n\
    \        if a.0 != b.0 {\n            a.0.cmp(&b.0)\n        } else {\n      \
    \      b.1.cmp(&a.1)\n        }\n    });\n    result", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    for (i, item) in lst.iter().enumerate() {\n     \
    \   for (j, item2) in item.iter().enumerate() {\n            if *item2 == x {\n\
    \                result.push((i as isize, j as isize));\n            }\n     \
    \   }\n    }\n    result.sort_by(|a, b| {\n        let (a0, a1) = *a;\n      \
    \  let (b0, b1) = *b;\n        match a0.cmp(&b0) {\n            Ordering::Equal\
    \ => b1.cmp(&a1),\n            otherwise => otherwise,\n        }\n    });\n \
    \   result", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, arr)|\
    \ {\n            arr.iter()\n                .enumerate()\n                .filter(|(_,\
    \ e)| **e == x)\n                .map(|(j, _)| (i as isize, j as isize))\n   \
    \     })\n        .collect()", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for (row, row_vec) in lst.iter().enumerate() {\n        for (column, elem)\
    \ in row_vec.iter().enumerate() {\n            if *elem == x {\n             \
    \   result.push((row as isize, column as isize));\n            }\n        }\n\
    \    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    result",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, element) in row.iter().enumerate() {\n            if element\
    \ == &x {\n                result.push((i as isize, j as isize));\n          \
    \  }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n\
    \            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n    \
    \    }\n    });\n    result", "    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n           \
    \ if lst[i][j] == x {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n\
    \    });\n    result", "    let mut res: Vec<(isize, isize)> = vec![];\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, &val) in row.iter().enumerate()\
    \ {\n            if val == x {\n                res.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    res.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n\
    \    });\n    res", "    let mut res: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (y, row) in lst.iter().enumerate() {\n        for (x1, item) in row.iter().enumerate()\
    \ {\n            if *item == x {\n                res.push((y as isize, x1 as\
    \ isize));\n            }\n        }\n    }\n    res.sort_by(|(y1, x1), (y2, x2)|\
    \ {\n        match y1.cmp(y2) {\n            Ordering::Equal => x2.cmp(x1),\n\
    \            x => x,\n        }\n    });\n    res", "    let mut ret = vec![];\n\
    \    let mut rows = vec![];\n    for (r, row) in lst.iter().enumerate() {\n  \
    \      rows.push(r);\n        for (c, x2) in row.iter().enumerate() {\n      \
    \      if *x2 == x {\n                ret.push((r as isize, c as isize));\n  \
    \          }\n        }\n    }\n    if ret.len() > 0 {\n        ret.sort_by(|a,\
    \ b| {\n            if a.0 == b.0 {\n                b.1.cmp(&a.1)\n         \
    \   } else {\n                a.0.cmp(&b.0)\n            }\n        });\n    }\n\
    \    ret", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx = 0;\n    for row in lst {\n        let mut col_idx = 0;\n        for\
    \ col in row {\n            if col == x {\n                result.push((row_idx,\
    \ col_idx));\n            }\n            col_idx += 1;\n        }\n        row_idx\
    \ += 1;\n    }\n    result.sort_by(|a, b| {\n        if a.0 == b.0 {\n       \
    \     return b.1.cmp(&a.1);\n        }\n        a.0.cmp(&b.0)\n    });\n    result",
  "    let mut coordinates: Vec<(isize, isize)> = vec![];\n    for (y, row) in lst.iter().enumerate()\
    \ {\n        for (x1, col) in row.iter().enumerate() {\n            if *col ==\
    \ x {\n                coordinates.push((y as isize, x1 as isize));\n        \
    \    }\n        }\n    }\n    coordinates.sort_by(|a, b| {\n        if a.0 ==\
    \ b.0 {\n            a.1.cmp(&b.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    coordinates.reverse();\n    coordinates", "    lst.iter()\n\
    \        .enumerate()\n        .filter_map(|(row, list)| {\n            list.iter()\n\
    \                .enumerate()\n                .filter_map(|(col, &val)| if val\
    \ == x { Some((row as isize, col as isize)) } else { None })\n               \
    \ .collect::<Vec<(isize, isize)>>()\n        })\n        .flatten()\n        .collect::<Vec<(isize,\
    \ isize)>>()", "    let mut res: Vec<(isize, isize)> = vec![];\n    let mut row\
    \ = 0;\n    for v in lst {\n        let mut col = v.len() as isize - 1;\n    \
    \    for i in v {\n            if i == x {\n                res.push((row, col));\n\
    \            }\n            col -= 1;\n        }\n        row += 1;\n    }\n \
    \   res.sort_by(|a, b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    res", " \
    \   let mut res: Vec<(isize, isize)> = vec![];\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, &col) in row.iter().enumerate() {\n            if col ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    res.sort_by(|a, b| (a.0, b.1).cmp(&(b.0, a.1)));\n    res",
  "    // your code\n    let mut result: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (i, row) in lst.iter().enumerate() {\n        for (j, item) in row.iter().enumerate()\
    \ {\n            if item == &x {\n                result.push((i as isize, j as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n   \
    \     if a.0 != b.0 {\n            a.0.cmp(&b.0)\n        } else {\n         \
    \   b.1.cmp(&a.1)\n        }\n    });\n    result", "    if lst.is_empty() {\n\
    \        return vec![];\n    }\n    let mut result: Vec<(isize, isize)> = Vec::new();\n\
    \    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n           \
    \ if lst[i][j] == x {\n                result.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    result", "    lst.iter()\n        .enumerate()\n        .flat_map(|(i, v)|\
    \ {\n            v.iter()\n                .rev()\n                .enumerate()\n\
    \                .filter(|&(_, j)| *j == x)\n                .map(|(j, _)| (i\
    \ as isize, j as isize))\n        })\n        .collect()", "    let mut coordinates:\
    \ Vec<(isize, isize)> = vec![];\n    for (row, cells) in lst.iter().enumerate()\
    \ {\n        for (column, cell) in cells.iter().enumerate() {\n            if\
    \ *cell == x {\n                coordinates.push((row as isize, column as isize));\n\
    \            }\n        }\n    }\n    coordinates.sort_by(|(row1, column1), (row2,\
    \ column2)| {\n        row1.cmp(row2).then(column2.cmp(column1))\n    });\n  \
    \  coordinates", "    // A sequence of one or more items, separated by commas,\n\
    \    // and ending with an optional trailing comma\n    let mut v: Vec<(isize,\
    \ isize)> = Vec::new();\n    // Check if list is empty\n    if lst.len() == 0\
    \ {\n        return v;\n    }\n    // Find the indices of `x`\n    for (i, row)\
    \ in lst.iter().enumerate() {\n        let mut new_i = i as isize;\n        for\
    \ (j, elem) in row.iter().enumerate() {\n            if elem == &x {\n       \
    \         let new_j = j as isize;\n                v.push((new_i, new_j));\n \
    \           }\n        }\n    }\n    // Sort coordinates by rows in ascending\
    \ order\n    v.sort_by(|a, b| a.0.cmp(&b.0));\n    // Sort coordinates of the\
    \ row by columns in descending order\n    v.sort_by(|a, b| b.1.cmp(&a.1));\n \
    \   v", "    let mut result: Vec<(isize, isize)> = vec![];\n    for (y, row) in\
    \ lst.iter().enumerate() {\n        for (x1, cell) in row.iter().enumerate() {\n\
    \            if *cell == x {\n                result.push((y as isize, x1 as isize));\n\
    \            }\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.0\
    \ == b.0 {\n            a.1.cmp(&b.1)\n        } else {\n            a.0.cmp(&b.0)\n\
    \        }\n    });\n    result.reverse();\n    result", "    if lst.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut result: Vec<(isize, isize)> =\
    \ vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j, element)\
    \ in row.iter().enumerate() {\n            if *element == x {\n              \
    \  result.push((i as isize, j as isize));\n            }\n        }\n    }\n \
    \   result.sort_by(|a, b| {\n        if a.0 != b.0 {\n            a.0.cmp(&b.0)\n\
    \        } else {\n            b.1.cmp(&a.1)\n        }\n    });\n    result",
  "    let mut list = vec![];\n    for (i, row) in lst.iter().enumerate() {\n    \
    \    for (j, item) in row.iter().enumerate() {\n            if *item == x {\n\
    \                list.push((i as isize, j as isize));\n            }\n       \
    \ }\n    }\n    list.sort_by(|a, b| {\n        if a.0 < b.0 {\n            Ordering::Less\n\
    \        } else if a.0 > b.0 {\n            Ordering::Greater\n        } else\
    \ {\n            if a.1 > b.1 {\n                Ordering::Less\n            }\
    \ else if a.1 < b.1 {\n                Ordering::Greater\n            } else {\n\
    \                Ordering::Equal\n            }\n        }\n    });\n    list",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    let mut index = 0;\n\
    \    for list in lst {\n        let mut row_index = 0;\n        for element in\
    \ list {\n            if element == x {\n                result.push((index, row_index));\n\
    \            }\n            row_index += 1;\n        }\n        index += 1;\n\
    \    }\n    result.sort_by(|a, b| {\n        let a_row = a.0;\n        let b_row\
    \ = b.0;\n        if a_row != b_row {\n            return a_row.cmp(&b_row);\n\
    \        }\n        let a_col = a.1;\n        let b_col = b.1;\n        b_col.cmp(&a_col)\n\
    \    });\n    result", "    lst.iter()\n        .enumerate()\n        .map(|(r,\
    \ row)| row.iter().position(|&c| c == x).map(|c| (r as isize, c as isize)))\n\
    \        .flatten()\n        .collect::<Vec<(isize, isize)>>()", "    let mut\
    \ res: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate()\
    \ {\n        for (j, item) in row.iter().enumerate() {\n            if *item ==\
    \ x {\n                res.push((i as isize, j as isize));\n            }\n  \
    \      }\n    }\n    res.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n\
    \    res", "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (y,\
    \ row) in lst.iter().enumerate() {\n        for (x_i, &x_v) in row.iter().enumerate()\
    \ {\n            if x_v == x {\n                result.push((y as isize, x_i as\
    \ isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| {\n   \
    \     if a.0 == b.0 {\n            a.1.cmp(&b.1)\n        } else {\n         \
    \   a.0.cmp(&b.0)\n        }\n    });\n    result.reverse();\n    result", " \
    \   lst.iter()\n        .enumerate()\n        .flat_map(|(i, row)| {\n       \
    \     row.iter()\n                .enumerate()\n                .filter(|(_, &v)|\
    \ v == x)\n                .map(move |(j, _)| (i as isize, j as isize))\n    \
    \    })\n        .sorted_by(|&(i, j), &(i2, j2)| match i.cmp(&i2) {\n        \
    \    std::cmp::Ordering::Equal => j2.cmp(&j),\n            x => x,\n        })\n\
    \        .collect()", "    let mut res: Vec<(isize, isize)> = Vec::new();\n  \
    \  let mut row_idx = 0;\n    for row in lst {\n        let mut col_idx = row.len()\
    \ as isize - 1;\n        for i in row {\n            if i == x {\n           \
    \     res.push((row_idx, col_idx));\n            }\n            col_idx -= 1;\n\
    \        }\n        row_idx += 1;\n    }\n    res.sort_by(|a, b| {\n        a.0.cmp(&b.0).then(b.1.cmp(&a.1))\n\
    \    });\n    res", "    let mut lst_row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut lst_temp: Vec<(isize, isize)> = Vec::new();\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        for (j, v2) in v.iter().enumerate() {\n            if *v2 == x {\n\
    \                lst_temp.push((i as isize, j as isize));\n            }\n   \
    \     }\n    }\n    lst_temp.sort_by(|&a, &b| {\n        if a.0 == b.0 {\n   \
    \         b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n       \
    \ }\n    });\n    lst_row = lst_temp;\n    lst_row", "    let mut ixs = vec![];\n\
    \    for (i, row) in lst.iter().enumerate() {\n        for (j, elem) in row.iter().enumerate()\
    \ {\n            if *elem == x {\n                ixs.push((i as isize, j as isize));\n\
    \            }\n        }\n    }\n    ixs.sort_by(|(a, b), (c, d)| {\n       \
    \ if a == c {\n            d.cmp(b)\n        } else {\n            a.cmp(c)\n\
    \        }\n    });\n    ixs", "    let mut res: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row = 0;\n    let mut col = 0;\n    for i in lst {\n        for j\
    \ in i {\n            if j == x {\n                res.push((row, col));\n   \
    \         }\n            col += 1;\n        }\n        row += 1;\n        col\
    \ = 0;\n    }\n    res.sort_by(|a, b| match a.0.cmp(&b.0) {\n        Ordering::Equal\
    \ => b.1.cmp(&a.1),\n        x => x,\n    });\n    res"]
stop_tokens:
- "\n}"
