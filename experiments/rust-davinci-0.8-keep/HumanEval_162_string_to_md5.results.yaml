name: HumanEval_162_string_to_md5
language: rust
results:
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let md5_hash = hasher.result_str();\n\
    \    Some(md5_hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp8wcqow9x.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    hasher.input_str(&text);\n    hasher.result_str().parse().ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp4k7ykxc8.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // Check if the string is empty\n    if text.is_empty() {\n        return\
    \ None;\n    }\n\n    // Convert the input text to MD5\n    let digest = md5::compute(text);\n\
    \n    // Convert the digest to a string\n    let md5_str = hex::encode(digest);\n\
    \n    // Return the converted string\n    Some(md5_str)\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpq429yqrk.rs:11:18\n   |\n11 |     let digest = md5::compute(text);\n\
    \   |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpq429yqrk.rs:14:19\n\
    \   |\n14 |     let md5_str = hex::encode(digest);\n   |                   ^^^\
    \ use of undeclared crate or module `hex`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5 = md5::compute(text);\n\
    \    let mut buffer = [0u8; 16];\n    buffer.copy_from_slice(&md5);\n    let hex\
    \ = hex::encode(buffer);\n    Some(hex)\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpmtfwxpiy.rs:8:15\n  |\n8 |     let md5 = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpmtfwxpiy.rs:11:15\n\
    \   |\n11 |     let hex = hex::encode(buffer);\n   |               ^^^ use of\
    \ undeclared crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hex = md5::compute(text);\n\
    \    let mut s = String::with_capacity(32);\n    for byte in hex.iter() {\n  \
    \      write!(&mut s, \"{:02x}\", byte).expect(\"Unable to write\");\n    }\n\
    \    Some(s)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpnrum9wrh.rs:8:15\n  |\n8 |     let hex = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror[E0599]:\
    \ no method named `write_fmt` found for mutable reference `&mut String` in the\
    \ current scope\n  --> /tmp/tmpnrum9wrh.rs:11:9\n   |\n11 |         write!(&mut\
    \ s, \"{:02x}\", byte).expect(\"Unable to write\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `&mut String`\n   |\n   = help: items from traits can only\
    \ be used if the trait is in scope\n   = note: this error originates in the macro\
    \ `write` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n   |\n1  | use std::fmt::Write;\n   |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let hex_string = format!(\"{:x}\", digest);\n    Some(hex_string)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpcghjsvsk.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let digest = match text.len() {\n        0 => return None,\n        _\
    \ => match md5::compute(text) {\n            Err(_) => return None,\n        \
    \    Ok(value) => value,\n        },\n    };\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp_tc3lp1d.rs:7:20\n  |\n7 |         _ => match md5::compute(text)\
    \ {\n  |                    ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    return Some(hex::encode(md5::compute(text)));\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \ --> /tmp/tmpf9tvd55g.rs:8:17\n  |\n8 |     return Some(hex::encode(md5::compute(text)));\n\
    \  |                 ^^^ use of undeclared crate or module `hex`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `md5`\n --> /tmp/tmpf9tvd55g.rs:8:29\n\
    \  |\n8 |     return Some(hex::encode(md5::compute(text)));\n  |             \
    \                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp8n4vcyqw.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hash = md5::compute(text);\n\
    \    let mut hashed_string = String::new();\n    for byte in hash.iter() {\n \
    \       hashed_string.push_str(&format!(\"{:02x}\", byte));\n    }\n    Some(hashed_string)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp1cna5s1s.rs:8:16\n  |\n8 |     let hash = md5::compute(text);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => {\n            let\
    \ mut md5_hasher = Md5::new();\n            md5_hasher.input_str(&text);\n   \
    \         Some(md5_hasher.result_str())\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpu70rowe8.rs:8:34\n\
    \  |\n8 |             let mut md5_hasher = Md5::new();\n  |                  \
    \                ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let digest_str = format!(\"{:x}\", digest);\n    Some(digest_str)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpwdktvi5c.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5 =\
    \ Md5::new();\n    md5.input_str(&text);\n    Some(md5.result_str())\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpjfnmul96.rs:8:19\n\
    \  |\n8 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5_hasher\
    \ = Md5::new();\n    md5_hasher.input_str(&text);\n    let md5_string = md5_hasher.result_str();\n\
    \    Some(md5_string)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpifs7m1hn.rs:8:26\n\
    \  |\n8 |     let mut md5_hasher = Md5::new();\n  |                          ^^^\
    \ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use md5::{Digest, Md5};\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n    Some(format!(\"{:x}\", result))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `md5`\n --> /tmp/tmpd5c_conl.rs:5:9\n \
    \ |\n5 |     use md5::{Digest, Md5};\n  |         ^^^ maybe a missing crate `md5`?\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    return Some(format!(\"\
    {:x}\", md5::compute(text)));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp_v1rhlme.rs:8:33\n  |\n8 |     return Some(format!(\"{:x}\", md5::compute(text)));\n\
    \  |                                 ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.is_empty() {\n        true => None,\n        false => {\n\
    \            let mut hasher = Md5::new();\n            hasher.input_str(&text);\n\
    \            let result = hasher.result_str();\n            Some(result)\n   \
    \     }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpo1daa3o1.rs:8:30\n\
    \  |\n8 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n  \
    \  Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp39e3hbna.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let digest_str = format!(\"{:x}\", digest);\n    Some(digest_str)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp8tq2ovvu.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result();\n\
    \    let mut s = String::new();\n    for e in result.iter() {\n        s.push_str(&format!(\"\
    {:02x}\", e));\n    }\n    Some(s)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp29as23mu.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpkmdyp95u.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => {\n            let\
    \ mut hasher = Md5::new();\n            hasher.input_str(&text);\n           \
    \ Some(hasher.result_str())\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpicr5fp5n.rs:8:30\n\
    \  |\n8 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hex = md5::compute(text.as_bytes());\n\
    \    Some(hex.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmphh8tg7kz.rs:8:15\n  |\n8 |     let hex = md5::compute(text.as_bytes());\n\
    \  |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let md5_string = format!(\"{:x}\", digest);\n    Some(md5_string)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpegenjzvp.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let md5 = md5::compute(text);\n    let mut md5_string = String::new();\n\
    \    for byte in md5.iter() {\n        md5_string.push_str(&format!(\"{:02x}\"\
    , byte));\n    }\n    Some(md5_string)\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpcosurthm.rs:5:15\n  |\n5 |     let md5 = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpvajuvcv0.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let result = hex::encode(digest);\n    Some(result)\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpek3_x5mg.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n --> /tmp/tmpek3_x5mg.rs:9:18\n\
    \  |\n9 |     let result = hex::encode(digest);\n  |                  ^^^ use\
    \ of undeclared crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // Ensure that 'text' is not an empty string.\n    if text.is_empty()\
    \ {\n        return None;\n    }\n\n    // MD5 the string to get its hash equivalent.\n\
    \    // We create a digestable object out of the input string.\n    let mut md5_obj\
    \ = md5::Md5::new();\n    // We push the input text to the digestable object,\
    \ and return a\n    // hash equivalent string.\n    let digest = md5_obj.digest(text.as_bytes());\n\
    \    let result = format!(\"{:x}\", digest);\n\n    // Return the result to the\
    \ caller.\n    Some(result)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpai434by8.rs:12:23\n   |\n12 |     let mut md5_obj = md5::Md5::new();\n\
    \   |                       ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let mut hash = String::new();\n    for i in digest.iter() {\n        hash.push_str(&format!(\"\
    {:x}\", i));\n    }\n    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp961uib2v.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpseytce8a.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpggawdz3d.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let result = format!(\"{:x}\", digest);\n    Some(result)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpphm0_grt.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let input = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", input))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpu1rvhj9k.rs:8:17\n  |\n8 |     let input = md5::compute(text);\n\
    \  |                 ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpg7hen0be.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5 = md5::compute(text);\n\
    \    let result = format!(\"{:x}\", md5);\n    Some(result)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpfgqltmmo.rs:8:15\n  |\n8 |     let md5 = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let result = match md5::compute(text.as_bytes()) {\n        Ok(value)\
    \ => format!(\"{:x}\", value),\n        Err(_e) => String::from(\"\"),\n    };\n\
    \    return if result.is_empty() {\n        None\n    } else {\n        Some(result)\n\
    \    };\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp5fcg_tsh.rs:5:24\n  |\n5 |     let result = match md5::compute(text.as_bytes())\
    \ {\n  |                        ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => Some(md5::compute(text).to_string()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp2ec9g6vz.rs:7:19\n  |\n7 |         _ => Some(md5::compute(text).to_string()),\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    return Some(format!(\"\
    {:x}\", md5::compute(text)));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpzodye0sq.rs:8:33\n  |\n8 |     return Some(format!(\"{:x}\", md5::compute(text)));\n\
    \  |                                 ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let hash = hasher.result_str();\n\
    \    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpu5dj9knj.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hash = md5::compute(text);\n\
    \    let bytes = hash.0;\n    let mut buffer = [0u8; 16];\n    buffer.copy_from_slice(&bytes);\n\
    \    let hex = hex::encode(buffer);\n    Some(hex)\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpsbn8a2ja.rs:8:16\n  |\n8 |     let hash = md5::compute(text);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpsbn8a2ja.rs:12:15\n\
    \   |\n12 |     let hex = hex::encode(buffer);\n   |               ^^^ use of\
    \ undeclared crate or module `hex`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result();\n\
    \    Some(result.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpz2vrorq2.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp_o1j2h_6.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // open a md5 hasher, then use the text to update it\n    let mut hasher\
    \ = md5::Context::new();\n    hasher.consume(text.as_bytes());\n\n    // get a\
    \ raw string result\n    let result = hasher.compute();\n\n    // convert the\
    \ raw result to a formatted hex string\n    let result = format!(\"{:x}\", result);\n\
    \n    if result.is_empty() {\n        None\n    } else {\n        Some(result)\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpwwi_629q.rs:6:27\n  |\n6 |     let mut hasher = md5::Context::new();\n\
    \  |                           ^^^^^^^ not found in `md5`\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::task::Context;\n  |\nhelp: if you import\
    \ `Context`, refer to it directly\n  |\n6 -     let mut hasher = md5::Context::new();\n\
    6 +     let mut hasher = Context::new();\n  | \n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp7m9r8liv.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(format!(\"\
    {:x}\", md5::compute(text)))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp11ww7bpy.rs:8:26\n  |\n8 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpnyhq2ud2.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5 = Md5::digest(text.as_bytes());\n\
    \    let mut hex_hash = String::with_capacity(32);\n    for byte in md5.iter()\
    \ {\n        hex_hash.push_str(&format!(\"{:02x}\", byte));\n    }\n    Some(hex_hash)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpbquq4_ey.rs:8:15\n\
    \  |\n8 |     let md5 = Md5::digest(text.as_bytes());\n  |               ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n  \
    \  let output = hasher.result_str();\n    match output.len() {\n        0 => None,\n\
    \        _ => Some(output),\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpfxsa9uud.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = match\
    \ md5::compute(text.as_bytes()) {\n        Ok(digest) => digest,\n        Err(_)\
    \ => return None,\n    };\n    Some(format!(\"{:x}\", digest))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpbxv15jy3.rs:8:24\n  |\n8 |     let digest = match md5::compute(text.as_bytes())\
    \ {\n  |                        ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5 = md5::compute(text);\n\
    \    let output = format!(\"{:x}\", md5);\n    Some(output)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp4t4gibju.rs:8:15\n  |\n8 |     let md5 = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    return Some(md5::compute(text).to_string());\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmppxz5reaa.rs:8:17\n  |\n8 |     return Some(md5::compute(text).to_string());\n\
    \  |                 ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // The text cannot be empty\n    if text.is_empty() {\n        return\
    \ None;\n    }\n\n    // Compute the md5 hash and return it\n    Some(md5::compute(text).to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmprdrfp3s4.rs:11:10\n   |\n11 |     Some(md5::compute(text).to_string())\n\
    \   |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut text = text;\n    let mut md5 = Md5::new();\n    md5.input_str(&text);\n\
    \    md5.result_str()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmplw6u2tdh.rs:6:19\n\
    \  |\n6 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpr5k190cq.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => {\n            let\
    \ digest = md5::compute(text);\n            Some(format!(\"{:x}\", digest))\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp200k2idx.rs:8:26\n  |\n8 |             let digest = md5::compute(text);\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    return Some(hasher.result_str());\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpufraud_t.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // If the text is empty, return None.\n    if text.is_empty() {\n   \
    \     return None;\n    }\n\n    // Generate the md5 hash equivalent of the given\
    \ text.\n    // We are assuming that the given text is encoded in UTF-8\n    //\
    \ format.\n    let hashed_text = md5::compute(text.as_bytes());\n\n    // Convert\
    \ the hashed text to a hex string.\n    Some(format!(\"{:x}\", hashed_text))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp0ywxsirf.rs:13:23\n   |\n13 |     let hashed_text = md5::compute(text.as_bytes());\n\
    \   |                       ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpi83l_pic.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // TODO: Implement this function\n    return None;\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\")`', /tmp/tmp0j9nn1re.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let digest = hasher.result();\n\
    \    let digest_hex = format!(\"{:x}\", digest);\n    Some(digest_hex)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpcqz88n98.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpzdfse3vo.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let hex_digest = format!(\"{:x}\", digest);\n    Some(hex_digest)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpk4otiuqq.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let input = text.as_bytes();\n\
    \    let output = md5::compute(input);\n    let result = format!(\"{:x}\", output);\n\
    \    Some(result)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp185a7kod.rs:9:18\n  |\n9 |     let output = md5::compute(input);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let mut hashed_string\
    \ = String::new();\n    for byte in hasher.result() {\n        hashed_string.push_str(&format!(\"\
    {:x}\", byte));\n    }\n    Some(hashed_string)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpuie0h_i_.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let mut hash_arr = [0;\
    \ 16];\n    hasher.result(&mut hash_arr);\n    let hash_vec = hash_arr.to_vec();\n\
    \    let hash_hex = hex::encode(hash_vec);\n    Some(hash_hex)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpsj8s045g.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `hex`\n  --> /tmp/tmpsj8s045g.rs:13:20\n   |\n13 |     let hash_hex\
    \ = hex::encode(hash_vec);\n   |                    ^^^ use of undeclared crate\
    \ or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hash = md5::compute(text);\n\
    \    let hash_string = format!(\"{:x}\", hash);\n    return Some(hash_string);\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpkwloel68.rs:8:16\n  |\n8 |     let hash = md5::compute(text);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let md5_str = hasher.result_str();\n\
    \    Some(md5_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n   \
    \ assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpogv1gu4w.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // TODO: Implement this function so that it passes the tests.\n\n   \
    \ // Hint: You should be using rust's `Hash` trait\n    // and the `md5` method\
    \ from the `hex` crate.\n    //\n    // Hash's `hash` method can take either a\
    \ `&[u8]`\n    // or a generic `R: Read` as input. So you should\n    // be able\
    \ to hash your input string directly\n    // by making it into a `&[u8]`.\n\n\
    \    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher =\
    \ Md5::new();\n    hasher.input(text.as_bytes());\n    let hash = hasher.result();\n\
    \    Some(hash.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp1iuyoqjl.rs:19:22\n\
    \   |\n19 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match &text[..] {\n        \"\" => None,\n        _ => Some(format!(\"\
    {:x}\", md5::compute(text.as_bytes()))),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp_zgptplp.rs:7:35\n  |\n7 |         _ => Some(format!(\"{:x}\", md5::compute(text.as_bytes()))),\n\
    \  |                                   ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut output = String::new();\n    if text.is_empty() {\n        return\
    \ None;\n    }\n    let mut hasher = Md5::new();\n    hasher.input_str(&text);\n\
    \    let result = hasher.result_str();\n    output.push_str(&result);\n    Some(output)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp7q_n8bha.rs:9:22\n\
    \  |\n9 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let output = format!(\"\
    echo -n {} | md5sum\", text);\n    let output = output.as_str();\n    let output\
    \ = Command::new(\"bash\")\n        .arg(\"-c\")\n        .arg(output)\n     \
    \   .output()\n        .expect(\"failed to execute process\");\n    let output\
    \ = String::from_utf8_lossy(&output.stdout);\n    let output = output.split_whitespace().collect::<Vec<&str>>();\n\
    \    if output.len() != 1 {\n        return None;\n    }\n    Some(output[0].to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Command`\n  -->\
    \ /tmp/tmp4knzukzg.rs:10:18\n   |\n10 |     let output = Command::new(\"bash\"\
    )\n   |                  ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::process::Command;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hash = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", hash))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp2aigg9g0.rs:8:16\n  |\n8 |     let hash = md5::compute(text);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n  \
    \  return match hasher.result_str() {\n        s if s.is_empty() => None,\n  \
    \      s => Some(s),\n    };\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpdmp0h_hm.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(md5::compute(text).to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmptl3xd080.rs:8:10\n  |\n8 |     Some(md5::compute(text).to_string())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5_ctx\
    \ = md5::Context::new();\n    md5_ctx.consume(text.as_bytes());\n    let result\
    \ = md5_ctx.compute();\n    let mut output = String::new();\n    for i in result.iter()\
    \ {\n        output.push_str(&format!(\"{:02x}\", i));\n    }\n    Some(output)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpd75lo1pe.rs:8:28\n  |\n8 |     let mut md5_ctx = md5::Context::new();\n\
    \  |                            ^^^^^^^ not found in `md5`\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::task::Context;\n  |\nhelp: if you import\
    \ `Context`, refer to it directly\n  |\n8 -     let mut md5_ctx = md5::Context::new();\n\
    8 +     let mut md5_ctx = Context::new();\n  | \n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => {\n            let\
    \ mut hasher = Md5::new();\n            hasher.input_str(&text);\n           \
    \ return Some(hasher.result_str());\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpccl21q62.rs:8:30\n\
    \  |\n8 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => {\n            let\
    \ md5_hash = md5::compute(text);\n            let mut output = String::new();\n\
    \            for byte in md5_hash.iter() {\n                output.push_str(&format!(\"\
    {:02x}\", byte));\n            }\n            Some(output)\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmppzauizw3.rs:8:28\n  |\n8 |             let md5_hash = md5::compute(text);\n\
    \  |                            ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpro22u5uz.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result();\n\
    \    let result_str = format!(\"{:x}\", result);\n    return Some(result_str);\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp3sbaiyon.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let result = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpjz7am33y.rs:8:18\n  |\n8 |     let result = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp0e2mn1uz.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // TODO\n    None\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\")`', /tmp/tmpwi3t2tg8.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpchudt9gf.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    // TODO: Fix this\
    \ code to have the correct behaviour.\n    return Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    ));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"3e25960a79dbc69b674cd4ec67a72c62\")`,\n right: `Some(\"0ef78513b0cb8cef12743f5aeb35f888\"\
    )`', /tmp/tmpclbxlalx.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut m = Md5::new();\n    m.input_str(&text);\n    match text.len()\
    \ {\n        0 => None,\n        _ => Some(m.result_str())\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpxdj5w0gt.rs:5:17\n\
    \  |\n5 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let bytes = text.into_bytes();\n    let digest = Md5::digest(&bytes);\n\
    \    hex::encode(digest).to_lowercase().into()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp13cm85v7.rs:6:18\n\
    \  |\n6 |     let digest = Md5::digest(&bytes);\n  |                  ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `hex`\n --> /tmp/tmp13cm85v7.rs:7:5\n  |\n7 |     hex::encode(digest).to_lowercase().into()\n\
    \  |     ^^^ use of undeclared crate or module `hex`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(md5::compute(text).to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpor8oxe5o.rs:8:10\n  |\n8 |     Some(md5::compute(text).to_string())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let bytes = text.as_bytes();\n    if bytes.len() == 0 {\n        return\
    \ None;\n    }\n    let hash = md5::compute(bytes);\n    let str_md5 = format!(\"\
    {:x}\", hash);\n    Some(str_md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp017hop6u.rs:9:16\n  |\n9 |     let hash = md5::compute(bytes);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let hash = make_hash(text, Md5::new());\n    if hash.is_empty() {\n \
    \       None\n    } else {\n        Some(hash)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpvarxyof5.rs:5:32\n\
    \  |\n5 |     let hash = make_hash(text, Md5::new());\n  |                   \
    \             ^^^ use of undeclared type `Md5`\n\nerror[E0425]: cannot find function\
    \ `make_hash` in this scope\n --> /tmp/tmpvarxyof5.rs:5:16\n  |\n5 |     let hash\
    \ = make_hash(text, Md5::new());\n  |                ^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let bytes = Md5::digest(text.as_bytes());\n\
    \    let mut s = String::with_capacity(32);\n    for byte in bytes.iter() {\n\
    \        write!(&mut s, \"{:02x}\", byte).expect(\"Unable to write\");\n    }\n\
    \    Some(s)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpfvava83d.rs:8:17\n\
    \  |\n8 |     let bytes = Md5::digest(text.as_bytes());\n  |                 ^^^\
    \ use of undeclared type `Md5`\n\nerror[E0599]: no method named `write_fmt` found\
    \ for mutable reference `&mut String` in the current scope\n  --> /tmp/tmpfvava83d.rs:11:9\n\
    \   |\n11 |         write!(&mut s, \"{:02x}\", byte).expect(\"Unable to write\"\
    );\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut String`\n\
    \   |\n   = help: items from traits can only be used if the trait is in scope\n\
    \   = note: this error originates in the macro `write` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::fmt::Write;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // Check if the string is empty, return None if it is.\n    if text.len()\
    \ == 0 {\n        return None;\n    }\n\n    // Initialize the text as a UTF-8\
    \ byte vector.\n    let bytes = text.as_bytes();\n\n    // Create an MD5 hasher.\n\
    \    let mut hasher = Md5::new();\n\n    // Feed the bytes to the hasher and write\
    \ the output to 'output'.\n    hasher.input(bytes);\n    let output = hasher.result();\n\
    \n    // Convert the output to hex.\n    let hex = output.to_hex();\n\n    //\
    \ Return the md5 hash string\n    Some(hex)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpep5_c8co.rs:14:22\n\
    \   |\n14 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let text_as_bytes\
    \ = text.as_bytes();\n    let digest = md5::compute(text_as_bytes);\n    let mut\
    \ hex_string = String::new();\n    for byte in digest.iter() {\n        hex_string.push_str(&format!(\"\
    {:x}\", byte));\n    }\n    return Some(hex_string);\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpcmrij240.rs:9:18\n  |\n9 |     let digest = md5::compute(text_as_bytes);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => Some(format!(\"\
    {:x}\", md5::compute(text))),\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpb9kf652k.rs:7:35\n  |\n7 |         _ => Some(format!(\"{:x}\", md5::compute(text))),\n\
    \  |                                   ^^^ use of undeclared crate or module `md5`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => {\n            let\
    \ mut m = Md5::new();\n            m.input_str(&text);\n            Some(m.result_str())\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpmshwx5oq.rs:8:25\n\
    \  |\n8 |             let mut m = Md5::new();\n  |                         ^^^\
    \ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.is_empty() {\n        true => None,\n        false => {\n\
    \            let mut hasher = Md5::new();\n            hasher.input_str(&text);\n\
    \            Some(hasher.result_str())\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpdpio7j2x.rs:8:30\n\
    \  |\n8 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hash = md5::compute(text);\n\
    \    let hash_string = format!(\"{:x}\", hash);\n    Some(hash_string)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpdmrabn55.rs:8:16\n  |\n8 |     let hash = md5::compute(text);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => Some(\n        \
    \    md5::compute(text)\n                .iter()\n                .map(|x| format!(\"\
    {:02x}\", x))\n                .collect::<String>(),\n        ),\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpxjmrbu1u.rs:8:13\n  |\n8 |             md5::compute(text)\n  | \
    \            ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let res = format!(\"{:x}\", digest);\n    Some(res)\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpn5o0ciuy.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let digest = match string_to_md5_bytes(text) {\n        Some(byte_vec)\
    \ => byte_vec,\n        None => return None,\n    };\n    Some(hex::encode(digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \ --> /tmp/tmptqy_8hox.rs:9:10\n  |\n9 |     Some(hex::encode(digest))\n  |  \
    \        ^^^ use of undeclared crate or module `hex`\n\nerror[E0425]: cannot find\
    \ function `string_to_md5_bytes` in this scope\n --> /tmp/tmptqy_8hox.rs:5:24\n\
    \  |\n5 |     let digest = match string_to_md5_bytes(text) {\n  |            \
    \            ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpi1cue15b.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpfyrft39e.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let context =\
    \ md5::Context::new();\n    let digest = context.compute(text.as_bytes());\n \
    \   let digest_hex = digest.to_hex();\n    Some(digest_hex)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp1jhxwutd.rs:8:24\n  |\n8 |     let context = md5::Context::new();\n\
    \  |                        ^^^^^^^ not found in `md5`\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::task::Context;\n  |\nhelp: if you import `Context`,\
    \ refer to it directly\n  |\n8 -     let context = md5::Context::new();\n8 + \
    \    let context = Context::new();\n  | \n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(md5::compute(text).to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpx23om1p0.rs:8:10\n  |\n8 |     Some(md5::compute(text).to_string())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let digest_hex = format!(\"{:x}\", digest);\n    return Some(digest_hex);\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpnxu_asg_.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let hash = md5::compute(text);\n    if text.is_empty() {\n        None\n\
    \    } else {\n        Some(format!(\"{:x}\", hash))\n    }\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp6spdqu_2.rs:5:16\n  |\n5 |     let hash = md5::compute(text);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpnga567uq.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let res = hasher.result_str();\n\
    \    Some(res)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp9heearue.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result();\n\
    \    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpi5edd0bg.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let md5 = hasher.result_str();\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpr38t76vh.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(hex::encode(digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp04u4trs1.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n --> /tmp/tmp04u4trs1.rs:9:10\n\
    \  |\n9 |     Some(hex::encode(digest))\n  |          ^^^ use of undeclared crate\
    \ or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp_kzxoh3p.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // if the text is empty\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = md5::Context::new();\n    md5.consume(text.as_bytes());\n\
    \    let output = md5.compute();\n\n    Some(output.to_string())\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpotxxsx5d.rs:10:24\n   |\n10 |     let mut md5 = md5::Context::new();\n\
    \   |                        ^^^^^^^ not found in `md5`\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::task::Context;\n   |\nhelp: if you\
    \ import `Context`, refer to it directly\n   |\n10 -     let mut md5 = md5::Context::new();\n\
    10 +     let mut md5 = Context::new();\n   | \n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpkeovhcu_.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let context =\
    \ md5::Context::new();\n    let hash = md5::compute(context, text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hash))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmphh0gegcn.rs:9:16\n  |\n9 |     let hash = md5::compute(context,\
    \ text.as_bytes());\n  |                ^^^ use of undeclared crate or module\
    \ `md5`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `md5`\n --> /tmp/tmphh0gegcn.rs:8:24\n  |\n8 |     let context = md5::Context::new();\n\
    \  |                        ^^^^^^^ not found in `md5`\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::task::Context;\n  |\nhelp: if you import `Context`,\
    \ refer to it directly\n  |\n8 -     let context = md5::Context::new();\n8 + \
    \    let context = Context::new();\n  | \n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5_hasher\
    \ = Md5::new();\n    md5_hasher.input_str(&text);\n    Some(md5_hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp8xy6vm67.rs:8:26\n\
    \  |\n8 |     let mut md5_hasher = Md5::new();\n  |                          ^^^\
    \ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let digest = match md5::compute(text.as_bytes()) {\n        Ok(d) =>\
    \ d,\n        Err(_) => return None,\n    };\n    let string = format!(\"{:x}\"\
    , digest);\n    Some(string)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpkl8us39d.rs:5:24\n  |\n5 |     let digest = match md5::compute(text.as_bytes())\
    \ {\n  |                        ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result();\n\
    \    let mut result_string = String::new();\n    for byte in result.as_slice()\
    \ {\n        result_string += &format!(\"{:x}\", byte);\n    }\n    Some(result_string)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp6x3i2xvp.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(md5::compute(text).to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpj96lwnh2.rs:8:10\n  |\n8 |     Some(md5::compute(text).to_string())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp6mb18up1.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpr_qlwx9b.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp_j8x4jsg.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use md5::{Digest, Md5};\n    match text.is_empty() {\n        true =>\
    \ None,\n        false => {\n            let mut md5 = Md5::new();\n         \
    \   md5.input(text.as_bytes());\n            Some(format!(\"{:x}\", md5.result()))\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `md5`\n --> /tmp/tmpwzdfxg31.rs:5:9\n \
    \ |\n5 |     use md5::{Digest, Md5};\n  |         ^^^ maybe a missing crate `md5`?\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => {\n            let\
    \ md5_hash = md5::compute(text);\n            let hash = format!(\"{:x}\", md5_hash);\n\
    \            Some(hash)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp1pzizo_s.rs:8:28\n  |\n8 |             let md5_hash = md5::compute(text);\n\
    \  |                            ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hash =\
    \ Md5::new();\n    hash.input_str(&text);\n    Some(hash.result_str())\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmptlaumyeo.rs:8:20\n\
    \  |\n8 |     let mut hash = Md5::new();\n  |                    ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match hash(HashType::MD5, text.as_bytes()) {\n        Ok(hash) => {\n\
    \            let hash_string = hash.to_hex();\n            Some(hash_string)\n\
    \        }\n        Err(_) => None,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashType`\n -->\
    \ /tmp/tmpoyov5nw1.rs:5:16\n  |\n5 |     match hash(HashType::MD5, text.as_bytes())\
    \ {\n  |                ^^^^^^^^ use of undeclared type `HashType`\n\nerror[E0425]:\
    \ cannot find function `hash` in this scope\n --> /tmp/tmpoyov5nw1.rs:5:11\n \
    \ |\n5 |     match hash(HashType::MD5, text.as_bytes()) {\n  |           ^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this function\n  |\n\
    1 | use std::ptr::hash;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp5zwanfu0.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let result = format!(\"{:x}\", digest);\n    Some(result)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpbxzdnkv6.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    let output = hasher.result_str();\n\
    \    Some(output)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp0l40ftr6.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let res = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", res))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp_5k9ism1.rs:8:15\n  |\n8 |     let res = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let result = format!(\"{:x}\", digest);\n    Some(result)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp9yupfnyo.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpiflxjv1y.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    hasher.input_str(&text);\n    let result\
    \ = hasher.result_str();\n    if result.is_empty() {\n        None\n    } else\
    \ {\n        Some(result)\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp241bk1zl.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.is_empty() {\n        true => None,\n        false => Some(md5::compute(text).to_string()),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmptfap4r8j.rs:7:23\n  |\n7 |         false => Some(md5::compute(text).to_string()),\n\
    \  |                       ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hashed = md5::compute(text);\n\
    \    let hashed_string = hex::encode(hashed);\n    Some(hashed_string)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpy7ck0wrk.rs:8:18\n  |\n8 |     let hashed = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n --> /tmp/tmpy7ck0wrk.rs:9:25\n\
    \  |\n9 |     let hashed_string = hex::encode(hashed);\n  |                  \
    \       ^^^ use of undeclared crate or module `hex`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpc_m7wl2t.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut md5 = Md5::new();\n    if !text.is_empty() {\n        md5.input_str(&text);\n\
    \        Some(md5.result_str())\n    } else {\n        None\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp4v_mrnk0.rs:5:19\n\
    \  |\n5 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use md5::{Digest, Md5};\n    if text.is_empty() {\n        return None;\n\
    \    }\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `md5`\n --> /tmp/tmp5l6tfats.rs:5:9\n \
    \ |\n5 |     use md5::{Digest, Md5};\n  |         ^^^ maybe a missing crate `md5`?\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let input = text.as_bytes();\n\
    \    let mut output = [0; 16];\n    let mut md5 = Md5::new();\n    md5.input(input);\n\
    \    md5.result(&mut output);\n    Some(format!(\"{:x}\", output))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpogkx501v.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror[E0277]: the trait bound `[{integer}; 16]: LowerHex` is not\
    \ satisfied\n   --> /tmp/tmpogkx501v.rs:13:26\n    |\n13  |     Some(format!(\"\
    {:x}\", output))\n    |                          ^^^^^^ the trait `LowerHex` is\
    \ not implemented for `[{integer}; 16]`\n    |\n    = help: the following other\
    \ types implement trait `LowerHex`:\n              &T\n              &mut T\n\
    \              NonZeroI128\n              NonZeroI16\n              NonZeroI32\n\
    \              NonZeroI64\n              NonZeroI8\n              NonZeroIsize\n\
    \            and 21 others\nnote: required by a bound in `ArgumentV1::<'a>::new_lower_hex`\n\
    \    = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0433.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpdez66njy.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5 =\
    \ Md5::new();\n    md5.input_str(&text);\n    let output = md5.result_str();\n\
    \    Some(output)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpwzzzh9ck.rs:8:19\n\
    \  |\n8 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let mut res = String::new();\n    for byte in digest.0.iter() {\n       \
    \ res.push_str(&format!(\"{:x}\", byte));\n    }\n    Some(res)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp4qaf7lek.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpv_rl33a2.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpy1gr914o.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let text = text.as_bytes();\n    let digest = match md5::compute(text)\
    \ {\n        Ok(digest) => digest,\n        Err(_) => return None,\n    };\n \
    \   let digest = digest.to_string();\n    Some(digest)\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp_39xcef9.rs:6:24\n  |\n6 |     let digest = match md5::compute(text)\
    \ {\n  |                        ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp13hoqjwu.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    if text.is_empty() {\n        return\
    \ None;\n    }\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpa9fbrl2s.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result();\n\
    \    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp6yrjyhdk.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // Not an empty string\n    if text.len() > 0 {\n        let mut digest\
    \ = Md5::new();\n        digest.input_str(&text);\n        Some(digest.result_str())\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpltw958y9.rs:7:26\n\
    \  |\n7 |         let mut digest = Md5::new();\n  |                          ^^^\
    \ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut res = String::new();\n    if text.is_empty() {\n        return\
    \ None;\n    }\n    let digest = md5::compute(text);\n    for b in digest.iter()\
    \ {\n        res.push_str(&format!(\"{:x}\", b));\n    }\n    Some(res)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp1z0frbbm.rs:9:18\n  |\n9 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // If a given text is empty, return None.\n    if text.is_empty() {\n\
    \        return None;\n    }\n\n    // Else, perform MD5 hashing process on a\
    \ given text.\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let result = hasher.result();\n\n    // Then, convert a hash digest to the\
    \ hexadecimal string.\n    let hex_string = result.iter().map(|b| format!(\"{:02x}\"\
    , b)).collect();\n\n    Some(hex_string)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpbcjovmtl.rs:11:22\n\
    \   |\n11 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let text_md5 =\
    \ md5::compute(text);\n    Some(format!(\"{:x}\", text_md5))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpzo74y0o1.rs:8:20\n  |\n8 |     let text_md5 = md5::compute(text);\n\
    \  |                    ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result();\n\
    \    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpvmu2d_ka.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result();\n\
    \    Some(format!(\"{:x}\", result))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpo5cgwnx6.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpo574atov.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpkgkbf4gb.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let hash = md5::compute(text);\n    let md5 = format!(\"{:x}\", hash);\n\
    \    if md5.is_empty() {\n        None\n    } else {\n        Some(md5)\n    }\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpt6d5ozsr.rs:5:16\n  |\n5 |     let hash = md5::compute(text);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5_buffer\
    \ = [0u8; 16];\n    md5::Context::new().chain(text).compute(&mut md5_buffer);\n\
    \    let digest = md5_buffer.to_hex();\n    Some(digest)\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpp8ua0a6k.rs:9:10\n  |\n9 |     md5::Context::new().chain(text).compute(&mut\
    \ md5_buffer);\n  |          ^^^^^^^ not found in `md5`\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::task::Context;\n  |\nhelp: if you import `Context`,\
    \ refer to it directly\n  |\n9 -     md5::Context::new().chain(text).compute(&mut\
    \ md5_buffer);\n9 +     Context::new().chain(text).compute(&mut md5_buffer);\n\
    \  | \n\nerror[E0599]: no method named `to_hex` found for array `[u8; 16]` in\
    \ the current scope\n  --> /tmp/tmpp8ua0a6k.rs:10:29\n   |\n10 |     let digest\
    \ = md5_buffer.to_hex();\n   |                             ^^^^^^ help: there\
    \ is an associated function with a similar name: `to_vec`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let mut md5_str = String::new();\n    for byte in digest.iter() {\n     \
    \   write!(&mut md5_str, \"{:02x}\", byte).expect(\"Could not write to string\"\
    );\n    }\n    Some(md5_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpzzjdm71n.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0599]:\
    \ no method named `write_fmt` found for mutable reference `&mut String` in the\
    \ current scope\n  --> /tmp/tmpzzjdm71n.rs:11:9\n   |\n11 |         write!(&mut\
    \ md5_str, \"{:02x}\", byte).expect(\"Could not write to string\");\n   |    \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut String`\n\
    \   |\n   = help: items from traits can only be used if the trait is in scope\n\
    \   = note: this error originates in the macro `write` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::fmt::Write;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5 = md5::compute(text);\n\
    \    let mut buf = [0; 16];\n    buf.copy_from_slice(&md5);\n    Some(hex::encode(buf))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp6aaplfsn.rs:8:15\n  |\n8 |     let md5 = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmp6aaplfsn.rs:11:10\n\
    \   |\n11 |     Some(hex::encode(buf))\n   |          ^^^ use of undeclared crate\
    \ or module `hex`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let digest = match digest::digest(&digest::MD5, text.as_bytes()) {\n\
    \        Ok(digest) => digest,\n        Err(_) => return None,\n    };\n    return\
    \ Some(format!(\"{:x}\", digest));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp3ppn6lqr.rs:5:24\n  |\n5 |     let digest = match digest::digest(&digest::MD5,\
    \ text.as_bytes()) {\n  |                        ^^^^^^ use of undeclared crate\
    \ or module `digest`\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `digest`\n --> /tmp/tmp3ppn6lqr.rs:5:40\n  |\n5 |     let digest =\
    \ match digest::digest(&digest::MD5, text.as_bytes()) {\n  |                 \
    \                       ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5 = md5::compute(text);\n\
    \    let mut md5_str = String::with_capacity(32);\n    for byte in md5.0.iter()\
    \ {\n        write!(&mut md5_str, \"{:02x}\", byte).unwrap();\n    }\n    Some(md5_str)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp1nshfo73.rs:8:15\n  |\n8 |     let md5 = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror[E0599]:\
    \ no method named `write_fmt` found for mutable reference `&mut String` in the\
    \ current scope\n  --> /tmp/tmp1nshfo73.rs:11:9\n   |\n11 |         write!(&mut\
    \ md5_str, \"{:02x}\", byte).unwrap();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `&mut String`\n   |\n   = help: items from traits can only\
    \ be used if the trait is in scope\n   = note: this error originates in the macro\
    \ `write` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n   |\n1  | use std::fmt::Write;\n   |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5 = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", md5))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpb31377wr.rs:8:15\n  |\n8 |     let md5 = md5::compute(text);\n \
    \ |               ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5_hasher\
    \ = Md5::new();\n    let mut bytes = text.into_bytes();\n    md5_hasher.input(&mut\
    \ bytes);\n    return Some(format!(\"{:032x}\", md5_hasher.result()));\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp2jsr2my5.rs:8:22\n\
    \  |\n8 |     let md5_hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut md5 =\
    \ Md5::new();\n    md5.input_str(&text);\n    Some(md5.result_str())\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpj1d05hva.rs:8:19\n\
    \  |\n8 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpw6iecpz2.rs:5:18\n  |\n5 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpdoonkqj4.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let bytes = text.as_bytes();\n    if bytes.len() == 0 {\n        return\
    \ None;\n    }\n    let mut m = Md5::new();\n    m.input(bytes);\n    Some(format!(\"\
    {:x}\", m.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpt85jjnym.rs:9:17\n\
    \  |\n9 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let output = hasher.result();\n\
    \    return Some(format!(\"{:x}\", output));\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpl9v06o63.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpbp10cvo9.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpya4f0s6j.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpjf5p4v4z.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let input = text.as_bytes();\n\
    \    let mut output = [0; 16];\n    let mut out = MD5::default();\n    out.input(input);\n\
    \    out.result(&mut output);\n    let output_str = format!(\"{:x}\", output);\n\
    \    Some(output_str)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n  --> /tmp/tmpmv05lp_u.rs:10:19\n\
    \   |\n10 |     let mut out = MD5::default();\n   |                   ^^^ use\
    \ of undeclared type `MD5`\n\nerror[E0277]: the trait bound `[{integer}; 16]:\
    \ LowerHex` is not satisfied\n   --> /tmp/tmpmv05lp_u.rs:13:38\n    |\n13  | \
    \    let output_str = format!(\"{:x}\", output);\n    |                      \
    \                ^^^^^^ the trait `LowerHex` is not implemented for `[{integer};\
    \ 16]`\n    |\n    = help: the following other types implement trait `LowerHex`:\n\
    \              &T\n              &mut T\n              NonZeroI128\n         \
    \     NonZeroI16\n              NonZeroI32\n              NonZeroI64\n       \
    \       NonZeroI8\n              NonZeroIsize\n            and 21 others\nnote:\
    \ required by a bound in `ArgumentV1::<'a>::new_lower_hex`\n    = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(format!(\"\
    {:x}\", md5::compute(text)))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpuk73uwjk.rs:8:26\n  |\n8 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(format!(\"\
    {:x}\", md5::compute(text)))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpqivft0pg.rs:8:26\n  |\n8 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpznbd85ho.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpbjh6p9zg.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let bytes = text.as_bytes();\n\
    \    let mut hasher = Md5::new();\n    hasher.input(bytes);\n    let digest =\
    \ hasher.result();\n    let md5string = format!(\"{:x}\", digest);\n    Some(md5string)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpwdwrom1h.rs:9:22\n\
    \  |\n9 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp2fmiyuqw.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let result = std::process::Command::new(\"\
    sh\")\n        .arg(\"-c\")\n        .arg(format!(\"echo -n {} | md5sum | cut\
    \ -d \\\" \\\" -f 1\", text))\n        .output()\n        .expect(\"Failed to\
    \ execute process\");\n    Some(\n        String::from_utf8(result.stdout)\n \
    \           .expect(\"Output is not valid UTF-8\")\n            .trim()\n    \
    \        .to_string(),\n    )\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let digest = hasher.result();\n\
    \    let hex = format!(\"{:x}\", digest);\n    return Some(hex);\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpczl8q9zi.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp8jntv1rb.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut digest\
    \ = Md5::new();\n    digest.input_str(&text);\n    let hash = digest.result_str();\n\
    \    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpq0y55mmb.rs:8:22\n\
    \  |\n8 |     let mut digest = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut m = Md5::new();\n    m.input_str(&text);\n    if text.is_empty()\
    \ {\n        None\n    } else {\n        Some(m.result_str())\n    }\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpn4_8z25x.rs:5:17\n\
    \  |\n5 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let mut md5_string = String::new();\n    for digit in digest.iter() {\n \
    \       write!(&mut md5_string, \"{:02x}\", digit).expect(\"Error trying to create\
    \ md5 string\");\n    }\n    Some(md5_string)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpxlur2rbe.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror[E0599]:\
    \ no method named `write_fmt` found for mutable reference `&mut String` in the\
    \ current scope\n  --> /tmp/tmpxlur2rbe.rs:11:9\n   |\n11 |         write!(&mut\
    \ md5_string, \"{:02x}\", digit).expect(\"Error trying to create md5 string\"\
    );\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in\
    \ `&mut String`\n   |\n   = help: items from traits can only be used if the trait\
    \ is in scope\n   = note: this error originates in the macro `write` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use\
    \ std::fmt::Write;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0433, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    let res = hasher.result_str();\n\
    \    Some(res)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmprou6gyis.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let result = md5::compute(text);\n\
    \    let result_hex_string = format!(\"{:x}\", result);\n    Some(result_hex_string)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp1guvh8wt.rs:8:18\n  |\n8 |     let result = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let digest = md5::compute(text);\n\
    \    let mut hex_str = String::with_capacity(32);\n    for byte in digest.iter()\
    \ {\n        hex_str.push_str(&format!(\"{:02x}\", byte));\n    }\n    Some(hex_str)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpaj3y4qzv.rs:8:18\n  |\n8 |     let digest = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    hasher.input_str(&text);\n    hasher.result_str().map(|x|\
    \ x.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpcc_daxnw.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    // Return None if 'text' is an empty string.\n    if text.len() == 0\
    \ {\n        return None;\n    }\n\n    // Compute the md5 hash of 'text' and\
    \ return it.\n    let mut md5 = Md5::new();\n    md5.input_str(&text);\n    Some(md5.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmphpy6xsnj.rs:11:19\n\
    \   |\n11 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    let mut hasher = Md5::new();\n    if text.is_empty() {\n        return\
    \ None;\n    }\n    hasher.input_str(&text);\n    Some(hasher.result_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpcpls8flx.rs:5:22\n\
    \  |\n5 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    match text.len() {\n        0 => None,\n        _ => {\n            let\
    \ mut hasher = Md5::new();\n            hasher.input_str(&text);\n           \
    \ Some(hasher.result_str())\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmphg188lk5.rs:8:30\n\
    \  |\n8 |             let mut hasher = Md5::new();\n  |                      \
    \        ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hashed = md5::compute(text);\n\
    \    let mut hashed_string = String::new();\n    for i in hashed.0.iter() {\n\
    \        hashed_string += &format!(\"{:x}\", i);\n    }\n    Some(hashed_string)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpdydvwtg8.rs:8:18\n  |\n8 |     let hashed = md5::compute(text);\n\
    \  |                  ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(format!(\"\
    {:x}\", md5::compute(text)))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpzfoox8hu.rs:8:26\n  |\n8 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher\
    \ = Md5::new();\n    hasher.input(text.as_bytes());\n    Some(format!(\"{:x}\"\
    , hasher.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpvic4nynf.rs:8:22\n\
    \  |\n8 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let mut m = Md5::new();\n\
    \    m.input_str(&text);\n    Some(m.result_str())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp656dk07y.rs:8:17\n\
    \  |\n8 |     let mut m = Md5::new();\n  |                 ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    use md5::Digest;\n    use md5::Md5;\n\n    if text.is_empty() {\n   \
    \     return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hex::encode(hasher.result()))\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `md5`\n --> /tmp/tmpvmblfay0.rs:5:9\n \
    \ |\n5 |     use md5::Digest;\n  |         ^^^ maybe a missing crate `md5`?\n\n\
    error[E0432]: unresolved import `md5`\n --> /tmp/tmpvmblfay0.rs:6:9\n  |\n6 |\
    \     use md5::Md5;\n  |         ^^^ maybe a missing crate `md5`?\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `hex`\n  --> /tmp/tmpvmblfay0.rs:14:10\n\
    \   |\n14 |     Some(hex::encode(hasher.result()))\n   |          ^^^ use of undeclared\
    \ crate or module `hex`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0432, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(format!(\"\
    {:x}\", md5::compute(text)))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpp0w2aqcw.rs:8:26\n  |\n8 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    Some(format!(\"\
    {:x}\", md5::compute(text)))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpkvqxbx7j.rs:8:26\n  |\n8 |     Some(format!(\"{:x}\", md5::compute(text)))\n\
    \  |                          ^^^ use of undeclared crate or module `md5`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let hash = md5::compute(text);\n\
    \    Some(format!(\"{:x}\", hash))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp4v556esh.rs:8:16\n  |\n8 |     let hash = md5::compute(text);\n\
    \  |                ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfn string_to_md5(text: String) -> Option<String>\
    \ {\n    if text.is_empty() {\n        return None;\n    }\n    let md5_hash =\
    \ md5::compute(text);\n    let md5_hash_string = format!(\"{:x}\", md5_hash);\n\
    \    Some(md5_hash_string)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpwod49mt0.rs:8:20\n  |\n8 |     let md5_hash = md5::compute(text);\n\
    \  |                    ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
