name: HumanEval_15_string_sequence
language: rust
results:
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    format!(\"{}\"\
    , 0..=n).replace(\" \", \"\")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpdfgh5t11.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).replace(\"\
    \ \", \"\")\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `RangeInclusive<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for x in 0..n+1 {\n        result.push_str(&x.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n        s.push('\
    \ ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..=n {\n        s.push_str(&i.to_string());\n        s.push(' ');\n\
    \    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..n + 1 {\n        sequence += &i.to_string();\n\
    \        sequence += \" \";\n    }\n    sequence\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpc58zukf6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    if n == 0 {\n\
    \        \"0\".to_string()\n    } else {\n        let mut s = \"\".to_string();\n\
    \        for i in 0..n + 1 {\n            s.push_str(&i.to_string());\n      \
    \      s.push(' ');\n        }\n        s.pop();\n        s\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut sequence:\
    \ Vec<String> = vec![];\n    for i in 0..n + 1 {\n        sequence.push(i.to_string());\n\
    \    }\n    return sequence.join(\" \");\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut string\
    \ = String::new();\n    for i in 0..n+1 {\n        if i > 0 {\n            string.push('\
    \ ');\n        }\n        string.push_str(&i.to_string());\n    }\n    string\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut xs =\
    \ Vec::new();\n    for i in 0..n + 1 {\n        xs.push(i.to_string());\n    }\n\
    \    xs.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = \"\
    \".to_string();\n    let mut i = 0;\n    while i <= n {\n        s = s + \" \"\
    \ + &i.to_string();\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" 0\"`,\n right: `\"0\"`', /tmp/tmpz_u6sx6j.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut output\
    \ = String::new();\n    for i in 0..n + 1 {\n        output.push_str(&i.to_string());\n\
    \        output.push(' ');\n    }\n    output.pop();\n    output\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut res =\
    \ String::new();\n    for i in 0..n + 1 {\n        res.push_str(&i.to_string());\n\
    \        res.push(' ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut i = 0;\n    while i <= n {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpu62mjwmm.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).into_iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut res =\
    \ String::new();\n    for i in 0..n+1 {\n        res.push_str(&format!(\"{} \"\
    , i));\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp4c_icvgr.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut v = Vec::new();\n\
    \    for i in 0..(n + 1) {\n        v.push(i.to_string());\n    }\n    v.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..=n {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&format!(\"\
    {} \", i))\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp4pvetefv.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut current = 0;\n    while current <= n {\n        s.push_str(&current.to_string());\n\
    \        if current != n {\n            s.push(' ');\n        }\n        current\
    \ += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut sequence:\
    \ Vec<String> = vec![];\n    for i in 0..n + 1 {\n        sequence.push(i.to_string());\n\
    \    }\n    sequence.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..=n {\n        s.push_str(&i.to_string());\n        s.push(' ');\n\
    \    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \", i));\n    }\n \
    \   return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpb1z07jgr.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut nums\
    \ = (0..n+1).collect::<Vec<isize>>();\n    nums.sort();\n    let mut res = String::new();\n\
    \    for (i, v) in nums.iter().enumerate() {\n        if i != 0 {\n          \
    \  res.push(' ');\n        }\n        res.push_str(&v.to_string());\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let numbers:\
    \ Vec<isize> = (0..n + 1).collect();\n    numbers.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).into_iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \", i));\n    }\n \
    \   return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplexyggmb.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..=n {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n+1 {\n        s.push_str(&i.to_string());\n        s.push('\
    \ ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut str_vec\
    \ = Vec::new();\n    for i in 0..n+1 {\n        str_vec.push(i.to_string());\n\
    \    }\n    str_vec.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut numbers\
    \ = String::new();\n    for x in 0..n+1 {\n        numbers.push_str(&format!(\"\
    {} \", x));\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpma6ivapv.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut v = vec![];\n\
    \    for i in 0..n + 1 {\n        v.push(i.to_string());\n    }\n    v.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut out =\
    \ String::new();\n    for i in 0..n + 1 {\n        out.push_str(&i.to_string());\n\
    \        out.push(' ');\n    }\n    out.pop();\n    out\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu043nm6s.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpu_cqdj0d.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).into_iter().map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut v = Vec::new();\n\
    \    for i in 0..(n + 1) {\n        v.push(i.to_string());\n    }\n    v.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut sequence:\
    \ Vec<String> = vec![];\n    for i in 0..=n {\n        sequence.push(i.to_string());\n\
    \    }\n    sequence.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut i = 0;\n    while i <= n {\n        if i > 0 {\n\
    \            result.push(' ');\n        }\n        result.push_str(&i.to_string());\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut numbers\
    \ = String::new();\n    for i in 0..n+1 {\n        numbers.push_str(&format!(\"\
    {} \", i));\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpj3u9h8un.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut output\
    \ = String::new();\n    for i in 0..=n {\n        output.push_str(&i.to_string());\n\
    \        output.push(' ');\n    }\n    output.pop();\n    output\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s += format!(\"{} \", i).as_str();\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmph6iv9j92.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let numbers:\
    \ Vec<String> = (0..n + 1).map(|x| x.to_string()).collect();\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).into_iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).into_iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpc7iuz93c.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..=n {\n        s.push_str(&i.to_string());\n        s.push(' ');\n\
    \    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut res =\
    \ String::new();\n    for i in 0..n+1 {\n        res.push_str(&format!(\"{} \"\
    , i));\n    }\n    res\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp1zxsa3ua.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut out =\
    \ String::new();\n    for i in 0..n + 1 {\n        out += &i.to_string();\n  \
    \      out += \" \";\n    }\n    out.trim().to_string()\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|v|\
    \ v.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..=n {\n        if i > 0 {\n            s.push(' ');\n        }\n\
    \        s.push_str(&i.to_string());\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).into_iter().map(|num|\
    \ num.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n        s.push('\
    \ ');\n    }\n    // remove last space character\n    s.pop();\n    s\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut output\
    \ = \"\".to_string();\n    for i in 0..n + 1 {\n        output = format!(\"{}\
    \ {}\", output, i);\n    }\n    return output.trim().to_string();\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \", i));\n    }\n \
    \   s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp8trsg9f4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).into_iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    if n <= 0 {\n\
    \        return \"0\".to_string();\n    }\n    let mut out = (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \");\n    out.push(' ');\n    out\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 2 3 \"`,\n right: `\"0 1 2 3\"`', /tmp/tmp4do8su5p.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    if n < 0 {\n\
    \        panic!(\"string_sequence was called with {}\", n);\n    }\n    let mut\
    \ rv = String::new();\n    for i in 0..n + 1 {\n        rv.push_str(&i.to_string());\n\
    \        rv.push(' ');\n    }\n    rv.pop();\n    rv\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let string_array:\
    \ Vec<String> = (0..n + 1).map(|x| x.to_string()).collect();\n    string_array.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).collect::<Vec<isize>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpm085ermm.rs:7:37\n  |\n7 |   \
    \  (0..=n).collect::<Vec<isize>>().join(\" \")\n  |                          \
    \           ^^^^ method cannot be called on `Vec<isize>` due to unsatisfied trait\
    \ bounds\n  |\n  = note: the following trait bounds were not satisfied:\n    \
    \      `[isize]: Join<_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut i = 0;\n    while i <= n {\n        s.push_str(&format!(\"{} \",\
    \ i));\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpmx3nrses.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        if i != 0 {\n            s.push(' ');\n    \
    \    }\n        s.push_str(&i.to_string());\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    // TODO\n   \
    \ let mut out = String::new();\n    for i in 0..=n {\n        out.push_str(&i.to_string());\n\
    \        out.push(' ');\n    }\n    out.pop();\n    out\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut nums\
    \ = vec![];\n    for i in 0..n+1 {\n        nums.push(i.to_string());\n    }\n\
    \    nums.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut i = 0;\n    while i <= n {\n        result.push_str(&format!(\"\
    {} \", i));\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpgipweep2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut v = Vec::new();\n\
    \    for i in 0..(n + 1) {\n        v.push(i.to_string());\n    }\n    v.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut i = 0;\n    while i <= n {\n        result.push_str(&i.to_string());\n\
    \        if i != n {\n            result.push(' ');\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..=n {\n        s += &i.to_string();\n        s += \" \";\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpt4s0p07j.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    return (0..n\
    \ + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\" \");\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut res =\
    \ String::new();\n    for i in 0..n + 1 {\n        res.push_str(&i.to_string());\n\
    \        res.push(' ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..=n {\n        s += &i.to_string();\n        s += \" \";\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpq9qk74gp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut ret =\
    \ \"\".to_string();\n    for i in 0..n + 1 {\n        ret = ret + &i.to_string()\
    \ + \" \";\n    }\n    ret\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpboycac9d.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        if i != 0 {\n            result.push('\
    \ ');\n        }\n        result.push_str(&i.to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpk8w9ku61.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let v: Vec<String>\
    \ = (0..n + 1).map(|x| x.to_string()).collect();\n    v.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_1vh85sj.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|num|\
    \ num.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut rng =\
    \ 0..n + 1;\n    let mut v = Vec::new();\n    for i in rng {\n        v.push(i.to_string());\n\
    \    }\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut seq =\
    \ String::new();\n    for i in 0..n + 1 {\n        seq.push_str(&i.to_string());\n\
    \        seq.push(' ');\n    }\n    seq.pop();\n    seq\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n+1 {\n        write!(&mut s, \"{} \", i).unwrap();\n    }\n\
    \    return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `write_fmt` found for mutable reference `&mut\
    \ String` in the current scope\n --> /tmp/tmp4gkurym6.rs:9:9\n  |\n9 |       \
    \  write!(&mut s, \"{} \", i).unwrap();\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `&mut String`\n  |\n  = help: items from traits can only\
    \ be used if the trait is in scope\n  = note: this error originates in the macro\
    \ `write` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n  |\n1 | use std::fmt::Write;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|num|\
    \ num.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n        s.push('\
    \ ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut seq =\
    \ vec![];\n    for i in 0..n + 1 {\n        seq.push(i.to_string());\n    }\n\
    \    seq.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut output\
    \ = String::new();\n    for i in 0..n+1 {\n        if i != 0 {\n            output.push('\
    \ ');\n        }\n        output.push_str(&i.to_string());\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \", i));\n    }\n \
    \   return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpif3nl7ey.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \", i));\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp3lu3r7si.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut xs =\
    \ Vec::new();\n    for i in 0..n + 1 {\n        xs.push(i.to_string());\n    }\n\
    \    xs.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..=n {\n        s.push_str(&i.to_string());\n        s.push(' ');\n\
    \    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpqdlogii4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    return result.trim().to_string();\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s += &i.to_string();\n        s += \" \";\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpwz55ef4s.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    //unimplemented!()\n\
    \    let range = 0..n + 1;\n    let mut result = range.into_iter().map(|x| x.to_string()).collect::<Vec<String>>();\n\
    \    result.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut str =\
    \ String::new();\n    for i in 0..n+1 {\n        if i != 0 {\n            str.push('\
    \ ');\n        }\n        str.push_str(&i.to_string());\n    }\n    str\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut vec:\
    \ Vec<String> = vec![];\n    for i in 0..n+1 {\n        vec.push(i.to_string());\n\
    \    }\n    vec.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut numbers\
    \ = Vec::new();\n    for i in 0..(n + 1) {\n        numbers.push(i.to_string());\n\
    \    }\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let nums: Vec<String>\
    \ = (0..(n + 1)).map(|x| x.to_string()).collect();\n    nums.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..=n {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|num|\
    \ num.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    if n < 0 {\n\
    \        panic!(\"negative number passed to string_sequence\");\n    }\n    let\
    \ mut result = String::new();\n    for i in 0..(n + 1) {\n        if !result.is_empty()\
    \ {\n            result.push(' ');\n        }\n        result.push_str(&i.to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = Vec::new();\n    for i in 0..n + 1 {\n        result.push(i.to_string());\n\
    \    }\n    result.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    if n < 0 {\n\
    \        panic!(\"string_sequence called with negative argument\");\n    }\n \
    \   let mut s = String::new();\n    for i in 0..n + 1 {\n        s += &i.to_string();\n\
    \        s += \" \";\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp2pyseaz_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut buf =\
    \ String::new();\n    for i in 0..n + 1 {\n        buf.push_str(&format!(\"{}\
    \ \", i));\n    }\n    buf\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpy_jsu8t4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n        s.push('\
    \ ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut seq =\
    \ Vec::new();\n    for i in 0..n + 1 {\n        seq.push(i.to_string());\n   \
    \ }\n    seq.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    use std::str::FromStr;\n\
    \    let mut v: Vec<String> = (0..n + 1).map(|i| i.to_string()).collect();\n \
    \   v.sort();\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 10 2 3 4 5 6 7 8 9\"`,\n right: `\"0 1 2 3 4 5 6 7 8 9 10\"`', /tmp/tmpu7w2chqz.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n+1 {\n        s.push_str(&i.to_string());\n        s.push('\
    \ ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|e|\
    \ e.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    // remove last space\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp930yfhn6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut seq =\
    \ String::new();\n    for i in 0..=n {\n        if i > 0 {\n            seq.push('\
    \ ');\n        }\n        seq.push_str(&i.to_string());\n    }\n    seq\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut i = 0;\n    while i <= n {\n        result +=\
    \ &i.to_string();\n        if i != n {\n            result += \" \";\n       \
    \ }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n        s.push('\
    \ ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    // this is a\
    \ test for the naive approach which fails for large values of n (>= 10^18)\n \
    \   // let mut s = String::new();\n    // for i in 0..n + 1 {\n    //     s.push_str(&format!(\"\
    {} \", i));\n    // }\n    // s.pop();\n    // s\n\n    // below uses the summation\
    \ formula to find the last number n + 1\n    let last_number = n * (n + 1) / 2;\n\
    \    let mut s = String::new();\n    for i in 0..last_number + 1 {\n        s.push_str(&format!(\"\
    {} \", i));\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 2 3 4 5 6\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpgbd3_h85.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    if n < 0 {\n\
    \        panic!(\"n must be positive.\")\n    }\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut out =\
    \ String::new();\n    for i in 0..n + 1 {\n        out.push_str(&format!(\"{}\
    \ \", i));\n    }\n    out\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmprik4_bkd.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        if i != 0 {\n            s.push(' ');\n    \
    \    }\n        s.push_str(&i.to_string());\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut i = 0;\n\
    \    let mut s = String::new();\n    while i <= n {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpqwzbsw7g.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut string\
    \ = String::new();\n    for i in 0..n + 1 {\n        string.push_str(&format!(\"\
    {} \", i));\n    }\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpvw3aem61.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut v = Vec::new();\n\
    \    for i in 0..n+1 {\n        v.push(i.to_string());\n    }\n    return v.join(\"\
    \ \");\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|v|\
    \ v.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        if i > 0 {\n            s.push(' ');\n     \
    \   }\n        s.push_str(&i.to_string());\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..=n {\n        sequence.push_str(&i.to_string());\n\
    \        sequence.push(' ');\n    }\n    sequence.pop();\n    sequence\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    // TODO: Write\
    \ me!\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpam683jqt.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    if n == 0 {\n\
    \        return \"0\".to_string();\n    }\n\n    let mut res = \"\".to_string();\n\
    \    for i in 0..n+1 {\n        res = format!(\"{} {}\", res, i);\n    }\n   \
    \ return res;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" 0 1 2 3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp7ls56vxc.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    let mut s = String::new();\n\
    \    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \", i));\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpjdhgtd3t.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// '0'\n/// >>> string_sequence(5)\n\
    /// '0 1 2 3 4 5'\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
