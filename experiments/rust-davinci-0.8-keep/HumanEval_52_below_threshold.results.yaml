name: HumanEval_52_below_threshold
language: rust
results:
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    false\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphjg14hdy.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && *x < t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkka6i0h4.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpueyflyw3.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut ret = true;\n    for x in l {\n        if x >= t {\n        \
    \    ret = false;\n            break;\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    /* Fill in code here */\n    let mut counter = 0;\n    let mut result\
    \ = true;\n    while counter < l.len() {\n        if l[counter] > t {\n      \
    \      result = false;\n        }\n        counter += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkjbcl673.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for x in l {\n        if x > t {\n      \
    \      result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbqyhzhn3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && x < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptk6lhy5z.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0iy25os1.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwdh5lvzv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    fold_left(l, true, |x, y| x && y < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fold_left` in this scope\n --> /tmp/tmpf4ijfd9_.rs:7:5\n\
    \  |\n7 |     fold_left(l, true, |x, y| x && y < t)\n  |     ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut flag = true;\n    for i in l {\n        if i > t {\n        \
    \    flag = false;\n            break;\n        }\n    }\n    flag\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnzpwsxvb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut l = l;\n    let mut flag = true;\n    while !l.is_empty() {\n\
    \        if l.pop().unwrap() > t {\n            flag = false;\n        }\n   \
    \ }\n    flag\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpek9nhjby.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut found = false;\n    for x in l {\n        if x > t {\n      \
    \      found = true;\n            break;\n        }\n    }\n    !found\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa2zkbf5z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|i| *i < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    below_threshold_helper(l, t, 0)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `below_threshold_helper` in this scope\n\
    \ --> /tmp/tmpp80p5c52.rs:7:5\n  |\n7 |     below_threshold_helper(l, t, 0)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6akrjcrv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in &l {\n        if *i > t {\n            return false;\n     \
    \   }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpogx52_kr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi2zzbnjo.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    if l.len() == 0 {\n        return true;\n    }\n    if l[0] < t {\n \
    \       below_threshold(l[1..].to_vec(), t)\n    } else {\n        false\n   \
    \ }\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for &x in l.iter() {\n        if x >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp250srn4j.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO: Implement this function.\n    let mut new_list: Vec<isize> =\
    \ Vec::new();\n    for i in l {\n        if i < t {\n            new_list.push(i);\n\
    \        }\n    }\n    if new_list.len() == l.len() {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpwbb2t8it.rs:14:26\n\
    \    |\n6   | fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    |   \
    \                 - move occurs because `l` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n...\n9   |     for i in l {\n    |         \
    \     - `l` moved due to this implicit call to `.into_iter()`\n...\n14  |    \
    \ if new_list.len() == l.len() {\n    |                          ^^^^^^^ value\
    \ borrowed here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `l`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n9   |   \
    \  for i in &l {\n    |              +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    if l.len() == 0 {\n        return true;\n    }\n    if l[0] >= t {\n\
    \        return false;\n    }\n    return below_threshold(Vec::from(&l[1..]),\
    \ t);\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in &l {\n        if i >= &t {\n            return false;\n    \
    \    }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    foldl(l, true, |x, y| x && y < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `foldl` in this scope\n --> /tmp/tmpr6vgnyd0.rs:7:5\n\
    \  |\n7 |     foldl(l, true, |x, y| x && y < t)\n  |     ^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO: Implement this function.\n    false\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3mgnba51.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // BEGIN_SOLUTION\n    // As long as the list is not empty and its first\
    \ element is below the threshold, we keep\n    // checking the tail of the list.\n\
    \    l.into_iter().fold(true, |b, e| b && e < t)\n    // END_SOLUTION\n}\n\nfn\
    \ main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut flag = true;\n    for i in l {\n        if i > t {\n        \
    \    flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj1wxt3_4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    if\
    \ sum < t {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp7qkm9cf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Unimplemented!()\n    if l.len() == 0 {\n        return true;\n  \
    \  }\n    else if l[0] > t {\n        return false;\n    }\n    else {\n     \
    \   let mut n = l.clone();\n        n.remove(0);\n        return below_threshold(n,\
    \ t);\n    }\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfbnrc8k5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3c3yp7hh.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|i| *i < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().any(|&x| x > t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpotzjzhbe.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    //foldl (lambda x,y: x and y<t, True, l)\n    l.iter().fold(true, |acc,\
    \ x| acc && x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, &x| acc && x < t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpax97y6xo.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for x in l {\n        if x >= t {\n     \
    \       result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // The fn way.\n    l.iter().fold(true, |acc, x| acc && x < &t)\n   \
    \ // The for way.\n    // for n in l {\n    //     if n >= t {\n    //       \
    \  return false;\n    //     }\n    // }\n    // true\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplu322yql.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Complete the function here!\n    let mut result = true;\n    for elem\
    \ in l {\n        if elem >= t {\n            result = false;\n            break;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // write your code here\n    l.iter().all(|&x| x < t)\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp54z0ciql.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpop42mkl2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for num in l {\n        if num >= t {\n            return false;\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // BEGIN1 OMIT\n    let mut x = t;\n    for item in l {\n        if item\
    \ > x {\n            return false;\n        }\n    }\n    true\n    // END1 OMIT\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg1abs20y.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // We will use an accumulator:\n    let mut acc = true;\n    for e in\
    \ l {\n        if e >= t {\n            acc = false;\n        }\n    }\n    acc\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for e in l {\n        if e >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n  l.iter().fold(true, |acc, x| acc && x < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|n| *n < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // YOUR CODE HERE\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpv24lzoka.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsndaf09p.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for num in l {\n        if num >= t {\n            return false;\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Your code here\n    let mut res: bool = true;\n    for i in l {\n\
    \        if i > t {\n            res = false;\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvr_kt6ah.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().any(|&x| x > t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp3ils9v0.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO: implement me\n    // l.iter().all(|&x| x < t)\n    l.iter().find(|&x|\
    \ x > &t).is_none()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpas0fao9y.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut below_t: Vec<isize> = Vec::new();\n    for n in l {\n       \
    \ if n < t {\n            below_t.push(n);\n        }\n    }\n    below_t.len()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpt888azo9.rs:13:22\n\
    \    |\n6   | fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    |   \
    \                 - move occurs because `l` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n7   |     let mut below_t: Vec<isize> = Vec::new();\n\
    8   |     for n in l {\n    |              - `l` moved due to this implicit call\
    \ to `.into_iter()`\n...\n13  |     below_t.len() == l.len()\n    |          \
    \            ^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for n in &l {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut found = false;\n    for i in l {\n        if i >= t {\n     \
    \       found = true;\n        }\n    }\n    !found\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, &x| acc && x < t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut ok = true;\n    for x in l {\n        if x >= t {\n         \
    \   ok = false;\n        }\n    }\n    ok\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n  // YOUR CODE HERE\n  let mut s = 0;\n  for i in l {\n    if i > t {\n \
    \     s = 1;\n    }\n  }\n  if s == 0 {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp85ngkvu1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // COMPLETE THIS FUNCTION\n    true\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp70sv8b0m.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&i| i < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    return l.iter().all(|&x| x < t);\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for i in l {\n        if i > t {\n      \
    \      result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpazg6_3x6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n  l.iter().all(|&e| e < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|e| *e < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpays0ed89.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&e| e < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzuwyr_b_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, &x| acc && x < t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy5vb30wq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n  // Your code here\n  false\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppz8pgblt.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&i| i < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for num in l {\n        if num >= t {\n            return false;\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzedgphtg.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    if l.len() == 0 {\n        return true;\n    }\n    let first = l[0];\n\
    \    let rest = l[1..].to_vec();\n    if first >= t {\n        return false;\n\
    \    }\n    below_threshold(rest, t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&i| i < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // YOUR CODE HERE\n    let mut threshold = true;\n    for i in l {\n\
    \        if i >= t {\n            threshold = false;\n        }\n    }\n    threshold\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut below_threshold = true;\n    for i in l {\n        if i > t {\n\
    \            below_threshold = false;\n        }\n    }\n    below_threshold\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjr_7gqwo.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpui3c8lx_.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for number in l {\n        if number >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    if l.len() == 0 {\n        true\n    } else {\n        let rest = Vec::from(&l[1..]);\n\
    \        l[0] < t && below_threshold(rest, t)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Replace () with the code to test whether all numbers in l are below\
    \ t\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp47egx94g.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Retrieve the first element of the list.\n    match l.get(0) {\n  \
    \      // If there is no first element, then the list is empty and\n        //\
    \ so there are no elements above the threshold.\n        None => true,\n     \
    \   // If there is a first element, then check if it is below\n        // the\
    \ threshold.\n        Some(x) => if *x < t {\n            // If it is below the\
    \ threshold, then check the rest of\n            // the list.\n            below_threshold(l[1..].to_vec(),\
    \ t)\n        } else {\n            // If it is not below the threshold, then\
    \ the list does\n            // not satisfy the condition, so return False.\n\
    \            false\n        }\n    }\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|e| e < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Use a fold to check each element of the list and stop at the first\
    \ one\n    // over the threshold\n    l.iter().fold(true, |above, &x| above &&\
    \ x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpq5zm1c6b.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2wh61yl_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for num in l {\n        if num >= t {\n            return false;\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_p63lxsk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    //base case\n    if l.len() == 0 {\n        return true;\n    }\n   \
    \ //recursive case\n    if l[0] < t {\n        below_threshold(l[1..].to_vec(),\
    \ t)\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut c = 0;\n    for x in l {\n        if x >= t {\n            c\
    \ += 1;\n        }\n    }\n    c == 0\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for i in l {\n        if i >= t {\n     \
    \       result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, &x| acc && x < t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for num in l {\n        if num >= t {\n            return false;\n  \
    \      }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for v in l {\n        if v >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for elem in l {\n        if elem > t {\n\
    \            result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwj_5ujmm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut res = true;\n    for i in l {\n        if i > t {\n         \
    \   res = false;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz0552pfm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for elem in l {\n        if elem >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let t: isize = t;\n    let below_threshold = |x: isize| -> bool { x <\
    \ t };\n    all(l, below_threshold)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `all` in this scope\n --> /tmp/tmpg8q7_uj4.rs:9:5\n\
    \  |\n9 |     all(l, below_threshold)\n  |     ^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // old version: not functional\n    // let mut result = true;\n    //\
    \ for i in l {\n    //     if i >= t {\n    //         result = false;\n    //\
    \     }\n    // }\n    // result\n\n    // new version: functional\n    // l.iter().find(|&i|\
    \ i >= &t).is_none()\n    l.iter().all(|i| i < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for &i in l.iter() {\n        if i >= t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO: return true if all values in the list l are below threshold\
    \ t\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // YOUR CODE HERE\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpquogle7p.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|n| n < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut b: bool = true;\n    for i in l {\n        if i > t {\n     \
    \       b = false;\n        }\n    }\n    b\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1muk72xx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps8neorze.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgw2p0agp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for e in l {\n        if e > t {\n      \
    \      result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp25vl6d05.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    match l.len() {\n        0 => true,\n        _ => {\n            if l[0]\
    \ < t {\n                below_threshold(l[1..].to_vec(), t)\n            } else\
    \ {\n                false\n            }\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for element in l {\n        if element > t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgrwet0_b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8ftrnnfa.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO change \"unimplemented!\" to your code\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt3f4kfc8.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut all_below = true;\n    for i in &l {\n        if *i >= t {\n\
    \            all_below = false;\n        }\n    }\n    all_below\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for n in l {\n        if n >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && x < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |acc, x| acc && x < &t)\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut t_flag = true;\n    for i in &l {\n        if i > &t {\n    \
    \        t_flag = false;\n        }\n    }\n    t_flag\n}\n\nfn main() {\n   \
    \ let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10],\
    \ 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n   \
    \ assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvkx1pw2o.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Hint: write the list recursively.\n    let mut results = true;\n \
    \   for item in l {\n        if item > t {\n            results = false;\n   \
    \     }\n    }\n    results\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy_98t73u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().fold(true, |below, n| below && n < &t)\n}\n\nfn main() {\n \
    \   let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10],\
    \ 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n   \
    \ assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpazanry0p.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpavwfz00y.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for i in l {\n        if i > t {\n      \
    \      result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeme12p1j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    fn below_threshold_iter(l: &Vec<isize>, t: isize) -> bool {\n       \
    \ let mut i = 0;\n        let mut ans = true;\n        while ans && i < l.len()\
    \ {\n            if l[i] > t {\n                ans = false;\n            }\n\
    \            i += 1;\n        }\n        ans\n    }\n    below_threshold_iter(&l,\
    \ t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb517p9so.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut res = true;\n    for i in l {\n        if i >= t {\n        \
    \    res = false;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8kg4nocp.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for &x in l.iter() {\n        if x > t {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphbiznyaz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // YOUR CODE HERE\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpekitwpxw.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // Your code here!\n    let mut sum: isize = 0;\n    for e in l {\n \
    \       sum += e;\n    }\n    if sum < t {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuwy61rj3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
