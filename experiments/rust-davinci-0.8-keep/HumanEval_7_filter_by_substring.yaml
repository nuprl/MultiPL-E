name: HumanEval_7_filter_by_substring
language: rust
prompt: "/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
  \ Vec<String>, substring: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
  xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
  )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
  ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")),\
  \ vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
completions: ['    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|x| x.contains(&substring)).collect()', "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ filtered: Vec<String> = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(&substring) {\n            filtered.push(string);\n        }\n\
    \    }\n    filtered", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut ret = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            ret.push(s);\n        }\n    }\n    ret", '    strings.into_iter().filter(|x|
    x.contains(&substring)).collect()', "    let mut ret = Vec::new();\n    for i\
    \ in strings {\n        if i.contains(&substring) {\n            ret.push(i);\n\
    \        }\n    }\n    ret", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    let mut vec: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            vec.push(s);\n\
    \        }\n    }\n    vec", "    let substring = substring.to_lowercase();\n\
    \    strings\n        .into_iter()\n        .filter(|s| s.to_lowercase().contains(&substring))\n\
    \        .collect()", '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  "    strings.into_iter().filter(|string| {\n        let string = string.as_str();\n\
    \        string.contains(substring.as_str())\n    }).collect()", "    let filter_vec\
    \ = strings.into_iter().filter(|s| s.contains(&substring)).collect();\n    filter_vec",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  "    let result: Vec<String> = strings\n        .into_iter()\n        .filter(|x|\
    \ x.contains(&substring))\n        .collect();\n    result", "    let res: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    res", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let strings: Vec<&str> = strings.iter().map(|s| s.as_str()).collect();\n  \
    \  let strings = str_util::filter_by_substring(strings, substring.as_str());\n\
    \    let strings: Vec<String> = strings.iter().map(|s| s.to_string()).collect();\n\
    \    strings", "    let mut filtered: Vec<String> = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(&substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|x| x.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut result: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s)\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut res: Vec<String> = Vec::new();\n    for s in strings {\n        if\
    \ s.contains(&substring) {\n            res.push(s)\n        }\n    }\n    res",
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let filtered: Vec<String> = strings\n        .into_iter()\n        .filter(|x|\
    \ x.contains(&substring))\n        .collect();\n    filtered", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut result = Vec::new();\n    for word in strings {\n        if word.contains(&substring)\
    \ {\n            result.push(word);\n        }\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let mut result = Vec::new();\n \
    \   for string in strings {\n        if string.contains(&substring) {\n      \
    \      result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|x|
    x.contains(&substring)).collect()', '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ result: Vec<String> = strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|el| el.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let matches = strings\n        .into_iter()\n\
    \        .filter(|elem| elem.contains(&substring));\n    matches.collect()", " \
    \   let mut new_strings = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(&substring) {\n            new_strings.push(string);\n     \
    \   }\n    }\n    new_strings", "    // filter list only for string which contains\
    \ the given substring\n    strings.into_iter().filter(|string| string.contains(&substring)).collect()",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut out = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            out.push(s);\n        }\n    }\n    out", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', '    return strings.into_iter().filter(|x|
    x.contains(&substring)).collect();', "    let mut filtered_list: Vec<String> =\
    \ Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_list.push(string)\n        }\n    }\n    filtered_list",
  "    let mut result = Vec::new();\n    for elem in strings {\n        if elem.contains(&substring)\
    \ {\n            result.push(elem);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut result: Vec<String> = Vec::new();\n\
    \    for str in strings {\n        if str.contains(&substring) {\n           \
    \ result.push(str);\n        }\n    }\n    result", "    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for str in strings {\n        if str.contains(&substring)\
    \ {\n            filtered.push(str);\n        }\n    }\n    filtered", '    strings.into_iter().filter(|x|
    x.contains(&substring)).collect()', '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    let mut result: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut filtered_strings = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            filtered_strings.push(s)\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut result: Vec<String> = Vec::new();\n    for elem in strings {\n        if\
    \ elem.contains(&substring) {\n            result.push(elem);\n        }\n   \
    \ }\n    result", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut filtered: Vec<String> = Vec::new();\n    for s in strings {\n     \
    \   if s.contains(&substring) {\n            filtered.push(s);\n        }\n  \
    \  }\n    filtered", "    let mut filtered_strings = Vec::new();\n    for i in\
    \ strings {\n        if i.contains(&substring) {\n            filtered_strings.push(i);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    // Without clone\n    // let filtered = strings.into_iter().filter(|x| x.contains(&substring)).collect();\n\
    \    // let filtered = strings.into_iter().filter(|x| x.as_str().contains(&substring)).collect();\n\
    \    // With clone\n    let filtered = strings.into_iter().filter(|x| x.contains(&substring)).cloned().collect();\n\
    \    filtered", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut result: Vec<String> = Vec::new();\n    for string in strings {\n       \
    \ if string.contains(&substring) {\n            result.push(string);\n       \
    \ }\n    }\n    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut results = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            results.push(string);\n        }\n    }\n    results", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // Collect the strings that have the\
    \ given substring in them\n    let filtered_strings: Vec<String> = strings\n \
    \       .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect();\n\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut result = Vec::new();\n    for\
    \ s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|i| i.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut result = Vec::new();\n    for\
    \ string in strings {\n        if string.contains(&substring) {\n            result.push(string);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  "    let mut result = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // TODO: Implement this function\n  \
    \  strings.into_iter().filter(|s| s.contains(&substring)).collect()", "    let\
    \ mut filtered_strings = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", '    return strings.into_iter().filter(|x|
    x.contains(&substring)).collect();', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let lowercase_substring = substring.to_lowercase();\n    let mut v = Vec::new();\n\
    \    for s in strings {\n        if s.to_lowercase().contains(&lowercase_substring)\
    \ {\n            v.push(s);\n        }\n    }\n    v", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut result: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ result: Vec<String> = strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|x| x.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let result: Vec<String> = strings\n \
    \       .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect();\n\
    \    result", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    return strings.into_iter().filter(|s| s.contains(&substring)).collect();',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    // TODO\n    vec![]", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut res = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            res.push(string);\n        }\n    }\n    res", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut filtered: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut filter_by_substring: Vec<String> = Vec::new();\n    for string in strings\
    \ {\n        if string.contains(&substring) {\n            filter_by_substring.push(string);\n\
    \        }\n    }\n    filter_by_substring", "    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            result.push(s);\n        }\n    }\n    result", "    let filtered_strings:\
    \ Vec<String> = strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    filtered_strings", '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let mut output = Vec::new();\n \
    \   for s in strings {\n        if s.contains(&substring) {\n            output.push(s);\n\
    \        }\n    }\n    output", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut result: Vec<String> = Vec::new();\n    for string in strings {\n  \
    \      if string.contains(&substring) {\n            result.push(string);\n  \
    \      }\n    }\n    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ res: Vec<String> = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            res.push(s)\n        }\n    }\n    res", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut filtered_strings = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            filtered_strings.push(s);\n        }\n    }\n    filtered_strings",
  "    let predicate = |s: &String| s.contains(&substring);\n    filter(strings, predicate)",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    return
    strings.into_iter().filter(|x| x.contains(&substring)).collect();', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    strings.into_iter().filter(|string| {\n\
    \        string.to_lowercase().contains(&substring.to_lowercase())\n    }).collect()",
  "    let mut found_strings: Vec<String> = Vec::new();\n    for line in strings {\n\
    \        if line.contains(&substring) {\n            found_strings.push(line);\n\
    \        }\n    }\n    found_strings", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut substring_strings = Vec::new();\n    for i in strings {\n        if\
    \ i.contains(&substring) {\n            substring_strings.push(i);\n        }\n\
    \    }\n    substring_strings", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut filtered_list: Vec<String> =\
    \ Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_list.push(string);\n        }\n    }\n    filtered_list",
  "    // TODO: Make this function asynchronous\n    let substring_slice = substring.as_str();\n\
    \    strings\n        .into_iter()\n        .filter(|string| string.contains(substring_slice))\n\
    \        .collect()", "    let mut filtered: Vec<String> = Vec::new();\n    for\
    \ string in strings {\n        if string.contains(&substring) {\n            filtered.push(string);\n\
    \        }\n    }\n    filtered", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut new_strings = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(&substring) {\n            new_strings.push(string)\n      \
    \  }\n    }\n    new_strings", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut result = Vec::new();\n    for input in strings {\n        if input.contains(&substring)\
    \ {\n            result.push(input);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut vec = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            vec.push(s);\n        }\n    }\n    vec", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut result = Vec::new();\n    for\
    \ s in strings {\n        if s.contains(&substring) {\n            result.push(s)\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    let mut result: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result", '    return strings.into_iter().filter(|s| s.contains(&substring)).collect();',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut ret: Vec<String> = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(&substring) {\n            ret.push(string);\n        }\n  \
    \  }\n    ret", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    //#TODO\n    strings.into_iter().filter(|e| e.contains(&substring)).collect()",
  "    let mut result: Vec<String> = Vec::new();\n    for string in strings {\n  \
    \      if string.contains(&substring) {\n            result.push(string);\n  \
    \      }\n    }\n    result", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut filtered_strings = Vec::new();\n    for element in strings {\n    \
    \    if element.contains(&substring) {\n            filtered_strings.push(element);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let mut result = Vec::new();\n \
    \   for s in strings {\n        if s.contains(&substring) {\n            result.push(s)\n\
    \        }\n    }\n    result", "    let mut vec: Vec<String> = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       vec.push(string);\n        }\n    }\n    vec", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()']
stop_tokens:
- "\n}"
