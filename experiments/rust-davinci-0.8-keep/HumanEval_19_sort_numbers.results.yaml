name: HumanEval_19_sort_numbers
language: rust
results:
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut words = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    words.sort_by(|l, r| {\n        let to_num = |w: &str| match w {\n      \
    \      \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n\
    \            \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"invalid numeral\"\
    ),\n        };\n        to_num(l).cmp(&to_num(r))\n    });\n    words.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| numeral_to_i32(s))\n        .collect();\n\
    \    let mut sorted_nums = nums.clone();\n    sorted_nums.sort();\n    let sorted_strings:\
    \ Vec<String> = sorted_nums\n        .iter()\n        .map(|&i| i32_to_numeral(i))\n\
    \        .collect();\n    sorted_strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_i32` in this scope\n -->\
    \ /tmp/tmpwxjlz45s.rs:9:18\n  |\n9 |         .map(|s| numeral_to_i32(s))\n  |\
    \                  ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `i32_to_numeral` in this scope\n  --> /tmp/tmpwxjlz45s.rs:15:19\n\
    \   |\n15 |         .map(|&i| i32_to_numeral(i))\n   |                   ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> =\n\
    \        numbers\n            .split(' ')\n            .map(|s| NUMBERS[s])\n\
    \            .filter(|s| s.is_some())\n            .map(|s| s.unwrap())\n    \
    \        .collect();\n    numbers.sort();\n    let nums: Vec<String> = numbers.iter().map(|s|\
    \ s.to_string()).collect();\n    nums.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n  --> /tmp/tmpo024p4yf.rs:10:22\n\
    \   |\n10 |             .map(|s| NUMBERS[s])\n   |                      ^^^^^^^\
    \ help: a local variable with a similar name exists: `numbers`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums = numbers.split_whitespace().map(|x|\
    \ num_to_int(x));\n    let mut v: Vec<i32> = Vec::new();\n    for n in nums {\n\
    \        v.push(n);\n    }\n    v.sort();\n    v.iter().map(|x| int_to_num(*x)).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_to_int` in this scope\n --> /tmp/tmpj27tyj8b.rs:7:51\n\
    \  |\n7 |     let nums = numbers.split_whitespace().map(|x| num_to_int(x));\n\
    \  |                                                   ^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `int_to_num` in this scope\n\
    \  --> /tmp/tmpj27tyj8b.rs:13:22\n   |\n13 |     v.iter().map(|x| int_to_num(*x)).collect::<Vec<String>>().join(\"\
    \ \")\n   |                      ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Code goes here\n    let mut\
    \ result: Vec<i64> = vec![];\n    for num in numbers.split(\" \") {\n        match\
    \ num {\n            \"zero\" => result.push(0),\n            \"one\" => result.push(1),\n\
    \            \"two\" => result.push(2),\n            \"three\" => result.push(3),\n\
    \            \"four\" => result.push(4),\n            \"five\" => result.push(5),\n\
    \            \"six\" => result.push(6),\n            \"seven\" => result.push(7),\n\
    \            \"eight\" => result.push(8),\n            \"nine\" => result.push(9),\n\
    \            _ => {}\n        }\n    }\n    result.sort();\n    result.iter().map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmp0f8nju52.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    let mut nums = Vec::new();\n    for num in numbers {\n        match num {\n\
    \            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => continue,\n        }\n    }\n    let mut numbers = Vec::new();\n\
    \    for num in nums.iter().sorted() {\n        match num {\n            0 =>\
    \ numbers.push(\"zero\"),\n            1 => numbers.push(\"one\"),\n         \
    \   2 => numbers.push(\"two\"),\n            3 => numbers.push(\"three\"),\n \
    \           4 => numbers.push(\"four\"),\n            5 => numbers.push(\"five\"\
    ),\n            6 => numbers.push(\"six\"),\n            7 => numbers.push(\"\
    seven\"),\n            8 => numbers.push(\"eight\"),\n            9 => numbers.push(\"\
    nine\"),\n            _ => continue,\n        }\n    }\n    return numbers.join(\"\
    \ \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpsg1476oh.rs:25:28\n   |\n25 |     for num\
    \ in nums.iter().sorted() {\n   |                            ^^^^^^ method not\
    \ found in `std::slice::Iter<'_, {integer}>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpw8aktotn.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    const ONES: [&str; 10] = [\n\
    \        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\",\n    ];\n    let mut numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    numbers.sort_by_key(|&s| ONES.iter().position(|&x| x == s).unwrap());\n \
    \   numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut values: Vec<i32> = vec![];\n\
    \    let mut sort_numbers: Vec<String> = vec![];\n    let mut numbers_vec: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n    for x\
    \ in numbers_vec {\n        match x {\n            \"zero\" => values.push(0),\n\
    \            \"one\" => values.push(1),\n            \"two\" => values.push(2),\n\
    \            \"three\" => values.push(3),\n            \"four\" => values.push(4),\n\
    \            \"five\" => values.push(5),\n            \"six\" => values.push(6),\n\
    \            \"seven\" => values.push(7),\n            \"eight\" => values.push(8),\n\
    \            \"nine\" => values.push(9),\n            _ => continue,\n       \
    \ }\n    }\n    values.sort();\n    for x in values {\n        match x {\n   \
    \         0 => sort_numbers.push(\"zero\".to_string()),\n            1 => sort_numbers.push(\"\
    one\".to_string()),\n            2 => sort_numbers.push(\"two\".to_string()),\n\
    \            3 => sort_numbers.push(\"three\".to_string()),\n            4 =>\
    \ sort_numbers.push(\"four\".to_string()),\n            5 => sort_numbers.push(\"\
    five\".to_string()),\n            6 => sort_numbers.push(\"six\".to_string()),\n\
    \            7 => sort_numbers.push(\"seven\".to_string()),\n            8 =>\
    \ sort_numbers.push(\"eight\".to_string()),\n            9 => sort_numbers.push(\"\
    nine\".to_string()),\n            _ => continue,\n        }\n    }\n    let mut\
    \ result = sort_numbers.join(\" \");\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    let mut numbers: Vec<usize> = numbers.iter().map(|number| numeral_to_number(number)).collect();\n\
    \    numbers.sort();\n    let numbers: Vec<String> = numbers.iter().map(|number|\
    \ number_to_numeral(number)).collect();\n    numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmpvram4ln3.rs:8:63\n  |\n8 |     let mut numbers: Vec<usize> = numbers.iter().map(|number|\
    \ numeral_to_number(number)).collect();\n  |                                 \
    \                              ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmpvram4ln3.rs:10:60\n\
    \   |\n10 |     let numbers: Vec<String> = numbers.iter().map(|number| number_to_numeral(number)).collect();\n\
    \   |                                                            ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result: Vec<i32> = numbers\n\
    \        .split(\" \")\n        .map(|str| &str[..str.len() - 1])\n        .map(|str|\
    \ {\n            match str {\n                \"zero\" => 0,\n               \
    \ \"one\" => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n\
    \                \"four\" => 4,\n                \"five\" => 5,\n            \
    \    \"six\" => 6,\n                \"seven\" => 7,\n                \"eight\"\
    \ => 8,\n                \"nine\" => 9,\n                _ => -1,\n          \
    \  }\n        })\n        .filter(|num| *num != -1)\n        .collect();\n   \
    \ result.sort();\n    let result: Vec<String> = result\n        .iter()\n    \
    \    .map(|num| {\n            match num {\n                0 => \"zero\".to_string(),\n\
    \                1 => \"one\".to_string(),\n                2 => \"two\".to_string(),\n\
    \                3 => \"three\".to_string(),\n                4 => \"four\".to_string(),\n\
    \                5 => \"five\".to_string(),\n                6 => \"six\".to_string(),\n\
    \                7 => \"seven\".to_string(),\n                8 => \"eight\".to_string(),\n\
    \                9 => \"nine\".to_string(),\n                _ => \"\".to_string(),\n\
    \            }\n        })\n        .collect();\n    result.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpz4mbhjc7.rs:9:27\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut words: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    words.sort();\n    words.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpj9jq56ek.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let num_vec: Vec<&str> = numbers.split(\"\
    \ \").collect();\n    let mut num_converted: Vec<u32> = Vec::new();\n    for num\
    \ in num_vec {\n        num_converted.push(match num {\n            \"zero\" =>\
    \ 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\"\
    \ => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"\
    six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n      \
    \      \"nine\" => 9,\n            _ => panic!(\"Incorrect number name\"),\n \
    \       });\n    }\n    num_converted.sort();\n    let mut result = String::new();\n\
    \    for num in num_converted {\n        result += match num {\n            0\
    \ => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n       \
    \     3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n\
    \            6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Incorrect number name\"\
    ),\n        };\n        result += \" \";\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Incorrect number name', /tmp/tmpddopad2n.rs:21:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    let mut ints = Vec::new();\n    for num in numbers {\n        ints.push(match\
    \ num {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"\
    two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n       \
    \     \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n\
    \            \"eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        });\n    }\n    ints.sort();\n    ints.iter().map(|int| match int {\n\
    \        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n      \
    \  3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n        6\
    \ => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n        9 =>\
    \ \"nine\",\n        _ => unreachable!(),\n    }).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<String>\
    \ = Vec::new();\n    let mut unsorted_numbers: Vec<String> = numbers.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    while unsorted_numbers.len() > 0 {\n        let\
    \ mut lowest_number: String = unsorted_numbers[0].clone();\n        for number\
    \ in unsorted_numbers.iter() {\n            if english_to_arabic(number) < english_to_arabic(&lowest_number)\
    \ {\n                lowest_number = number.clone();\n            }\n        }\n\
    \        sorted_numbers.push(lowest_number.clone());\n        unsorted_numbers.retain(|n|\
    \ n != &lowest_number);\n    }\n    return sorted_numbers.join(\" \");\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `english_to_arabic` in this scope\n\
    \  --> /tmp/tmp2p7xu9hl.rs:12:16\n   |\n12 |             if english_to_arabic(number)\
    \ < english_to_arabic(&lowest_number) {\n   |                ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `english_to_arabic`\
    \ in this scope\n  --> /tmp/tmp2p7xu9hl.rs:12:44\n   |\n12 |             if english_to_arabic(number)\
    \ < english_to_arabic(&lowest_number) {\n   |                                \
    \            ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i64> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n     \
    \   });\n    }\n    nums.sort();\n    let mut output = String::new();\n    for\
    \ num in nums {\n        output.push_str(match num {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"zero\",\n        });\n        output.push('\
    \ ');\n    }\n    output.pop();\n    output\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|&a, &b| value_of(a).cmp(&value_of(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `value_of` in this scope\n --> /tmp/tmpyqtamjay.rs:8:30\n\
    \  |\n8 |     numbers.sort_by(|&a, &b| value_of(a).cmp(&value_of(b)));\n  |  \
    \                            ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `value_of` in this scope\n --> /tmp/tmpyqtamjay.rs:8:47\n\
    \  |\n8 |     numbers.sort_by(|&a, &b| value_of(a).cmp(&value_of(b)));\n  |  \
    \                                             ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result = Vec::new();\n\
    \    let mut nums = numbers.split_whitespace();\n    loop {\n        match nums.next()\
    \ {\n            Some(n) => {\n                result.push(convert_to_int(n));\n\
    \            }\n            None => break,\n        }\n    }\n    result.sort();\n\
    \    let mut result_string = String::new();\n    for n in result {\n        result_string.push_str(&convert_to_str(n));\n\
    \        result_string.push(' ');\n    }\n    result_string.pop();\n    result_string\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `convert_to_int` in this scope\n  -->\
    \ /tmp/tmp2tgggq8f.rs:12:29\n   |\n12 |                 result.push(convert_to_int(n));\n\
    \   |                             ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `convert_to_str` in this scope\n  --> /tmp/tmp2tgggq8f.rs:20:33\n\
    \   |\n20 |         result_string.push_str(&convert_to_str(n));\n   |        \
    \                         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vector: Vec<String>\
    \ = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    numbers_vector.sort_by(|a,\
    \ b| {\n        let a_score = number_score(a);\n        let b_score = number_score(b);\n\
    \        a_score.cmp(&b_score)\n    });\n    numbers_vector.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_score` in this scope\n --> /tmp/tmpo7w1he3k.rs:9:23\n\
    \  |\n9 |         let a_score = number_score(a);\n  |                       ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `number_score`\
    \ in this scope\n  --> /tmp/tmpo7w1he3k.rs:10:23\n   |\n10 |         let b_score\
    \ = number_score(b);\n   |                       ^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<usize>\
    \ = Vec::new();\n    let mut map: HashMap<String, usize> = HashMap::new();\n \
    \   map.insert(\"zero\".to_string(), 0);\n    map.insert(\"one\".to_string(),\
    \ 1);\n    map.insert(\"two\".to_string(), 2);\n    map.insert(\"three\".to_string(),\
    \ 3);\n    map.insert(\"four\".to_string(), 4);\n    map.insert(\"five\".to_string(),\
    \ 5);\n    map.insert(\"six\".to_string(), 6);\n    map.insert(\"seven\".to_string(),\
    \ 7);\n    map.insert(\"eight\".to_string(), 8);\n    map.insert(\"nine\".to_string(),\
    \ 9);\n\n    let numbers_array: Vec<&str> = numbers.split(\" \").collect();\n\
    \    for num in numbers_array {\n        if let Some(n) = map.get(num) {\n   \
    \         sorted_numbers.push(*n);\n        }\n    }\n    sorted_numbers.sort();\n\
    \    let result: Vec<String> = sorted_numbers.iter().map(|n| {\n        for (key,\
    \ value) in &map {\n            if value == n {\n                return key.to_string();\n\
    \            }\n        }\n        \"\".to_string()\n    }).collect();\n    result.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp_eeehy5_.rs:8:18\n\
    \  |\n8 |     let mut map: HashMap<String, usize> = HashMap::new();\n  |     \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_eeehy5_.rs:8:43\n\
    \  |\n8 |     let mut map: HashMap<String, usize> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    //let mut numbers_vec: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    let mut numbers_vec: Vec<&str>\
    \ = numbers.split_whitespace().map(|s| s.to_lowercase()).collect();\n    numbers_vec.sort();\n\
    \    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `String`\n    --> /tmp/tmpftrba5_w.rs:8:91\n     |\n8\
    \    |     let mut numbers_vec: Vec<&str> = numbers.split_whitespace().map(|s|\
    \ s.to_lowercase()).collect();\n     |                                       \
    \                                                    ^^^^^^^ value of type `Vec<&str>`\
    \ cannot be built from `std::iter::Iterator<Item=String>`\n     |\n     = help:\
    \ the trait `FromIterator<String>` is not implemented for `Vec<&str>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split(' ')\n        .map(|num| match num {\n            \"zero\" =>\
    \ 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\"\
    \ => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"\
    six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n      \
    \      \"nine\" => 9,\n            _ => unreachable!(),\n        })\n        .collect();\n\
    \    numbers.sort();\n    let numbers: Vec<&str> = numbers\n        .iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => unreachable!(),\n        })\n        .collect();\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'internal error: entered unreachable code', /tmp/tmpmtfm7d29.rs:20:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let split_numbers: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    let mut unsorted_numbers: Vec<u32>\
    \ = Vec::new();\n    for number in split_numbers {\n        let new_number = match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Unexpected character found in string {}\", number),\n        };\n \
    \       unsorted_numbers.push(new_number);\n    }\n    unsorted_numbers.sort();\n\
    \    let mut sorted_numbers: Vec<String> = Vec::new();\n    for number in unsorted_numbers\
    \ {\n        let new_number = match number {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Unexpected character found in string\
    \ {}\", number),\n        };\n        sorted_numbers.push(new_number.to_string());\n\
    \    }\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| number_to_digit(s.to_string()))\n\
    \        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n    \
    \    .map(|s| digit_to_number(*s))\n        .collect::<Vec<String>>()\n      \
    \  .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_digit` in this scope\n -->\
    \ /tmp/tmpr8pserkh.rs:9:18\n  |\n9 |         .map(|s| number_to_digit(s.to_string()))\n\
    \  |                  ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `digit_to_number` in this scope\n  --> /tmp/tmpr8pserkh.rs:14:18\n\
    \   |\n14 |         .map(|s| digit_to_number(*s))\n   |                  ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = numbers.split('\
    \ ').map(str::parse).collect::<Result<Vec<i32>, _>>().unwrap();\n    nums.sort();\n\
    \    nums.into_iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: Empty }', /tmp/tmp_p2y1dta.rs:7:88\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|n| to_numeral(n))\n        .collect();\n\
    \    numbers.sort();\n    numbers\n        .iter()\n        .map(|n| to_string(*n))\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_numeral` in this scope\n --> /tmp/tmpokzzbnct.rs:9:18\n\
    \  |\n9 |         .map(|n| to_numeral(n))\n  |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `to_string` in this\
    \ scope\n  --> /tmp/tmpokzzbnct.rs:14:18\n   |\n14 |         .map(|n| to_string(*n))\n\
    \   |                  ^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let to_int = |x: &str| {\n  \
    \      match x {\n            \"zero\" => 0,\n            \"one\" => 1,\n    \
    \        \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n\
    \            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => panic!(\"invalid numeral\"),\n        }\n    };\n\n    let word_numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let int_numbers: Vec<i32>\
    \ = word_numbers.iter().map(to_int).collect();\n    let mut sorted_numbers = int_numbers.clone();\n\
    \    sorted_numbers.sort();\n\n    let to_word = |x: &i32| {\n        match x\
    \ {\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"\
    two\",\n            3 => \"three\",\n            4 => \"four\",\n            5\
    \ => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n     \
    \       8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    invalid numeral\"),\n        }\n    };\n\n    let result = sorted_numbers\n  \
    \      .iter()\n        .map(to_word)\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \");\n\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0631]: type mismatch in closure arguments\n   --> /tmp/tmpyartgoby.rs:24:57\n\
    \    |\n7   |     let to_int = |x: &str| {\n    |                  --------- found\
    \ signature of `for<'r> fn(&'r str) -> _`\n...\n24  |     let int_numbers: Vec<i32>\
    \ = word_numbers.iter().map(to_int).collect();\n    |                        \
    \                             --- ^^^^^^ expected signature of `fn(&&str) -> _`\n\
    \    |                                                     |\n    |          \
    \                                           required by a bound introduced by\
    \ this call\n    |\nnote: required by a bound in `map`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Map<std::slice::Iter<'_, &str>, [closure@/tmp/tmpyartgoby.rs:7:18:\
    \ 21:6]>`, but its trait bounds were not satisfied\n  --> /tmp/tmpyartgoby.rs:24:65\n\
    \   |\n7  |       let to_int = |x: &str| {\n   |                    ---------\n\
    \   |                    |\n   |                    doesn't satisfy `<_ as FnOnce<(&&str,)>>::Output\
    \ = _`\n   |                    doesn't satisfy `_: FnMut<(&&str,)>`\n...\n24\
    \ |       let int_numbers: Vec<i32> = word_numbers.iter().map(to_int).collect();\n\
    \   |                                                                   ^^^^^^^\
    \ method cannot be called on `Map<std::slice::Iter<'_, &str>, [closure@/tmp/tmpyartgoby.rs:7:18:\
    \ 21:6]>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<[closure@/tmp/tmpyartgoby.rs:7:18:\
    \ 21:6] as FnOnce<(&&str,)>>::Output = _`\n           which is required by `Map<std::slice::Iter<'_,\
    \ &str>, [closure@/tmp/tmpyartgoby.rs:7:18: 21:6]>: Iterator`\n           `[closure@/tmp/tmpyartgoby.rs:7:18:\
    \ 21:6]: FnMut<(&&str,)>`\n           which is required by `Map<std::slice::Iter<'_,\
    \ &str>, [closure@/tmp/tmpyartgoby.rs:7:18: 21:6]>: Iterator`\n           `Map<std::slice::Iter<'_,\
    \ &str>, [closure@/tmp/tmpyartgoby.rs:7:18: 21:6]>: Iterator`\n           which\
    \ is required by `&mut Map<std::slice::Iter<'_, &str>, [closure@/tmp/tmpyartgoby.rs:7:18:\
    \ 21:6]>: Iterator`\n\nerror: aborting due to 2 pre"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let split_numbers: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    let to_number: Vec<i32> = split_numbers.iter().map(|x|\
    \ number_to_int(x)).collect();\n    let mut sorted_numbers: Vec<i32> = to_number.clone();\n\
    \    sorted_numbers.sort();\n    let to_numberal: Vec<&str> = sorted_numbers.iter().map(|x|\
    \ int_to_number(*x)).collect();\n    let mut str_to_return: String = String::new();\n\
    \    for (index, &element) in to_numberal.iter().enumerate() {\n        if index\
    \ > 0 {\n            str_to_return.push_str(\" \");\n        }\n        str_to_return.push_str(element);\n\
    \    }\n    str_to_return\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp9rebfwh7.rs:8:60\n  |\n8 |     let to_number: Vec<i32> = split_numbers.iter().map(|x|\
    \ number_to_int(x)).collect();\n  |                                          \
    \                  ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `int_to_number` in this scope\n  --> /tmp/tmp9rebfwh7.rs:11:64\n\
    \   |\n11 |     let to_numberal: Vec<&str> = sorted_numbers.iter().map(|x| int_to_number(*x)).collect();\n\
    \   |                                                                ^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `to_number`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let map = hashmap!{\n       \
    \ String::from(\"zero\") => 0,\n        String::from(\"one\") => 1,\n        String::from(\"\
    two\") => 2,\n        String::from(\"three\") => 3,\n        String::from(\"four\"\
    ) => 4,\n        String::from(\"five\") => 5,\n        String::from(\"six\") =>\
    \ 6,\n        String::from(\"seven\") => 7,\n        String::from(\"eight\") =>\
    \ 8,\n        String::from(\"nine\") => 9,\n    };\n    let mut nums: Vec<i32>\
    \ = numbers\n        .split_whitespace()\n        .map(|x| *map.get(x).unwrap())\n\
    \        .collect();\n    nums.sort();\n    let mut strs: Vec<String> = nums\n\
    \        .iter()\n        .map(|x| map.iter().find(|(_k, v)| v == x).unwrap().0.clone())\n\
    \        .collect();\n    strs.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `hashmap` in this scope\n --> /tmp/tmpvc4v1y3k.rs:7:15\n\
    \  |\n7 |     let map = hashmap!{\n  |               ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<u32>\
    \ = vec![];\n    for numeral in numbers.split(\" \") {\n        let number = convert_numeral_to_number(numeral);\n\
    \        numbers_vec.push(number);\n    }\n    numbers_vec.sort();\n    let mut\
    \ sorted_numbers = String::new();\n    for number in numbers_vec {\n        sorted_numbers.push_str(convert_number_to_numeral(number));\n\
    \        sorted_numbers.push_str(\" \");\n    }\n    sorted_numbers\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `convert_numeral_to_number` in this\
    \ scope\n --> /tmp/tmph_6q3y5i.rs:9:22\n  |\n9 |         let number = convert_numeral_to_number(numeral);\n\
    \  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `convert_number_to_numeral` in this scope\n\
    \  --> /tmp/tmph_6q3y5i.rs:15:33\n   |\n15 |         sorted_numbers.push_str(convert_number_to_numeral(number));\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<usize> = vec![];\n\
    \    for num in numbers.split(\" \") {\n        nums.push(match num {\n      \
    \      \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n\
    \            \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"not a valid\
    \ number\"),\n        });\n    }\n    nums.sort();\n    let mut num_str = \"\"\
    .to_string();\n    for num in nums {\n        num_str.push_str(match num {\n \
    \           0 => \"zero \",\n            1 => \"one \",\n            2 => \"two\
    \ \",\n            3 => \"three \",\n            4 => \"four \",\n           \
    \ 5 => \"five \",\n            6 => \"six \",\n            7 => \"seven \",\n\
    \            8 => \"eight \",\n            9 => \"nine \",\n            _ => panic!(\"\
    shouldn't get here\"),\n        });\n    }\n    num_str.trim().to_string()\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not a valid number', /tmp/tmpd8_pfwdx.rs:20:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split(' ').map(|n| n.to_string()).collect();\n    numbers.sort_by(|a,\
    \ b| match &a[..] {\n        \"zero\" => match &b[..] {\n            \"zero\"\
    \ => Ordering::Equal,\n            \"one\" => Ordering::Less,\n            \"\
    two\" => Ordering::Less,\n            \"three\" => Ordering::Less,\n         \
    \   \"four\" => Ordering::Less,\n            \"five\" => Ordering::Less,\n   \
    \         \"six\" => Ordering::Less,\n            \"seven\" => Ordering::Less,\n\
    \            \"eight\" => Ordering::Less,\n            \"nine\" => Ordering::Less,\n\
    \            _ => panic!(\"unknown string\"),\n        },\n        \"one\" =>\
    \ match &b[..] {\n            \"zero\" => Ordering::Greater,\n            \"one\"\
    \ => Ordering::Equal,\n            \"two\" => Ordering::Less,\n            \"\
    three\" => Ordering::Less,\n            \"four\" => Ordering::Less,\n        \
    \    \"five\" => Ordering::Less,\n            \"six\" => Ordering::Less,\n   \
    \         \"seven\" => Ordering::Less,\n            \"eight\" => Ordering::Less,\n\
    \            \"nine\" => Ordering::Less,\n            _ => panic!(\"unknown string\"\
    ),\n        },\n        \"two\" => match &b[..] {\n            \"zero\" => Ordering::Greater,\n\
    \            \"one\" => Ordering::Greater,\n            \"two\" => Ordering::Equal,\n\
    \            \"three\" => Ordering::Less,\n            \"four\" => Ordering::Less,\n\
    \            \"five\" => Ordering::Less,\n            \"six\" => Ordering::Less,\n\
    \            \"seven\" => Ordering::Less,\n            \"eight\" => Ordering::Less,\n\
    \            \"nine\" => Ordering::Less,\n            _ => panic!(\"unknown string\"\
    ),\n        },\n        \"three\" => match &b[..] {\n            \"zero\" => Ordering::Greater,\n\
    \            \"one\" => Ordering::Greater,\n            \"two\" => Ordering::Great\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwfitvx_a.rs:61:3\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n7  |     let mut numbers:\
    \ Vec<String> = numbers.split(' ').map(|n| n.to_string()).collect();\n8  |   \
    \  numbers.sort_by(|a, b| match &a[..] {\n   |                    - unclosed delimiter\
    \ - unclosed delimiter\n...\n48 |         \"three\" => match &b[..] {\n   |  \
    \                               - this delimiter might not be properly closed...\n\
    ...\n52 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    61 | }\n   |   ^\n\nerror: expected identifier, found keyword `fn`\n  --> /tmp/tmpwfitvx_a.rs:54:1\n\
    \   |\n54 | fn main() {\n   | ^^ expected identifier, found keyword\n\nerror:\
    \ expected one of `=>`, `@`, `if`, or `|`, found `main`\n  --> /tmp/tmpwfitvx_a.rs:54:4\n\
    \   |\n54 | fn main() {\n   |    ^^^^ expected one of `=>`, `@`, `if`, or `|`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpwfitvx_a.rs:10:23\n\
    \   |\n10 |             \"zero\" => Ordering::Equal,\n   |                   \
    \    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpwfitvx_a.rs:11:22\n   |\n11\
    \ |             \"one\" => Ordering::Less,\n   |                      ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpwfitvx_a.rs:12:22\n   |\n12 |    \
    \         \"two\" => Ordering::Less,\n   |                      ^^^^^^^^ use of\
    \ undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmpwfitvx_a.rs:13:24\n   |\n13 |             \"\
    three\" => Ordering::Less,\n   |                        ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpwfitvx_a.rs:14:23\n   |\n14 |             \"four\" => Ordering::Less,\n\
    \   |                       ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ f"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .map(|s| std::cmp::Reverse(to_number(s)))\n        .sorted()\n      \
    \  .map(|n| to_string(n.0))\n        .collect::<Vec<_>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_number` in this scope\n --> /tmp/tmpx877mndn.rs:9:36\n\
    \  |\n9 |         .map(|s| std::cmp::Reverse(to_number(s)))\n  |             \
    \                       ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `to_string` in this scope\n  --> /tmp/tmpx877mndn.rs:11:18\n \
    \  |\n11 |         .map(|n| to_string(n.0))\n   |                  ^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0599]: no method named `sorted` found for struct\
    \ `Map` in the current scope\n  --> /tmp/tmpx877mndn.rs:10:10\n   |\n10 |    \
    \     .sorted()\n   |          ^^^^^^ method not found in `Map<SplitWhitespace<'_>,\
    \ [closure@/tmp/tmpx877mndn.rs:9:14: 9:49]>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // TODO: Implement this function\n\
    \    let mut nums: Vec<&str> = numbers.split(\" \").collect();\n    nums.sort();\n\
    \    nums.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp6ps8h3o4.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v: Vec<String> = numbers.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    v.sort_by(|a, b| {\n        match (a.as_str(),\
    \ b.as_str()) {\n            (\"zero\", \"zero\") => Ordering::Equal,\n      \
    \      (\"zero\", _) => Ordering::Less,\n            (_, \"zero\") => Ordering::Greater,\n\
    \            (\"one\", \"one\") => Ordering::Equal,\n            (\"one\", _)\
    \ => Ordering::Less,\n            (_, \"one\") => Ordering::Greater,\n       \
    \     (\"two\", \"two\") => Ordering::Equal,\n            (\"two\", _) => Ordering::Less,\n\
    \            (_, \"two\") => Ordering::Greater,\n            (\"three\", \"three\"\
    ) => Ordering::Equal,\n            (\"three\", _) => Ordering::Less,\n       \
    \     (_, \"three\") => Ordering::Greater,\n            (\"four\", \"four\") =>\
    \ Ordering::Equal,\n            (\"four\", _) => Ordering::Less,\n           \
    \ (_, \"four\") => Ordering::Greater,\n            (\"five\", \"five\") => Ordering::Equal,\n\
    \            (\"five\", _) => Ordering::Less,\n            (_, \"five\") => Ordering::Greater,\n\
    \            (\"six\", \"six\") => Ordering::Equal,\n            (\"six\", _)\
    \ => Ordering::Less,\n            (_, \"six\") => Ordering::Greater,\n       \
    \     (\"seven\", \"seven\") => Ordering::Equal,\n            (\"seven\", _) =>\
    \ Ordering::Less,\n            (_, \"seven\") => Ordering::Greater,\n        \
    \    (\"eight\", \"eight\") => Ordering::Equal,\n            (\"eight\", _) =>\
    \ Ordering::Less,\n            (_, \"eight\") => Ordering::Greater,\n        \
    \    (\"nine\", \"nine\") => Ordering::Equal,\n            (\"nine\", _) => Ordering::Less,\n\
    \            (_, \"nine\") => Ordering::Greater,\n            _ => panic!(\"bad\
    \ input\"),\n        }\n    });\n    v.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpot1t0fhi.rs:10:33\n   |\n10 |             (\"zero\", \"zero\") => Ordering::Equal,\n\
    \   |                                 ^^^^^^^^ use of undeclared type `Ordering`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpot1t0fhi.rs:11:28\n\
    \   |\n11 |             (\"zero\", _) => Ordering::Less,\n   |               \
    \             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpot1t0fhi.rs:12:28\n\
    \   |\n12 |             (_, \"zero\") => Ordering::Greater,\n   |            \
    \                ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpot1t0fhi.rs:13:31\n\
    \   |\n13 |             (\"one\", \"one\") => Ordering::Equal,\n   |         \
    \                      ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpot1t0fhi.rs:14:27\n\
    \   |\n14 |             (\"one\", _) => Ordering::Less,\n   |                \
    \           ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpot1t0fhi.rs:15:27\n\
    \   |\n15 |             (_, \"one\") => Ordering::Greater,\n   |             \
    \              ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpot1t0fhi.rs:16:31\n\
    \   |\n16 |             (\"two\", \"two\") => Ordering::Equal,\n   |         \
    \                      ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpot1t0fhi.rs:17:27\n\
    \   |\n17 |             (\"two\", _) => Ordering::Less,\n   |                \
    \           ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpot1t0fhi.rs:18:27\n\
    \   |\n18 |             (_, \"two\") => Ordering::Greater,\n   |             \
    \              ^^^^^^^^ use o"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|word| match word {\n            \"\
    zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n         \
    \   \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n      \
    \  })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|&digit| match digit {\n            0 => \"zero\",\n           \
    \ 1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n    \
    \        4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => unreachable!(),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|x| match x {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => unreachable!(),\n        })\n  \
    \      .collect();\n    numbers.sort();\n    numbers\n        .iter()\n      \
    \  .map(|x| match x {\n            0 => \"zero\",\n            1 => \"one\",\n\
    \            2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => unreachable!(),\n        })\n        .collect::<Vec<&str>>()\n       \
    \ .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sequence: Vec<usize>\
    \ = vec![];\n    let words: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for word in words {\n        let n = match word {\n            \"zero\" =>\
    \ 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\"\
    \ => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"\
    six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n      \
    \      \"nine\" => 9,\n            _ => panic!(\"invalid number word: {}\", word),\n\
    \        };\n        sequence.push(n);\n    }\n    sequence.sort();\n    let mut\
    \ result = String::new();\n    for n in sequence {\n        result.push_str(&format!(\"\
    {} \", match n {\n            0 => \"zero\",\n            1 => \"one\",\n    \
    \        2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => panic!(\"invalid number: {}\", n),\n        }));\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num: Vec<u32> = Vec::new();\n\
    \    let ns: Vec<&str> = numbers.split(\" \").collect();\n    for n in ns {\n\
    \        num.push(match n {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => 10,\n        });\n    }\n    num.sort();\n    let mut result = String::new();\n\
    \    for n in num {\n        result.push_str(match n {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        });\n        result.push_str(\"\
    \ \");\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut vec: Vec<usize> = Vec::new();\n\
    \    let nums: Vec<&str> = numbers.split_whitespace().collect();\n    for num\
    \ in nums {\n        match num {\n            \"zero\" => vec.push(0),\n     \
    \       \"one\" => vec.push(1),\n            \"two\" => vec.push(2),\n       \
    \     \"three\" => vec.push(3),\n            \"four\" => vec.push(4),\n      \
    \      \"five\" => vec.push(5),\n            \"six\" => vec.push(6),\n       \
    \     \"seven\" => vec.push(7),\n            \"eight\" => vec.push(8),\n     \
    \       \"nine\" => vec.push(9),\n            _ => panic!(\"Unknown numeral\"\
    ),\n        }\n    }\n    vec.sort();\n    let mut out: String = String::new();\n\
    \    for num in vec {\n        match num {\n            0 => out.push_str(\"zero\
    \ \"),\n            1 => out.push_str(\"one \"),\n            2 => out.push_str(\"\
    two \"),\n            3 => out.push_str(\"three \"),\n            4 => out.push_str(\"\
    four \"),\n            5 => out.push_str(\"five \"),\n            6 => out.push_str(\"\
    six \"),\n            7 => out.push_str(\"seven \"),\n            8 => out.push_str(\"\
    eight \"),\n            9 => out.push_str(\"nine \"),\n            _ => panic!(\"\
    Unknown numeral\"),\n        }\n    }\n    return out.trim().to_string();\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|n| number(n))\n        .collect();\n\
    \    nums.sort();\n    nums.iter()\n        .map(|n| number_name(*n))\n      \
    \  .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number` in this scope\n --> /tmp/tmpipwtjwi0.rs:9:18\n\
    \  |\n9 |         .map(|n| number(n))\n  |                  ^^^^^^ help: a local\
    \ variable with a similar name exists: `numbers`\n\nerror[E0425]: cannot find\
    \ function `number_name` in this scope\n  --> /tmp/tmpipwtjwi0.rs:13:18\n   |\n\
    13 |         .map(|n| number_name(*n))\n   |                  ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut split = numbers.split_whitespace();\n\
    \    let mut vec: Vec<i32> = vec![];\n    while let Some(num) = split.next() {\n\
    \        vec.push(match num {\n            \"zero\" => 0,\n            \"one\"\
    \ => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"\
    four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n        \
    \    \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n\
    \            _ => panic!(\"Unexpected token: {}\", num),\n        });\n    }\n\
    \    vec.sort();\n    let mut res = String::new();\n    for num in vec {\n   \
    \     let num_str = match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Unexpected number: {}\", num),\n        };\n    \
    \    res.push_str(num_str);\n        res.push(' ');\n    }\n    res.pop();\n \
    \   res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| a.cmp(b));\n\
    \    return numbers.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp5pj3plp9.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i64> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => -1,\n    \
    \    });\n    }\n    nums.sort();\n    let mut res = String::new();\n    for num\
    \ in nums {\n        res.push_str(match num {\n            0 => \"zero\",\n  \
    \          1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"-1\",\n        });\n        res.push(' ');\n\
    \    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut tokens: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    let mut numbers: Vec<u32> = tokens.iter().map(|t| number_lookup(t)).collect();\n\
    \    numbers.sort();\n    numbers.iter().map(|n| number_lookup(n)).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_lookup` in this scope\n -->\
    \ /tmp/tmp4fd3rakd.rs:8:55\n  |\n8 |     let mut numbers: Vec<u32> = tokens.iter().map(|t|\
    \ number_lookup(t)).collect();\n  |                                          \
    \             ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `number_lookup` in this scope\n  --> /tmp/tmp4fd3rakd.rs:10:28\n  \
    \ |\n10 |     numbers.iter().map(|n| number_lookup(n)).collect::<Vec<&str>>().join(\"\
    \ \")\n   |                            ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<u8>\
    \ = numbers\n        .split_whitespace()\n        .map(|numeral| match numeral\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Unrecognized numeral!\"),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|num| match num {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Unrecognized digit!\"\
    ),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v: Vec<&str> = numbers.split('\
    \ ').collect();\n    v.sort();\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpy_c74c4i.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str> = numbers.split('\
    \ ').collect();\n    let mut sorted_numbers: Vec<i32> = Vec::new();\n    for number\
    \ in numbers {\n        sorted_numbers.push(get_number(number));\n    }\n    sorted_numbers.sort();\n\
    \    let mut result: String = String::new();\n    for i in 0..sorted_numbers.len()\
    \ {\n        result.push_str(get_numeral(sorted_numbers[i]));\n        if i <\
    \ sorted_numbers.len() - 1 {\n            result.push(' ');\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n  --> /tmp/tmp_n_z9dm4.rs:10:29\n\
    \   |\n10 |         sorted_numbers.push(get_number(number));\n   |           \
    \                  ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `get_numeral` in this scope\n  --> /tmp/tmp_n_z9dm4.rs:15:25\n\
    \   |\n15 |         result.push_str(get_numeral(sorted_numbers[i]));\n   |   \
    \                      ^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let sorted_numbers: Vec<String>\
    \ = numbers\n        .split(' ')\n        .map(|n| word_to_number(n))\n      \
    \  .sorted()\n        .iter()\n        .map(|n| number_to_word(*n))\n        .collect();\n\
    \    sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `word_to_number` in this scope\n -->\
    \ /tmp/tmpl50hzht2.rs:9:18\n  |\n9 |         .map(|n| word_to_number(n))\n  |\
    \                  ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_word` in this scope\n  --> /tmp/tmpl50hzht2.rs:12:18\n\
    \   |\n12 |         .map(|n| number_to_word(*n))\n   |                  ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `sorted` found for\
    \ struct `Map` in the current scope\n  --> /tmp/tmpl50hzht2.rs:10:10\n   |\n10\
    \ |         .sorted()\n   |          ^^^^^^ method not found in `Map<std::str::Split<'_,\
    \ char>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut s: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    s.sort();\n    s.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpy3o36wao.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let words: Vec<&str> = numbers.split('\
    \ ').collect();\n    let mut nums: Vec<u8> = Vec::new();\n    for i in words {\n\
    \        nums.push(parse_word(i));\n    }\n    nums.sort();\n    let mut output\
    \ = String::new();\n    for i in nums {\n        output.push_str(word_parser(i));\n\
    \        output.push(' ');\n    }\n    output.pop();\n    output\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `parse_word` in this scope\n  --> /tmp/tmpmwgu90xb.rs:10:19\n\
    \   |\n10 |         nums.push(parse_word(i));\n   |                   ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `word_parser`\
    \ in this scope\n  --> /tmp/tmpmwgu90xb.rs:15:25\n   |\n15 |         output.push_str(word_parser(i));\n\
    \   |                         ^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_sorted: Vec<u32>\
    \ = Vec::new();\n    let mut num_map: HashMap<&str, u32> = HashMap::new();\n \
    \   num_map.insert(\"zero\", 0);\n    num_map.insert(\"one\", 1);\n    num_map.insert(\"\
    two\", 2);\n    num_map.insert(\"three\", 3);\n    num_map.insert(\"four\", 4);\n\
    \    num_map.insert(\"five\", 5);\n    num_map.insert(\"six\", 6);\n    num_map.insert(\"\
    seven\", 7);\n    num_map.insert(\"eight\", 8);\n    num_map.insert(\"nine\",\
    \ 9);\n\n    let mut num_list: Vec<&str> = numbers.split(\" \").collect();\n \
    \   for word in num_list.iter() {\n        let num = num_map.get(*word).unwrap();\n\
    \        num_sorted.push(*num);\n    }\n    num_sorted.sort();\n\n    let mut\
    \ result: String = String::new();\n    for num in num_sorted.iter() {\n      \
    \  for (key, value) in num_map.iter() {\n            if num == value {\n     \
    \           result.push_str(key);\n                result.push_str(\" \");\n \
    \           }\n        }\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpzvzo22_t.rs:8:22\n\
    \  |\n8 |     let mut num_map: HashMap<&str, u32> = HashMap::new();\n  |     \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpzvzo22_t.rs:8:43\n\
    \  |\n8 |     let mut num_map: HashMap<&str, u32> = HashMap::new();\n  |     \
    \                                      ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<i32>\
    \ = extract_numbers(&numbers);\n    sorted_numbers.sort();\n    build_response(&sorted_numbers)\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `extract_numbers` in this scope\n -->\
    \ /tmp/tmppl6agefg.rs:7:40\n  |\n7 |     let mut sorted_numbers: Vec<i32> = extract_numbers(&numbers);\n\
    \  |                                        ^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `build_response` in this scope\n\
    \ --> /tmp/tmppl6agefg.rs:9:5\n  |\n9 |     build_response(&sorted_numbers)\n\
    \  |     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums = \"zero one two three\
    \ four five six seven eight nine\".split(\" \");\n    let mut num_sorted = Vec::new();\n\
    \    for i in numbers.split(\" \") {\n        num_sorted.push(i.to_string());\n\
    \    }\n    num_sorted.sort_by(|a, b| nums.position(|i| i == a).unwrap().cmp(&nums.position(|i|\
    \ i == b).unwrap()));\n    num_sorted.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `nums` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmps4x7h6nk.rs:12:31\n   |\n7  |     let nums = \"zero one\
    \ two three four five six seven eight nine\".split(\" \");\n   |         ----\
    \ help: consider changing this to be mutable: `mut nums`\n...\n12 |     num_sorted.sort_by(|a,\
    \ b| nums.position(|i| i == a).unwrap().cmp(&nums.position(|i| i == b).unwrap()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as\
    \ mutable\n\nerror[E0596]: cannot borrow `nums` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmps4x7h6nk.rs:12:71\n   |\n7  |     let nums = \"zero\
    \ one two three four five six seven eight nine\".split(\" \");\n   |         ----\
    \ help: consider changing this to be mutable: `mut nums`\n...\n12 |     num_sorted.sort_by(|a,\
    \ b| nums.position(|i| i == a).unwrap().cmp(&nums.position(|i| i == b).unwrap()));\n\
    \   |                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut res: Vec<u8> = Vec::new();\n\
    \    let n = numbers.split_whitespace().collect::<Vec<&str>>();\n    let mut size\
    \ = n.len();\n    let mut m: Vec<u8> = Vec::new();\n    let mut l: Vec<&str> =\
    \ Vec::new();\n    for _ in 0..size {\n        m.push(0);\n    }\n    for i in\
    \ 0..size {\n        match n[i] {\n            \"zero\" => m[i] = 0,\n       \
    \     \"one\" => m[i] = 1,\n            \"two\" => m[i] = 2,\n            \"three\"\
    \ => m[i] = 3,\n            \"four\" => m[i] = 4,\n            \"five\" => m[i]\
    \ = 5,\n            \"six\" => m[i] = 6,\n            \"seven\" => m[i] = 7,\n\
    \            \"eight\" => m[i] = 8,\n            \"nine\" => m[i] = 9,\n     \
    \       _ => println!(\"Wrong argument\"),\n        }\n    }\n    for _ in 0..size\
    \ {\n        let mut small: u8 = 10;\n        for j in 0..size {\n           \
    \ if m[j] < small {\n                small = m[j];\n            }\n        }\n\
    \        l.push(match small {\n            0 => \"zero\",\n            1 => \"\
    one\",\n            2 => \"two\",\n            3 => \"three\",\n            4\
    \ => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n      \
    \      7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => \"Wrong argument\",\n        });\n        for j in 0..size\
    \ {\n            if m[j] == small {\n                m[j] = 10;\n            }\n\
    \        }\n    }\n    for i in 0..size {\n        res.push(l[i].as_bytes()[0]);\n\
    \        res.push(l[i].as_bytes()[1]);\n        res.push(l[i].as_bytes()[2]);\n\
    \        res.push(\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1lkvq938.rs:70:3\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n...\n56 |     for i in 0..size\
    \ {\n   |                      - this delimiter might not be properly closed...\n\
    ...\n61 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    70 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp1lkvq938.rs:60:17\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - closing delimiter possibly meant for this\n...\n\
    60 |         res.push(\n   |                 ^ unclosed delimiter\n61 | }\n  \
    \ | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 1 argument\
    \ but 0 arguments were supplied\n    --> /tmp/tmp1lkvq938.rs:60:13\n     |\n60\
    \   |         res.push(\n     |             ^^^^- supplied 0 arguments\n     |\
    \             |\n     |             expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1lkvq938.rs:6:37\n\
    \  |\n6 | fn sort_numbers(numbers: String) -> String {\n  |    ------------  \
    \                   ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut translated: Vec<_> =\
    \ numbers\n        .split_whitespace()\n        .map(|s| translate_to_int(s))\n\
    \        .collect();\n    translated.sort();\n    translated\n        .iter()\n\
    \        .map(|s| translate_to_string(s))\n        .collect::<Vec<_>>()\n    \
    \    .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `translate_to_int` in this scope\n -->\
    \ /tmp/tmp2ask7vbd.rs:9:18\n  |\n9 |         .map(|s| translate_to_int(s))\n \
    \ |                  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `translate_to_string` in this scope\n  --> /tmp/tmp2ask7vbd.rs:14:18\n\
    \   |\n14 |         .map(|s| translate_to_string(s))\n   |                  ^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let names = vec![\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"];\n    let mut sorted_numbers: Vec<usize> = Vec::new();\n    let mut\
    \ result = String::new();\n\n    for number in numbers.split_whitespace() {\n\
    \        for (i, name) in names.iter().enumerate() {\n            if number ==\
    \ name {\n                sorted_numbers.push(i);\n            }\n        }\n\
    \    }\n\n    sorted_numbers.sort();\n\n    for number in sorted_numbers {\n \
    \       result.push_str(names[number]);\n        result.push(' ');\n    }\n\n\
    \    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmpp2lw7njy.rs:13:23\n\
    \   |\n13 |             if number == name {\n   |                       ^^ no\
    \ implementation for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>`\
    \ is not implemented for `str`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n   = note: required because of the requirements on the\
    \ impl of `PartialEq<&&str>` for `&str`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v = numbers.split(' ').map(|x|\
    \ match x {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => 0,\n    }).collect::<Vec<u32>>();\n    v.sort();\n\
    \    v.iter().map(|x| match x {\n        0 => \"zero\",\n        1 => \"one\"\
    ,\n        2 => \"two\",\n        3 => \"three\",\n        4 => \"four\",\n  \
    \      5 => \"five\",\n        6 => \"six\",\n        7 => \"seven\",\n      \
    \  8 => \"eight\",\n        9 => \"nine\",\n        _ => \"\",\n    }).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"zero\"`,\n right: `\"\"`', /tmp/tmp10ngyhj3.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result = String::new();\n\
    \    let mut nums = numbers.split(\" \").collect::<Vec<&str>>();\n    let mut\
    \ digits = vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let words = vec![\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"];\n    for digit in digits {\n        for num in nums.iter_mut() {\n\
    \            if *num == words[digit] {\n                result += num + \" \"\
    ;\n                *num = \"\";\n            }\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&str` to `&mut &str`\n  --> /tmp/tmp6dhnw6ov.rs:14:31\n\
    \   |\n14 |                 result += num + \" \";\n   |                     \
    \      --- ^ --- &str\n   |                           |\n   |                \
    \           &mut &str\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Unknown number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| number_to_string(*n))\n        .collect::<Vec<_>>()\n      \
    \  .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_string` in this scope\n \
    \ --> /tmp/tmpkwb9_wvg.rs:26:18\n   |\n26 |         .map(|n| number_to_string(*n))\n\
    \   |                  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut iter = numbers.split_whitespace();\n\
    \    let nums = iter.map(|n| match n {\n        \"zero\" => 0,\n        \"one\"\
    \ => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n\
    \        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n    \
    \    \"eight\" => 8,\n        \"nine\" => 9,\n        _ => unreachable!()\n  \
    \  }).collect::<Vec<u8>>();\n    let mut nums = nums.iter().map(|&x| x.to_string()).collect::<Vec<String>>();\n\
    \    nums.sort();\n    nums.join(\" \")\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmp8rjjzyqt.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = numbers.split_whitespace().map(str_to_numeral).collect::<Vec<u8>>();\n\
    \    nums.sort();\n    nums.iter().map(numeral_to_str).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `str_to_numeral` in this scope\n --> /tmp/tmpa5nx5zot.rs:7:51\n\
    \  |\n7 |     let mut nums = numbers.split_whitespace().map(str_to_numeral).collect::<Vec<u8>>();\n\
    \  |                                                   ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `numeral_to_str` in this scope\n\
    \ --> /tmp/tmpa5nx5zot.rs:9:21\n  |\n9 |     nums.iter().map(numeral_to_str).collect::<Vec<&str>>().join(\"\
    \ \")\n  |                     ^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = numbers.split_whitespace().map(|w|\
    \ {\n        match w {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid input!\"),\n        }\n    }).collect::<Vec<i32>>();\n\
    \    nums.sort();\n    let mut output = String::new();\n    for i in 0..nums.len()\
    \ {\n        output.push_str(match nums[i] {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid integer!\"),\n        });\n\
    \        if i != nums.len() - 1 {\n            output.push(' ');\n        }\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    let mut sorted_nums: Vec<i32> = Vec::new();\n    for i in numbers.split_whitespace()\
    \ {\n        nums.push(number_to_integer(i));\n    }\n    let mut nums_copy =\
    \ nums.clone();\n    while !nums_copy.is_empty() {\n        let min_num = nums_copy.iter().min().unwrap();\n\
    \        let index = nums_copy.iter().position(|&x| x == *min_num).unwrap();\n\
    \        nums_copy.remove(index);\n        sorted_nums.push(*min_num);\n    }\n\
    \    let mut final_str = String::new();\n    for i in sorted_nums {\n        final_str.push_str(&integer_to_number(i));\n\
    \        final_str.push(' ');\n    }\n    final_str.pop();\n    final_str\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_integer` in this scope\n\
    \  --> /tmp/tmppntlzptc.rs:10:19\n   |\n10 |         nums.push(number_to_integer(i));\n\
    \   |                   ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `integer_to_number` in this scope\n  --> /tmp/tmppntlzptc.rs:21:29\n\
    \   |\n21 |         final_str.push_str(&integer_to_number(i));\n   |         \
    \                    ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    result.sort();\n    result.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmplo_ln1pa.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<String> = numbers.split('\
    \ ').map(|s| s.to_string()).collect();\n    let mut numbers_sorted: Vec<&String>\
    \ = numbers.iter().collect();\n    numbers_sorted.sort_by(|x, y| x.cmp(y));\n\
    \    let mut result = numbers_sorted.join(\" \");\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<&String>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpkdlt2m0j.rs:10:37\n   |\n10 |\
    \     let mut result = numbers_sorted.join(\" \");\n   |                     \
    \                ^^^^ method cannot be called on `Vec<&String>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `[&String]: Join<_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sort_vec: Vec<u32> =\
    \ numbers\n        .split_whitespace()\n        .map(|s| s.parse::<u32>().unwrap())\n\
    \        .collect();\n    sort_vec.sort();\n    let mut result = String::new();\n\
    \    for num in sort_vec {\n        result.push_str(&num.to_string());\n     \
    \   result.push(' ');\n    }\n    let _ = result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmply4v9j6n.rs:9:35\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split(' ')\n        .map(|n| match n {\n            \"zero\" => 0,\n\
    \            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" =>\
    \ 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\"\
    \ => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n          \
    \  \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n        })\n\
    \        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n| match\
    \ n {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Invalid number', /tmp/tmp1_49tzbz.rs:20:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // TODO\n    let mut number_vec:\
    \ Vec<i32> = numbers.split_whitespace().map(|num| match num {\n        \"zero\"\
    \ => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n\
    \        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n     \
    \   \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n       \
    \ _ => panic!(\"There are strings that are not numbers!\"),\n    }).collect();\n\
    \    number_vec.sort();\n    number_vec.iter().map(|num| match num {\n       \
    \ 0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n        3 => \"\
    three\",\n        4 => \"four\",\n        5 => \"five\",\n        6 => \"six\"\
    ,\n        7 => \"seven\",\n        8 => \"eight\",\n        9 => \"nine\",\n\
    \        _ => panic!(\"There are strings that are not numbers!\"),\n    }).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_list: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input: {}\", s),\n\
    \        })\n        .collect();\n    num_list.sort();\n    num_list\n       \
    \ .iter()\n        .map(|s| match s {\n            0 => \"zero\",\n          \
    \  1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n   \
    \         4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by_key(|&number| NUMERALS.index_of(number));\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUMERALS` in this scope\n --> /tmp/tmpd_2ig1ii.rs:8:35\n\
    \  |\n8 |     numbers.sort_by_key(|&number| NUMERALS.index_of(number));\n  | \
    \                                  ^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_vec: Vec<i32> = Vec::new();\n\
    \    let num_str_vec: Vec<&str> = numbers.split_whitespace().collect();\n    for\
    \ num_str in num_str_vec {\n        let mut num = -1;\n        match num_str {\n\
    \            \"zero\" => num = 0,\n            \"one\" => num = 1,\n         \
    \   \"two\" => num = 2,\n            \"three\" => num = 3,\n            \"four\"\
    \ => num = 4,\n            \"five\" => num = 5,\n            \"six\" => num =\
    \ 6,\n            \"seven\" => num = 7,\n            \"eight\" => num = 8,\n \
    \           \"nine\" => num = 9,\n            _ => (),\n        }\n        if\
    \ num >= 0 {\n            num_vec.push(num);\n        }\n    }\n    num_vec.sort();\n\
    \    let mut out_str = String::new();\n    for num in num_vec {\n        out_str.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    \",\n        });\n        out_str.push(' ');\n    }\n    out_str.pop();\n    out_str\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums = numbers.split_whitespace().map(|n|\
    \ numeral_to_int(n)).collect::<Vec<i32>>();\n    let mut nums_sorted = nums.clone();\n\
    \    nums_sorted.sort();\n    let nums_ints: Vec<String> = nums_sorted.iter().map(|n|\
    \ int_to_numeral(*n)).collect();\n    nums_ints.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_int` in this scope\n -->\
    \ /tmp/tmppv61poq8.rs:7:51\n  |\n7 |     let nums = numbers.split_whitespace().map(|n|\
    \ numeral_to_int(n)).collect::<Vec<i32>>();\n  |                             \
    \                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `int_to_numeral` in this scope\n  --> /tmp/tmppv61poq8.rs:10:61\n\
    \   |\n10 |     let nums_ints: Vec<String> = nums_sorted.iter().map(|n| int_to_numeral(*n)).collect();\n\
    \   |                                                             ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Split on whitespace\n    let\
    \ numbers: Vec<_> = numbers.split_whitespace().collect();\n\n    // Sort numbers\n\
    \    let mut sorted_numbers: Vec<_> = numbers.into_iter().map(|s| s.to_string()).collect();\n\
    \    sorted_numbers.sort();\n\n    // Add commas\n    let mut output = String::new();\n\
    \    for number in sorted_numbers {\n        output.push_str(&number);\n     \
    \   output.push(' ');\n    }\n\n    // Strip comma and trailing whitespace\n \
    \   output.pop();\n    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpi5t2pxgf.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .map(numeral_to_u32)\n        .sorted()\n        .map(numeral_from_u32)\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `numeral_to_u32` in this scope\n --> /tmp/tmplhuc8ytk.rs:9:14\n\
    \  |\n9 |         .map(numeral_to_u32)\n  |              ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `numeral_from_u32` in this\
    \ scope\n  --> /tmp/tmplhuc8ytk.rs:11:14\n   |\n11 |         .map(numeral_from_u32)\n\
    \   |              ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no\
    \ method named `sorted` found for struct `Map` in the current scope\n  --> /tmp/tmplhuc8ytk.rs:10:10\n\
    \   |\n10 |         .sorted()\n   |          ^^^^^^ method not found in `Map<SplitWhitespace<'_>,\
    \ _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = numbers.split_whitespace().map(|n|\
    \ {\n        match n {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid numeral\"),\n        }\n    }).collect::<Vec<i32>>();\n\
    \    nums.sort();\n    nums.iter().map(|n| {\n        match n {\n            0\
    \ => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n       \
    \     3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n\
    \            6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        }\n    }).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut map: HashMap<&str, u32>\
    \ = HashMap::new();\n    map.insert(\"zero\", 0);\n    map.insert(\"one\", 1);\n\
    \    map.insert(\"two\", 2);\n    map.insert(\"three\", 3);\n    map.insert(\"\
    four\", 4);\n    map.insert(\"five\", 5);\n    map.insert(\"six\", 6);\n    map.insert(\"\
    seven\", 7);\n    map.insert(\"eight\", 8);\n    map.insert(\"nine\", 9);\n\n\
    \    let mut arr: Vec<u32> = Vec::new();\n    for word in numbers.split_whitespace()\
    \ {\n        let v = map.get(word).unwrap();\n        arr.push(*v);\n    }\n \
    \   arr.sort();\n\n    let mut res = String::new();\n    for n in arr {\n    \
    \    res.push_str(map.get(&n.to_string()).unwrap());\n        res.push(' ');\n\
    \    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpqoxmn3jb.rs:7:18\n\
    \  |\n7 |     let mut map: HashMap<&str, u32> = HashMap::new();\n  |         \
    \         ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpqoxmn3jb.rs:7:39\n\
    \  |\n7 |     let mut map: HashMap<&str, u32> = HashMap::new();\n  |         \
    \                              ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpobgxvcp7.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpobgxvcp7.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let number_array: Vec<u8> =\n\
    \        numbers\n            .split_whitespace()\n            .map(|word| word_to_number(word.to_string()))\n\
    \            .collect();\n    let mut sorted_array = number_array.clone();\n \
    \   sorted_array.sort();\n    let res: Vec<String> = sorted_array\n        .iter()\n\
    \        .map(|num| number_to_word(num.clone()))\n        .collect();\n    return\
    \ res.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `word_to_number` in this scope\n  -->\
    \ /tmp/tmpmsfr6r07.rs:10:25\n   |\n10 |             .map(|word| word_to_number(word.to_string()))\n\
    \   |                         ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_word` in this scope\n  --> /tmp/tmpmsfr6r07.rs:16:20\n\
    \   |\n16 |         .map(|num| number_to_word(num.clone()))\n   |            \
    \        ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split_whitespace();\n\
    \    let numbers: Vec<_> = numbers.map(|s| match s {\n        \"zero\" => 0,\n\
    \        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n     \
    \   \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"\
    seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"\
    invalid number\"),\n    }).collect();\n    let mut numbers = numbers;\n    numbers.sort();\n\
    \    let strings: Vec<_> = numbers.iter().map(|n| match n {\n        0 => \"zero\"\
    ,\n        1 => \"one\",\n        2 => \"two\",\n        3 => \"three\",\n   \
    \     4 => \"four\",\n        5 => \"five\",\n        6 => \"six\",\n        7\
    \ => \"seven\",\n        8 => \"eight\",\n        9 => \"nine\",\n        _ =>\
    \ panic!(\"impossible\"),\n    }).collect();\n    strings.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v: Vec<&str> = numbers.split('\
    \ ').collect();\n    v.sort();\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpcgiavxyx.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| to_number(*a).cmp(&to_number(*b)));\n\
    \    return numbers.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_number` in this scope\n --> /tmp/tmpwiwu61ui.rs:8:28\n\
    \  |\n8 |     numbers.sort_by(|a, b| to_number(*a).cmp(&to_number(*b)));\n  |\
    \                            ^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `to_number` in this scope\n --> /tmp/tmpwiwu61ui.rs:8:47\n\
    \  |\n8 |     numbers.sort_by(|a, b| to_number(*a).cmp(&to_number(*b)));\n  |\
    \                                               ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut vec: Vec<i32> = Vec::new();\n\
    \    let mut nums: Vec<&str> = numbers.split(\" \").collect();\n    nums.sort();\n\
    \    for n in nums {\n        vec.push(match n {\n            \"zero\" => 0,\n\
    \            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" =>\
    \ 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\"\
    \ => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n          \
    \  \"nine\" => 9,\n            _ => 0,\n        });\n    }\n    let mut answer\
    \ = String::new();\n    for n in vec {\n        answer.push_str(match n {\n  \
    \          0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => \"\",\n        });\n\
    \        answer.push_str(\" \");\n    }\n    answer.pop();\n    answer\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"zero\"`,\n right: `\"\"`', /tmp/tmphkp_9guh.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result: Vec<String> =\
    \ numbers.split_whitespace().map(|x| x.to_string()).collect();\n    result.sort_by(|a,\
    \ b| {\n        match string_to_number(a) {\n            Some(num_a) => match\
    \ string_to_number(b) {\n                Some(num_b) => num_a.cmp(&num_b),\n \
    \               None => ::std::cmp::Ordering::Greater,\n            },\n     \
    \       None => ::std::cmp::Ordering::Less,\n        }\n    });\n    result.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `string_to_number` in this scope\n -->\
    \ /tmp/tmpk1az41n6.rs:9:15\n  |\n9 |         match string_to_number(a) {\n  |\
    \               ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `string_to_number` in this scope\n  --> /tmp/tmpk1az41n6.rs:10:34\n\
    \   |\n10 |             Some(num_a) => match string_to_number(b) {\n   |     \
    \                             ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let num = numbers.split(\" \"\
    );\n    let num_vec: Vec<&str> = num.collect();\n    let mut sorted_vec: Vec<&str>\
    \ = num_vec.clone();\n    sorted_vec.sort();\n    sorted_vec.iter().fold(String::new(),\
    \ |mut acc, x| {\n        acc.push_str(x);\n        acc.push(' ');\n        acc\n\
    \    })\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" \"`,\n right: `\"\"`', /tmp/tmptjfr0iq1.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v: Vec<String> = numbers.split_whitespace().map(|x|\
    \ x.to_string()).collect();\n    v.sort_by(|a, b| a.cmp(b));\n    v.join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp3kyse6sd.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut m = numbers.split_whitespace().map(|s|\
    \ s.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n    m.sort();\n    m.iter().map(|s|\
    \ s.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmp1e_16bzo.rs:7:69\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums: Vec<&str> = numbers.split('\
    \ ').collect();\n    let mut num_map: HashMap<&str, usize> = HashMap::new();\n\
    \    num_map.insert(\"zero\", 0);\n    num_map.insert(\"one\", 1);\n    num_map.insert(\"\
    two\", 2);\n    num_map.insert(\"three\", 3);\n    num_map.insert(\"four\", 4);\n\
    \    num_map.insert(\"five\", 5);\n    num_map.insert(\"six\", 6);\n    num_map.insert(\"\
    seven\", 7);\n    num_map.insert(\"eight\", 8);\n    num_map.insert(\"nine\",\
    \ 9);\n\n    let mut sorted: Vec<&str> = Vec::new();\n    for num in nums {\n\
    \        sorted.push(num);\n    }\n    sorted.sort_by(|a, b| num_map.get(a).unwrap().cmp(num_map.get(b).unwrap()));\n\
    \    sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp7woxyyl5.rs:8:22\n\
    \  |\n8 |     let mut num_map: HashMap<&str, usize> = HashMap::new();\n  |   \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp7woxyyl5.rs:8:45\n\
    \  |\n8 |     let mut num_map: HashMap<&str, usize> = HashMap::new();\n  |   \
    \                                          ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let sorted = numbers\n      \
    \  .split_whitespace()\n        .map(|num| NUMERAL_TO_NUMBER[num])\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .sorted()\n        .map(|num| NUMBER_TO_NUMERAL[num])\n\
    \        .collect::<Vec<_>>()\n        .join(\" \");\n    println!(\"{}\", sorted);\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUMERAL_TO_NUMBER` in this scope\n -->\
    \ /tmp/tmpxuomv9g0.rs:9:20\n  |\n9 |         .map(|num| NUMERAL_TO_NUMBER[num])\n\
    \  |                    ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `NUMBER_TO_NUMERAL` in this scope\n  --> /tmp/tmpxuomv9g0.rs:13:20\n\
    \   |\n13 |         .map(|num| NUMBER_TO_NUMERAL[num])\n   |                 \
    \   ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `sorted` found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmpxuomv9g0.rs:12:10\n\
    \   |\n12 |         .sorted()\n   |          ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut array: Vec<u32> = Vec::new();\n\
    \    for n in numbers.split_whitespace() {\n        match n {\n            \"\
    zero\" => array.push(0),\n            \"one\" => array.push(1),\n            \"\
    two\" => array.push(2),\n            \"three\" => array.push(3),\n           \
    \ \"four\" => array.push(4),\n            \"five\" => array.push(5),\n       \
    \     \"six\" => array.push(6),\n            \"seven\" => array.push(7),\n   \
    \         \"eight\" => array.push(8),\n            \"nine\" => array.push(9),\n\
    \            _ => println!(\"Invalid number {}\", n),\n        }\n    }\n    array.sort();\n\
    \    let mut ret = String::new();\n    for n in array {\n        ret.push_str(match\
    \ n {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    error\",\n        });\n        ret.push(' ');\n    }\n    ret.pop();\n    ret\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut digits: Vec<u32> = vec![];\n\
    \    for num in numbers.split_whitespace() {\n        digits.push(numeral_to_u32(num));\n\
    \    }\n    let mut sorted_digits = digits.clone();\n    sorted_digits.sort();\n\
    \    let mut sorted_numbers: Vec<String> = vec![];\n    for digit in sorted_digits\
    \ {\n        sorted_numbers.push(u32_to_numeral(digit));\n    }\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_u32` in this scope\n -->\
    \ /tmp/tmpxfuh9t78.rs:9:21\n  |\n9 |         digits.push(numeral_to_u32(num));\n\
    \  |                     ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `u32_to_numeral` in this scope\n  --> /tmp/tmpxfuh9t78.rs:15:29\n\
    \   |\n15 |         sorted_numbers.push(u32_to_numeral(digit));\n   |        \
    \                     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<i32>\
    \ = Vec::new();\n    let words: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for word in words {\n        match word {\n            \"zero\" => numbers_vec.push(0),\n\
    \            \"one\" => numbers_vec.push(1),\n            \"two\" => numbers_vec.push(2),\n\
    \            \"three\" => numbers_vec.push(3),\n            \"four\" => numbers_vec.push(4),\n\
    \            \"five\" => numbers_vec.push(5),\n            \"six\" => numbers_vec.push(6),\n\
    \            \"seven\" => numbers_vec.push(7),\n            \"eight\" => numbers_vec.push(8),\n\
    \            \"nine\" => numbers_vec.push(9),\n            _ => panic!(\"unknown\
    \ number: {}\", word),\n        }\n    }\n    numbers_vec.sort();\n    let mut\
    \ sorted = String::new();\n    for num in numbers_vec {\n        match num {\n\
    \            0 => sorted.push_str(\"zero \"),\n            1 => sorted.push_str(\"\
    one \"),\n            2 => sorted.push_str(\"two \"),\n            3 => sorted.push_str(\"\
    three \"),\n            4 => sorted.push_str(\"four \"),\n            5 => sorted.push_str(\"\
    five \"),\n            6 => sorted.push_str(\"six \"),\n            7 => sorted.push_str(\"\
    seven \"),\n            8 => sorted.push_str(\"eight \"),\n            9 => sorted.push_str(\"\
    nine \"),\n            _ => panic!(\"unknown number: {}\", num),\n        }\n\
    \    }\n    sorted.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_vec: Vec<u8> = Vec::new();\n\
    \    for word in numbers.split_whitespace() {\n        match word {\n        \
    \    \"zero\" => num_vec.push(0),\n            \"one\" => num_vec.push(1),\n \
    \           \"two\" => num_vec.push(2),\n            \"three\" => num_vec.push(3),\n\
    \            \"four\" => num_vec.push(4),\n            \"five\" => num_vec.push(5),\n\
    \            \"six\" => num_vec.push(6),\n            \"seven\" => num_vec.push(7),\n\
    \            \"eight\" => num_vec.push(8),\n            \"nine\" => num_vec.push(9),\n\
    \            _ => panic!(\"Unexpected string passed to sort_numbers()\"),\n  \
    \      }\n    }\n    num_vec.sort();\n    num_vec.iter().map(|&num| NUM_TO_WORD[num\
    \ as usize]).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUM_TO_WORD` in this scope\n  --> /tmp/tmpzm6n95o4.rs:24:31\n\
    \   |\n24 |     num_vec.iter().map(|&num| NUM_TO_WORD[num as usize]).collect::<Vec<&str>>().join(\"\
    \ \")\n   |                               ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    numbers.sort_by(|a,\
    \ b| {\n        let num1 = get_number(a);\n        let num2 = get_number(b);\n\
    \        num1.cmp(&num2)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n --> /tmp/tmpiiv6agqt.rs:9:20\n\
    \  |\n9 |         let num1 = get_number(a);\n  |                    ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `get_number` in\
    \ this scope\n  --> /tmp/tmpiiv6agqt.rs:10:20\n   |\n10 |         let num2 = get_number(b);\n\
    \   |                    ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Add your code here\n    \"\
    \"\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa76oq0rs.rs:8:5\n  |\n6 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |                          \
    \           ------ expected `String` because of return type\n7 |     // Add your\
    \ code here\n8 |     \"\"\n  |     ^^- help: try using a conversion method: `.to_string()`\n\
    \  |     |\n  |     expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut m: HashMap<&str, &str>\
    \ = HashMap::new();\n    m.insert(\"zero\", \"0\");\n    m.insert(\"one\", \"\
    1\");\n    m.insert(\"two\", \"2\");\n    m.insert(\"three\", \"3\");\n    m.insert(\"\
    four\", \"4\");\n    m.insert(\"five\", \"5\");\n    m.insert(\"six\", \"6\");\n\
    \    m.insert(\"seven\", \"7\");\n    m.insert(\"eight\", \"8\");\n    m.insert(\"\
    nine\", \"9\");\n\n    let mut v = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    v.sort_by(|a, b| {\n        m.get(*a).unwrap().cmp(m.get(*b).unwrap())\n\
    \    });\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp9krwnn5t.rs:7:16\n\
    \  |\n7 |     let mut m: HashMap<&str, &str> = HashMap::new();\n  |          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashMap`\n --> /tmp/tmp9krwnn5t.rs:7:38\n  |\n7 |  \
    \   let mut m: HashMap<&str, &str> = HashMap::new();\n  |                    \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<String> = numbers.split(\"\
    \ \").map(|s| s.to_string()).collect();\n    let mut mapping: HashMap<&str, u8>\
    \ = HashMap::new();\n    mapping.insert(\"zero\", 0);\n    mapping.insert(\"one\"\
    , 1);\n    mapping.insert(\"two\", 2);\n    mapping.insert(\"three\", 3);\n  \
    \  mapping.insert(\"four\", 4);\n    mapping.insert(\"five\", 5);\n    mapping.insert(\"\
    six\", 6);\n    mapping.insert(\"seven\", 7);\n    mapping.insert(\"eight\", 8);\n\
    \    mapping.insert(\"nine\", 9);\n    nums.sort_by(|a, b| mapping.get(a).unwrap().cmp(mapping.get(b).unwrap()));\n\
    \    nums.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpnptrjnl2.rs:8:22\n\
    \  |\n8 |     let mut mapping: HashMap<&str, u8> = HashMap::new();\n  |      \
    \                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpnptrjnl2.rs:8:42\n\
    \  |\n8 |     let mut mapping: HashMap<&str, u8> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    let mut numbers = numbers.iter().map(|&s| to_int(s)).collect::<Vec<i32>>();\n\
    \    numbers.sort();\n    numbers.iter().map(|&i| to_str(i)).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_int` in this scope\n --> /tmp/tmpih5xbmwi.rs:8:47\n\
    \  |\n8 |     let mut numbers = numbers.iter().map(|&s| to_int(s)).collect::<Vec<i32>>();\n\
    \  |                                               ^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `to_str` in this scope\n  --> /tmp/tmpih5xbmwi.rs:10:29\n\
    \   |\n10 |     numbers.iter().map(|&i| to_str(i)).collect::<Vec<&str>>().join(\"\
    \ \")\n   |                             ^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    unimplemented!(\"sort {}\", numbers)\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: sort ', /tmp/tmp5uf8j1xn.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|w| {\n            match w {\n    \
    \            \"zero\" => 0,\n                \"one\" => 1,\n                \"\
    two\" => 2,\n                \"three\" => 3,\n                \"four\" => 4,\n\
    \                \"five\" => 5,\n                \"six\" => 6,\n             \
    \   \"seven\" => 7,\n                \"eight\" => 8,\n                \"nine\"\
    \ => 9,\n                _ => 0,\n            }\n        })\n        .collect();\n\
    \    nums.sort();\n    return nums\n        .iter()\n        .map(|&w| {\n   \
    \         match w {\n                0 => \"zero\",\n                1 => \"one\"\
    ,\n                2 => \"two\",\n                3 => \"three\",\n          \
    \      4 => \"four\",\n                5 => \"five\",\n                6 => \"\
    six\",\n                7 => \"seven\",\n                8 => \"eight\",\n   \
    \             9 => \"nine\",\n                _ => \"\",\n            }\n    \
    \    })\n        .collect::<Vec<&str>>()\n        .join(\" \");\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(' ').collect::<Vec<&str>>();\n\
    \    let mut nums: Vec<i32> = nums.iter().map(|s| num_to_int(*s)).collect();\n\
    \    nums.sort();\n    nums.iter().map(|i| int_to_num(*i)).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_to_int` in this scope\n --> /tmp/tmpqokx2hp1.rs:8:50\n\
    \  |\n8 |     let mut nums: Vec<i32> = nums.iter().map(|s| num_to_int(*s)).collect();\n\
    \  |                                                  ^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `int_to_num` in this scope\n\
    \  --> /tmp/tmpqokx2hp1.rs:10:25\n   |\n10 |     nums.iter().map(|i| int_to_num(*i)).collect::<Vec<String>>().join(\"\
    \ \")\n   |                         ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v = numbers.split_whitespace().map(|n|\
    \ match n {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => panic!(\"expected number\"),\n    }).collect::<Vec<_>>();\n\
    \    v.sort();\n    v.iter().map(|n| match n {\n        0 => \"zero\",\n     \
    \   1 => \"one\",\n        2 => \"two\",\n        3 => \"three\",\n        4 =>\
    \ \"four\",\n        5 => \"five\",\n        6 => \"six\",\n        7 => \"seven\"\
    ,\n        8 => \"eight\",\n        9 => \"nine\",\n        _ => panic!(\"expected\
    \ number\"),\n    }).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = vec![];\n\
    \    for number in numbers.split_whitespace() {\n        match number {\n    \
    \        \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n   \
    \         \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n \
    \           \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let output: Vec<String> = nums.iter().map(|num| num.to_string()).collect();\n\
    \    output.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmpsv9x_q7d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut number_vec: Vec<u32>\
    \ = Vec::new();\n    for number in numbers.split(\" \") {\n        match number\
    \ {\n            \"zero\" => number_vec.push(0),\n            \"one\" => number_vec.push(1),\n\
    \            \"two\" => number_vec.push(2),\n            \"three\" => number_vec.push(3),\n\
    \            \"four\" => number_vec.push(4),\n            \"five\" => number_vec.push(5),\n\
    \            \"six\" => number_vec.push(6),\n            \"seven\" => number_vec.push(7),\n\
    \            \"eight\" => number_vec.push(8),\n            \"nine\" => number_vec.push(9),\n\
    \            _ => (),\n        }\n    }\n    number_vec.sort();\n    let mut output\
    \ = String::new();\n    for number in number_vec {\n        match number {\n \
    \           0 => output.push_str(\"zero \"),\n            1 => output.push_str(\"\
    one \"),\n            2 => output.push_str(\"two \"),\n            3 => output.push_str(\"\
    three \"),\n            4 => output.push_str(\"four \"),\n            5 => output.push_str(\"\
    five \"),\n            6 => output.push_str(\"six \"),\n            7 => output.push_str(\"\
    seven \"),\n            8 => output.push_str(\"eight \"),\n            9 => output.push_str(\"\
    nine \"),\n            _ => (),\n        }\n    }\n    output.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|&a, &b| {\n    \
    \    let a_int = translate_number(a);\n        let b_int = translate_number(b);\n\
    \        a_int.cmp(&b_int)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `translate_number` in this scope\n -->\
    \ /tmp/tmp3xtewnaz.rs:9:21\n  |\n9 |         let a_int = translate_number(a);\n\
    \  |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `translate_number` in this scope\n  --> /tmp/tmp3xtewnaz.rs:10:21\n\
    \   |\n10 |         let b_int = translate_number(b);\n   |                   \
    \  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_vec: Vec<String>\
    \ = numbers.split(\" \").map(|s| s.to_string()).collect();\n    num_vec.sort_by(|a,\
    \ b| numeral_to_int(a).cmp(&numeral_to_int(b)));\n    num_vec.join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_int` in this scope\n -->\
    \ /tmp/tmpdpiiq88_.rs:8:28\n  |\n8 |     num_vec.sort_by(|a, b| numeral_to_int(a).cmp(&numeral_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_int` in this scope\n --> /tmp/tmpdpiiq88_.rs:8:51\n\
    \  |\n8 |     num_vec.sort_by(|a, b| numeral_to_int(a).cmp(&numeral_to_int(b)));\n\
    \  |                                                   ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    let mut nums = Vec::new();\n    for num in numbers {\n        match num {\n\
    \            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number\"),\n        }\n    }\n  \
    \  result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut words: Vec<&str> = numbers.split('\
    \ ').collect();\n    words.sort_by(|x, y| x.cmp(y));\n    words.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpnb7yduxc.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums = [\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ];\n    let mut num_inds: Vec<usize> = numbers\n        .split_whitespace()\n\
    \        .map(|x| nums.iter().position(|&y| y == x).unwrap())\n        .collect();\n\
    \    num_inds.sort();\n    num_inds\n        .iter()\n        .map(|&x| nums[x].to_string())\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_list: Vec<u8> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        let number = match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n     \
    \   };\n        num_list.push(number);\n    }\n    num_list.sort();\n    let mut\
    \ output = String::new();\n    for i in num_list {\n        output.push_str(match\
    \ i {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    zero\",\n        });\n        output.push(' ');\n    }\n    output.pop();\n  \
    \  output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let num_to_word = |num: &str|\
    \ -> String {\n        match num {\n            \"0\" => \"zero\".to_string(),\n\
    \            \"1\" => \"one\".to_string(),\n            \"2\" => \"two\".to_string(),\n\
    \            \"3\" => \"three\".to_string(),\n            \"4\" => \"four\".to_string(),\n\
    \            \"5\" => \"five\".to_string(),\n            \"6\" => \"six\".to_string(),\n\
    \            \"7\" => \"seven\".to_string(),\n            \"8\" => \"eight\".to_string(),\n\
    \            \"9\" => \"nine\".to_string(),\n            _ => \"\".to_string(),\n\
    \        }\n    };\n\n    let mut nums = numbers.split(\" \").collect::<Vec<&str>>();\n\
    \    nums.sort_by(|a, b| num_to_word(a).cmp(&num_to_word(b)));\n    nums.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five zero four seven nine eight\"`,\n right: `\"zero four five seven eight\
    \ nine\"`', /tmp/tmp3a3znc6p.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str> = numbers.split('\
    \ ').collect();\n    let mut numbers: Vec<usize> = Vec::new();\n    for n in numbers\
    \ {\n        numbers.push(match n {\n            \"zero\" => 0,\n            \"\
    one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n        \
    \    \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n \
    \           \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\"\
    \ => 9,\n            _ => 0,\n        });\n    }\n    let mut numbers = numbers.clone();\n\
    \    numbers.sort();\n    let mut answer = String::new();\n    for n in numbers\
    \ {\n        answer.push_str(match n {\n            0 => \"zero\",\n         \
    \   1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n  \
    \          4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => \"\",\n        });\n        answer.push(' ');\n\
    \    }\n    return answer.trim().to_string();\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpitdqx1eg.rs:11:13\n   |\n\
    10 |         numbers.push(match n {\n   |                            - this expression\
    \ has type `usize`\n11 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `usize`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpitdqx1eg.rs:12:13\n\
    \   |\n10 |         numbers.push(match n {\n   |                            -\
    \ this expression has type `usize`\n11 |             \"zero\" => 0,\n12 |    \
    \         \"one\" => 1,\n   |             ^^^^^ expected `usize`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpitdqx1eg.rs:13:13\n   |\n10 |\
    \         numbers.push(match n {\n   |                            - this expression\
    \ has type `usize`\n...\n13 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `usize`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpitdqx1eg.rs:14:13\n\
    \   |\n10 |         numbers.push(match n {\n   |                            -\
    \ this expression has type `usize`\n...\n14 |             \"three\" => 3,\n  \
    \ |             ^^^^^^^ expected `usize`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpitdqx1eg.rs:15:13\n   |\n10 |         numbers.push(match\
    \ n {\n   |                            - this expression has type `usize`\n...\n\
    15 |             \"four\" => 4,\n   |             ^^^^^^ expected `usize`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpitdqx1eg.rs:16:13\n\
    \   |\n10 |         numbers.push(match n {\n   |                            -\
    \ this expression has type `usize`\n...\n16 |             \"five\" => 5,\n   |\
    \             ^^^^^^ expected `usize`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpitdqx1eg.rs:17:13\n   |\n10 |         numbers.push(match\
    \ n {\n   |                            - this expression has type `usize`\n...\n\
    17 |             \"six\" => 6,\n   |             ^^^^^ expected `usize`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpitdqx1eg.rs:18:13\n\
    \   |\n10 |         numbers.push(match n {\n   |                            -\
    \ this expression has type `usize`\n...\n18 |             \"seven\" => "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    sorted.sort_by(|a, b| a.cmp(b));\n    sorted.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpia7afaq8.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut split_numbers: Vec<_>\
    \ = numbers.split(' ').collect();\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    let mut out: String = String::new();\n\n    // Turn each numeral into a number\n\
    \    for num in split_numbers.iter() {\n        match num {\n            \"zero\"\
    \ => nums.push(0),\n            \"one\" => nums.push(1),\n            \"two\"\
    \ => nums.push(2),\n            \"three\" => nums.push(3),\n            \"four\"\
    \ => nums.push(4),\n            \"five\" => nums.push(5),\n            \"six\"\
    \ => nums.push(6),\n            \"seven\" => nums.push(7),\n            \"eight\"\
    \ => nums.push(8),\n            \"nine\" => nums.push(9),\n            _ => return\
    \ String::from(\"Input error.  Please ensure that all numeral inputs are valid.\"\
    ),\n        }\n    }\n\n    // Sort the numbers\n    nums.sort();\n\n    // Turn\
    \ the numbers back into numerals\n    for num in nums.iter() {\n        match\
    \ num {\n            0 => out.push_str(\"zero \"),\n            1 => out.push_str(\"\
    one \"),\n            2 => out.push_str(\"two \"),\n            3 => out.push_str(\"\
    three \"),\n            4 => out.push_str(\"four \"),\n            5 => out.push_str(\"\
    five \"),\n            6 => out.push_str(\"six \"),\n            7 => out.push_str(\"\
    seven \"),\n            8 => out.push_str(\"eight \"),\n            9 => out.push_str(\"\
    nine \"),\n            _ => return String::from(\"Error occurred during sorting\"\
    ),\n        }\n    }\n\n    // Remove trailing space and return\n    out.pop();\n\
    \    out\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7zqqjt4t.rs:14:13\n   |\n\
    13 |         match num {\n   |               --- this expression has type `&&str`\n\
    14 |             \"zero\" => nums.push(0),\n   |             ^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7zqqjt4t.rs:15:13\n\
    \   |\n13 |         match num {\n   |               --- this expression has type\
    \ `&&str`\n14 |             \"zero\" => nums.push(0),\n15 |             \"one\"\
    \ => nums.push(1),\n   |             ^^^^^ expected `&str`, found `str`\n   |\n\
    \   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7zqqjt4t.rs:16:13\n  \
    \ |\n13 |         match num {\n   |               --- this expression has type\
    \ `&&str`\n...\n16 |             \"two\" => nums.push(2),\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7zqqjt4t.rs:17:13\n   |\n13 |         match num {\n   |       \
    \        --- this expression has type `&&str`\n...\n17 |             \"three\"\
    \ => nums.push(3),\n   |             ^^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7zqqjt4t.rs:18:13\n  \
    \ |\n13 |         match num {\n   |               --- this expression has type\
    \ `&&str`\n...\n18 |             \"four\" => nums.push(4),\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7zqqjt4t.rs:19:13\n   |\n13 |         match num {\n   |       \
    \        --- this expression has type `&&str`\n...\n19 |             \"five\"\
    \ => nums.push(5),\n   |             ^^^^^^ expected `&str`, found `str`\n   |\n\
    \   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\ne"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = numbers.split_whitespace().map(|n|\
    \ {\n        match n {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"invalid number\"),\n        }\n    }).collect::<Vec<_>>();\n\
    \    nums.sort();\n    nums.iter().map(|n| {\n        match n {\n            0\
    \ => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n       \
    \     3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n\
    \            6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"invalid number\"),\n\
    \        }\n    }).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let number_map = [\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"];\n    let mut number_vec: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    number_vec.sort_by(|a, b|\n        number_map.iter().position(|&s| s == a).unwrap().cmp(&number_map.iter().position(|&s|\
    \ s == b).unwrap())\n    );\n    number_vec.join(\" \")\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmp92lp1xk4.rs:10:43\n\
    \   |\n10 |         number_map.iter().position(|&s| s == a).unwrap().cmp(&number_map.iter().position(|&s|\
    \ s == b).unwrap())\n   |                                           ^^ no implementation\
    \ for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>` is not implemented\
    \ for `str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n   = note: required because\
    \ of the requirements on the impl of `PartialEq<&&str>` for `&str`\n\nerror[E0277]:\
    \ can't compare `str` with `&str`\n  --> /tmp/tmp92lp1xk4.rs:10:97\n   |\n10 |\
    \         number_map.iter().position(|&s| s == a).unwrap().cmp(&number_map.iter().position(|&s|\
    \ s == b).unwrap())\n   |                                                    \
    \                                             ^^ no implementation for `str ==\
    \ &str`\n   |\n   = help: the trait `PartialEq<&str>` is not implemented for `str`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n   = note: required because\
    \ of the requirements on the impl of `PartialEq<&&str>` for `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str> = numbers.split('\
    \ ').collect();\n    let mut ord_numbers: Vec<&str> = Vec::new();\n    for number\
    \ in numbers {\n        match number {\n            \"zero\" => ord_numbers.push(\"\
    zero\"),\n            \"one\" => ord_numbers.push(\"one\"),\n            \"two\"\
    \ => ord_numbers.push(\"two\"),\n            \"three\" => ord_numbers.push(\"\
    three\"),\n            \"four\" => ord_numbers.push(\"four\"),\n            \"\
    five\" => ord_numbers.push(\"five\"),\n            \"six\" => ord_numbers.push(\"\
    six\"),\n            \"seven\" => ord_numbers.push(\"seven\"),\n            \"\
    eight\" => ord_numbers.push(\"eight\"),\n            \"nine\" => ord_numbers.push(\"\
    nine\"),\n            _ => panic!(\"Invalid number\")\n        }\n    }\n    ord_numbers.sort();\n\
    \    ord_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Invalid number', /tmp/tmpuzohfg5g.rs:21:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|numeral| {\n            match numeral\
    \ {\n                \"zero\" => 0,\n                \"one\" => 1,\n         \
    \       \"two\" => 2,\n                \"three\" => 3,\n                \"four\"\
    \ => 4,\n                \"five\" => 5,\n                \"six\" => 6,\n     \
    \           \"seven\" => 7,\n                \"eight\" => 8,\n               \
    \ \"nine\" => 9,\n                _ => panic!(\"Unknown numeral {}\", numeral),\n\
    \            }\n        })\n        .collect();\n    numbers.sort();\n    let\
    \ mut output = String::new();\n    for (idx, num) in numbers.iter().enumerate()\
    \ {\n        output += &format!(\"{}\", numeral_from_num(*num));\n        if idx\
    \ < numbers.len() - 1 {\n            output += \" \";\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_from_num` in this scope\n \
    \ --> /tmp/tmp7ws8zjn0.rs:28:34\n   |\n28 |         output += &format!(\"{}\"\
    , numeral_from_num(*num));\n   |                                  ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_vec: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|word| numeral_to_int(word))\n    \
    \    .collect();\n    num_vec.sort();\n    int_to_numeral(num_vec)\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_int` in this scope\n -->\
    \ /tmp/tmpyahc1k69.rs:9:21\n  |\n9 |         .map(|word| numeral_to_int(word))\n\
    \  |                     ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `int_to_numeral` in this scope\n  --> /tmp/tmpyahc1k69.rs:12:5\n\
    \   |\n12 |     int_to_numeral(num_vec)\n   |     ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut vec: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|x| match x {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    vec.sort();\n    let mut out: String = \"\"\
    .to_string();\n    for x in vec {\n        out = format!(\"{} {}\", out, convert_number(x));\n\
    \    }\n    out.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `convert_number` in this scope\n  -->\
    \ /tmp/tmpuolbf0pe.rs:26:37\n   |\n26 |         out = format!(\"{} {}\", out,\
    \ convert_number(x));\n   |                                     ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<&str>\
    \ = numbers.split(\" \").collect();\n    numbers_vec.sort();\n    numbers_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp9gced2qs.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let num_map = [\n        (\"\
    zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\"\
    , 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n\
    \        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n  \
    \  ];\n    let num_list: Vec<&str> = numbers.split_whitespace().collect();\n \
    \   let mut num_vec: Vec<u8> = Vec::new();\n    for num in num_list {\n      \
    \  let mut found = false;\n        for (word, num) in num_map.iter() {\n     \
    \       if num == num {\n                num_vec.push(*num);\n               \
    \ found = true;\n                break;\n            }\n        }\n        if\
    \ !found {\n            panic!(\"Invalid input\");\n        }\n    }\n    num_vec.sort();\n\
    \    let mut output = String::new();\n    for num in num_vec {\n        output\
    \ += &format!(\"{} \", num_map[num].0);\n    }\n    output.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[(&str, u8)]` cannot be indexed by `u8`\n  -->\
    \ /tmp/tmp4jy2xuoi.rs:37:35\n   |\n37 |         output += &format!(\"{} \", num_map[num].0);\n\
    \   |                                   ^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[(&str,\
    \ u8)]>` is not implemented for `u8`\n   = help: the trait `SliceIndex<[T]>` is\
    \ implemented for `usize`\n   = note: required because of the requirements on\
    \ the impl of `Index<u8>` for `[(&str, u8)]`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6s3eu9ci.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v = numbers.split_whitespace().map(|s|\
    \ match s {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => panic!(\"not a number\"),\n    }).collect::<Vec<_>>();\n\
    \    v.sort();\n    let mut s = String::new();\n    for n in v {\n        s.push_str(match\
    \ n {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    not a number\"),\n        });\n        s.push(' ');\n    }\n    s.pop();\n   \
    \ s\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted = numbers.split_whitespace().map(|n|\
    \ number_to_digit(n)).collect::<Vec<u32>>();\n    sorted.sort();\n    sorted.iter().map(|d|\
    \ digit_to_number(*d)).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_digit` in this scope\n -->\
    \ /tmp/tmpikvjaaa5.rs:7:57\n  |\n7 |     let mut sorted = numbers.split_whitespace().map(|n|\
    \ number_to_digit(n)).collect::<Vec<u32>>();\n  |                            \
    \                             ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `digit_to_number` in this scope\n --> /tmp/tmpikvjaaa5.rs:9:27\n\
    \  |\n9 |     sorted.iter().map(|d| digit_to_number(*d)).collect::<Vec<&str>>().join(\"\
    \ \")\n  |                           ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = vec![];\n    for\
    \ word in numbers.split_whitespace() {\n        nums.push(match word {\n     \
    \       \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n\
    \            \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n        });\n\
    \    }\n    nums.sort();\n    let mut words = vec![];\n    for num in nums {\n\
    \        words.push(match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => \"zero\",\n        });\n    }\n    words.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    let mut sorted = numbers.clone();\n    sorted.sort_by(|&a, &b| {\n      \
    \  numeral_to_int(a).cmp(&numeral_to_int(b))\n    });\n    sorted.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_int` in this scope\n  -->\
    \ /tmp/tmpesezkybh.rs:10:9\n   |\n10 |         numeral_to_int(a).cmp(&numeral_to_int(b))\n\
    \   |         ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `numeral_to_int` in this scope\n  --> /tmp/tmpesezkybh.rs:10:32\n \
    \  |\n10 |         numeral_to_int(a).cmp(&numeral_to_int(b))\n   |           \
    \                     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let vector: Vec<String> = numbers.split_whitespace().map(|word|\
    \ number_to_word(word)).collect();\n    vector.sort();\n    let mut result = String::new();\n\
    \    for n in vector {\n        result.push_str(n.as_str());\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_word` in this scope\n -->\
    \ /tmp/tmpx9bjbhml.rs:7:69\n  |\n7 |     let vector: Vec<String> = numbers.split_whitespace().map(|word|\
    \ number_to_word(word)).collect();\n  |                                      \
    \                               ^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut words = numbers.split_whitespace();\n\
    \    let mut numbers = Vec::new();\n    while let Some(word) = words.next() {\n\
    \        numbers.push(word_to_number(word.to_string()));\n    }\n    numbers.sort();\n\
    \    let mut sorted_numbers = Vec::new();\n    for number in numbers {\n     \
    \   sorted_numbers.push(number_to_word(number));\n    }\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `word_to_number` in this scope\n  -->\
    \ /tmp/tmpyhaimx8p.rs:10:22\n   |\n10 |         numbers.push(word_to_number(word.to_string()));\n\
    \   |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_word` in this scope\n  --> /tmp/tmpyhaimx8p.rs:15:29\n\
    \   |\n15 |         sorted_numbers.push(number_to_word(number));\n   |       \
    \                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut res = vec![];\n    for\
    \ word in numbers.split_whitespace() {\n        let word_number = word_to_number(word);\n\
    \        res.push(word_number);\n    }\n    res.sort();\n    let mut res_string\
    \ = String::new();\n    for n in res {\n        res_string.push_str(&number_to_word(n));\n\
    \        res_string.push(' ');\n    }\n    res_string.pop();\n    res_string\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `word_to_number` in this scope\n -->\
    \ /tmp/tmpvmck4jrl.rs:9:27\n  |\n9 |         let word_number = word_to_number(word);\n\
    \  |                           ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_word` in this scope\n  --> /tmp/tmpvmck4jrl.rs:15:30\n\
    \   |\n15 |         res_string.push_str(&number_to_word(n));\n   |           \
    \                   ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by_key(|num| match *num {\n        \"zero\" => 0,\n        \"\
    one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\"\
    \ => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n\
    \        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => unreachable!(),\n\
    \    });\n    let mut result = String::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        if i != 0 {\n            result.push(' ');\n        }\n        result.push_str(num);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .map(|num| number(num))\n        .sorted()\n        .iter()\n       \
    \ .map(|num| num.to_string())\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number` in this scope\n --> /tmp/tmptp0h7bp9.rs:9:20\n\
    \  |\n9 |         .map(|num| number(num))\n  |                    ^^^^^^ help:\
    \ a local variable with a similar name exists: `numbers`\n\nerror[E0599]: no method\
    \ named `sorted` found for struct `Map` in the current scope\n  --> /tmp/tmptp0h7bp9.rs:10:10\n\
    \   |\n10 |         .sorted()\n   |          ^^^^^^ method not found in `Map<SplitWhitespace<'_>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        let num = str_to_num(num);\n\
    \        nums.push(num);\n    }\n    nums.sort();\n    let mut result = String::new();\n\
    \    for num in nums {\n        result.push_str(num.as_str());\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `str_to_num` in this scope\n --> /tmp/tmp8s11k5hq.rs:9:19\n\
    \  |\n9 |         let num = str_to_num(num);\n  |                   ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut words: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    words.sort();\n    words.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpz5n8rmlt.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<String>\
    \ = numbers.split(' ').map(|s| s.to_string()).collect();\n    sorted_numbers.sort_by(|a,\
    \ b| number_from_string(a).cmp(&number_from_string(b)));\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_from_string` in this scope\n\
    \ --> /tmp/tmp3zgp7vo1.rs:8:35\n  |\n8 |     sorted_numbers.sort_by(|a, b| number_from_string(a).cmp(&number_from_string(b)));\n\
    \  |                                   ^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `number_from_string` in this scope\n -->\
    \ /tmp/tmp3zgp7vo1.rs:8:62\n  |\n8 |     sorted_numbers.sort_by(|a, b| number_from_string(a).cmp(&number_from_string(b)));\n\
    \  |                                                              ^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split('\
    \ ').collect();\n    numbers.sort_by_key(|&num| match num {\n        \"zero\"\
    \ => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n\
    \        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n     \
    \   \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n       \
    \ _ => panic!(\"invalid number word\"),\n    });\n    numbers.join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let split = numbers.split_whitespace();\n\
    \    let mut vec: Vec<u32> = Vec::new();\n    for i in split {\n        vec.push(parse_numerals(i));\n\
    \    }\n    vec.sort();\n    let mut str = String::new();\n    for i in vec {\n\
    \        str.push_str(parse_numerals_to_string(i).as_str());\n        str.push_str(\"\
    \ \");\n    }\n    str.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `parse_numerals` in this scope\n  -->\
    \ /tmp/tmpre3ay2cs.rs:10:18\n   |\n10 |         vec.push(parse_numerals(i));\n\
    \   |                  ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `parse_numerals_to_string` in this scope\n  --> /tmp/tmpre3ay2cs.rs:15:22\n\
    \   |\n15 |         str.push_str(parse_numerals_to_string(i).as_str());\n   |\
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppjp44le2.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|n| hash_to_int(n))\n        .collect();\n\
    \    nums.sort();\n    nums.iter()\n        .map(|n| int_to_hash(*n))\n      \
    \  .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `hash_to_int` in this scope\n --> /tmp/tmp4qvj2t_t.rs:9:18\n\
    \  |\n9 |         .map(|n| hash_to_int(n))\n  |                  ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `int_to_hash` in this\
    \ scope\n  --> /tmp/tmp4qvj2t_t.rs:13:18\n   |\n13 |         .map(|n| int_to_hash(*n))\n\
    \   |                  ^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_list: Vec<usize>\
    \ = numbers\n        .split_whitespace()\n        .map(|s| get_number_from_numeral(s))\n\
    \        .collect();\n    numbers_list.sort();\n    let mut sorted_numbers = String::new();\n\
    \    for n in numbers_list {\n        sorted_numbers.push_str(&get_numeral_from_number(n));\n\
    \        sorted_numbers.push(' ');\n    }\n    sorted_numbers.pop();\n    sorted_numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_number_from_numeral` in this scope\n\
    \ --> /tmp/tmpsrf1_ydd.rs:9:18\n  |\n9 |         .map(|s| get_number_from_numeral(s))\n\
    \  |                  ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `get_numeral_from_number` in this scope\n  --> /tmp/tmpsrf1_ydd.rs:14:34\n\
    \   |\n14 |         sorted_numbers.push_str(&get_numeral_from_number(n));\n  \
    \ |                                  ^^^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|&a, &b| NUMBERS[a].cmp(&NUMBERS[b]));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n --> /tmp/tmporiyqsvj.rs:8:30\n\
    \  |\n8 |     numbers.sort_by(|&a, &b| NUMBERS[a].cmp(&NUMBERS[b]));\n  |    \
    \                          ^^^^^^^ help: a local variable with a similar name\
    \ exists: `numbers`\n\nerror[E0425]: cannot find value `NUMBERS` in this scope\n\
    \ --> /tmp/tmporiyqsvj.rs:8:46\n  |\n8 |     numbers.sort_by(|&a, &b| NUMBERS[a].cmp(&NUMBERS[b]));\n\
    \  |                                              ^^^^^^^ help: a local variable\
    \ with a similar name exists: `numbers`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut vec: Vec<i32> = Vec::new();\n\
    \    for n in numbers.split(\" \") {\n        vec.push(match n {\n           \
    \ \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n     \
    \       \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => panic!(\"not a valid number\"\
    ),\n        });\n    }\n    vec.sort();\n    let mut sorted = String::new();\n\
    \    for i in vec {\n        sorted.push_str(match i {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"not a valid number\"),\n        });\n\
    \        sorted.push(' ');\n    }\n    sorted.pop();\n    sorted\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not a valid number', /tmp/tmpe2rsb82q.rs:20:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<usize> = numbers\n\
    \        .split_whitespace()\n        .map(|n| match n {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|w| match w {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => 0,\n        })\n        .collect();\n\
    \    nums.sort();\n    nums.iter()\n        .map(|num| match num {\n         \
    \   0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n   \
    \         3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => \"\",\n        })\n   \
    \     .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let map: HashMap<&str, u32> =\
    \ [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n  \
    \      (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n     \
    \   (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"\
    nine\", 9),\n    ]\n    .iter()\n    .cloned()\n    .collect();\n\n    let mut\
    \ num_vec: Vec<u32> = Vec::new();\n    for n in numbers.split_whitespace() {\n\
    \        if let Some(x) = map.get(n) {\n            num_vec.push(*x);\n      \
    \  }\n    }\n    num_vec.sort();\n\n    let mut s = String::new();\n    for n\
    \ in num_vec {\n        s.push_str(match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"should not happen\"),\n        });\n\
    \        s.push(' ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpq0wlzdbx.rs:7:14\n\
    \  |\n7 |     let map: HashMap<&str, u32> = [\n  |              ^^^^^^^ not found\
    \ in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|word| number_to_u32(word))\n     \
    \   .collect();\n    numbers.sort();\n    numbers\n        .iter()\n        .map(|number|\
    \ u32_to_number(*number))\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_u32` in this scope\n -->\
    \ /tmp/tmpi2c1x4yp.rs:9:21\n  |\n9 |         .map(|word| number_to_u32(word))\n\
    \  |                     ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `u32_to_number` in this scope\n  --> /tmp/tmpi2c1x4yp.rs:14:23\n\
    \   |\n14 |         .map(|number| u32_to_number(*number))\n   |              \
    \         ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .map(|x| match x {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => 0,\n        })\n        .sorted()\n        .map(|x| match x {\n \
    \           0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => \"zero\",\n    \
    \    })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp_qbwgieh.rs:22:10\n   |\n22 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmp_qbwgieh.rs:9:14:\
    \ 21:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str> = numbers.split('\
    \ ').collect();\n    let mut sorted_numbers: Vec<&str> = numbers.clone();\n  \
    \  sorted_numbers.sort();\n    sorted_numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpa1y6x9x8.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list: Vec<String> = numbers.split_whitespace().map(String::from).collect();\n\
    \    list.sort();\n    list.join(\" \")\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp5gznw1v4.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let n = numbers.split_whitespace()\n\
    \        .map(|x| match x {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"{} is not a number\", x),\n        })\n        .collect::<Vec<i32>>();\n\
    \    let s = n.iter()\n        .map(|x| x.to_string())\n        .collect::<Vec<String>>()\n\
    \        .join(\" \");\n    s\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmpg991tvur.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    const NUM_WORDS: [&str; 10] =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n    let mut map: HashMap<usize, usize> = HashMap::new();\n\
    \    let nums = numbers.split_whitespace().collect::<Vec<&str>>();\n    for num\
    \ in nums {\n        let i = NUM_WORDS.iter().position(|&word| word == num).unwrap();\n\
    \        let counter = map.entry(i).or_insert(0);\n        *counter += 1;\n  \
    \  }\n    let mut ret = String::new();\n    for i in 0..NUM_WORDS.len() {\n  \
    \      if let Some(counter) = map.get(&i) {\n            for _ in 0..*counter\
    \ {\n                ret.push_str(NUM_WORDS[i]);\n                ret.push(' ');\n\
    \            }\n        }\n    }\n    ret.pop();\n    ret\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpbkz6e1wo.rs:8:18\n\
    \  |\n8 |     let mut map: HashMap<usize, usize> = HashMap::new();\n  |      \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpbkz6e1wo.rs:8:42\n\
    \  |\n8 |     let mut map: HashMap<usize, usize> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let number_alphabet_map = map_numbers_alphabet(alphabet);\n    let number_position_map\
    \ = map_numbers_position(alphabet);\n    let mut numbers_vec: Vec<String> = numbers.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    numbers_vec.sort_by(|a, b| {\n        let mut\
    \ a_index = 0;\n        let mut b_index = 0;\n        for c in a.chars() {\n \
    \           a_index += number_alphabet_map[&c];\n        }\n        for c in b.chars()\
    \ {\n            b_index += number_alphabet_map[&c];\n        }\n        a_index.cmp(&b_index)\n\
    \    });\n    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `map_numbers_alphabet` in this scope\n\
    \ --> /tmp/tmpv240kxvz.rs:8:31\n  |\n8 |     let number_alphabet_map = map_numbers_alphabet(alphabet);\n\
    \  |                               ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `map_numbers_position` in this scope\n -->\
    \ /tmp/tmpv240kxvz.rs:9:31\n  |\n9 |     let number_position_map = map_numbers_position(alphabet);\n\
    \  |                               ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.len() == 0 {\n   \
    \     return String::new();\n    }\n\n    let mut split = numbers.split_whitespace();\n\
    \    let first = split.next().unwrap();\n    let len = split.count();\n    let\
    \ mut nums = vec![first.to_string()];\n    for num in split {\n        let index\
    \ = nums.iter().position(|x| *x > num).unwrap_or(len);\n        nums.insert(index,\
    \ num.to_string());\n    }\n    nums.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5agx36gd.rs:16:51\n   |\n\
    16 |         let index = nums.iter().position(|x| *x > num).unwrap_or(len);\n\
    \   |                                                   ^^^- help: try using a\
    \ conversion method: `.to_string()`\n   |                                    \
    \               |\n   |                                                   expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result = String::new();\n\
    \    let mut numeral_choices = vec![\n        \"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n    ];\n    let\
    \ numbers: Vec<&str> = numbers.split(\" \").collect();\n    let mut numbers_to_sort:\
    \ Vec<&str> = Vec::new();\n    for number in numbers {\n        numbers_to_sort.push(match\
    \ number {\n            \"zero\" => \"0\",\n            \"one\" => \"1\",\n  \
    \          \"two\" => \"2\",\n            \"three\" => \"3\",\n            \"\
    four\" => \"4\",\n            \"five\" => \"5\",\n            \"six\" => \"6\"\
    ,\n            \"seven\" => \"7\",\n            \"eight\" => \"8\",\n        \
    \    \"nine\" => \"9\",\n            _ => \"10\",\n        });\n    }\n    numbers_to_sort.sort();\n\
    \    for number in numbers_to_sort {\n        result.push_str(match number {\n\
    \            \"0\" => \"zero\",\n            \"1\" => \"one\",\n            \"\
    2\" => \"two\",\n            \"3\" => \"three\",\n            \"4\" => \"four\"\
    ,\n            \"5\" => \"five\",\n            \"6\" => \"six\",\n           \
    \ \"7\" => \"seven\",\n            \"8\" => \"eight\",\n            \"9\" => \"\
    nine\",\n            _ => \"\",\n        });\n        result.push_str(\" \");\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" \"`,\n right: `\"\"`', /tmp/tmphakyzrey.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted = vec![];\n  \
    \  for num in numbers.split_whitespace() {\n        let number = match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Input is invalid\"),\n        };\n        sorted.push(number);\n    }\n    sorted.sort();\n\
    \    let nums = sorted.iter().map(|x| number_to_string(*x)).collect::<Vec<String>>();\n\
    \    nums.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_string` in this scope\n \
    \ --> /tmp/tmpk0bx8hx3.rs:25:38\n   |\n25 |     let nums = sorted.iter().map(|x|\
    \ number_to_string(*x)).collect::<Vec<String>>();\n   |                      \
    \                ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted = numbers.split('\
    \ ').map(|n| digits::name_to_digit(n)).collect::<Vec<_>>();\n    sorted.sort();\n\
    \    sorted.iter().map(|n| digits::digit_to_name(*n)).collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digits`\n\
    \ --> /tmp/tmp86fbmp7w.rs:7:49\n  |\n7 |     let mut sorted = numbers.split('\
    \ ').map(|n| digits::name_to_digit(n)).collect::<Vec<_>>();\n  |             \
    \                                    ^^^^^^ use of undeclared crate or module\
    \ `digits`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `digits`\n --> /tmp/tmp86fbmp7w.rs:9:27\n  |\n9 |     sorted.iter().map(|n|\
    \ digits::digit_to_name(*n)).collect::<Vec<_>>().join(\" \")\n  |            \
    \               ^^^^^^ use of undeclared crate or module `digits`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| map_numeral(a).cmp(&map_numeral(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `map_numeral` in this scope\n --> /tmp/tmpxsijbb6w.rs:8:28\n\
    \  |\n8 |     numbers.sort_by(|a, b| map_numeral(a).cmp(&map_numeral(b)));\n \
    \ |                            ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `map_numeral` in this scope\n --> /tmp/tmpxsijbb6w.rs:8:48\n\
    \  |\n8 |     numbers.sort_by(|a, b| map_numeral(a).cmp(&map_numeral(b)));\n \
    \ |                                                ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3tykd6fq.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums = [\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ];\n    let mut m: HashMap<String, usize> = HashMap::new();\n    for (i, n) in\
    \ nums.iter().enumerate() {\n        m.insert(n.to_string(), i);\n    }\n    let\
    \ mut numbers: Vec<String> = numbers.split(\" \").map(|x| x.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| m.get(a).unwrap().cmp(m.get(b).unwrap()));\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpwztythv8.rs:8:16\n\
    \  |\n8 |     let mut m: HashMap<String, usize> = HashMap::new();\n  |       \
    \         ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpwztythv8.rs:8:41\n\
    \  |\n8 |     let mut m: HashMap<String, usize> = HashMap::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut iter = numbers.split_whitespace();\n\
    \    let mut one = iter.next().unwrap().to_string();\n    let mut two = iter.next().unwrap().to_string();\n\
    \    let mut three = iter.next().unwrap().to_string();\n    let mut sorted_string\
    \ = String::new();\n\n    if word_to_num(&one) < word_to_num(&two) {\n       \
    \ if word_to_num(&one) < word_to_num(&three) {\n            sorted_string.push_str(&one);\n\
    \            sorted_string.push(' ');\n            if word_to_num(&two) < word_to_num(&three)\
    \ {\n                sorted_string.push_str(&two);\n                sorted_string.push('\
    \ ');\n                sorted_string.push_str(&three);\n            } else {\n\
    \                sorted_string.push_str(&three);\n                sorted_string.push('\
    \ ');\n                sorted_string.push_str(&two);\n            }\n        }\
    \ else {\n            sorted_string.push_str(&three);\n            sorted_string.push('\
    \ ');\n            sorted_string.push_str(&one);\n            sorted_string.push('\
    \ ');\n            sorted_string.push_str(&two);\n        }\n    } else {\n  \
    \      if word_to_num(&two) < word_to_num(&three) {\n            sorted_string.push_str(&two);\n\
    \            sorted_string.push(' ');\n            if word_to_num(&one) < word_to_num(&three)\
    \ {\n                sorted_string.push_str(&one);\n                sorted_string.push('\
    \ ');\n                sorted_string.push_str(&three);\n            } else {\n\
    \                sorted_string.push_str(&three);\n                sorted_string.push('\
    \ ');\n                sorted_string.push_str(&one);\n            }\n        }\
    \ else {\n            sorted_string.push_str(&three);\n            sorted_string.push('\
    \ ');\n            sorted_string.push_str(&two);\n            sorted_string.push('\
    \ ');\n            sorted_string.push_str(&one);\n        }\n\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpr9tig1gb.rs:63:3\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n...\n33 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n54 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n63 | }\n\
    \   |   ^\n\nerror[E0425]: cannot find function `word_to_num` in this scope\n\
    \  --> /tmp/tmpr9tig1gb.rs:13:8\n   |\n13 |     if word_to_num(&one) < word_to_num(&two)\
    \ {\n   |        ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `word_to_num` in this scope\n  --> /tmp/tmpr9tig1gb.rs:13:28\n   |\n\
    13 |     if word_to_num(&one) < word_to_num(&two) {\n   |                    \
    \        ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `word_to_num` in this scope\n  --> /tmp/tmpr9tig1gb.rs:14:12\n   |\n14 |   \
    \      if word_to_num(&one) < word_to_num(&three) {\n   |            ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `word_to_num`\
    \ in this scope\n  --> /tmp/tmpr9tig1gb.rs:14:32\n   |\n14 |         if word_to_num(&one)\
    \ < word_to_num(&three) {\n   |                                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `word_to_num` in this\
    \ scope\n  --> /tmp/tmpr9tig1gb.rs:17:16\n   |\n17 |             if word_to_num(&two)\
    \ < word_to_num(&three) {\n   |                ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `word_to_num` in this scope\n  --> /tmp/tmpr9tig1gb.rs:17:36\n\
    \   |\n17 |             if word_to_num(&two) < word_to_num(&three) {\n   |   \
    \                                 ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `word_to_num` in this scope\n  --> /tmp/tmpr9tig1gb.rs:34:12\n\
    \   |\n34 |         if word_to_num(&two) < word_to_num(&three) {\n   |       \
    \     ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `word_to_num` in this scope\n  --> /tmp/tmpr9tig1gb.rs:34:32\n   |\n34 |   \
    \      if word_to_num(&two"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let m = vec![\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ];\n    let mut v = numbers.split_whitespace().map(|x| m.iter().position(|&z|\
    \ z == x).unwrap()).collect::<Vec<usize>>();\n    v.sort();\n    v.iter().map(|x|\
    \ m[*x]).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut vec = numbers.split_whitespace().map(|x|\
    \ to_int(x)).collect::<Vec<u32>>();\n    vec.sort();\n    let mut buf = String::new();\n\
    \    for n in vec {\n        buf.push_str(&to_str(n));\n        buf.push(' ');\n\
    \    }\n    buf.pop();\n    buf\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_int` in this scope\n --> /tmp/tmpa2ys3qsh.rs:7:54\n\
    \  |\n7 |     let mut vec = numbers.split_whitespace().map(|x| to_int(x)).collect::<Vec<u32>>();\n\
    \  |                                                      ^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `to_str` in this scope\n  -->\
    \ /tmp/tmpa2ys3qsh.rs:11:23\n   |\n11 |         buf.push_str(&to_str(n));\n  \
    \ |                       ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_vec: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|word| match word {\n            \"\
    zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n         \
    \   \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => -1,\n        })\n      \
    \  .filter(|num| *num != -1)\n        .collect();\n    num_vec.sort();\n    let\
    \ sorted_str: String = num_vec\n        .iter()\n        .map(|num| match num\
    \ {\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"\
    two\",\n            3 => \"three\",\n            4 => \"four\",\n            5\
    \ => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n     \
    \       8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\",\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \");\n    sorted_str\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Not a valid number\"),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Not a valid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let number_dict = [\"zero\",\
    \ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"];\n    let mut num_vec: Vec<usize> = Vec::new();\n    let mut answer\
    \ = String::new();\n    for num in numbers.split_whitespace() {\n        for i\
    \ in 0..number_dict.len() {\n            if number_dict[i] == num {\n        \
    \        num_vec.push(i);\n            }\n        }\n    }\n    let sorted_nums\
    \ = bubble_sort(num_vec);\n    for num in sorted_nums {\n        if answer.len()\
    \ == 0 {\n            answer.push_str(number_dict[num]);\n        } else {\n \
    \           answer.push_str(&format!(\" {}\", number_dict[num]));\n        }\n\
    \    }\n    answer\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `bubble_sort` in this scope\n  --> /tmp/tmplgx4mzgx.rs:17:23\n\
    \   |\n17 |     let sorted_nums = bubble_sort(num_vec);\n   |                \
    \       ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str> = numbers.split('\
    \ ').collect();\n    let numbers: Vec<i32> = numbers.iter().map(|&num| {\n   \
    \     match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n   \
    \         \"two\" => 2,\n            \"three\" => 3,\n            \"four\" =>\
    \ 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => panic!(\"Not a valid number!\"),\n        }\n    }).collect();\n    let\
    \ sorted_numbers: Vec<i32> = numbers.iter().cloned().sorted().collect();\n   \
    \ let sorted_numbers: Vec<&str> = sorted_numbers.iter().map(|num| {\n        match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Not a valid number!\"),\n        }\n    }).collect();\n    let mut result = String::new();\n\
    \    for number in sorted_numbers {\n        result.push_str(number);\n      \
    \  result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmp2gvfbmys.rs:23:60\n   |\n23 |     let sorted_numbers:\
    \ Vec<i32> = numbers.iter().cloned().sorted().collect();\n   |               \
    \                                             ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ i32>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<u32>\
    \ = convert_numbers_to_vector(numbers);\n    sorted_numbers.sort();\n    convert_vector_to_numbers(sorted_numbers)\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `convert_numbers_to_vector` in this\
    \ scope\n --> /tmp/tmp5ne3bggv.rs:7:40\n  |\n7 |     let mut sorted_numbers: Vec<u32>\
    \ = convert_numbers_to_vector(numbers);\n  |                                 \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `convert_vector_to_numbers` in this scope\n --> /tmp/tmp5ne3bggv.rs:9:5\n\
    \  |\n9 |     convert_vector_to_numbers(sorted_numbers)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = numbers.split_whitespace().map(|num|\
    \ Number::from_str(num)).collect::<Vec<_>>();\n    list.sort();\n    list.iter().map(|num|\
    \ num.to_string()).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Number`\n -->\
    \ /tmp/tmp8rvo5a_2.rs:7:57\n  |\n7 |     let mut list = numbers.split_whitespace().map(|num|\
    \ Number::from_str(num)).collect::<Vec<_>>();\n  |                           \
    \                              ^^^^^^ use of undeclared type `Number`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|number| NUM_TO_INT.get(number).unwrap().to_owned())\n\
    \        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n    \
    \    .map(|number| INT_TO_NUM.get(number).unwrap().to_owned())\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUM_TO_INT` in this scope\n --> /tmp/tmp3ebmankj.rs:9:23\n\
    \  |\n9 |         .map(|number| NUM_TO_INT.get(number).unwrap().to_owned())\n\
    \  |                       ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `INT_TO_NUM` in this scope\n  --> /tmp/tmp3ebmankj.rs:14:23\n\
    \   |\n14 |         .map(|number| INT_TO_NUM.get(number).unwrap().to_owned())\n\
    \   |                       ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = numbers.split_whitespace().map(|x|\
    \ {\n        match x {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => 0,\n        }\n    });\n    let mut res = nums.collect::<Vec<u8>>();\n\
    \    res.sort();\n    let s = res.iter().map(|&x| match x {\n        0 => \"zero\"\
    ,\n        1 => \"one\",\n        2 => \"two\",\n        3 => \"three\",\n   \
    \     4 => \"four\",\n        5 => \"five\",\n        6 => \"six\",\n        7\
    \ => \"seven\",\n        8 => \"eight\",\n        9 => \"nine\",\n        _ =>\
    \ \"\",\n    });\n    s.collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let number_to_int = |s: &str|\
    \ match s {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => 0,\n    };\n\n    let mut vector: Vec<&str>\
    \ = numbers.split(' ').collect();\n    vector.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    vector.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut digits: Vec<u32> = Vec::new();\n\
    \    for number in numbers.split_whitespace() {\n        digits.push(match number\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    sort_numbers: Invalid input: {}\", number),\n        });\n    }\n    digits.sort();\n\
    \    let mut result = String::new();\n    for digit in digits {\n        result.push_str(match\
    \ digit {\n            0 => \"zero\",\n            1 => \"one\",\n           \
    \ 2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n   \
    \         5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    sort_numbers: Invalid input: {}\", digit),\n        });\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // FIXME\n    String::new()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"three\"`', /tmp/tmp8x0z2_kv.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split(' ')\n\
    \        .map(|s| match s {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => -1,\n        })\n        .filter(|&i| i >= 0)\n        .sorted()\n\
    \        .iter()\n        .map(|&i| match i {\n            0 => \"zero\",\n  \
    \          1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Filter` in the\
    \ current scope\n  --> /tmp/tmp_higvkka.rs:23:10\n   |\n23 |         .sorted()\n\
    \   |          ^^^^^^ method not found in `Filter<Map<std::str::Split<'_, char>,\
    \ [closure@/tmp/tmp_higvkka.rs:9:14: 21:10]>, [closure@/tmp/tmp_higvkka.rs:22:17:\
    \ 22:28]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqnyxdcpf.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut words: Vec<&str> = numbers.split('\
    \ ').collect();\n    words.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    words.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpvx6n7_d2.rs:8:26\n  |\n8 |     words.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                          ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpvx6n7_d2.rs:8:48\n\
    \  |\n8 |     words.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                ^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|word| format!(\"{:02}\", number_word_to_number(word))).collect();\n\
    \    numbers.sort();\n    let numbers: Vec<String> = numbers.iter().map(|number|\
    \ number_to_number_word(&number[2..])).collect();\n    numbers.join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_word_to_number` in this scope\n\
    \ --> /tmp/tmpyxod8q9e.rs:7:91\n  |\n7 |     let mut numbers: Vec<String> = numbers.split_whitespace().map(|word|\
    \ format!(\"{:02}\", number_word_to_number(word))).collect();\n  |           \
    \                                                                            \
    \    ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `number_to_number_word` in this scope\n --> /tmp/tmpyxod8q9e.rs:9:60\n\
    \  |\n9 |     let numbers: Vec<String> = numbers.iter().map(|number| number_to_number_word(&number[2..])).collect();\n\
    \  |                                                            ^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let nums = numbers.split_whitespace().map(|s|\
    \ {\n        match s {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number {}\", s),\n        }\n    });\n    let mut\
    \ nums: Vec<i32> = nums.collect();\n    nums.sort();\n    nums.iter().map(|i|\
    \ match i {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\"\
    ,\n        3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n \
    \       6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n    \
    \    9 => \"nine\",\n        _ => panic!(\"Unreachable\"),\n    })\n    .collect::<Vec<&str>>()\n\
    \    .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    sorted_numbers.sort();\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpegtj8g_l.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split(' ')\n        .map(|num| num.parse::<u32>().unwrap())\n      \
    \  .collect();\n    numbers.sort();\n    let mut output = String::new();\n   \
    \ for number in numbers {\n        output.push_str(&number.to_string());\n   \
    \     output.push(' ');\n    }\n    // remove trailing space\n    output.pop();\n\
    \    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: Empty }', /tmp/tmpx2tnudnl.rs:9:39\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> =\n\
    \        numbers\n            .split_whitespace()\n            .map(|number| match\
    \ number {\n                \"zero\" => 0,\n                \"one\" => 1,\n  \
    \              \"two\" => 2,\n                \"three\" => 3,\n              \
    \  \"four\" => 4,\n                \"five\" => 5,\n                \"six\" =>\
    \ 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n     \
    \           \"nine\" => 9,\n                _ => 0,\n            })\n        \
    \    .collect();\n    numbers.sort();\n    numbers\n        .iter()\n        .map(|number|\
    \ match number {\n            0 => \"zero\",\n            1 => \"one\",\n    \
    \        2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => \"zero\",\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut words: Vec<u32> = numbers\n\
    \        .split(\" \")\n        .map(|numeral| match numeral {\n            \"\
    zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n         \
    \   \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid numeral:\
    \ {}\", numeral),\n        })\n        .collect();\n    words.sort();\n    words.iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid numeral: {}\", num),\n        })\n      \
    \  .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Invalid numeral: ', /tmp/tmpkxw_l40z.rs:20:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_vector: Vec<u32>\
    \ = vec![];\n    let numbers_vector: Vec<&str> = numbers.split(\" \").collect();\n\
    \    let number_mapping = [(\"zero\", 0), (\"one\", 1), (\"two\", 2), (\"three\"\
    , 3), (\"four\", 4), (\"five\", 5), (\"six\", 6), (\"seven\", 7), (\"eight\",\
    \ 8), (\"nine\", 9)];\n    let mapping: HashMap<&str, u32> = number_mapping.iter().cloned().collect();\n\
    \    for num in numbers_vector {\n        match mapping.get(num) {\n         \
    \   Some(x) => num_vector.push(*x),\n            None => println!(\"Invalid number\"\
    ),\n        }\n    }\n    num_vector.sort();\n    let mut string_num_vector: Vec<String>\
    \ = vec![];\n    for num in num_vector {\n        for (str_num, num_int) in &mapping\
    \ {\n            if num == *num_int {\n                string_num_vector.push(str_num.to_string());\n\
    \            }\n        }\n    }\n    let sorted_numbers = string_num_vector.join(\"\
    \ \");\n    sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmpyi0cn8a0.rs:10:18\n\
    \   |\n10 |     let mapping: HashMap<&str, u32> = number_mapping.iter().cloned().collect();\n\
    \   |                  ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut ints: Vec<i32> = Vec::new();\n\
    \    for word in numbers.split_whitespace() {\n        match word {\n        \
    \    \"zero\" => ints.push(0),\n            \"one\" => ints.push(1),\n       \
    \     \"two\" => ints.push(2),\n            \"three\" => ints.push(3),\n     \
    \       \"four\" => ints.push(4),\n            \"five\" => ints.push(5),\n   \
    \         \"six\" => ints.push(6),\n            \"seven\" => ints.push(7),\n \
    \           \"eight\" => ints.push(8),\n            \"nine\" => ints.push(9),\n\
    \            _ => {}\n        }\n    }\n    ints.sort();\n    let mut words: Vec<String>\
    \ = Vec::new();\n    for i in ints {\n        words.push(match i {\n         \
    \   0 => \"zero\".to_string(),\n            1 => \"one\".to_string(),\n      \
    \      2 => \"two\".to_string(),\n            3 => \"three\".to_string(),\n  \
    \          4 => \"four\".to_string(),\n            5 => \"five\".to_string(),\n\
    \            6 => \"six\".to_string(),\n            7 => \"seven\".to_string(),\n\
    \            8 => \"eight\".to_string(),\n            9 => \"nine\".to_string(),\n\
    \            _ => \"\".to_string(),\n        });\n    }\n    words.join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    for word in numbers.split_whitespace() {\n        nums.push(number_to_numeral(word));\n\
    \    }\n    nums.sort();\n    numbers.replace(|c: char| c.is_whitespace(), \"\"\
    )\n        .chars()\n        .enumerate()\n        .map(|(i, c)| {\n         \
    \   if c.is_whitespace() {\n                c\n            } else {\n        \
    \        numeral_to_number(nums[i])\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_numeral` in this scope\n\
    \ --> /tmp/tmpcdpwozcy.rs:9:19\n  |\n9 |         nums.push(number_to_numeral(word));\n\
    \  |                   ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_number` in this scope\n  --> /tmp/tmpcdpwozcy.rs:19:17\n\
    \   |\n19 |                 numeral_to_number(nums[i])\n   |                 ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<&str>\
    \ = numbers.split(' ').collect();\n    sorted_numbers.sort();\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpx62_0q4h.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    unimplemented!(\"sort the words\
    \ in {} from smallest to largest\", numbers)\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: sort the words in  from smallest\
    \ to largest', /tmp/tmpcnybm2jt.rs:7:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let tokens: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    let sorted: Vec<&str> = tokens.iter().map(|s| s.parse::<usize>().unwrap()).collect();\n\
    \    let mut result = String::new();\n    for s in sorted {\n        result.push_str(NUMBERS[s])\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n  --> /tmp/tmptjisgiko.rs:11:25\n\
    \   |\n11 |         result.push_str(NUMBERS[s])\n   |                        \
    \ ^^^^^^^ help: a local variable with a similar name exists: `numbers`\n\nerror[E0277]:\
    \ a value of type `Vec<&str>` cannot be built from an iterator over elements of\
    \ type `usize`\n    --> /tmp/tmptjisgiko.rs:8:80\n     |\n8    |     let sorted:\
    \ Vec<&str> = tokens.iter().map(|s| s.parse::<usize>().unwrap()).collect();\n\
    \     |                                                                      \
    \          ^^^^^^^ value of type `Vec<&str>` cannot be built from `std::iter::Iterator<Item=usize>`\n\
    \     |\n     = help: the trait `FromIterator<usize>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut v: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    v.sort();\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpmvwfqnxh.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut s = numbers\n       \
    \ .split_whitespace()\n        .map(|s| NUMBER_MAP.get(s).unwrap())\n        .collect::<Vec<&i32>>();\n\
    \    s.sort();\n    s.iter()\n        .map(|&s| NUMBER_MAP.iter().find(|(_, &v)|\
    \ v == s).unwrap().0)\n        .collect::<Vec<&str>>()\n        .join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUMBER_MAP` in this scope\n --> /tmp/tmpixzyogvx.rs:9:18\n\
    \  |\n9 |         .map(|s| NUMBER_MAP.get(s).unwrap())\n  |                  ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `NUMBER_MAP` in this\
    \ scope\n  --> /tmp/tmpixzyogvx.rs:13:19\n   |\n13 |         .map(|&s| NUMBER_MAP.iter().find(|(_,\
    \ &v)| v == s).unwrap().0)\n   |                   ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // generate possible combinations\
    \ of words for numbers.\n    let mut words: Vec<&str> = vec![];\n    for w in\
    \ WORDS.iter() {\n        if numbers.contains(w) {\n            words.push(w);\n\
    \        }\n    }\n\n    // sort numerical digits.\n    let mut nums: Vec<i32>\
    \ = words.iter().map(|w| NUMERALS[*w]).collect();\n    nums.sort();\n\n    //\
    \ concatenate words again.\n    let mut result = String::new();\n    for n in\
    \ nums.iter() {\n        let mut is_first = true;\n        for w in words.iter()\
    \ {\n            if NUMERALS[*w] == *n {\n                if is_first {\n    \
    \                is_first = false;\n                } else {\n               \
    \     result.push(' ');\n                }\n                result.push_str(*w);\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `WORDS` in this scope\n --> /tmp/tmpgklqgb4k.rs:9:14\n\
    \  |\n9 |     for w in WORDS.iter() {\n  |              ^^^^^ help: a local variable\
    \ with a similar name exists: `words`\n\nerror[E0425]: cannot find value `NUMERALS`\
    \ in this scope\n  --> /tmp/tmpgklqgb4k.rs:16:51\n   |\n16 |     let mut nums:\
    \ Vec<i32> = words.iter().map(|w| NUMERALS[*w]).collect();\n   |             \
    \                                      ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `NUMERALS` in this scope\n  --> /tmp/tmpgklqgb4k.rs:24:16\n\
    \   |\n24 |             if NUMERALS[*w] == *n {\n   |                ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let num_vec: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| {\n            match s {\n    \
    \            \"zero\" => 0,\n                \"one\" => 1,\n                \"\
    two\" => 2,\n                \"three\" => 3,\n                \"four\" => 4,\n\
    \                \"five\" => 5,\n                \"six\" => 6,\n             \
    \   \"seven\" => 7,\n                \"eight\" => 8,\n                \"nine\"\
    \ => 9,\n                _ => panic!(\"Not a valid numberal: {}\", s),\n     \
    \       }\n        })\n        .collect();\n    let sorted_vec: Vec<u32> = num_vec.iter().sorted().cloned().collect();\n\
    \    let sorted_string: String = sorted_vec\n        .iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Not a valid numberal: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \");\n    sorted_string\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp2e_41k8i.rs:25:47\n   |\n25 |     let sorted_vec:\
    \ Vec<u32> = num_vec.iter().sorted().cloned().collect();\n   |               \
    \                                ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ u32>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split(' ')\n        .map(|x| name_to_num(x))\n        .collect();\n\
    \    nums.sort();\n    nums.iter()\n        .map(|x| num_to_name(*x))\n      \
    \  .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `name_to_num` in this scope\n --> /tmp/tmpn8or79hw.rs:9:18\n\
    \  |\n9 |         .map(|x| name_to_num(x))\n  |                  ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `num_to_name` in this\
    \ scope\n  --> /tmp/tmpn8or79hw.rs:13:18\n   |\n13 |         .map(|x| num_to_name(*x))\n\
    \   |                  ^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_to_sort: Vec<usize>\
    \ = Vec::new();\n    for number in numbers.split_whitespace() {\n        match\
    \ number {\n            \"zero\" => numbers_to_sort.push(0),\n            \"one\"\
    \ => numbers_to_sort.push(1),\n            \"two\" => numbers_to_sort.push(2),\n\
    \            \"three\" => numbers_to_sort.push(3),\n            \"four\" => numbers_to_sort.push(4),\n\
    \            \"five\" => numbers_to_sort.push(5),\n            \"six\" => numbers_to_sort.push(6),\n\
    \            \"seven\" => numbers_to_sort.push(7),\n            \"eight\" => numbers_to_sort.push(8),\n\
    \            \"nine\" => numbers_to_sort.push(9),\n            _ => panic!(\"\
    Provided string does not contain a valid number! {}\", number),\n        }\n \
    \   }\n    numbers_to_sort.sort();\n    let mut sorted_string = String::new();\n\
    \    for number in numbers_to_sort {\n        match number {\n            0 =>\
    \ sorted_string += \"zero \",\n            1 => sorted_string += \"one \",\n \
    \           2 => sorted_string += \"two \",\n            3 => sorted_string +=\
    \ \"three \",\n            4 => sorted_string += \"four \",\n            5 =>\
    \ sorted_string += \"five \",\n            6 => sorted_string += \"six \",\n \
    \           7 => sorted_string += \"seven \",\n            8 => sorted_string\
    \ += \"eight \",\n            9 => sorted_string += \"nine \",\n            _\
    \ => panic!(\"Bad number! {}\", number),\n        }\n    }\n    sorted_string.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .collect::<Vec<&str>>()\n        .sort_by(|a, b| match_numeral(a).cmp(&match_numeral(b)))\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `match_numeral` in this scope\n  -->\
    \ /tmp/tmpz4dfizsi.rs:10:25\n   |\n10 |         .sort_by(|a, b| match_numeral(a).cmp(&match_numeral(b)))\n\
    \   |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `match_numeral` in this scope\n  --> /tmp/tmpz4dfizsi.rs:10:47\n\
    \   |\n10 |         .sort_by(|a, b| match_numeral(a).cmp(&match_numeral(b)))\n\
    \   |                                               ^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0599]: no method named `join` found for unit type `()`\
    \ in the current scope\n  --> /tmp/tmpz4dfizsi.rs:11:10\n   |\n11 |         .join(\"\
    \ \")\n   |          ^^^^ method not found in `()`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .map(|w| {\n            let (digit, _) = get_digit(w.to_string());\n\
    \            digit\n        })\n        .enumerate()\n        .collect::<Vec<(usize,\
    \ u8)>>()\n        .sort_by(|&(_, a), &(_, b)| a.cmp(&b))\n        .iter()\n \
    \       .map(|&(i, _)| {\n            let (_, text) = get_digit(numbers.split_whitespace().nth(i).unwrap().to_string());\n\
    \            text\n        })\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_digit` in this scope\n  --> /tmp/tmp2a8lu6ma.rs:10:30\n\
    \   |\n10 |             let (digit, _) = get_digit(w.to_string());\n   |     \
    \                         ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `get_digit` in this scope\n  --> /tmp/tmp2a8lu6ma.rs:18:29\n \
    \  |\n18 |             let (_, text) = get_digit(numbers.split_whitespace().nth(i).unwrap().to_string());\n\
    \   |                             ^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `iter` found for unit type `()` in the current scope\n  -->\
    \ /tmp/tmp2a8lu6ma.rs:16:10\n   |\n16 |         .iter()\n   |          ^^^^ method\
    \ not found in `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // TODO Implement this function\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_nqbbgpe.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted = numbers.split_whitespace().map(|n|\
    \ {\n        match n {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid input\"),\n        }\n    }).collect::<Vec<u32>>();\n\
    \    sorted.sort();\n    sorted.iter().map(|&i| {\n        match i {\n       \
    \     0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n \
    \           3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid input\"\
    ),\n        }\n    }).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<u32>\
    \ =\n        numbers\n            .split(' ')\n            .filter_map(|s| to_digit(s))\n\
    \            .collect();\n    sorted_numbers.sort();\n    to_text(sorted_numbers)\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_digit` in this scope\n  --> /tmp/tmp28xz0zqs.rs:10:29\n\
    \   |\n10 |             .filter_map(|s| to_digit(s))\n   |                   \
    \          ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `to_text` in this scope\n  --> /tmp/tmp28xz0zqs.rs:13:5\n   |\n13 |     to_text(sorted_numbers)\n\
    \   |     ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    numbers_vec.sort();\n    let mut\
    \ sorted_numbers = String::new();\n    for number in numbers_vec {\n        sorted_numbers\
    \ = sorted_numbers + number + \" \";\n    }\n    sorted_numbers.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmps467axhq.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
