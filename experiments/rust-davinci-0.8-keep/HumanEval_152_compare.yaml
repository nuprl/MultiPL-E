name: HumanEval_152_compare
language: rust
prompt: "/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return an array of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
  fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
  \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
  \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
completions: ['    game.iter().zip(guess.iter()).map(|(&i, &j)| (i - j).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n   \
    \ for (idx, n) in game.iter().enumerate() {\n        let val = *n - guess[idx];\n\
    \        if val < 0 {\n            result.push(val.abs());\n        } else {\n\
    \            result.push(val);\n        }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(e,f)|
    (e-f).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a -
    b).abs()).collect()', "    let mut result = Vec::with_capacity(game.len());\n\
    \    for (i, j) in game.iter().zip(guess.iter()) {\n        result.push(j.checked_sub(i).unwrap_or_else(||\
    \ j - i).abs());\n    }\n    result", '    return game.iter().zip(guess.iter()).map(|(&a,
    &b)|(a-b).abs()).collect();', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for (p, q) in game.iter().zip(guess.iter()) {\n        result.push((p - q).abs());\n\
    \    }\n    result", "    assert_eq!(game.len(), guess.len());\n    game.iter().zip(guess.iter()).map(|(a,\
    \ b)| (a - b).abs()).collect()", '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, gg)| (g
    - gg).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a -
    b).abs()).collect()', "    let mut result = Vec::new();\n    let mut difference\
    \ = 0;\n    for i in 0..game.len() {\n        difference = (game[i] - guess[i]).abs();\n\
    \        result.push(difference);\n    }\n    result", "    assert_eq!(game.len(),\
    \ guess.len());\n    game.iter().zip(guess.iter()).map(|(g, gr)| (g - gr).abs()).collect()",
  "    let mut result = Vec::with_capacity(game.len());\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]).abs();\n    }\n    result", "   \
    \ let mut dist: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n     \
    \   dist.push(game[i] - guess[i]).abs();\n    }\n    dist", '    game.iter().zip(guess.iter()).map(|(&a,
    &b)| (a - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for (i, j) in game.iter().zip(guess.iter()) {\n        if *i == *j {\n  \
    \          result.push(0);\n        } else {\n            result.push((*i - *j).abs());\n\
    \        }\n    }\n    result", "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        result.push(game[i] - guess[i]).abs();\n\
    \    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    if game.len() != guess.len() {\n        return vec![];\n    }\n    let mut\
    \ results = Vec::new();\n    for i in 0..game.len() {\n        let diff = (game[i]\
    \ - guess[i]).abs();\n        results.push(diff);\n    }\n    results", "    let\
    \ mut res = Vec::new();\n    for (i, n) in game.iter().enumerate() {\n       \
    \ let dif = n - guess[i];\n        res.push(if dif >= 0 { dif } else { -dif });\n\
    \    }\n    res", '    game.iter().zip(guess.iter()).map(|(r, g)| if r == g {
    0 } else { (r - g).abs() }).collect()', "    game.iter().zip(guess.iter()).map(|(game,\
    \ guess)| {\n        if game > guess {\n            game - guess\n        } else\
    \ {\n            guess - game\n        }\n    }).collect()", "    let mut results\
    \ = Vec::new();\n    for (x, y) in game.iter().zip(guess.iter()) {\n        results.push(y.abs()\
    \ - x.abs());\n    }\n    results", "    let mut results = Vec::new();\n    for\
    \ i in 0..game.len() {\n        results.push(game[i] - guess[i]);\n    }\n   \
    \ results", "    let result: Vec<isize> = game.iter().zip(guess.iter()).map(|(a,\
    \ b)| if a > b {a - b} else {b - a}).collect();\n    result", '  game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(&a, &b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '  game.iter().zip(guess.iter()).map(|(&x, &y)| (x - y).abs()).collect()', "   \
    \ let mut results = Vec::new();\n    for (index, score) in game.iter().enumerate()\
    \ {\n        if guess[index] == score {\n            results.push(0);\n      \
    \  } else {\n            results.push((guess[index] - score).abs());\n       \
    \ }\n    }\n    results", "    let mut result = Vec::new();\n    for (i, _) in\
    \ game.iter().enumerate() {\n        result.push(cmp::abs(game[i] - guess[i]));\n\
    \    }\n    result", "    let mut missed = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            missed.push(0);\n        }\
    \ else {\n            missed.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    missed", "    if game.len() != guess.len() { return vec![]; }\n    game.iter().zip(guess.iter()).map(|(a,\
    \ b)| (a - b).abs()).collect()", "    let mut out = Vec::new();\n    for i in\
    \ 0..game.len() {\n        let diff = game[i] - guess[i];\n        out.push(diff.abs());\n\
    \    }\n    out", '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(&x, &y)| (x - y).abs()).collect()', " \
    \   let mut res: Vec<isize> = Vec::new();\n    for (i, n) in game.iter().enumerate()\
    \ {\n        res.push(n - guess[i]);\n    }\n    res", "    let mut res: Vec<isize>\
    \ = Vec::new();\n    for i in 0..game.len() {\n        if game[i] == guess[i]\
    \ {\n            res.push(0);\n        } else {\n            res.push((game[i]\
    \ - guess[i]).abs());\n        }\n    }\n    res", '    game.iter().zip(guess.iter()).map(|(&x,
    &y)| (x - y).abs()).collect()', "    let mut out: Vec<isize> = Vec::new();\n \
    \   for (idx, val) in game.iter().enumerate() {\n        let cur_guess = guess[idx];\n\
    \        if cur_guess == val {\n            out.push(0);\n        } else {\n \
    \           out.push((cur_guess - val).abs());\n        }\n    }\n    out", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(score,
    g)| score - g).collect()', "    let res = game.iter().zip(guess.iter()).map(|(&a,\
    \ &b)| {\n        if a == b {\n            0\n        } else {\n            (a\
    \ - b).abs()\n        }\n    }).collect();\n    res", '    return game.iter().zip(guess.iter()).map(|(&game,
    &guess)| (game - guess).abs()).collect();', "    let mut result = Vec::new();\n\
    \    for i in 0..game.len() {\n        let diff = guess[i] - game[i];\n      \
    \  result.push(diff.abs());\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(&a,
    &b)| (a - b).abs()).collect()', '    return game.iter().zip(guess.iter()).map(|(x,
    y)| x - y).map(|x| x.abs()).collect();', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        result.push(if game[i] < guess[i] {\n \
    \           guess[i] - game[i]\n        } else if game[i] > guess[i] {\n     \
    \       game[i] - guess[i]\n        } else {\n            0\n        });\n   \
    \ }\n    result", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]).abs();\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(i,
    j)| i - j).collect()', "    let mut res: Vec<isize> = Vec::new();\n    for i in\
    \ 0..game.len() {\n        res.push(game[i] - guess[i]).abs();\n    }\n    res",
  "    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push(game[i]\
    \ - guess[i]);\n    }\n    result", "    // Your code here\n    let mut result\
    \ = Vec::new();\n    let mut my_score = 0;\n    let mut guess_score = 0;\n   \
    \ for i in 0..game.len() {\n        if game[i] != guess[i] {\n            my_score\
    \ = game[i].abs();\n            guess_score = guess[i].abs();\n            result.push((my_score\
    \ - guess_score).abs());\n        } else {\n            result.push(0);\n    \
    \    }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut index = 0;\n    while index < game.len() {\n        let r = (game[index]\
    \ - guess[index]).abs();\n        result.push(r);\n        index += 1;\n    }\n\
    \    result", "    let mut errors = Vec::with_capacity(game.len());\n    for (i,\
    \ j) in game.iter().zip(guess.iter()) {\n        errors.push(i - j).abs();\n \
    \   }\n    errors", '    return game.iter().zip(guess.iter()).map(|(&a, &b)| (a
    - b).abs()).collect();', '    game.iter().zip(guess.iter()).map(|(&g, &gss)| (g
    - gss).abs()).collect()', "    let mut total = Vec::new();\n    for (i, x) in\
    \ game.iter().enumerate() {\n        let mut sub = guess[i] - x;\n        if sub\
    \ < 0 {\n            sub = sub * -1;\n        }\n        total.push(sub);\n  \
    \  }\n    total", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(&g, &gus)| (g - gus).abs()).collect()',
  "    let mut score: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n   \
    \     score.push(game[i] - guess[i]).abs();\n    }\n    score", "    if game.len()\
    \ != guess.len() {\n        panic!(\"Game and guess must be the same length\"\
    );\n    }\n    let mut result = Vec::new();\n    for i in 0..game.len() {\n  \
    \      let difference = (game[i] - guess[i]).abs();\n        result.push(difference);\n\
    \    }\n    result", '    game.iter().zip(guess.iter()).map(|(g, p)| (g - p).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(&g, &gus)| (gus - g).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n   \
    \     result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut output = Vec::new();\n    for i in\
    \ 0..game.len() {\n        output.push(guess[i] - game[i]);\n    }\n    return\
    \ output;", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut output = Vec::new();\n    for i in 0..game.len() {\n        output.push(if\
    \ game[i] == guess[i] { 0 } else { (game[i] - guess[i]).abs() });\n    }\n   \
    \ output", "    let mut c = Vec::new();\n    for i in 0..game.len() {\n      \
    \  c.push(game[i] - guess[i]).abs();\n    }\n    c", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut i = 0;\n    while i < game.len() {\n        result.push(game[i]\
    \ - guess[i]);\n        i += 1;\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(g,
    gs)| (g - gs).abs()).collect()', '    return game.iter().zip(guess.iter()).map(|x|
    (x.0 - x.1).abs()).collect();', '    game.iter().zip(guess.iter()).map(|(&a, &b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x
    - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, u)| (g - u).abs()).collect()',
  '    return game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect();',
  "    game.iter().zip(guess.iter()).map(|(x, y)| {\n        if x > y {\n        \
    \    x - y\n        } else {\n            y - x\n        }\n    }).collect()",
  '    return game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect();',
  "    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i <\
    \ game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n        i += 1;\n    }\n    result", "    let mut res: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        if game[i] > guess[i] {\n            res.push(game[i]\
    \ - guess[i]);\n        } else if game[i] < guess[i] {\n            res.push(guess[i]\
    \ - game[i]);\n        } else {\n            res.push(0);\n        }\n    }\n\
    \    res", "    let mut diff: Vec<isize> = Vec::new();\n    for i in 0..game.len()\
    \ {\n        diff.push(guess[i] - game[i]).abs();\n    }\n    diff", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(&x, &y)| (x
    - y).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n    for\
    \ i in 0..game.len() {\n        result.push( (game[i] - guess[i]).abs() );\n \
    \   }\n    result", "    let mut diff = Vec::new();\n    for i in 0..game.len()\
    \ {\n        diff.push(if game[i] > guess[i] { game[i] - guess[i] } else { guess[i]\
    \ - game[i] });\n    }\n    diff", "    let mut res: Vec<isize> = Vec::new();\n\
    \    for (m, s) in game.iter().zip(guess.iter()) {\n        res.push(if m > s\
    \ { m - s } else { s - m });\n    }\n    res", '    game.iter().zip(guess.iter()).map(|(&a,
    &b)| a - b).collect()', "    let mut ret: Vec<isize> = Vec::new();\n    for i\
    \ in 0..game.len() {\n        ret.push(game[i] - guess[i]).abs();\n    }\n   \
    \ ret", '    return game.iter().zip(guess.iter()).map(|(x, y)| if x > y { x -
    y } else { y - x }).collect();', "    if game.len() != guess.len() {\n       \
    \ panic!(\"The length of the input arrays is not equal!\");\n    }\n\n    let\
    \ mut result: Vec<isize> = Vec::new();\n    for (i, j) in game.iter().zip(guess.iter())\
    \ {\n        result.push(if *i < *j {\n            *j - *i\n        } else {\n\
    \            *i - *j\n        });\n    }\n    result", "    //let mut diffs: Vec<isize>\
    \ = Vec::new();\n    let mut diffs = Vec::with_capacity(game.len());\n    //let\
    \ mut i = 0;\n    //while i < game.len() {\n    //    diffs.push(cmp::max(game[i],\
    \ guess[i]) - cmp::min(game[i], guess[i]));\n    //    i += 1;\n    //}\n    //diffs\n\
    \    game.iter().zip(guess.iter()).map(|(x, y)| cmp::max(*x, *y) - cmp::min(*x,\
    \ *y)).collect()", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(game, guess)| game - guess).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ return game.iter().zip(guess.iter()).map(|(a, b)| {\n        if a > b {\n  \
    \          return a - b;\n        } else {\n            return b - a;\n      \
    \  }\n    }).collect();", '    game.iter().zip(guess.iter()).map(|(a, b)| (a -
    b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, gs)| (g - gs).abs()).collect()',
  "    let mut diffs: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n   \
    \     diffs.push(guess[i] - game[i]);\n    }\n    diffs", "    // take a look\n\
    \    println!(\"{:?} - {:?}\", game, guess);\n    // where we will store the results\n\
    \    let mut result = Vec::with_capacity(game.len());\n    // iterate over both\
    \ vectors in parallel\n    for (game_val, guess_val) in game.iter().zip(guess.iter())\
    \ {\n        // determine the difference\n        let diff = game_val - guess_val;\n\
    \        // if it's positive (guess was less than the actual score)\n        if\
    \ diff > 0 {\n            // make it positive\n            result.push(diff);\n\
    \        } else {\n            // otherwise use the absolute value\n         \
    \   result.push(diff.abs());\n        }\n    }\n    // return the results\n  \
    \  result", '    game.iter().zip(guess.iter()).map(|(x, y)| if x == y { 0 } else
    { (x - y).abs() }).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    let n = game.len();\n    for i in 0..n {\n        result.push(isize::abs(game[i]\
    \ - guess[i]));\n    }\n    result", "    let mut ret: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        ret.push(if game[i] == guess[i] {\n   \
    \         0\n        } else {\n            if game[i] < guess[i] {\n         \
    \       guess[i] - game[i]\n            } else {\n                game[i] - guess[i]\n\
    \            }\n        });\n    }\n    ret", "    let mut result = Vec::with_capacity(game.len());\n\
    \    for (idx, val) in game.iter().enumerate() {\n        let guess_value = guess[idx];\n\
    \        let abs_dif = (guess_value - val).abs();\n        result.push(abs_dif);\n\
    \    }\n    result", "    let mut res: Vec<isize> = Vec::new();\n    for (i, x)\
    \ in game.iter().enumerate() {\n        res.push(x - guess[i]);\n    }\n    res",
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      let score = game[i];\n        let guess = guess[i];\n        let value\
    \ = score - guess;\n        result.push(value.abs());\n    }\n    result", " \
    \   if game.len() != guess.len() {\n        panic!(\"Game and guess vectors have\
    \ different lengths!\");\n    }\n    let mut result = Vec::with_capacity(game.len());\n\
    \    for (g, p) in game.iter().zip(guess.iter()) {\n        result.push(g - p);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", "    assert_eq!(game.len(),\
    \ guess.len());\n    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()",
  "    let mut vec: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n     \
    \   vec.push(game[i] - guess[i]);\n    }\n    return vec;", '    game.iter().zip(guess.iter()).map(|(g,
    gs)| (g - gs).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, c)|
    (g - c).abs()).collect()', "    assert_eq!(game.len(), guess.len());\n    let\
    \ mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push(isize::abs(game[i]\
    \ - guess[i]));\n    }\n    result", "    if game.len() != guess.len() {\n   \
    \     return vec![];\n    }\n    let mut result = Vec::with_capacity(game.len());\n\
    \    for i in 0..game.len() {\n        result.push(if game[i] == guess[i] { 0\
    \ } else { (game[i] - guess[i]).abs() });\n    }\n    result", "    let mut results\
    \ = Vec::new();\n    for i in 0..game.len() {\n        if game[i] == guess[i]\
    \ {\n            results.push(0);\n        } else {\n            results.push((game[i]\
    \ - guess[i]).abs());\n        }\n    }\n    results", "    let mut result = Vec::new();\n\
    \    for i in 0..game.len() {\n        let x = game[i] - guess[i];\n        if\
    \ x < 0 {\n            result.push(x.abs());\n        } else {\n            result.push(x);\n\
    \        }\n    }\n    result", "    //if game.len() != guess.len() {return Vec::new()}\n\
    \    let mut res: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n   \
    \     if game[i] == guess[i] {\n            res.push(0);\n        } else {\n \
    \           res.push((game[i] - guess[i]).abs());\n        }\n    }\n    res",
  "    let mut res: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n     \
    \   if game[i] == guess[i] {\n            res.push(0);\n        } else {\n   \
    \         res.push((game[i] - guess[i]).abs());\n        }\n    }\n    res", " \
    \   let mut result: Vec<isize> = Vec::new();\n    for (i,v) in game.iter().enumerate()\
    \ {\n        let temp = v - guess[i];\n        if temp < 0 {\n            result.push(temp.abs());\n\
    \        } else {\n            result.push(temp);\n        }\n    }\n    result",
  "    let mut guess_game: Vec<isize> = Vec::new();\n    for (i, score) in game.iter().enumerate()\
    \ {\n        if *score == guess[i] {\n            guess_game.push(0);\n      \
    \  } else {\n            guess_game.push(score.abs() - guess[i].abs());\n    \
    \    }\n    }\n    guess_game", '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(&a, &b)| (a -
    b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let diff = (game[i] - guess[i]).abs();\n        result.push(diff);\n\
    \    }\n    result", "    let mut results = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            results.push(0);\n        }\
    \ else {\n            results.push((game[i] - guess[i]).abs());\n        }\n \
    \   }\n    results", "    let mut res = Vec::new();\n    for i in 0..game.len()\
    \ {\n        res.push(game[i] - guess[i]).abs();\n    }\n    res", '    game.iter().zip(guess.iter()).map(|(a,
    b)| a - b).collect()', "    let mut ret_vec = Vec::new();\n    for (x, y) in game.iter().zip(guess.iter())\
    \ {\n        ret_vec.push((x - y).abs());\n    }\n    ret_vec", '  game.iter().zip(guess.iter()).map(|(&x,
    &y)| (x - y).abs()).collect()', "    let mut out: Vec<isize> = Vec::new();\n \
    \   if game.len() != guess.len() {\n        panic!(\"Invalid array lengths\");\n\
    \    }\n    for i in 0..game.len() {\n        out.push(if game[i] == guess[i]\
    \ { 0 } else { (game[i] - guess[i]).abs() });\n    }\n    out", "    let mut result\
    \ = Vec::new();\n    for i in 0..game.len() {\n        result.push(game[i] - guess[i]).abs();\n\
    \    }\n    result", "    game.iter().zip(guess.iter()).map(|(a, b)| {\n     \
    \   let mut v = (a - b).abs();\n        if v > 5 {\n            v = 10 - v;\n\
    \        }\n        v\n    }).collect()", "    let mut result = Vec::with_capacity(game.len());\n\
    \    for (i, v) in game.iter().enumerate() {\n        result.push(v.checked_sub(guess[i]).unwrap().abs());\n\
    \    }\n    result", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(if game[i] == guess[i] { 0 } else { (game[i] - guess[i]).abs()\
    \ });\n    }\n    result", "    let mut result = Vec::new();\n    let mut i =\
    \ 0;\n    while i < game.len() {\n        result.push(game[i] - guess[i]);\n \
    \       i += 1;\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut diff = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let x = (game[i] - guess[i]).abs();\n        diff.push(x);\n    }\n\
    \    diff", "    let mut res: Vec<isize> = Vec::new();\n    for i in 0..game.len()\
    \ {\n        res.push(game[i] - guess[i]);\n    }\n    return res;", '    return
    game.iter().zip(guess.iter()).map(|(a, b)| (*a - *b).abs()).collect();', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let res = game.iter().zip(guess.iter()).map(|(v1,\
    \ v2)| v1 - v2).collect();\n    res", "    let mut results = Vec::new();\n   \
    \ for i in 0..game.len() {\n        if game[i] < guess[i] {\n            results.push(guess[i]\
    \ - game[i]);\n        } else if game[i] > guess[i] {\n            results.push(game[i]\
    \ - guess[i]);\n        } else {\n            results.push(0);\n        }\n  \
    \  }\n    results", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(cmp::max(game[i], guess[i]) - cmp::min(game[i], guess[i]));\n\
    \    }\n    result", "    let mut result: Vec<isize> = Vec::new();\n    let game_len\
    \ = game.len();\n    let guess_len = guess.len();\n    if game_len != guess_len\
    \ {\n        panic!(\"The input vectors should have equal length!\");\n    }\n\
    \    for index in 0..game_len {\n        result.push(if game[index] > guess[index]\
    \ {\n            game[index] - guess[index]\n        } else {\n            guess[index]\
    \ - game[index]\n        });\n    }\n    result", "    assert_eq!(game.len(),\
    \ guess.len());\n    game.iter().zip(guess.iter()).map(|(a, b)| if a == b {0}\
    \ else {(a - b).abs()}).collect()", '    game.iter().zip(guess.iter()).map(|(&a,
    &b)| (a - b).abs()).collect()', "    let mut diffs: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        diffs.push(game[i] - guess[i]).abs();\n\
    \    }\n    diffs", '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(g, h)| (g - h).abs()).collect()', "   \
    \ // your code here\n    game.iter().zip(guess.iter()).map(|(&a, &b)| (a - b).abs()).collect()",
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      let absolute_distance = (game[i] - guess[i]).abs();\n        result.push(absolute_distance);\n\
    \    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    game.iter().zip(guess.iter()).map(|(&game, &guess)| {\n        if game == guess\
    \ {\n            0\n        } else {\n            (game - guess).abs()\n     \
    \   }\n    }).collect()", "    if game.len() != guess.len() {\n        return\
    \ vec![];\n    }\n    let mut errors = Vec::new();\n    for (i, j) in game.iter().zip(guess.iter())\
    \ {\n        let error = i - j;\n        errors.push(error.abs());\n    }\n  \
    \  errors", "    let mut arr = Vec::new();\n    let mut i = 0;\n    while i <\
    \ game.len() {\n        let score = (game[i] - guess[i]).abs();\n        arr.push(score);\n\
    \        i += 1;\n    }\n    arr", '  game.iter().zip(guess.iter()).map(|(s, g)|
    (s - g).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let iter = game.iter().zip(guess.iter());\n\
    \    let mut vec = Vec::new();\n    for (g, gg) in iter {\n        vec.push(g\
    \ - gg);\n    }\n    vec", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]).abs();\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    if a < b {b - a} else {a - b}).collect()', '    game.iter().zip(guess.iter()).map(|(s,
    g)| (s - g).abs()).collect()', "    let mut res: Vec<isize> = Vec::new();\n  \
    \  for i in 0..game.len() {\n        if game[i] == guess[i] {\n            res.push(0);\n\
    \        } else {\n            res.push((game[i] - guess[i]).abs());\n       \
    \ }\n    }\n    res", '    return game.iter().zip(guess.iter()).map(|(&a, &b)|
    (a - b).abs()).collect();', "    let size = game.len();\n    let mut result =\
    \ Vec::with_capacity(size);\n    for i in 0..size {\n        result.push(if game[i]\
    \ > guess[i] {\n            game[i] - guess[i]\n        } else {\n           \
    \ guess[i] - game[i]\n        });\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let diff = if game[i] < guess[i] { guess[i] - game[i] } else { game[i]\
    \ - guess[i] };\n        result.push(diff);\n    }\n    result", "    let mut\
    \ result: Vec<isize> = Vec::new();\n    for (index, value) in game.iter().enumerate()\
    \ {\n        let diff = value - guess[index];\n        if diff < 0 {\n       \
    \     result.push(-diff);\n        } else {\n            result.push(diff);\n\
    \        }\n    }\n    result", '  game.iter().zip(guess.iter()).map(|(&a, &b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push(\n\
    \            if game[i] == guess[i] {\n                0\n            } else {\n\
    \                (game[i] - guess[i]).abs()\n            }\n        );\n    }\n\
    \    result", '    game.iter().zip(guess.iter()).map(|(game, guess)| (game - guess).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    return
    game.iter().zip(guess.iter()).map(|(a, b)| if a > b { a - b } else { b - a }).collect::<Vec<isize>>();',
  '    game.iter().zip(guess.iter()).map(|(&x, &y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut point = vec![];\n    for (_i, s) in\
    \ game.iter().enumerate() {\n        point.push(s - guess[_i]);\n    }\n    point",
  "  let mut output = Vec::new();\n  for i in 0..game.len() {\n    output.push(game[i]\
    \ - guess[i]);\n  }\n  output", "    let mut res = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            res.push(0);\n        } else\
    \ {\n            res.push((game[i] - guess[i]).abs());\n        }\n    }\n   \
    \ res", '    game.iter().zip(guess.iter()).map(|(a, b)| a - b).collect()', " \
    \   let mut res = Vec::new();\n    for i in 0..game.len() {\n        res.push(res_check(game[i],\
    \ guess[i]));\n    }\n    res", "    let mut result: Vec<isize> = Vec::new();\n\
    \    for (a, b) in game.iter().zip(guess.iter()) {\n        if a >= b {\n    \
    \        result.push(a - b);\n        } else {\n            result.push(b - a);\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    for i in\
    \ 0..game.len() {\n        result.push(game[i].abs() - guess[i].abs());\n    }\n\
    \    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(&x, &y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(s,
    g)| if *s == *g { 0 } else { (s - g).abs() }).collect()']
stop_tokens:
- "\n}"
