name: HumanEval_85_add
language: rust
results:
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    // TODO: add the even elements that are at odd indices.\n\
    \    let mut sum = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 == 0\
    \ && i % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let lst2 = lst.iter().enumerate().filter(|x| x.0\
    \ % 2 == 1 && x.1 % 2 == 0).map(|(_, x)| x).collect::<Vec<&isize>>();\n    lst2.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<&&isize>` is not satisfied\n\
    \    --> /tmp/tmp8gy4ke3l.rs:6:17\n     |\n6    |     lst2.iter().sum()\n    \
    \ |                 ^^^ the trait `Sum<&&isize>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && item % 2 == 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, item) in lst.iter().enumerate()\
    \ {\n        if (index % 2) == 1 && item % 2 == 0 {\n            sum += item;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, x)| *i % 2 ==\
    \ 1 && *x % 2 == 0).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,_)| *i % 2 ==\
    \ 1).map(|(_,x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp4ub8jkdn.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let result = lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 1).map(|(_, x)| *x).fold(0, |acc, x| acc + x);\n    result\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpe721d_j7.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x| x.0 % 2 == 1).filter(|x|\
    \ x.1 % 2 == 0).map(|x| x.1).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, v)| v % 2 == 0).map(|(_, v)| v).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, num)| *num).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp0qxh72ju.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (idx, val) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 1 && val % 2 == 0 {\n            sum += val;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    // Start your code here\n    0\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp1dh661by.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).enumerate().filter(|(i,\
    \ _)| i % 2 == 1).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpqk_33_yt.rs:5:29\n\
    \  |\n5 |     lst.iter().filter(|x| x % 2 == 0).enumerate().filter(|(i, _)| i\
    \ % 2 == 1).map(|(_, x)| x).sum()\n  |                           - ^ - {integer}\n\
    \  |                           |\n  |                           &&isize\n  |\n\
    help: `%` can be used on `isize`, you can dereference `x`\n  |\n5 |     lst.iter().filter(|x|\
    \ *x % 2 == 0).enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    \  |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n\
    \    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, i)| *i).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpdhmfuf3q.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().filter(|x| x.clone() % 2 == 0).filter(|x|\
    \ lst.iter().position(|y| y == x).unwrap() % 2 != 0).sum()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n --> /tmp/tmpf7i31jux.rs:5:82\n\
    \  |\n5 |   lst.iter().filter(|x| x.clone() % 2 == 0).filter(|x| lst.iter().position(|y|\
    \ y == x).unwrap() % 2 != 0).sum()\n  |                                      \
    \                                            ^^ no implementation for `isize ==\
    \ &isize`\n  |\n  = help: the trait `PartialEq<&isize>` is not implemented for\
    \ `isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n  = note: required because of the requirements on the impl of `PartialEq<&&isize>`\
    \ for `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, n)| n % 2 == 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  let mut sum = 0;\n  for i in 0..lst.len() {\n    if\
    \ i % 2 == 1 && lst[i] % 2 == 0 {\n      sum += lst[i];\n    }\n  }\n  sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    //return lst.iter().enumerate().filter(|&(i, _)|\
    \ i % 2 == 1).map(|(_, x)| x).sum();\n    return lst.iter().filter(|&x| x % 2\
    \ == 0).fold(0, |sum, x| sum + x);\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpx1tosn6m.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, element) in\
    \ lst.iter().enumerate() {\n        if index % 2 == 1 && element % 2 == 0 {\n\
    \            result += element;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    for (index, value) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && value % 2 == 0 {\n            total += value;\n\
    \        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = add;\n   \
    \ assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_,\
    \ x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7reoving.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, e) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && e % 2 == 0 {\n            sum += e;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().filter(|&x| (x % 2 == 0)).enumerate().filter(|&(i,\
    \ _)| (i % 2 == 1)).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `128`,\n right: `122`', /tmp/tmp1tc3k9xm.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, value) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && value % 2 == 0 {\n            sum += value;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().filter(|x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpt8uqpemu.rs:5:36\n\
    \  |\n5 |     return lst.iter().filter(|x| x % 2 == 0).sum()\n  |            \
    \                      - ^ - {integer}\n  |                                  |\n\
    \  |                                  &&isize\n  |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n  |\n5 |     return lst.iter().filter(|x| *x % 2 ==\
    \ 0).sum()\n  |                                  +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpeehoph4m.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if lst[i] % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmpn96l67hr.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, x)| {\n\
    \        acc + match (i % 2, x % 2) {\n            (0, 0) => x,\n            _\
    \ => 0,\n        }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpiy8v6kn8.rs:8:18\n\
    \  |\n6 |           acc + match (i % 2, x % 2) {\n  |  _______________-\n7 | |\
    \             (0, 0) => x,\n  | |                       - this is found to be\
    \ of type `&isize`\n8 | |             _ => 0,\n  | |                  ^ expected\
    \ `&isize`, found integer\n9 | |         }\n  | |_________- `match` arms have\
    \ incompatible types\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x| x.0 % 2 == 1).filter(|x|\
    \ x.1 % 2 == 0).map(|x| x.1).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, n)| n % 2 ==\
    \ 0 && i % 2 == 1).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmphv29ewza.rs:5:46\n\
    \  |\n5 |     lst.iter().enumerate().filter(|(i, n)| n % 2 == 0 && i % 2 == 1).map(|(_,\
    \ n)| n).sum()\n  |                                            - ^ - {integer}\n\
    \  |                                            |\n  |                       \
    \                     &&isize\n  |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `n`\n  |\n5 |     lst.iter().enumerate().filter(|(i, n)| *n % 2\
    \ == 0 && i % 2 == 1).map(|(_, n)| n).sum()\n  |                             \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, num)| if\
    \ i % 2 == 1 && num % 2 == 0 { acc + num } else { acc })\n}\n\nfn main() {\n \
    \   let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|&(i, _)| i\
    \ % 2 == 1).map(|(_, x)| *x).sum();\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpkrhs0xt_.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, x)| {\n\
    \        if i % 2 == 1 && x % 2 == 0 {\n            acc + x\n        } else {\n\
    \            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n\n\
    \    let mut sum = 0;\n    for (i, val) in lst.iter().enumerate() {\n        if\
    \ (i + 1) % 2 == 0 && val % 2 == 0 {\n            sum += val;\n        }\n   \
    \ }\n\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, x)| if\
    \ i % 2 == 1 { acc + x } else { acc })\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp93jjdd6x.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut lst = lst;\n    lst.retain(|x| x % 2 ==\
    \ 0);\n    lst.iter().step_by(2).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp6ra1000p.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, i) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && i % 2 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (idx, elem) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 1 && elem % 2 == 0 {\n            sum += elem;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0592qwas.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, v)| v).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpr49j6maf.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|x| x.0 % 2\
    \ == 1).filter(|x| x.1 % 2 == 0).map(|x| x.1).sum();\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).filter(|(_, n)| n % 2 == 0).fold(0, |acc, (_, n)| acc + n)\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpdd866ii4.rs:5:74\n\
    \  |\n5 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).filter(|(_, n)|\
    \ n % 2 == 0).fold(0, |acc, (_, n)| acc + n)\n  |                            \
    \                                            - ^ - {integer}\n  |            \
    \                                                            |\n  |          \
    \                                                              &&isize\n  |\n\
    help: `%` can be used on `isize`, you can dereference `n`\n  |\n5 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 1).filter(|(_, n)| *n % 2 == 0).fold(0, |acc, (_, n)| acc + n)\n\
    \  |                                                                        +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().step_by(2).fold(0, |acc, x| acc + x)\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp8ylajstt.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if lst[i] % 2 == 0 && i % 2 != 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).filter(|(_, x)| x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpfp7h8u2p.rs:5:74\n\
    \  |\n5 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).filter(|(_, x)|\
    \ x % 2 == 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n5 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 1).filter(|(_, x)| *x % 2 == 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, i) in lst.iter().enumerate()\
    \ {\n        if (index + 1) % 2 == 0 && i % 2 == 0 {\n            sum += i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, &n)| n).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp242btzoz.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (idx, &x)|\
    \ {\n        if idx % 2 == 1 && x % 2 == 0 {\n            acc + x\n        } else\
    \ {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, x)| x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| *x % 2 == 0).zip(0..).filter(|&(x,\
    \ y)| y % 2 == 1).map(|(x, _)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `128`,\n right: `122`', /tmp/tmpb89atdap.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, value) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && value % 2 == 0 {\n            sum += value;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|&(i, _)| i\
    \ % 2 == 1).map(|(_, x)| *x).sum();\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpiyti2aq2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            result += lst[i];\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n   \
    \ assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, &x)| {\n\
    \        if (i + 1) % 2 == 0 && x % 2 == 0 {\n            acc + x\n        } else\
    \ {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, v)| v).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpfxccne7j.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && item % 2 == 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpufejfwfr.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| *i % 2 ==\
    \ 1).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmplno63r_m.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, num) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && num % 2 == 0 {\n            sum += num;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprk4h9a23.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    // Sum the even numbers at odd indices\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 1 && x % 2 == 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    // add the even elements that are at odd indices.\n\
    \    let mut acc = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if\
    \ (i % 2) == 1 && v % 2 == 0 {\n            acc += v;\n        }\n    }\n    acc\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpjh82yyy7.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(idx, _)| idx % 2\
    \ == 1).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpx9wtnz12.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxzvihoxx.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut index = 1;\n    let mut sum = 0;\n    for\
    \ num in lst {\n        if index % 2 != 0 && num % 2 == 0 {\n            sum +=\
    \ num;\n        }\n        index += 1;\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpi4f3stvd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|n| **n % 2 == 0).fold(0, |sum,\
    \ n| sum + n)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp6ijynep0.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x| x.0 % 2 == 1).filter(|x|\
    \ x.1 % 2 == 0).map(|x| x.1).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().step_by(2).sum()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpdbuct1g_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpsz2rizft.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, i) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && i % 2 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut ret = 0;\n    for (idx, elem) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 1 && elem % 2 == 0 {\n            ret += elem;\n  \
    \      }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |mut sum, (idx, x)|\
    \ {\n        if idx % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n\
    \        sum\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, x)| x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut acc = 0;\n    for (i, elem) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && elem % 2 == 0 {\n            acc += elem;\n    \
    \    }\n    }\n    acc\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, elem) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && elem % 2 == 0 {\n            sum += elem;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, &e)| e).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprn_zwerq.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).filter(|(_, x)| x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpul4tytik.rs:5:74\n\
    \  |\n5 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).filter(|(_, x)|\
    \ x % 2 == 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n5 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 1).filter(|(_, x)| *x % 2 == 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp_b90rgfm.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |sum, (i, &x)| {\n\
    \        if (i % 2 == 1) && (x % 2 == 0) {\n            sum + x\n        } else\
    \ {\n            sum\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpm94x37w7.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).filter(|(_, &x)| x % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n \
    \   let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            result += v;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, v)| v).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpo3ldgdt1.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, value) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && value % 2 == 0 {\n            result += value;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).filter(|(_, &v)| v % 2 == 0).map(|(_, &v)| v).sum()\n}\n\nfn main() {\n \
    \   let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, value) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && value % 2 == 0 {\n            result += value;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(idx, _)| idx % 2\
    \ == 1).map(|(_, elem)| elem).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqdzuq4s5.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, element) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && element % 2 == 0 {\n            sum += element;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    // should add even numbers at indices 1, 3, 5, ...\n\
    \    // since indices are 0-based, add even numbers at indices 0, 2, 4, ...\n\
    \    lst.iter().enumerate().filter(|(i, _v)| i % 2 == 0).filter(|(_i, v)| v %\
    \ 2 == 0).map(|(_i, v)| v).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpyqhtdocd.rs:7:76\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _v)| i % 2 == 0).filter(|(_i,\
    \ v)| v % 2 == 0).map(|(_i, v)| v).sum()\n  |                                \
    \                                          - ^ - {integer}\n  |              \
    \                                                            |\n  |          \
    \                                                                &&isize\n  |\n\
    help: `%` can be used on `isize`, you can dereference `v`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _v)| i % 2 == 0).filter(|(_i, v)| *v % 2 == 0).map(|(_i, v)| v).sum()\n  | \
    \                                                                         +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut add = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if (i + 1) % 2 == 0 && n % 2 == 0 {\n            add += n;\n    \
    \    }\n    }\n    add\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let lst: Vec<isize> = lst.into_iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 1).map(|(_, x)| x).collect();\n    lst.iter().sum()\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpghk317eq.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && j % 2 == 0 {\n            result += j;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(index, _)| index\
    \ % 2 == 1).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpwir7q23a.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for (index, el) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && el % 2 == 0 {\n            res += el;\n    \
    \    }\n    }\n    res\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |sum, (index, value)|\
    \ if index % 2 == 1 { sum + value } else { sum })\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpdwg36ah6.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, item) in lst.iter().enumerate()\
    \ {\n        if (index + 1) % 2 == 0 && item % 2 == 0 {\n            result +=\
    \ item;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 1 {\n            sum += lst[i];\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpq2wmlovk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut value = 0;\n    for (idx, item) in lst.iter().enumerate()\
    \ {\n        if (idx % 2) != 0 && item % 2 == 0 {\n            value += item;\n\
    \        }\n    }\n    value\n}\n\nfn main() {\n    let candidate = add;\n   \
    \ assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(index, _)| index\
    \ % 2 == 1).map(|(_, value)| value).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpcii2y4mg.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, val) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && val % 2 == 0 {\n            sum += val;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, element) in\
    \ lst.iter().enumerate() {\n        if index % 2 == 1 && element % 2 == 0 {\n\
    \            result += element;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, x)| if\
    \ i % 2 == 1 && x % 2 == 0 { acc + x } else { acc })\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).filter(|(_, x)| x % 2 == 0).fold(0, |s, (_, &x)| s + x)\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmplqsbeor0.rs:5:74\n\
    \  |\n5 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).filter(|(_, x)|\
    \ x % 2 == 0).fold(0, |s, (_, &x)| s + x)\n  |                               \
    \                                         - ^ - {integer}\n  |               \
    \                                                         |\n  |             \
    \                                                           &&isize\n  |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n  |\n5 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 1).filter(|(_, x)| *x % 2 == 0).fold(0, |s, (_, &x)| s + x)\n \
    \ |                                                                        +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpj8jlhp2j.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut new_list: Vec<isize> = Vec::new();\n   \
    \ for i in 0..lst.len() {\n        if i % 2 != 0 && lst[i] % 2 == 0 {\n      \
    \      new_list.push(lst[i]);\n        }\n    }\n    new_list.iter().sum()\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    // Solution 1\n    // let mut sum = 0;\n    // for\
    \ i in 1..lst.len() {\n    //     if i % 2 != 0 {\n    //         sum += lst[i];\n\
    \    //     }\n    // }\n    // sum\n\n    // Solution 2\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpn1fqedbs.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |sum, (i, x)| if\
    \ i % 2 == 1 && x % 2 == 0 { sum + x } else { sum })\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut ans = 0;\n    for i in 0..lst.len() {\n\
    \        if lst[i] % 2 == 0 && i % 2 != 0 {\n            ans += lst[i];\n    \
    \    }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  let mut sum = 0;\n  for (index, &num) in lst.iter().enumerate()\
    \ {\n    if num % 2 == 0 && index % 2 != 0 {\n      sum += num;\n    }\n  }\n\
    \  sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpme0j1fc_.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| *x).filter(|x| x % 2 == 0).sum()\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if (i & 1) == 1 && (x & 1) == 0 {\n            sum += x;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, number) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && number % 2 == 0 {\n            sum += number;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,_)| *i % 2 ==\
    \ 1).map(|(_,v)| *v).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp_hhdx8rb.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 1 {\n            result += lst[i];\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpj13sg7km.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpn0qfya55.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().enumerate().filter(|(i, _)| *i % 2 == 1).map(|(_,\
    \ x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpz6p1gx6s.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut index = 0;\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if index % 2 == 1 && i % 2 == 0 {\n            sum += i;\n\
    \        }\n        index += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, item) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && item % 2 == 0 {\n            result += item;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, x)| x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if lst[i] % 2 == 0 && i % 2 != 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            result += lst[i];\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n   \
    \ assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, e)| e % 2 == 0).map(|(_, e)| e).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpk4pcrskj.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().step_by(2).filter(|x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpbfzj5p1_.rs:5:40\n\
    \  |\n5 |     lst.iter().step_by(2).filter(|x| x % 2 == 0).sum()\n  |        \
    \                              - ^ - {integer}\n  |                          \
    \            |\n  |                                      &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n5 |     lst.iter().step_by(2).filter(|x|\
    \ *x % 2 == 0).sum()\n  |                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, val) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && val % 2 == 0 {\n            result += val;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, item) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && item % 2 == 0 {\n            sum += item;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, x)| if\
    \ i % 2 == 1 && x % 2 == 0 { acc + x } else { acc })\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, &n)| n).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7bbcdmu2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).enumerate().filter(|(i,\
    \ _)| i % 2 == 1).map(|(_, i)| i).sum()\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `128`,\n right: `122`', /tmp/tmppdjvgenw.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpggxn02rc.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  let mut r = 0;\n  for i in lst.into_iter().enumerate()\
    \ {\n    if i.0 % 2 == 1 && i.1 % 2 == 0 {\n      r += i.1;\n    }\n  }\n  r\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, &v)| v).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpxdcyxobb.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  let mut v: Vec<isize> = Vec::new();\n  for (ind, x)\
    \ in lst.iter().enumerate() {\n    if ind % 2 == 1 && x % 2 == 0 {\n      v.push(*x);\n\
    \    }\n  }\n  v.iter().sum()\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (index, item)|\
    \ {\n        if index % 2 == 1 && item % 2 == 0 {\n            acc + item\n  \
    \      } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvoynjljh.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, e)| e).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpf1chxd9x.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, n)| i % 2 ==\
    \ 1 && n % 2 == 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpfzant64s.rs:5:60\n\
    \  |\n5 |     lst.iter().enumerate().filter(|(i, n)| i % 2 == 1 && n % 2 == 0).map(|(_,\
    \ n)| n).sum()\n  |                                                          -\
    \ ^ - {integer}\n  |                                                         \
    \ |\n  |                                                          &&isize\n  |\n\
    help: `%` can be used on `isize`, you can dereference `n`\n  |\n5 |     lst.iter().enumerate().filter(|(i,\
    \ n)| i % 2 == 1 && *n % 2 == 0).map(|(_, n)| n).sum()\n  |                  \
    \                                        +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpyih57x77.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x| x.0 % 2 == 1).filter(|x|\
    \ x.1 % 2 == 0).map(|x| x.1).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|i| i % 2 == 0).sum()\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp9ds07p3o.rs:5:29\n\
    \  |\n5 |     lst.iter().filter(|i| i % 2 == 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `i`\n  |\n5 |     lst.iter().filter(|i| *i % 2 == 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            result += v;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  let mut sum = 0;\n  for (i, x) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 1 && x % 2 == 0 {\n      sum += x;\n    }\n  }\n  sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_,\
    \ x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpuyr03bsy.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, value) in lst.iter().enumerate()\
    \ {\n        if (index % 2) == 1 && *value % 2 == 0 {\n            sum += *value;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && item % 2 == 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, num) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && num % 2 == 0 {\n            sum += num;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut added = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 1 {\n            added += lst[i];\n        }\n    }\n   \
    \ added\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpq46756pf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjznwp5fl.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, num) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && num % 2 == 0 {\n            sum += num;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmppvm3ilp2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (idx, &item)|\
    \ {\n        if idx % 2 == 1 && item % 2 == 0 {\n            acc + item\n    \
    \    } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, &x)| x % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().fold(0, |acc, (i,\
    \ n)| acc + if i % 2 == 1 { *n } else { 0 });\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp8_9xdx3j.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, number) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && number % 2 == 0 {\n            sum += number;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| (i + 1) %\
    \ 2 == 0).filter(|(_, n)| n % 2 == 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpgczm19_2.rs:5:80\n\
    \  |\n5 |     lst.iter().enumerate().filter(|(i, _)| (i + 1) % 2 == 0).filter(|(_,\
    \ n)| n % 2 == 0).map(|(_, n)| n).sum()\n  |                                 \
    \                                             - ^ - {integer}\n  |           \
    \                                                                   |\n  |   \
    \                                                                           &&isize\n\
    \  |\nhelp: `%` can be used on `isize`, you can dereference `n`\n  |\n5 |    \
    \ lst.iter().enumerate().filter(|(i, _)| (i + 1) % 2 == 0).filter(|(_, n)| *n\
    \ % 2 == 0).map(|(_, n)| n).sum()\n  |                                       \
    \                                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, &v)| v % 2 ==\
    \ 0 && i % 2 == 1).map(|(_, &v)| v).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, e)| e).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmppishwa7f.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp97duof2j.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut odd_elems = Vec::new();\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 1 {\n            odd_elems.push(lst[i]);\n        }\n\
    \    }\n    odd_elems.iter().filter(|&x| x % 2 == 0).sum()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    // This is an implementation of the filter_map method\
    \ from the Iterator trait.\n    // For more information: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map\n\
    \    let mut result = 0;\n    let mut iter = lst.iter().enumerate();\n    while\
    \ let Some((i, x)) = iter.next() {\n        if i % 2 == 1 && x % 2 == 0 {\n  \
    \          result += x;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut lst = lst;\n    lst.sort();\n    let mut\
    \ result = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 {\n        \
    \    result += lst[i];\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `132`,\n right: `122`', /tmp/tmpnfdu7dul.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, &item) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 1 && item % 2 == 0 {\n            sum += item;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, x)| x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut lst = lst;\n    lst.retain(|x| x % 2 ==\
    \ 0);\n    lst.into_iter().skip(1).fold(0, |acc, x| acc + x)\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmp8xnubjnc.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, &v)| {\n\
    \        if i % 2 == 1 && v % 2 == 0 {\n            acc + v\n        } else {\n\
    \            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp3uoavgnr.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| *i % 2 ==\
    \ 1).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpof1l9vyi.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).filter(|&(_, x)| x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_,\
    \ x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpt7g2r9i_.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpmk1nmpe4.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    // your code here\n    let mut count = 0;\n    for\
    \ x in 0..lst.len() {\n        if x % 2 != 0 && lst[x] % 2 == 0 {\n          \
    \  count += lst[x];\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 1).map(|(_, &i)| i).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpdc3wan4q.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 && item % 2 == 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    let mut counter = 0;\n    let mut sum = 0;\n   \
    \ for x in lst {\n        if counter % 2 == 1 && x % 2 == 0 {\n            sum\
    \ += x;\n        }\n        counter += 1;\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfn add(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).map(|(_, x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpen1v3kkr.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
