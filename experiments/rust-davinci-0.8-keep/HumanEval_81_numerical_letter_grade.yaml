name: HumanEval_81_numerical_letter_grade
language: rust
prompt: "/// It is the last week of the semester and the teacher has to give the grades\n\
  /// to students. The teacher has been making her own algorithm for grading.\n///\
  \ The only problem is, she has lost the code she used for grading.\n/// She has\
  \ given you a list of GPAs for some students and you have to write \n/// a function\
  \ that can output a list of letter grades using the following table:\n/// GPA  \
  \     |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n\
  /// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7           \
  \     B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7  \
  \              C\n/// > 1.3                C-\n/// > 1.0                D+ \n///\
  \ > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n\
  /// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C',\
  \ 'A-']\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
  \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
  C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
  \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
  D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n   \
  \ assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"),\
  \ String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
  B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
  D-\")]);\n}\n"
completions: ["    grades.iter().map(|g| {\n        match *g {\n            g if g\
    \ > 4.0 => \"A+\".to_string(),\n            g if g > 3.7 => \"A\".to_string(),\n\
    \            g if g > 3.3 => \"A-\".to_string(),\n            g if g > 3.0 =>\
    \ \"B+\".to_string(),\n            g if g > 2.7 => \"B\".to_string(),\n      \
    \      g if g > 2.3 => \"B-\".to_string(),\n            g if g > 2.0 => \"C+\"\
    .to_string(),\n            g if g > 1.7 => \"C\".to_string(),\n            g if\
    \ g > 1.3 => \"C-\".to_string(),\n            g if g > 1.0 => \"D+\".to_string(),\n\
    \            g if g > 0.7 => \"D\".to_string(),\n            g if g > 0.0 => \"\
    D-\".to_string(),\n            _ => \"E\".to_string(),\n        }\n    }).collect()",
  "    let mut result = Vec::new();\n    for grade in grades {\n        if grade ==\
    \ 4.0 {\n            result.push(\"A+\".to_string());\n        } else if grade\
    \ > 3.7 {\n            result.push(\"A\".to_string());\n        } else if grade\
    \ > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if grade\
    \ > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if grade\
    \ > 2.7 {\n            result.push(\"B\".to_string());\n        } else if grade\
    \ > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if grade\
    \ > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if grade\
    \ > 1.7 {\n            result.push(\"C\".to_string());\n        } else if grade\
    \ > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if grade\
    \ > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if grade\
    \ > 0.7 {\n            result.push(\"D\".to_string());\n        } else if grade\
    \ > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n  \
    \          result.push(\"E\".to_string());\n        }\n    }\n    result", '    return
    grades.iter().map(|x| numerical_grade_to_letter(x)).collect();', "    let mut\
    \ result: Vec<String> = Vec::new();\n    for num in grades {\n        let grade:\
    \ String = match num {\n            4.0 => {\n                \"A+\".to_string()\n\
    \            },\n            g if g > 3.7 => {\n                \"A\".to_string()\n\
    \            },\n            g if g > 3.3 => {\n                \"A-\".to_string()\n\
    \            },\n            g if g > 3.0 => {\n                \"B+\".to_string()\n\
    \            },\n            g if g > 2.7 => {\n                \"B\".to_string()\n\
    \            },\n            g if g > 2.3 => {\n                \"B-\".to_string()\n\
    \            },\n            g if g > 2.0 => {\n                \"C+\".to_string()\n\
    \            },\n            g if g > 1.7 => {\n                \"C\".to_string()\n\
    \            },\n            g if g > 1.3 => {\n                \"C-\".to_string()\n\
    \            },\n            g if g > 1.0 => {\n                \"D+\".to_string()\n\
    \            },\n            g if g > 0.7 => {\n                \"D\".to_string()\n\
    \            },\n            g if g > 0.0 => {\n                \"D-\".to_string()\n\
    \            },\n            _ => {\n                \"E\".to_string()\n     \
    \       }\n        };\n        result.push(grade);\n    }\n    result", '    unimplemented!()',
  "    let grade_map = [\n        (4.0, \"A+\"),\n        (3.7, \"A\"),\n        (3.3,\
    \ \"A-\"),\n        (3.0, \"B+\"),\n        (2.7, \"B\"),\n        (2.3, \"B-\"\
    ),\n        (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3, \"C-\"),\n  \
    \      (1.0, \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"),\n    ];\n\
    \    grades\n        .iter()\n        .map(|g| {\n            let mut res = grade_map\n\
    \                .iter()\n                .find(|&(grade, _)| grade <= g)\n  \
    \              .unwrap()\n                .1;\n            if *g < 0.0 {\n   \
    \             res = \"E\";\n            }\n            res.to_string()\n     \
    \   })\n        .collect()", "    let mut grades_letters = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            grades_letters.push(\"\
    A+\".to_string());\n        } else if grade > 3.7 {\n            grades_letters.push(\"\
    A\".to_string());\n        } else if grade > 3.3 {\n            grades_letters.push(\"\
    A-\".to_string());\n        } else if grade > 3.0 {\n            grades_letters.push(\"\
    B+\".to_string());\n        } else if grade > 2.7 {\n            grades_letters.push(\"\
    B\".to_string());\n        } else if grade > 2.3 {\n            grades_letters.push(\"\
    B-\".to_string());\n        } else if grade > 2.0 {\n            grades_letters.push(\"\
    C+\".to_string());\n        } else if grade > 1.7 {\n            grades_letters.push(\"\
    C\".to_string());\n        } else if grade > 1.3 {\n            grades_letters.push(\"\
    C-\".to_string());\n        } else if grade > 1.0 {\n            grades_letters.push(\"\
    D+\".to_string());\n        } else if grade > 0.7 {\n            grades_letters.push(\"\
    D\".to_string());\n        } else if grade > 0.0 {\n            grades_letters.push(\"\
    D-\".to_string());\n        } else {\n            grades_letters.push(\"E\".to_string());\n\
    \        }\n    }\n    grades_letters", "    // Code here ^\n    let mut result:\
    \ Vec<String> = Vec::new();\n    for i in grades.iter() {\n        if *i >= 4.0\
    \ {\n            result.push(\"A+\".to_string());\n        } else if *i >= 3.7\
    \ {\n            result.push(\"A\".to_string());\n        } else if *i >= 3.3\
    \ {\n            result.push(\"A-\".to_string());\n        } else if *i >= 3.0\
    \ {\n            result.push(\"B+\".to_string());\n        } else if *i >= 2.7\
    \ {\n            result.push(\"B\".to_string());\n        } else if *i >= 2.3\
    \ {\n            result.push(\"B-\".to_string());\n        } else if *i >= 2.0\
    \ {\n            result.push(\"C+\".to_string());\n        } else if *i >= 1.7\
    \ {\n            result.push(\"C\".to_string());\n        } else if *i >= 1.3\
    \ {\n            result.push(\"C-\".to_string());\n        } else if *i >= 1.0\
    \ {\n            result.push(\"D+\".to_string());\n        } else if *i >= 0.7\
    \ {\n            result.push(\"D\".to_string());\n        } else if *i >= 0.0\
    \ {\n            result.push(\"D-\".to_string());\n        } else {\n        \
    \    result.push(\"E\".to_string());\n        }\n    }\n    result", "    grades.iter().map(|num|\n\
    \        if *num > 4.0 { \n            String::from(\"A+\")\n        } else if\
    \ *num > 3.7 {\n            String::from(\"A\")\n        } else if *num > 3.3\
    \ {\n            String::from(\"A-\")\n        } else if *num > 3.0 {\n      \
    \      String::from(\"B+\")\n        } else if *num > 2.7 {\n            String::from(\"\
    B\")\n        } else if *num > 2.3 {\n            String::from(\"B-\")\n     \
    \   } else if *num > 2.0 {\n            String::from(\"C+\")\n        } else if\
    \ *num > 1.7 {\n            String::from(\"C\")\n        } else if *num > 1.3\
    \ {\n            String::from(\"C-\")\n        } else if *num > 1.0 {\n      \
    \      String::from(\"D+\")\n        } else if *num > 0.7 {\n            String::from(\"\
    D\")\n        } else if *num > 0.0 {\n            String::from(\"D-\")\n     \
    \   } else {\n            String::from(\"E\")\n        }\n    ).collect()", " \
    \   let grades = grades.into_iter().map(|g| g.round()).collect::<Vec<i64>>();\n\
    \    let grade_boundaries = [0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3,\
    \ 3.7, 4.0];\n    let mut grade_letters = Vec::new();\n    for &grade in grades.iter()\
    \ {\n        for (i, &gb) in grade_boundaries.iter().enumerate() {\n         \
    \   if grade as f64 > gb {\n                grade_letters.push(match i {\n   \
    \                 0 => String::from(\"E\"),\n                    1 => String::from(\"\
    D-\"),\n                    2 => String::from(\"D+\"),\n                    3\
    \ => String::from(\"C-\"),\n                    4 => String::from(\"C\"),\n  \
    \                  5 => String::from(\"C+\"),\n                    6 => String::from(\"\
    B-\"),\n                    7 => String::from(\"B\"),\n                    8 =>\
    \ String::from(\"B+\"),\n                    9 => String::from(\"A-\"),\n    \
    \                10 => String::from(\"A\"),\n                    11 => String::from(\"\
    A+\"),\n                    _ => unreachable!()\n                });\n       \
    \         break;\n            }\n        }\n    }\n    grade_letters", "    let\
    \ boundary_gpas = [\n        (\"A+\", 4.0),\n        (\"A\", 3.7),\n        (\"\
    A-\", 3.3),\n        (\"B+\", 3.0),\n        (\"B\", 2.7),\n        (\"B-\", 2.3),\n\
    \        (\"C+\", 2.0),\n        (\"C\", 1.7),\n        (\"C-\", 1.3),\n     \
    \   (\"D+\", 1.0),\n        (\"D\", 0.7),\n        (\"D-\", 0.0),\n        (\"\
    E\", 0.0),\n    ];\n    grades\n        .iter()\n        .map(|gpa| {\n      \
    \      for (grade, gpa_boundary) in boundary_gpas.iter() {\n                if\
    \ gpa >= gpa_boundary {\n                    return grade.to_string();\n     \
    \           }\n            }\n            unreachable!()\n        })\n       \
    \ .collect()", "    let mut result: Vec<String> = Vec::new();\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result", "    let mut letter_grades = Vec::new();\n    for g in grades\
    \ {\n        if g > 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if g > 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if g > 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if g > 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if g > 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if g > 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if g > 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if g > 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if g > 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if g > 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if g > 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if g > 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades", "  let mut iter = grades.iter();\n  let mut new_vec\
    \ = Vec::new();\n  while let Some(grade) = iter.next() {\n    match *grade {\n\
    \      4.0 => new_vec.push(\"A+\".to_string()),\n      x if x > 3.7 => new_vec.push(\"\
    A\".to_string()),\n      x if x > 3.3 => new_vec.push(\"A-\".to_string()),\n \
    \     x if x > 3.0 => new_vec.push(\"B+\".to_string()),\n      x if x > 2.7 =>\
    \ new_vec.push(\"B\".to_string()),\n      x if x > 2.3 => new_vec.push(\"B-\"\
    .to_string()),\n      x if x > 2.0 => new_vec.push(\"C+\".to_string()),\n    \
    \  x if x > 1.7 => new_vec.push(\"C\".to_string()),\n      x if x > 1.3 => new_vec.push(\"\
    C-\".to_string()),\n      x if x > 1.0 => new_vec.push(\"D+\".to_string()),\n\
    \      x if x > 0.7 => new_vec.push(\"D\".to_string()),\n      x if x > 0.0 =>\
    \ new_vec.push(\"D-\".to_string()),\n      _ => new_vec.push(\"E\".to_string()),\n\
    \    }\n  }\n  new_vec", "    grades.iter().map(|&g|\n        match g {\n    \
    \        _ if g >= 4.0 => \"A+\",\n            _ if g >= 3.7 => \"A\",\n     \
    \       _ if g >= 3.3 => \"A-\",\n            _ if g >= 3.0 => \"B+\",\n     \
    \       _ if g >= 2.7 => \"B\",\n            _ if g >= 2.3 => \"B-\",\n      \
    \      _ if g >= 2.0 => \"C+\",\n            _ if g >= 1.7 => \"C\",\n       \
    \     _ if g >= 1.3 => \"C-\",\n            _ if g >= 1.0 => \"D+\",\n       \
    \     _ if g >= 0.7 => \"D\",\n            _ if g >= 0.0 => \"D-\",\n        \
    \    _ if g < 0.0 => \"E\",\n            _ => \"F\",\n        }.to_string()\n\
    \    ).collect()", "    grades.iter().map(|g| {\n        if *g > 4.0 {\n     \
    \       \"A+\".to_string()\n        } else if *g > 3.7 {\n            \"A\".to_string()\n\
    \        } else if *g > 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if *g > 3.0 {\n            \"B+\".to_string()\n        } else if *g > 2.7 {\n\
    \            \"B\".to_string()\n        } else if *g > 2.3 {\n            \"B-\"\
    .to_string()\n        } else if *g > 2.0 {\n            \"C+\".to_string()\n \
    \       } else if *g > 1.7 {\n            \"C\".to_string()\n        } else if\
    \ *g > 1.3 {\n            \"C-\".to_string()\n        } else if *g > 1.0 {\n \
    \           \"D+\".to_string()\n        } else if *g > 0.7 {\n            \"D\"\
    .to_string()\n        } else if *g > 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    }).collect()",
  "    grades.iter().map(|&x| match x {\n        4.0 => String::from(\"A+\"),\n  \
    \      x if x > 3.7 => String::from(\"A\"),\n        x if x > 3.3 => String::from(\"\
    A-\"),\n        x if x > 3.0 => String::from(\"B+\"),\n        x if x > 2.7 =>\
    \ String::from(\"B\"),\n        x if x > 2.3 => String::from(\"B-\"),\n      \
    \  x if x > 2.0 => String::from(\"C+\"),\n        x if x > 1.7 => String::from(\"\
    C\"),\n        x if x > 1.3 => String::from(\"C-\"),\n        x if x > 1.0 =>\
    \ String::from(\"D+\"),\n        x if x > 0.7 => String::from(\"D\"),\n      \
    \  x if x > 0.0 => String::from(\"D-\"),\n        _ => String::from(\"E\"),\n\
    \    }).collect()", "    let mut grade_result: Vec<String> = Vec::new();\n   \
    \ for grade in grades {\n        if grade >= 4.0 {\n            grade_result.push(\"\
    A+\".to_string());\n        } else if grade >= 3.7 {\n            grade_result.push(\"\
    A\".to_string());\n        } else if grade >= 3.3 {\n            grade_result.push(\"\
    A-\".to_string());\n        } else if grade >= 3.0 {\n            grade_result.push(\"\
    B+\".to_string());\n        } else if grade >= 2.7 {\n            grade_result.push(\"\
    B\".to_string());\n        } else if grade >= 2.3 {\n            grade_result.push(\"\
    B-\".to_string());\n        } else if grade >= 2.0 {\n            grade_result.push(\"\
    C+\".to_string());\n        } else if grade >= 1.7 {\n            grade_result.push(\"\
    C\".to_string());\n        } else if grade >= 1.3 {\n            grade_result.push(\"\
    C-\".to_string());\n        } else if grade >= 1.0 {\n            grade_result.push(\"\
    D+\".to_string());\n        } else if grade >= 0.7 {\n            grade_result.push(\"\
    D\".to_string());\n        } else if grade >= 0.0 {\n            grade_result.push(\"\
    D-\".to_string());\n        } else {\n            grade_result.push(\"E\".to_string());\n\
    \        }\n    }\n    grade_result", "    grades.iter().map(|g| {\n        match\
    \ *g {\n            4.0 => String::from(\"A+\"),\n            g if g > 3.7 =>\
    \ String::from(\"A\"),\n            g if g > 3.3 => String::from(\"A-\"),\n  \
    \          g if g > 3.0 => String::from(\"B+\"),\n            g if g > 2.7 =>\
    \ String::from(\"B\"),\n            g if g > 2.3 => String::from(\"B-\"),\n  \
    \          g if g > 2.0 => String::from(\"C+\"),\n            g if g > 1.7 =>\
    \ String::from(\"C\"),\n            g if g > 1.3 => String::from(\"C-\"),\n  \
    \          g if g > 1.0 => String::from(\"D+\"),\n            g if g > 0.7 =>\
    \ String::from(\"D\"),\n            g if g > 0.0 => String::from(\"D-\"),\n  \
    \          _ => String::from(\"E\"),\n        }\n    }).collect()", "    // Your\
    \ code here\n    let map = vec![(4.0, \"A+\"), (3.7, \"A\"), (3.3, \"A-\"), (3.0,\
    \ \"B+\"), (2.7, \"B\"), (2.3, \"B-\"), (2.0, \"C+\"), (1.7, \"C\"), (1.3, \"\
    C-\"), (1.0, \"D+\"), (0.7, \"D\"), (0.0, \"D-\")];\n    let mut result = Vec::new();\n\
    \    for grade in grades {\n        for i in 0..(map.len() - 1) {\n          \
    \  if grade >= map[i].0 {\n                result.push(map[i].1.to_string());\n\
    \                break;\n            }\n        }\n        if grade < 0.7 {\n\
    \            result.push(\"E\".to_string());\n        }\n    }\n    result", " \
    \   grades.iter().map(|&x| {\n        let result = match x {\n            4.0\
    \ => \"A+\",\n            _ if x > 3.7 => \"A\",\n            _ if x > 3.3 =>\
    \ \"A-\",\n            _ if x > 3.0 => \"B+\",\n            _ if x > 2.7 => \"\
    B\",\n            _ if x > 2.3 => \"B-\",\n            _ if x > 2.0 => \"C+\"\
    ,\n            _ if x > 1.7 => \"C\",\n            _ if x > 1.3 => \"C-\",\n \
    \           _ if x > 1.0 => \"D+\",\n            _ if x > 0.7 => \"D\",\n    \
    \        _ if x > 0.0 => \"D-\",\n            _ => \"E\",\n        };\n      \
    \  result.to_string()\n    }).collect()", "    let mut grades = grades;\n    let\
    \ mut letter_grades = Vec::new();\n    grades.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    for i in grades {\n        if i >= 4.0 {\n            letter_grades.push(\"\
    A+\".to_string());\n        } else if i >= 3.7 {\n            letter_grades.push(\"\
    A\".to_string());\n        } else if i >= 3.3 {\n            letter_grades.push(\"\
    A-\".to_string());\n        } else if i >= 3.0 {\n            letter_grades.push(\"\
    B+\".to_string());\n        } else if i >= 2.7 {\n            letter_grades.push(\"\
    B\".to_string());\n        } else if i >= 2.3 {\n            letter_grades.push(\"\
    B-\".to_string());\n        } else if i >= 2.0 {\n            letter_grades.push(\"\
    C+\".to_string());\n        } else if i >= 1.7 {\n            letter_grades.push(\"\
    C\".to_string());\n        } else if i >= 1.3 {\n            letter_grades.push(\"\
    C-\".to_string());\n        } else if i >= 1.0 {\n            letter_grades.push(\"\
    D+\".to_string());\n        } else if i >= 0.7 {\n            letter_grades.push(\"\
    D\".to_string());\n        } else if i >= 0.0 {\n            letter_grades.push(\"\
    D-\".to_string());\n        } else {\n            letter_grades.push(\"E\".to_string());\n\
    \        }\n    }\n    letter_grades", '    grades.iter().map(|g| letter_grade(*g)).collect()',
  "    let a_plus = 4.0;\n    let a = 3.7;\n    let a_minus = 3.3;\n    let b_plus\
    \ = 3.0;\n    let b = 2.7;\n    let b_minus = 2.3;\n    let c_plus = 2.0;\n  \
    \  let c = 1.7;\n    let c_minus = 1.3;\n    let d_plus = 1.0;\n    let d = 0.7;\n\
    \    let d_minus = 0.0;\n    let e = 0.0;\n\n    grades.iter().map(|grade| {\n\
    \        match *grade {\n            _ if *grade == a_plus => \"A+\".to_string(),\n\
    \            _ if *grade > a => \"A\".to_string(),\n            _ if *grade >\
    \ a_minus => \"A-\".to_string(),\n            _ if *grade > b_plus => \"B+\".to_string(),\n\
    \            _ if *grade > b => \"B\".to_string(),\n            _ if *grade >\
    \ b_minus => \"B-\".to_string(),\n            _ if *grade > c_plus => \"C+\".to_string(),\n\
    \            _ if *grade > c => \"C\".to_string(),\n            _ if *grade >\
    \ c_minus => \"C-\".to_string(),\n            _ if *grade > d_plus => \"D+\".to_string(),\n\
    \            _ if *grade > d => \"D\".to_string(),\n            _ if *grade >\
    \ d_minus => \"D-\".to_string(),\n            _ if *grade > e => \"E\".to_string(),\n\
    \            _ => \"N/A\".to_string(),\n        }\n    }).collect()", "    grades.iter().map(|g|\
    \ {\n        match *g {\n            4.0 => \"A+\",\n            3.7...4.0 =>\
    \ \"A\",\n            3.3...3.7 => \"A-\",\n            3.0...3.3 => \"B+\",\n\
    \            2.7...3.0 => \"B\",\n            2.3...2.7 => \"B-\",\n         \
    \   2.0...2.3 => \"C+\",\n            1.7...2.0 => \"C\",\n            1.3...1.7\
    \ => \"C-\",\n            1.0...1.3 => \"D+\",\n            0.7...1.0 => \"D\"\
    ,\n            0.0...0.7 => \"D-\",\n            _ => \"E\",\n        }\n    }).collect()",
  '    unimplemented!()', "    let grades = grades\n        .iter()\n        .map(|x|\
    \ x.round() as i32)\n        .collect::<Vec<i32>>();\n    let grades = grades\n\
    \        .iter()\n        .map(|x|\n             match *x {\n                \
    \ 4 => \"A+\",\n                 3 => \"A\",\n                 2 => \"A-\",\n\
    \                 1 => \"B+\",\n                 0 => \"B\",\n               \
    \  -1 => \"B-\",\n                 -2 => \"C+\",\n                 -3 => \"C\"\
    ,\n                 -4 => \"C-\",\n                 -5 => \"D+\",\n          \
    \       -6 => \"D\",\n                 -7 => \"D-\",\n                 _ => \"\
    E\",\n             }.to_string())\n        .collect::<Vec<String>>();\n    grades",
  "    let mut res = Vec::new();\n    for i in grades {\n        if i > 4.0 {\n  \
    \          res.push(\"A+\".to_string());\n        } else if i > 3.7 {\n      \
    \      res.push(\"A\".to_string());\n        } else if i > 3.3 {\n           \
    \ res.push(\"A-\".to_string());\n        } else if i > 3.0 {\n            res.push(\"\
    B+\".to_string());\n        } else if i > 2.7 {\n            res.push(\"B\".to_string());\n\
    \        } else if i > 2.3 {\n            res.push(\"B-\".to_string());\n    \
    \    } else if i > 2.0 {\n            res.push(\"C+\".to_string());\n        }\
    \ else if i > 1.7 {\n            res.push(\"C\".to_string());\n        } else\
    \ if i > 1.3 {\n            res.push(\"C-\".to_string());\n        } else if i\
    \ > 1.0 {\n            res.push(\"D+\".to_string());\n        } else if i > 0.7\
    \ {\n            res.push(\"D\".to_string());\n        } else if i > 0.0 {\n \
    \           res.push(\"D-\".to_string());\n        } else {\n            res.push(\"\
    E\".to_string());\n        }\n    }\n    res", '    unimplemented!();', '    unimplemented!();',
  "    grades.iter().map(|&g| {\n        match g {\n            4.0 => String::from(\"\
    A+\"),\n            g if g > 3.7 => String::from(\"A\"),\n            g if g >\
    \ 3.3 => String::from(\"A-\"),\n            g if g > 3.0 => String::from(\"B+\"\
    ),\n            g if g > 2.7 => String::from(\"B\"),\n            g if g > 2.3\
    \ => String::from(\"B-\"),\n            g if g > 2.0 => String::from(\"C+\"),\n\
    \            g if g > 1.7 => String::from(\"C\"),\n            g if g > 1.3 =>\
    \ String::from(\"C-\"),\n            g if g > 1.0 => String::from(\"D+\"),\n \
    \           g if g > 0.7 => String::from(\"D\"),\n            g if g > 0.0 =>\
    \ String::from(\"D-\"),\n            _ => String::from(\"E\"),\n        }\n  \
    \  }).collect()", "    grades.iter().map(|g| {\n        let grade = match *g {\n\
    \            _ if *g >= 4.0 => \"A+\",\n            _ if *g >= 3.7 => \"A\",\n\
    \            _ if *g >= 3.3 => \"A-\",\n            _ if *g >= 3.0 => \"B+\",\n\
    \            _ if *g >= 2.7 => \"B\",\n            _ if *g >= 2.3 => \"B-\",\n\
    \            _ if *g >= 2.0 => \"C+\",\n            _ if *g >= 1.7 => \"C\",\n\
    \            _ if *g >= 1.3 => \"C-\",\n            _ if *g >= 1.0 => \"D+\",\n\
    \            _ if *g >= 0.7 => \"D\",\n            _ if *g >= 0.0 => \"D-\",\n\
    \            _ if *g < 0.0 => \"E\",\n            _ => panic!(\"unreachable\"\
    ),\n        };\n        String::from(grade)\n    }).collect()", "    let grades\
    \ = grades.iter().map(|x| x.round()).collect::<Vec<i32>>();\n    let mut letters\
    \ = vec![];\n    for grade in grades {\n        let mut letter = match grade {\n\
    \            10 => 'A',\n            9 => 'A',\n            8 => 'B',\n      \
    \      7 => 'C',\n            6 => 'D',\n            5 => 'E',\n            4\
    \ => 'E',\n            3 => 'E',\n            2 => 'E',\n            1 => 'E',\n\
    \            0 => 'E',\n            _ => panic!(\"Bad inputs!\"),\n        };\n\
    \        if grade % 2 == 0 {\n            letter = match letter {\n          \
    \      'A' => 'B',\n                'B' => 'D',\n                'C' => 'F',\n\
    \                'D' => 'F',\n                'E' => 'F',\n                _ =>\
    \ panic!(\"Bad inputs!\"),\n            };\n        }\n        let mut complement\
    \ = if grade % 10 == 0 { '+' } else { '-' };\n        if letter == 'F' {\n   \
    \         complement = ' ';\n        }\n        let letter = format!(\"{}{}\"\
    , letter, complement);\n        letters.push(letter);\n    }\n    letters", " \
    \   let letter_grades = grades.iter().map(|g| {\n        match *g {\n        \
    \    g if g >= 4.0 => \"A+\",\n            g if g >= 3.7 => \"A\",\n         \
    \   g if g >= 3.3 => \"A-\",\n            g if g >= 3.0 => \"B+\",\n         \
    \   g if g >= 2.7 => \"B\",\n            g if g >= 2.3 => \"B-\",\n          \
    \  g if g >= 2.0 => \"C+\",\n            g if g >= 1.7 => \"C\",\n           \
    \ g if g >= 1.3 => \"C-\",\n            g if g >= 1.0 => \"D+\",\n           \
    \ g if g >= 0.7 => \"D\",\n            g if g >= 0.0 => \"D-\",\n            _\
    \ => \"E\",\n        }\n    }).collect();\n    letter_grades", "    grades.iter().map(|&x|\
    \ match x {\n        x if x >= 4.0 => \"A+\".to_string(),\n        x if x >= 3.7\
    \ => \"A\".to_string(),\n        x if x >= 3.3 => \"A-\".to_string(),\n      \
    \  x if x >= 3.0 => \"B+\".to_string(),\n        x if x >= 2.7 => \"B\".to_string(),\n\
    \        x if x >= 2.3 => \"B-\".to_string(),\n        x if x >= 2.0 => \"C+\"\
    .to_string(),\n        x if x >= 1.7 => \"C\".to_string(),\n        x if x >=\
    \ 1.3 => \"C-\".to_string(),\n        x if x >= 1.0 => \"D+\".to_string(),\n \
    \       x if x >= 0.7 => \"D\".to_string(),\n        x if x >= 0.0 => \"D-\".to_string(),\n\
    \        _ => \"E\".to_string(),\n    }).collect()", "    grades.iter().map(|g|\n\
    \        match *g {\n            4.0 => \"A+\",\n            _ if *g > 3.7 =>\
    \ \"A\",\n            _ if *g > 3.3 => \"A-\",\n            _ if *g > 3.0 => \"\
    B+\",\n            _ if *g > 2.7 => \"B\",\n            _ if *g > 2.3 => \"B-\"\
    ,\n            _ if *g > 2.0 => \"C+\",\n            _ if *g > 1.7 => \"C\",\n\
    \            _ if *g > 1.3 => \"C-\",\n            _ if *g > 1.0 => \"D+\",\n\
    \            _ if *g > 0.7 => \"D\",\n            _ if *g > 0.0 => \"D-\",\n \
    \           _ => \"E\",\n        }.to_string()\n    ).collect()", "    let grades_ltr\
    \ = vec![\n        (\"A+\", 4.0),\n        (\"A\", 3.7),\n        (\"A-\", 3.3),\n\
    \        (\"B+\", 3.0),\n        (\"B\", 2.7),\n        (\"B-\", 2.3),\n     \
    \   (\"C+\", 2.0),\n        (\"C\", 1.7),\n        (\"C-\", 1.3),\n        (\"\
    D+\", 1.0),\n        (\"D\", 0.7),\n        (\"D-\", 0.0),\n        (\"E\", 0.0),\n\
    \    ];\n    grades\n        .iter()\n        .map(|g| {\n            for (grade,\
    \ max) in grades_ltr.iter() {\n                if g <= max {\n               \
    \     return grade.to_string();\n                }\n            }\n          \
    \  \"A+\".to_string()\n        })\n        .collect()", "    let mut result: Vec<String>\
    \ = Vec::new();\n    for grade in grades {\n        if grade >= 4.0 {\n      \
    \      result.push(\"A+\".to_string());\n        } else if grade >= 3.7 {\n  \
    \          result.push(\"A\".to_string());\n        } else if grade >= 3.3 {\n\
    \            result.push(\"A-\".to_string());\n        } else if grade >= 3.0\
    \ {\n            result.push(\"B+\".to_string());\n        } else if grade >=\
    \ 2.7 {\n            result.push(\"B\".to_string());\n        } else if grade\
    \ >= 2.3 {\n            result.push(\"B-\".to_string());\n        } else if grade\
    \ >= 2.0 {\n            result.push(\"C+\".to_string());\n        } else if grade\
    \ >= 1.7 {\n            result.push(\"C\".to_string());\n        } else if grade\
    \ >= 1.3 {\n            result.push(\"C-\".to_string());\n        } else if grade\
    \ >= 1.0 {\n            result.push(\"D+\".to_string());\n        } else if grade\
    \ >= 0.7 {\n            result.push(\"D\".to_string());\n        } else if grade\
    \ >= 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n \
    \           result.push(\"E\".to_string());\n        }\n    }\n    result", " \
    \   grades.iter().map(|x| {\n        if *x >= 4.0 {\n            String::from(\"\
    A+\")\n        } else if *x >= 3.7 {\n            String::from(\"A\")\n      \
    \  } else if *x >= 3.3 {\n            String::from(\"A-\")\n        } else if\
    \ *x >= 3.0 {\n            String::from(\"B+\")\n        } else if *x >= 2.7 {\n\
    \            String::from(\"B\")\n        } else if *x >= 2.3 {\n            String::from(\"\
    B-\")\n        } else if *x >= 2.0 {\n            String::from(\"C+\")\n     \
    \   } else if *x >= 1.7 {\n            String::from(\"C\")\n        } else if\
    \ *x >= 1.3 {\n            String::from(\"C-\")\n        } else if *x >= 1.0 {\n\
    \            String::from(\"D+\")\n        } else if *x >= 0.7 {\n           \
    \ String::from(\"D\")\n        } else if *x >= 0.0 {\n            String::from(\"\
    D-\")\n        } else {\n            String::from(\"E\")\n        }\n    }).collect()",
  "    grades.iter().map(|&g| match g {\n        x if x >= 4.0 => \"A+\",\n      \
    \  x if x >= 3.7 => \"A\",\n        x if x >= 3.3 => \"A-\",\n        x if x >=\
    \ 3.0 => \"B+\",\n        x if x >= 2.7 => \"B\",\n        x if x >= 2.3 => \"\
    B-\",\n        x if x >= 2.0 => \"C+\",\n        x if x >= 1.7 => \"C\",\n   \
    \     x if x >= 1.3 => \"C-\",\n        x if x >= 1.0 => \"D+\",\n        x if\
    \ x >= 0.7 => \"D\",\n        x if x >= 0.0 => \"D-\",\n        _ => \"E\",\n\
    \    }).map(|s| s.to_string()).collect()", "    let mut out: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade == 4.0 {\n            out.push(\"\
    A+\".to_string());\n        } else if grade > 3.7 {\n            out.push(\"A\"\
    .to_string());\n        } else if grade > 3.3 {\n            out.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            out.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            out.push(\"B\".to_string());\n \
    \       } else if grade > 2.3 {\n            out.push(\"B-\".to_string());\n \
    \       } else if grade > 2.0 {\n            out.push(\"C+\".to_string());\n \
    \       } else if grade > 1.7 {\n            out.push(\"C\".to_string());\n  \
    \      } else if grade > 1.3 {\n            out.push(\"C-\".to_string());\n  \
    \      } else if grade > 1.0 {\n            out.push(\"D+\".to_string());\n  \
    \      } else if grade > 0.7 {\n            out.push(\"D\".to_string());\n   \
    \     } else if grade > 0.0 {\n            out.push(\"D-\".to_string());\n   \
    \     } else {\n            out.push(\"E\".to_string());\n        }\n    }\n \
    \   out", '    grades.iter().map(|g| letter_grade(*g)).collect()', "    let grade_map\
    \ = vec![(4.0, \"A+\"), (3.7, \"A\"), (3.3, \"A-\"), (3.0, \"B+\"), (2.7, \"B\"\
    ),\n                         (2.3, \"B-\"), (2.0, \"C+\"), (1.7, \"C\"), (1.3,\
    \ \"C-\"), (1.0, \"D+\"),\n                         (0.7, \"D\"), (0.0, \"D-\"\
    ), (-1.0, \"E\")];\n    grades.iter().map(|g| {\n        grade_map.iter().rev().find(|(n,\
    \ _)| *n <= *g).unwrap().1.to_string()\n    }).collect()", "    let mut l: Vec<String>\
    \ = Vec::new();\n    for i in grades.iter() {\n        let mut letter: String\
    \ = \"E\".to_string();\n        if *i == 4.0 {\n            letter = \"A+\".to_string();\n\
    \        } else if *i > 3.7 {\n            letter = \"A\".to_string();\n     \
    \   } else if *i > 3.3 {\n            letter = \"A-\".to_string();\n        }\
    \ else if *i > 3.0 {\n            letter = \"B+\".to_string();\n        } else\
    \ if *i > 2.7 {\n            letter = \"B\".to_string();\n        } else if *i\
    \ > 2.3 {\n            letter = \"B-\".to_string();\n        } else if *i > 2.0\
    \ {\n            letter = \"C+\".to_string();\n        } else if *i > 1.7 {\n\
    \            letter = \"C\".to_string();\n        } else if *i > 1.3 {\n     \
    \       letter = \"C-\".to_string();\n        } else if *i > 1.0 {\n         \
    \   letter = \"D+\".to_string();\n        } else if *i > 0.7 {\n            letter\
    \ = \"D\".to_string();\n        } else if *i > 0.0 {\n            letter = \"\
    D-\".to_string();\n        }\n        l.push(letter);\n    }\n    l", "    let\
    \ mut new_grades = Vec::new();\n    for grade in grades {\n        if grade >=\
    \ 4.0 {\n            new_grades.push(\"A+\".to_string());\n        } else if grade\
    \ >= 3.7 {\n            new_grades.push(\"A\".to_string());\n        } else if\
    \ grade >= 3.3 {\n            new_grades.push(\"A-\".to_string());\n        }\
    \ else if grade >= 3.0 {\n            new_grades.push(\"B+\".to_string());\n \
    \       } else if grade >= 2.7 {\n            new_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            new_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            new_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            new_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            new_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            new_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            new_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            new_grades.push(\"D-\".to_string());\n\
    \        } else {\n            new_grades.push(\"E\".to_string());\n        }\n\
    \    }\n    new_grades", '    grades.iter().map(|g| grade(*g)).collect()', " \
    \   grades.iter().map(|grade| {\n        if *grade >= 4.0 { \"A+\".to_string()\
    \ }\n        else if *grade >= 3.7 { \"A\".to_string() }\n        else if *grade\
    \ >= 3.3 { \"A-\".to_string() }\n        else if *grade >= 3.0 { \"B+\".to_string()\
    \ }\n        else if *grade >= 2.7 { \"B\".to_string() }\n        else if *grade\
    \ >= 2.3 { \"B-\".to_string() }\n        else if *grade >= 2.0 { \"C+\".to_string()\
    \ }\n        else if *grade >= 1.7 { \"C\".to_string() }\n        else if *grade\
    \ >= 1.3 { \"C-\".to_string() }\n        else if *grade >= 1.0 { \"D+\".to_string()\
    \ }\n        else if *grade >= 0.7 { \"D\".to_string() }\n        else if *grade\
    \ >= 0.0 { \"D-\".to_string() }\n        else { \"E\".to_string() }\n    }).collect()",
  "    grades.iter().map(|grade| {\n        let mut gpa = if *grade > 4.0 { \"A+\"\
    \ } else { \"\" };\n        gpa = if *grade >= 3.7 { \"A\" } else { gpa };\n \
    \       gpa = if *grade >= 3.3 { \"A-\" } else { gpa };\n        gpa = if *grade\
    \ >= 3.0 { \"B+\" } else { gpa };\n        gpa = if *grade >= 2.7 { \"B\" } else\
    \ { gpa };\n        gpa = if *grade >= 2.3 { \"B-\" } else { gpa };\n        gpa\
    \ = if *grade >= 2.0 { \"C+\" } else { gpa };\n        gpa = if *grade >= 1.7\
    \ { \"C\" } else { gpa };\n        gpa = if *grade >= 1.3 { \"C-\" } else { gpa\
    \ };\n        gpa = if *grade >= 1.0 { \"D+\" } else { gpa };\n        gpa = if\
    \ *grade >= 0.7 { \"D\" } else { gpa };\n        gpa = if *grade >= 0.0 { \"D-\"\
    \ } else { gpa };\n        gpa = if *grade >= 0.0 { \"E\" } else { gpa };\n  \
    \      gpa.to_string()\n    }).collect()", "    grades.iter().map(|g| {\n    \
    \    if *g >= 4.0 {\n            \"A+\".to_string()\n        } else if *g >= 3.7\
    \ {\n            \"A\".to_string()\n        } else if *g >= 3.3 {\n          \
    \  \"A-\".to_string()\n        } else if *g >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *g >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *g >= 2.3 {\n            \"B-\".to_string()\n        } else if *g >= 2.0\
    \ {\n            \"C+\".to_string()\n        } else if *g >= 1.7 {\n         \
    \   \"C\".to_string()\n        } else if *g >= 1.3 {\n            \"C-\".to_string()\n\
    \        } else if *g >= 1.0 {\n            \"D+\".to_string()\n        } else\
    \ if *g >= 0.7 {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n\
    \            \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n\
    \        }\n    }).collect()", '    unimplemented!()', '    grades.iter().map(|g|
    grade_to_string(*g)).collect()', "    grades.iter().map(|grade| match *grade {\n\
    \        4.0 => String::from(\"A+\"),\n        g if g > 3.7 => String::from(\"\
    A\"),\n        g if g > 3.3 => String::from(\"A-\"),\n        g if g > 3.0 =>\
    \ String::from(\"B+\"),\n        g if g > 2.7 => String::from(\"B\"),\n      \
    \  g if g > 2.3 => String::from(\"B-\"),\n        g if g > 2.0 => String::from(\"\
    C+\"),\n        g if g > 1.7 => String::from(\"C\"),\n        g if g > 1.3 =>\
    \ String::from(\"C-\"),\n        g if g > 1.0 => String::from(\"D+\"),\n     \
    \   g if g > 0.7 => String::from(\"D\"),\n        g if g > 0.0 => String::from(\"\
    D-\"),\n        _ => String::from(\"E\"),\n    }).collect()", "  let mut grades\
    \ = grades;\n  let mut grades_to_return = Vec::new();\n  grades.sort_by(|a, b|\
    \ a.partial_cmp(b).unwrap());\n  grades.reverse();\n  for i in grades {\n    if\
    \ i == 4.0 {\n      grades_to_return.push(\"A+\".to_string());\n    } else if\
    \ i > 3.7 {\n      grades_to_return.push(\"A\".to_string());\n    } else if i\
    \ > 3.3 {\n      grades_to_return.push(\"A-\".to_string());\n    } else if i >\
    \ 3.0 {\n      grades_to_return.push(\"B+\".to_string());\n    } else if i > 2.7\
    \ {\n      grades_to_return.push(\"B\".to_string());\n    } else if i > 2.3 {\n\
    \      grades_to_return.push(\"B-\".to_string());\n    } else if i > 2.0 {\n \
    \     grades_to_return.push(\"C+\".to_string());\n    } else if i > 1.7 {\n  \
    \    grades_to_return.push(\"C\".to_string());\n    } else if i > 1.3 {\n    \
    \  grades_to_return.push(\"C-\".to_string());\n    } else if i > 1.0 {\n     \
    \ grades_to_return.push(\"D+\".to_string());\n    } else if i > 0.7 {\n      grades_to_return.push(\"\
    D\".to_string());\n    } else if i > 0.0 {\n      grades_to_return.push(\"D-\"\
    .to_string());\n    } else {\n      grades_to_return.push(\"E\".to_string());\n\
    \    }\n  }\n  grades_to_return", "    grades.iter().map(|&g| match g {\n    \
    \    g if g >= 4.0 => \"A+\".to_string(),\n        g if g >= 3.7 => \"A\".to_string(),\n\
    \        g if g >= 3.3 => \"A-\".to_string(),\n        g if g >= 3.0 => \"B+\"\
    .to_string(),\n        g if g >= 2.7 => \"B\".to_string(),\n        g if g >=\
    \ 2.3 => \"B-\".to_string(),\n        g if g >= 2.0 => \"C+\".to_string(),\n \
    \       g if g >= 1.7 => \"C\".to_string(),\n        g if g >= 1.3 => \"C-\".to_string(),\n\
    \        g if g >= 1.0 => \"D+\".to_string(),\n        g if g >= 0.7 => \"D\"\
    .to_string(),\n        g if g >= 0.0 => \"D-\".to_string(),\n        _ => \"E\"\
    .to_string(),\n    }).collect()", "    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result", "    let mut letters = Vec::with_capacity(grades.len());\n\
    \    for grade in grades {\n        let mut letter = String::new();\n        if\
    \ grade == 4.0 {\n            letter = \"A+\".to_string();\n        } else if\
    \ grade > 3.7 {\n            letter = \"A\".to_string();\n        } else if grade\
    \ > 3.3 {\n            letter = \"A-\".to_string();\n        } else if grade >\
    \ 3.0 {\n            letter = \"B+\".to_string();\n        } else if grade > 2.7\
    \ {\n            letter = \"B\".to_string();\n        } else if grade > 2.3 {\n\
    \            letter = \"B-\".to_string();\n        } else if grade > 2.0 {\n \
    \           letter = \"C+\".to_string();\n        } else if grade > 1.7 {\n  \
    \          letter = \"C\".to_string();\n        } else if grade > 1.3 {\n    \
    \        letter = \"C-\".to_string();\n        } else if grade > 1.0 {\n     \
    \       letter = \"D+\".to_string();\n        } else if grade > 0.7 {\n      \
    \      letter = \"D\".to_string();\n        } else if grade > 0.0 {\n        \
    \    letter = \"D-\".to_string();\n        } else {\n            letter = \"E\"\
    .to_string();\n        }\n        letters.push(letter);\n    }\n    letters",
  "    grades.iter().map(|g| match *g {\n        4.0 => \"A+\",\n        g if g >\
    \ 3.7 => \"A\",\n        g if g > 3.3 => \"A-\",\n        g if g > 3.0 => \"B+\"\
    ,\n        g if g > 2.7 => \"B\",\n        g if g > 2.3 => \"B-\",\n        g\
    \ if g > 2.0 => \"C+\",\n        g if g > 1.7 => \"C\",\n        g if g > 1.3\
    \ => \"C-\",\n        g if g > 1.0 => \"D+\",\n        g if g > 0.7 => \"D\",\n\
    \        g if g > 0.0 => \"D-\",\n        _ => \"E\",\n    }).collect()", "  grades.iter().map(|&g|\
    \ {\n    if g >= 4.0 {\n      \"A+\".to_string()\n    } else if g >= 3.7 {\n \
    \     \"A\".to_string()\n    } else if g >= 3.3 {\n      \"A-\".to_string()\n\
    \    } else if g >= 3.0 {\n      \"B+\".to_string()\n    } else if g >= 2.7 {\n\
    \      \"B\".to_string()\n    } else if g >= 2.3 {\n      \"B-\".to_string()\n\
    \    } else if g >= 2.0 {\n      \"C+\".to_string()\n    } else if g >= 1.7 {\n\
    \      \"C\".to_string()\n    } else if g >= 1.3 {\n      \"C-\".to_string()\n\
    \    } else if g >= 1.0 {\n      \"D+\".to_string()\n    } else if g >= 0.7 {\n\
    \      \"D\".to_string()\n    } else if g >= 0.0 {\n      \"D-\".to_string()\n\
    \    } else {\n      \"E\".to_string()\n    }\n  }).collect()", "    grades.iter().map(|grade|\
    \ match *grade {\n        4.0 => \"A+\",\n        3.7...4.0 => \"A\",\n      \
    \  3.3...3.7 => \"A-\",\n        3.0...3.3 => \"B+\",\n        2.7...3.0 => \"\
    B\",\n        2.3...2.7 => \"B-\",\n        2.0...2.3 => \"C+\",\n        1.7...2.0\
    \ => \"C\",\n        1.3...1.7 => \"C-\",\n        1.0...1.3 => \"D+\",\n    \
    \    0.7...1.0 => \"D\",\n        0.0...0.7 => \"D-\",\n        _ => \"E\",\n\
    \    }).collect()", "    let mut mapped_grades: Vec<String> = vec![];\n    for\
    \ grade in grades {\n        if grade > 4.0 {\n            mapped_grades.push(\"\
    A+\".to_string());\n        } else if grade > 3.7 {\n            mapped_grades.push(\"\
    A\".to_string());\n        } else if grade > 3.3 {\n            mapped_grades.push(\"\
    A-\".to_string());\n        } else if grade > 3.0 {\n            mapped_grades.push(\"\
    B+\".to_string());\n        } else if grade > 2.7 {\n            mapped_grades.push(\"\
    B\".to_string());\n        } else if grade > 2.3 {\n            mapped_grades.push(\"\
    B-\".to_string());\n        } else if grade > 2.0 {\n            mapped_grades.push(\"\
    C+\".to_string());\n        } else if grade > 1.7 {\n            mapped_grades.push(\"\
    C\".to_string());\n        } else if grade > 1.3 {\n            mapped_grades.push(\"\
    C-\".to_string());\n        } else if grade > 1.0 {\n            mapped_grades.push(\"\
    D+\".to_string());\n        } else if grade > 0.7 {\n            mapped_grades.push(\"\
    D\".to_string());\n        } else if grade > 0.0 {\n            mapped_grades.push(\"\
    D-\".to_string());\n        } else {\n            mapped_grades.push(\"E\".to_string());\n\
    \        }\n    }\n    mapped_grades", "    grades.iter().map(|grade| {\n    \
    \    match *grade {\n            x if x >= 4.0 => \"A+\".to_string(),\n      \
    \      x if x >= 3.7 => \"A\".to_string(),\n            x if x >= 3.3 => \"A-\"\
    .to_string(),\n            x if x >= 3.0 => \"B+\".to_string(),\n            x\
    \ if x >= 2.7 => \"B\".to_string(),\n            x if x >= 2.3 => \"B-\".to_string(),\n\
    \            x if x >= 2.0 => \"C+\".to_string(),\n            x if x >= 1.7 =>\
    \ \"C\".to_string(),\n            x if x >= 1.3 => \"C-\".to_string(),\n     \
    \       x if x >= 1.0 => \"D+\".to_string(),\n            x if x >= 0.7 => \"\
    D\".to_string(),\n            x if x >= 0.0 => \"D-\".to_string(),\n         \
    \   _ => \"E\".to_string(),\n        }\n    }).collect()", "    let grade_table\
    \ = [\n        (4.0, \"A+\"),\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n\
    \        (3.0, \"B+\"),\n        (2.7, \"B\"),\n        (2.3, \"B-\"),\n     \
    \   (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0,\
    \ \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"),\n    ];\n\n    grades\n\
    \        .into_iter()\n        .map(|grade| {\n            grade_table\n     \
    \           .iter()\n                .rev()\n                .find(|(gpa, _)|\
    \ *gpa <= grade)\n                .map(|(_, letter)| letter.to_string())\n   \
    \             .unwrap_or_else(|| \"E\".to_string())\n        })\n        .collect()",
  "    let thresholds = vec![(3.7, \"A\"), (3.3, \"A-\"), (3.0, \"B+\"), (2.7, \"\
    B\"), (2.3, \"B-\"),\n                          (2.0, \"C+\"), (1.7, \"C\"), (1.3,\
    \ \"C-\"), (1.0, \"D+\"), (0.7, \"D\"),\n                          (0.0, \"D-\"\
    )];\n    let mut result = Vec::new();\n    for grade in grades {\n        if grade\
    \ >= 4.0 {\n            result.push(\"A+\".to_string());\n        } else if grade\
    \ == 0.0 {\n            result.push(\"E\".to_string());\n        } else {\n  \
    \          for threshold in thresholds {\n                if grade > threshold.0\
    \ {\n                    result.push(threshold.1.to_string());\n             \
    \       break;\n                }\n            }\n        }\n    }\n    result",
  "    let mut grades_with_letter: Vec<String> = Vec::new();\n    for grade in grades\
    \ {\n        grades_with_letter.push(match grade {\n            4.0 => \"A+\"\
    .to_string(),\n            g if g > 3.7 => \"A\".to_string(),\n            g if\
    \ g > 3.3 => \"A-\".to_string(),\n            g if g > 3.0 => \"B+\".to_string(),\n\
    \            g if g > 2.7 => \"B\".to_string(),\n            g if g > 2.3 => \"\
    B-\".to_string(),\n            g if g > 2.0 => \"C+\".to_string(),\n         \
    \   g if g > 1.7 => \"C\".to_string(),\n            g if g > 1.3 => \"C-\".to_string(),\n\
    \            g if g > 1.0 => \"D+\".to_string(),\n            g if g > 0.7 =>\
    \ \"D\".to_string(),\n            g if g > 0.0 => \"D-\".to_string(),\n      \
    \      _ => \"E\".to_string(),\n        });\n    }\n    grades_with_letter", " \
    \   grades.iter().map(|grade| match *grade {\n        4.0 => \"A+\",\n       \
    \ grade if grade > 3.7 => \"A\",\n        grade if grade > 3.3 => \"A-\",\n  \
    \      grade if grade > 3.0 => \"B+\",\n        grade if grade > 2.7 => \"B\"\
    ,\n        grade if grade > 2.3 => \"B-\",\n        grade if grade > 2.0 => \"\
    C+\",\n        grade if grade > 1.7 => \"C\",\n        grade if grade > 1.3 =>\
    \ \"C-\",\n        grade if grade > 1.0 => \"D+\",\n        grade if grade > 0.7\
    \ => \"D\",\n        grade if grade > 0.0 => \"D-\",\n        _ => \"E\",\n  \
    \  }).collect()", "    grades.iter().map(|grade| match *grade {\n        4.0 =>\
    \ \"A+\",\n        3.7...4.0 => \"A\",\n        3.3...3.7 => \"A-\",\n       \
    \ 3.0...3.3 => \"B+\",\n        2.7...3.0 => \"B\",\n        2.3...2.7 => \"B-\"\
    ,\n        2.0...2.3 => \"C+\",\n        1.7...2.0 => \"C\",\n        1.3...1.7\
    \ => \"C-\",\n        1.0...1.3 => \"D+\",\n        0.7...1.0 => \"D\",\n    \
    \    0.0...0.7 => \"D-\",\n        _ => \"E\",\n    }).collect()", '    unimplemented!()',
  "    grades.iter().map(|x| {\n        match *x {\n            4.0              \
    \                                => String::from(\"A+\"),\n            _ if *x\
    \ > 3.7                                    => String::from(\"A\"),\n         \
    \   _ if *x > 3.3                                    => String::from(\"A-\"),\n\
    \            _ if *x > 3.0                                    => String::from(\"\
    B+\"),\n            _ if *x > 2.7                                    => String::from(\"\
    B\"),\n            _ if *x > 2.3                                    => String::from(\"\
    B-\"),\n            _ if *x > 2.0                                    => String::from(\"\
    C+\"),\n            _ if *x > 1.7                                    => String::from(\"\
    C\"),\n            _ if *x > 1.3                                    => String::from(\"\
    C-\"),\n            _ if *x > 1.0                                    => String::from(\"\
    D+\"),\n            _ if *x > 0.7                                    => String::from(\"\
    D\"),\n            _ if *x > 0.0                                    => String::from(\"\
    D-\"),\n            _                                                => String::from(\"\
    E\"),\n        }\n    }).collect()", "    //unimplemented!();\n    grades.iter().map(|&x|\
    \ {\n        let letter = match x {\n            4.0 => \"A+\",\n            x\
    \ if x > 3.7 => \"A\",\n            x if x > 3.3 => \"A-\",\n            x if\
    \ x > 3.0 => \"B+\",\n            x if x > 2.7 => \"B\",\n            x if x >\
    \ 2.3 => \"B-\",\n            x if x > 2.0 => \"C+\",\n            x if x > 1.7\
    \ => \"C\",\n            x if x > 1.3 => \"C-\",\n            x if x > 1.0 =>\
    \ \"D+\",\n            x if x > 0.7 => \"D\",\n            x if x > 0.0 => \"\
    D-\",\n            _ => \"E\",\n        };\n        letter.to_string()\n    }).collect()",
  "    grades.iter().map(|grade| {\n        match *grade {\n            4.0 => \"\
    A+\",\n            x if x > 3.7 => \"A\",\n            x if x > 3.3 => \"A-\"\
    ,\n            x if x > 3.0 => \"B+\",\n            x if x > 2.7 => \"B\",\n \
    \           x if x > 2.3 => \"B-\",\n            x if x > 2.0 => \"C+\",\n   \
    \         x if x > 1.7 => \"C\",\n            x if x > 1.3 => \"C-\",\n      \
    \      x if x > 1.0 => \"D+\",\n            x if x > 0.7 => \"D\",\n         \
    \   x if x > 0.0 => \"D-\",\n            _ => \"E\",\n        }\n    }).collect()",
  "    let grades = grades\n        .iter()\n        .map(|g| {\n            if *g\
    \ >= 4.0 {\n                return \"A+\".to_string();\n            }\n      \
    \      if *g >= 3.7 {\n                return \"A\".to_string();\n           \
    \ }\n            if *g >= 3.3 {\n                return \"A-\".to_string();\n\
    \            }\n            if *g >= 3.0 {\n                return \"B+\".to_string();\n\
    \            }\n            if *g >= 2.7 {\n                return \"B\".to_string();\n\
    \            }\n            if *g >= 2.3 {\n                return \"B-\".to_string();\n\
    \            }\n            if *g >= 2.0 {\n                return \"C+\".to_string();\n\
    \            }\n            if *g >= 1.7 {\n                return \"C\".to_string();\n\
    \            }\n            if *g >= 1.3 {\n                return \"C-\".to_string();\n\
    \            }\n            if *g >= 1.0 {\n                return \"D+\".to_string();\n\
    \            }\n            if *g >= 0.7 {\n                return \"D\".to_string();\n\
    \            }\n            if *g >= 0.0 {\n                return \"D-\".to_string();\n\
    \            }\n            \"E\".to_string()\n        })\n        .collect();\n\
    \    grades", '    unimplemented!();', '    unimplemented!()', "    grades.iter().map(|&grade|\
    \ \n    match grade {\n        4.0 => \"A+\",\n        grade if grade > 3.7 =>\
    \ \"A\",\n        grade if grade > 3.3 => \"A-\",\n        grade if grade > 3.0\
    \ => \"B+\",\n        grade if grade > 2.7 => \"B\",\n        grade if grade >\
    \ 2.3 => \"B-\",\n        grade if grade > 2.0 => \"C+\",\n        grade if grade\
    \ > 1.7 => \"C\",\n        grade if grade > 1.3 => \"C-\",\n        grade if grade\
    \ > 1.0 => \"D+\",\n        grade if grade > 0.7 => \"D\",\n        grade if grade\
    \ > 0.0 => \"D-\",\n        _ => \"E\",\n    }).collect()", "    let gpa_letter_grade_table\
    \ = vec![\n        (4.0, String::from(\"A+\")),\n        (3.7, String::from(\"\
    A\")),\n        (3.3, String::from(\"A-\")),\n        (3.0, String::from(\"B+\"\
    )),\n        (2.7, String::from(\"B\")),\n        (2.3, String::from(\"B-\")),\n\
    \        (2.0, String::from(\"C+\")),\n        (1.7, String::from(\"C\")),\n \
    \       (1.3, String::from(\"C-\")),\n        (1.0, String::from(\"D+\")),\n \
    \       (0.7, String::from(\"D\")),\n        (0.0, String::from(\"D-\")),\n  \
    \  ];\n\n    let mut result = Vec::new();\n    for grade in grades {\n       \
    \ for (gpa, letter_grade) in gpa_letter_grade_table.iter() {\n            if grade\
    \ > *gpa {\n                result.push(letter_grade.clone());\n             \
    \   break;\n            }\n        }\n    }\n\n    result", '    unimplemented!()',
  "    let mut letter_grades = Vec::new();\n    for grade in grades {\n        if\
    \ grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n      \
    \  } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades", "    let mut result: Vec<String> = Vec::new();\n\
    \    for i in grades {\n        let grade: String;\n        match i {\n      \
    \      4.0 => grade = \"A+\".to_string(),\n            i if i >= 3.7 => grade\
    \ = \"A\".to_string(),\n            i if i >= 3.3 => grade = \"A-\".to_string(),\n\
    \            i if i >= 3.0 => grade = \"B+\".to_string(),\n            i if i\
    \ >= 2.7 => grade = \"B\".to_string(),\n            i if i >= 2.3 => grade = \"\
    B-\".to_string(),\n            i if i >= 2.0 => grade = \"C+\".to_string(),\n\
    \            i if i >= 1.7 => grade = \"C\".to_string(),\n            i if i >=\
    \ 1.3 => grade = \"C-\".to_string(),\n            i if i >= 1.0 => grade = \"\
    D+\".to_string(),\n            i if i >= 0.7 => grade = \"D\".to_string(),\n \
    \           i if i >= 0.0 => grade = \"D-\".to_string(),\n            _ => grade\
    \ = \"E\".to_string(),\n        }\n        result.push(grade);\n    }\n    result",
  "    grades.iter().map(|x| {\n        let grade = x.round() as u32;\n        match\
    \ grade {\n            4 => \"A+\".to_string(),\n            3 => \"A-\".to_string(),\n\
    \            2 => \"B+\".to_string(),\n            1 => \"B-\".to_string(),\n\
    \            0 => \"C+\".to_string(),\n            _ => \"F\".to_string(),\n \
    \       }\n    }).collect()", "    // TODO: implement this\n    Vec::new()", " \
    \   let grade_equation = vec![\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n\
    \        (3.0, \"B+\"),\n        (2.7, \"B\"),\n        (2.3, \"B-\"),\n     \
    \   (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0,\
    \ \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"),\n    ];\n    let mut\
    \ result = Vec::new();\n    for grade in grades {\n        let mut grade_letter\
    \ = \"E\";\n        if grade == 4.0 {\n            grade_letter = \"A+\";\n  \
    \      } else {\n            for (min_grade, letter) in grade_equation.iter()\
    \ {\n                if grade > *min_grade {\n                    grade_letter\
    \ = letter;\n                    break;\n                }\n            }\n  \
    \      }\n        result.push(grade_letter.to_string());\n    }\n    result",
  "    let mapping = vec![\n        (4.0, 'A', '+'),\n        (3.7, 'A', ' '),\n \
    \       (3.3, 'A', '-'),\n        (3.0, 'B', '+'),\n        (2.7, 'B', ' '),\n\
    \        (2.3, 'B', '-'),\n        (2.0, 'C', '+'),\n        (1.7, 'C', ' '),\n\
    \        (1.3, 'C', '-'),\n        (1.0, 'D', '+'),\n        (0.7, 'D', ' '),\n\
    \        (0.0, 'D', '-'),\n    ];\n\n    grades\n        .iter()\n        .map(|grade|\
    \ {\n            for &(num, letter, modifier) in mapping.iter() {\n          \
    \      if *grade >= num {\n                    return format!(\"{}{}\", letter,\
    \ modifier);\n                }\n            }\n            return \"E\".to_string();\n\
    \        })\n        .collect()", "    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        let mut letter = String::new();\n        if grade >= 4.0\
    \ {\n            letter = \"A+\".to_string();\n        } else if grade >= 3.7\
    \ {\n            letter = \"A\".to_string();\n        } else if grade >= 3.3 {\n\
    \            letter = \"A-\".to_string();\n        } else if grade >= 3.0 {\n\
    \            letter = \"B+\".to_string();\n        } else if grade >= 2.7 {\n\
    \            letter = \"B\".to_string();\n        } else if grade >= 2.3 {\n \
    \           letter = \"B-\".to_string();\n        } else if grade >= 2.0 {\n \
    \           letter = \"C+\".to_string();\n        } else if grade >= 1.7 {\n \
    \           letter = \"C\".to_string();\n        } else if grade >= 1.3 {\n  \
    \          letter = \"C-\".to_string();\n        } else if grade >= 1.0 {\n  \
    \          letter = \"D+\".to_string();\n        } else if grade >= 0.7 {\n  \
    \          letter = \"D\".to_string();\n        } else if grade >= 0.0 {\n   \
    \         letter = \"D-\".to_string();\n        } else {\n            letter =\
    \ \"E\".to_string();\n        }\n        result.push(letter);\n    }\n    result",
  "    grades.iter().map(|g| {\n        if *g >= 4.0 {\n            \"A+\".to_string()\n\
    \        } else if *g >= 3.7 {\n            \"A\".to_string()\n        } else\
    \ if *g >= 3.3 {\n            \"A-\".to_string()\n        } else if *g >= 3.0\
    \ {\n            \"B+\".to_string()\n        } else if *g >= 2.7 {\n         \
    \   \"B\".to_string()\n        } else if *g >= 2.3 {\n            \"B-\".to_string()\n\
    \        } else if *g >= 2.0 {\n            \"C+\".to_string()\n        } else\
    \ if *g >= 1.7 {\n            \"C\".to_string()\n        } else if *g >= 1.3 {\n\
    \            \"C-\".to_string()\n        } else if *g >= 1.0 {\n            \"\
    D+\".to_string()\n        } else if *g >= 0.7 {\n            \"D\".to_string()\n\
    \        } else if *g >= 0.0 {\n            \"D-\".to_string()\n        } else\
    \ {\n            \"E\".to_string()\n        }\n    }).collect()", "    grades.iter().map(|g|\
    \ match *g {\n        4.0         => \"A+\",\n        3.7...4.0   => \"A\",\n\
    \        3.3...3.7   => \"A-\",\n        3.0...3.3   => \"B+\",\n        2.7...3.0\
    \   => \"B\",\n        2.3...2.7   => \"B-\",\n        2.0...2.3   => \"C+\",\n\
    \        1.7...2.0   => \"C\",\n        1.3...1.7   => \"C-\",\n        1.0...1.3\
    \   => \"D+\",\n        0.7...1.0   => \"D\",\n        0.0...0.7   => \"D-\",\n\
    \        _           => \"E\",\n    }).collect()", "    let grades_map = vec![\n\
    \        (4.0, String::from(\"A+\")),\n        (3.7, String::from(\"A\")),\n \
    \       (3.3, String::from(\"A-\")),\n        (3.0, String::from(\"B+\")),\n \
    \       (2.7, String::from(\"B\")),\n        (2.3, String::from(\"B-\")),\n  \
    \      (2.0, String::from(\"C+\")),\n        (1.7, String::from(\"C\")),\n   \
    \     (1.3, String::from(\"C-\")),\n        (1.0, String::from(\"D+\")),\n   \
    \     (0.7, String::from(\"D\")),\n        (0.0, String::from(\"D-\")),\n    ];\n\
    \n    let mut letter_grades = Vec::new();\n    for grade in grades {\n       \
    \ for (numerical_grade, letter_grade) in grades_map.iter() {\n            if grade\
    \ >= *numerical_grade {\n                letter_grades.push(letter_grade.clone());\n\
    \                break;\n            }\n        }\n    }\n\n    letter_grades",
  "    grades.iter().map(|x| {\n        match *x {\n            4.0 => String::from(\"\
    A+\"),\n            x if x > 3.7 => String::from(\"A\"),\n            x if x >\
    \ 3.3 => String::from(\"A-\"),\n            x if x > 3.0 => String::from(\"B+\"\
    ),\n            x if x > 2.7 => String::from(\"B\"),\n            x if x > 2.3\
    \ => String::from(\"B-\"),\n            x if x > 2.0 => String::from(\"C+\"),\n\
    \            x if x > 1.7 => String::from(\"C\"),\n            x if x > 1.3 =>\
    \ String::from(\"C-\"),\n            x if x > 1.0 => String::from(\"D+\"),\n \
    \           x if x > 0.7 => String::from(\"D\"),\n            x if x > 0.0 =>\
    \ String::from(\"D-\"),\n            _ => String::from(\"E\"),\n        }\n  \
    \  }).collect()", "    grades.iter().map(|&g|\n        if g >= 4.0 {\n       \
    \     \"A+\".to_string()\n        } else if g >= 3.7 {\n            \"A\".to_string()\n\
    \        } else if g >= 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if g >= 3.0 {\n            \"B+\".to_string()\n        } else if g >= 2.7 {\n\
    \            \"B\".to_string()\n        } else if g >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if g >= 2.0 {\n            \"C+\".to_string()\n \
    \       } else if g >= 1.7 {\n            \"C\".to_string()\n        } else if\
    \ g >= 1.3 {\n            \"C-\".to_string()\n        } else if g >= 1.0 {\n \
    \           \"D+\".to_string()\n        } else if g >= 0.7 {\n            \"D\"\
    .to_string()\n        } else if g >= 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    ).collect()",
  "    let letters = [\n        (\"A+\", 4.0),\n        (\"A\", 3.7),\n        (\"\
    A-\", 3.3),\n        (\"B+\", 3.0),\n        (\"B\", 2.7),\n        (\"B-\", 2.3),\n\
    \        (\"C+\", 2.0),\n        (\"C\", 1.7),\n        (\"C-\", 1.3),\n     \
    \   (\"D+\", 1.0),\n        (\"D\", 0.7),\n        (\"D-\", 0.0),\n        (\"\
    E\", 0.0),\n    ];\n    grades\n        .iter()\n        .map(|g| {\n        \
    \    let grade = letters\n                .iter()\n                .find(|&(l,\
    \ n)| n <= g)\n                .map(|&(l, _)| l)\n                .unwrap_or(\"\
    E\");\n            grade.to_string()\n        })\n        .collect()", "    let\
    \ mut grades_to_return = Vec::new();\n    for grade in grades {\n        grades_to_return.push(match\
    \ grade {\n            4.0 => \"A+\",\n            grade if grade > 3.7 => \"\
    A\",\n            grade if grade > 3.3 => \"A-\",\n            grade if grade\
    \ > 3.0 => \"B+\",\n            grade if grade > 2.7 => \"B\",\n            grade\
    \ if grade > 2.3 => \"B-\",\n            grade if grade > 2.0 => \"C+\",\n   \
    \         grade if grade > 1.7 => \"C\",\n            grade if grade > 1.3 =>\
    \ \"C-\",\n            grade if grade > 1.0 => \"D+\",\n            grade if grade\
    \ > 0.7 => \"D\",\n            grade if grade > 0.0 => \"D-\",\n            _\
    \ => \"E\",\n        }.to_string());\n    }\n    grades_to_return", "    let mut\
    \ grade_letter = Vec::new();\n    for grade in grades {\n        if grade >= 4.0\
    \ {\n            grade_letter.push(\"A+\".to_string());\n        } else if grade\
    \ >= 3.7 {\n            grade_letter.push(\"A\".to_string());\n        } else\
    \ if grade >= 3.3 {\n            grade_letter.push(\"A-\".to_string());\n    \
    \    } else if grade >= 3.0 {\n            grade_letter.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            grade_letter.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            grade_letter.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            grade_letter.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            grade_letter.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            grade_letter.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            grade_letter.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            grade_letter.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            grade_letter.push(\"D-\".to_string());\n\
    \        } else {\n            grade_letter.push(\"E\".to_string());\n       \
    \ }\n    }\n    grade_letter", '    unimplemented!()', "    grades.iter().map(|&x|\
    \ match x {\n        4.0 => \"A+\",\n        x if x > 3.7 => \"A\",\n        x\
    \ if x > 3.3 => \"A-\",\n        x if x > 3.0 => \"B+\",\n        x if x > 2.7\
    \ => \"B\",\n        x if x > 2.3 => \"B-\",\n        x if x > 2.0 => \"C+\",\n\
    \        x if x > 1.7 => \"C\",\n        x if x > 1.3 => \"C-\",\n        x if\
    \ x > 1.0 => \"D+\",\n        x if x > 0.7 => \"D\",\n        x if x > 0.0 =>\
    \ \"D-\",\n        _ => \"E\",\n    }).collect()", "    grades.iter().map(|&x|\
    \ {\n        match x {\n            x if x > 4.0 => \"A+\".to_string(),\n    \
    \        x if x > 3.7 => \"A\".to_string(),\n            x if x > 3.3 => \"A-\"\
    .to_string(),\n            x if x > 3.0 => \"B+\".to_string(),\n            x\
    \ if x > 2.7 => \"B\".to_string(),\n            x if x > 2.3 => \"B-\".to_string(),\n\
    \            x if x > 2.0 => \"C+\".to_string(),\n            x if x > 1.7 =>\
    \ \"C\".to_string(),\n            x if x > 1.3 => \"C-\".to_string(),\n      \
    \      x if x > 1.0 => \"D+\".to_string(),\n            x if x > 0.7 => \"D\"\
    .to_string(),\n            x if x > 0.0 => \"D-\".to_string(),\n            _\
    \ => \"E\".to_string(),\n        }\n    }).collect()", "    grades.iter().map(|&x|\
    \ {\n        if x >= 4.0 {\n            \"A+\".to_string()\n        } else if\
    \ x >= 3.7 {\n            \"A\".to_string()\n        } else if x >= 3.3 {\n  \
    \          \"A-\".to_string()\n        } else if x >= 3.0 {\n            \"B+\"\
    .to_string()\n        } else if x >= 2.7 {\n            \"B\".to_string()\n  \
    \      } else if x >= 2.3 {\n            \"B-\".to_string()\n        } else if\
    \ x >= 2.0 {\n            \"C+\".to_string()\n        } else if x >= 1.7 {\n \
    \           \"C\".to_string()\n        } else if x >= 1.3 {\n            \"C-\"\
    .to_string()\n        } else if x >= 1.0 {\n            \"D+\".to_string()\n \
    \       } else if x >= 0.7 {\n            \"D\".to_string()\n        } else if\
    \ x >= 0.0 {\n            \"D-\".to_string()\n        } else {\n            \"\
    E\".to_string()\n        }\n    }).collect()", '  unimplemented!()', "    let\
    \ b = vec![4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    let\
    \ a = vec![\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"\
    , \"D+\", \"D\", \"D-\"];\n    grades.iter().map(|g| {\n        if *g > 4.0 {\n\
    \            return \"A+\".to_string();\n        }\n        if *g < 0.0 {\n  \
    \          return \"E\".to_string();\n        }\n        let mut res = \"E\".to_string();\n\
    \        for (i, &x) in b.iter().enumerate() {\n            if *g >= x {\n   \
    \             res = a[i].to_string();\n                break;\n            }\n\
    \        }\n        res\n    }).collect()", "    grades.iter().map(|grade| match\
    \ *grade {\n        4.0 => \"A+\",\n        grade if grade > 3.7 => \"A\",\n \
    \       grade if grade > 3.3 => \"A-\",\n        grade if grade > 3.0 => \"B+\"\
    ,\n        grade if grade > 2.7 => \"B\",\n        grade if grade > 2.3 => \"\
    B-\",\n        grade if grade > 2.0 => \"C+\",\n        grade if grade > 1.7 =>\
    \ \"C\",\n        grade if grade > 1.3 => \"C-\",\n        grade if grade > 1.0\
    \ => \"D+\",\n        grade if grade > 0.7 => \"D\",\n        grade if grade >\
    \ 0.0 => \"D-\",\n        _ => \"E\",\n    }).collect()", "    let rounded_grades\
    \ = grades.iter().map(|&x| x.round()).collect::<Vec<i64>>();\n    let mut letter_grades\
    \ = vec![];\n    for &grade in &rounded_grades {\n        let grade_range = (grade\
    \ - grade % 10) as f64;\n        let letter_grade = match grade_range {\n    \
    \        0.0 => \"E\",\n            10.0 => \"D-\",\n            20.0 => \"D\"\
    ,\n            30.0 => \"D+\",\n            40.0 => \"C-\",\n            50.0\
    \ => \"C\",\n            60.0 => \"C+\",\n            70.0 => \"B-\",\n      \
    \      80.0 => \"B\",\n            90.0 => \"B+\",\n            100.0 => \"A-\"\
    ,\n            110.0 => \"A\",\n            120.0 => \"A+\",\n            _ =>\
    \ \"?\",\n        };\n        letter_grades.push(letter_grade.to_string());\n\
    \    }\n    letter_grades", "    grades.iter().map(|x| match *x {\n        4.0\
    \ => \"A+\",\n        x if x > 3.7 => \"A\",\n        x if x > 3.3 => \"A-\",\n\
    \        x if x > 3.0 => \"B+\",\n        x if x > 2.7 => \"B\",\n        x if\
    \ x > 2.3 => \"B-\",\n        x if x > 2.0 => \"C+\",\n        x if x > 1.7 =>\
    \ \"C\",\n        x if x > 1.3 => \"C-\",\n        x if x > 1.0 => \"D+\",\n \
    \       x if x > 0.7 => \"D\",\n        x if x > 0.0 => \"D-\",\n        _ =>\
    \ \"E\",\n    }).collect()", "    grades.iter().map(|&g| {\n        match g {\n\
    \            g if g > 4.0 => \"A+\".to_string(),\n            g if g > 3.7 =>\
    \ \"A\".to_string(),\n            g if g > 3.3 => \"A-\".to_string(),\n      \
    \      g if g > 3.0 => \"B+\".to_string(),\n            g if g > 2.7 => \"B\"\
    .to_string(),\n            g if g > 2.3 => \"B-\".to_string(),\n            g\
    \ if g > 2.0 => \"C+\".to_string(),\n            g if g > 1.7 => \"C\".to_string(),\n\
    \            g if g > 1.3 => \"C-\".to_string(),\n            g if g > 1.0 =>\
    \ \"D+\".to_string(),\n            g if g > 0.7 => \"D\".to_string(),\n      \
    \      g if g > 0.0 => \"D-\".to_string(),\n            _ => \"E\".to_string(),\n\
    \        }\n    }).collect()", "    grades.iter().map(|&i| match i {\n       \
    \ 4.0 => \"A+\",\n        x if x > 3.7 => \"A\",\n        x if x > 3.3 => \"A-\"\
    ,\n        x if x > 3.0 => \"B+\",\n        x if x > 2.7 => \"B\",\n        x\
    \ if x > 2.3 => \"B-\",\n        x if x > 2.0 => \"C+\",\n        x if x > 1.7\
    \ => \"C\",\n        x if x > 1.3 => \"C-\",\n        x if x > 1.0 => \"D+\",\n\
    \        x if x > 0.7 => \"D\",\n        x if x > 0.0 => \"D-\",\n        _ =>\
    \ \"E\",\n    }).collect()", "    grades.iter().map(|x| match *x {\n        4.0\
    \ => \"A+\",\n        x if x > 3.7 => \"A\",\n        x if x > 3.3 => \"A-\",\n\
    \        x if x > 3.0 => \"B+\",\n        x if x > 2.7 => \"B\",\n        x if\
    \ x > 2.3 => \"B-\",\n        x if x > 2.0 => \"C+\",\n        x if x > 1.7 =>\
    \ \"C\",\n        x if x > 1.3 => \"C-\",\n        x if x > 1.0 => \"D+\",\n \
    \       x if x > 0.7 => \"D\",\n        x if x > 0.0 => \"D-\",\n        _ =>\
    \ \"E\",\n    }).collect()", "    grades.iter().map(|grade| {\n        let grade\
    \ = *grade;\n        if grade >= 4.0 {\n            \"A+\".to_string()\n     \
    \   } else if grade >= 3.7 {\n            \"A\".to_string()\n        } else if\
    \ grade >= 3.3 {\n            \"A-\".to_string()\n        } else if grade >= 3.0\
    \ {\n            \"B+\".to_string()\n        } else if grade >= 2.7 {\n      \
    \      \"B\".to_string()\n        } else if grade >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if grade >= 2.0 {\n            \"C+\".to_string()\n\
    \        } else if grade >= 1.7 {\n            \"C\".to_string()\n        } else\
    \ if grade >= 1.3 {\n            \"C-\".to_string()\n        } else if grade >=\
    \ 1.0 {\n            \"D+\".to_string()\n        } else if grade >= 0.7 {\n  \
    \          \"D\".to_string()\n        } else if grade >= 0.0 {\n            \"\
    D-\".to_string()\n        } else {\n            \"E\".to_string()\n        }\n\
    \    }).collect()", "    grades.iter().map(|n| {\n        let mut grade = String::new();\n\
    \        let mut passed = false;\n        for (i, v) in vec![4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0].iter().enumerate() {\n            if\
    \ *n >= *v {\n                if i == 0 {\n                    grade.push_str(\"\
    A+\");\n                } else if i == 1 {\n                    grade.push_str(\"\
    A\");\n                } else if i == 2 {\n                    grade.push_str(\"\
    A-\");\n                } else if i == 3 {\n                    grade.push_str(\"\
    B+\");\n                } else if i == 4 {\n                    grade.push_str(\"\
    B\");\n                } else if i == 5 {\n                    grade.push_str(\"\
    B-\");\n                } else if i == 6 {\n                    grade.push_str(\"\
    C+\");\n                } else if i == 7 {\n                    grade.push_str(\"\
    C\");\n                } else if i == 8 {\n                    grade.push_str(\"\
    C-\");\n                } else if i == 9 {\n                    grade.push_str(\"\
    D+\");\n                } else if i == 10 {\n                    grade.push_str(\"\
    D\");\n                } else if i == 11 {\n                    grade.push_str(\"\
    D-\");\n                }\n                passed = true;\n                break;\n\
    \            }\n        }\n        if !passed {\n            grade.push_str(\"\
    E\");\n        }\n        grade\n    }).collect()", "    let mut letter_grades\
    \ = Vec::new();\n    for grade in grades {\n        if grade >= 4.0 {\n      \
    \      letter_grades.push(\"A+\".to_string());\n        } else if grade >= 3.7\
    \ {\n            letter_grades.push(\"A\".to_string());\n        } else if grade\
    \ >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n        } else\
    \ if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n   \
    \     } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades", "    grades.iter().map(|grade| {\n        if\
    \ *grade > 4.0 {\n            \"A+\".to_string()\n        } else if *grade > 3.7\
    \ {\n            \"A\".to_string()\n        } else if *grade > 3.3 {\n       \
    \     \"A-\".to_string()\n        } else if *grade > 3.0 {\n            \"B+\"\
    .to_string()\n        } else if *grade > 2.7 {\n            \"B\".to_string()\n\
    \        } else if *grade > 2.3 {\n            \"B-\".to_string()\n        } else\
    \ if *grade > 2.0 {\n            \"C+\".to_string()\n        } else if *grade\
    \ > 1.7 {\n            \"C\".to_string()\n        } else if *grade > 1.3 {\n \
    \           \"C-\".to_string()\n        } else if *grade > 1.0 {\n           \
    \ \"D+\".to_string()\n        } else if *grade > 0.7 {\n            \"D\".to_string()\n\
    \        } else if *grade > 0.0 {\n            \"D-\".to_string()\n        } else\
    \ {\n            \"E\".to_string()\n        }\n    }).collect()", "    grades.iter().map(|&g|\
    \ match g {\n        4.0 => \"A+\",\n        3.7...4.0 => \"A\",\n        3.3...3.7\
    \ => \"A-\",\n        3.0...3.3 => \"B+\",\n        2.7...3.0 => \"B\",\n    \
    \    2.3...2.7 => \"B-\",\n        2.0...2.3 => \"C+\",\n        1.7...2.0 =>\
    \ \"C\",\n        1.3...1.7 => \"C-\",\n        1.0...1.3 => \"D+\",\n       \
    \ 0.7...1.0 => \"D\",\n        0.0...0.7 => \"D-\",\n        _ => \"E\",\n   \
    \ }).collect()", "    grades.iter().map(|n| match *n {\n        4.0 => \"A+\"\
    ,\n        x if x > 3.7 => \"A\",\n        x if x > 3.3 => \"A-\",\n        x\
    \ if x > 3.0 => \"B+\",\n        x if x > 2.7 => \"B\",\n        x if x > 2.3\
    \ => \"B-\",\n        x if x > 2.0 => \"C+\",\n        x if x > 1.7 => \"C\",\n\
    \        x if x > 1.3 => \"C-\",\n        x if x > 1.0 => \"D+\",\n        x if\
    \ x > 0.7 => \"D\",\n        x if x > 0.0 => \"D-\",\n        _ => \"E\",\n  \
    \  }).collect()", "    let grades = grades.iter().map(|&g| g).collect::<Vec<f64>>();\n\
    \    let mut map: HashMap<f64, String> = HashMap::new();\n    map.insert(4.0,\
    \ \"A+\".to_string());\n    map.insert(3.7, \"A\".to_string());\n    map.insert(3.3,\
    \ \"A-\".to_string());\n    map.insert(3.0, \"B+\".to_string());\n    map.insert(2.7,\
    \ \"B\".to_string());\n    map.insert(2.3, \"B-\".to_string());\n    map.insert(2.0,\
    \ \"C+\".to_string());\n    map.insert(1.7, \"C\".to_string());\n    map.insert(1.3,\
    \ \"C-\".to_string());\n    map.insert(1.0, \"D+\".to_string());\n    map.insert(0.7,\
    \ \"D\".to_string());\n    map.insert(0.0, \"D-\".to_string());\n    map.insert(-1.0,\
    \ \"E\".to_string());\n    let mut res: Vec<String> = Vec::new();\n    for g in\
    \ grades {\n        for (k, v) in map.iter() {\n            if g >= *k {\n   \
    \             res.push(v.to_string());\n                break;\n            }\n\
    \        }\n    }\n    res", "    let rounded = grades.iter().map(|&x| x.round()).collect::<Vec<i64>>();\n\
    \    let mut solutions = Vec::new();\n    for grade in rounded {\n        if grade\
    \ >= 4 {\n            solutions.push(\"A+\".to_string());\n        } else if grade\
    \ >= 3 {\n            solutions.push(\"A\".to_string());\n        } else if grade\
    \ >= 2 {\n            solutions.push(\"B\".to_string());\n        } else if grade\
    \ >= 1 {\n            solutions.push(\"C\".to_string());\n        } else if grade\
    \ >= 0 {\n            solutions.push(\"D\".to_string());\n        } else {\n \
    \           solutions.push(\"E\".to_string());\n        }\n    }\n    solutions",
  "    let mut letters = Vec::new();\n    for grade in grades {\n        if grade\
    \ == 4.0 {\n            letters.push(\"A+\".to_string());\n        } else if grade\
    \ > 3.7 {\n            letters.push(\"A\".to_string());\n        } else if grade\
    \ > 3.3 {\n            letters.push(\"A-\".to_string());\n        } else if grade\
    \ > 3.0 {\n            letters.push(\"B+\".to_string());\n        } else if grade\
    \ > 2.7 {\n            letters.push(\"B\".to_string());\n        } else if grade\
    \ > 2.3 {\n            letters.push(\"B-\".to_string());\n        } else if grade\
    \ > 2.0 {\n            letters.push(\"C+\".to_string());\n        } else if grade\
    \ > 1.7 {\n            letters.push(\"C\".to_string());\n        } else if grade\
    \ > 1.3 {\n            letters.push(\"C-\".to_string());\n        } else if grade\
    \ > 1.0 {\n            letters.push(\"D+\".to_string());\n        } else if grade\
    \ > 0.7 {\n            letters.push(\"D\".to_string());\n        } else if grade\
    \ > 0.0 {\n            letters.push(\"D-\".to_string());\n        } else {\n \
    \           letters.push(\"E\".to_string());\n        }\n    }\n    letters",
  "    // create a table mapping GPA to letter grade\n    let grade_table = vec![(\"\
    A+\", 4.0), (\"A\", 3.7), (\"A-\", 3.3), (\"B+\", 3.0),\n                    \
    \       (\"B\", 2.7), (\"B-\", 2.3), (\"C+\", 2.0), (\"C\", 1.7),\n          \
    \                 (\"C-\", 1.3), (\"D+\", 1.0), (\"D\", 0.7), (\"D-\", 0.0),\n\
    \                           (\"E\", 0.0)];\n    let mut ret: Vec<String> = Vec::new();\n\
    \    for g in grades {\n        let mut grade = String::from(\"E\");\n       \
    \ for &(l, v) in grade_table.iter() {\n            if g >= v {\n             \
    \   grade = l.to_string();\n                break;\n            }\n        }\n\
    \        ret.push(grade);\n    }\n    ret", "    grades.iter().map(|g| {\n   \
    \     if *g >= 4.0 {\n            \"A+\".to_string()\n        } else if *g >=\
    \ 3.7 {\n            \"A\".to_string()\n        } else if *g >= 3.3 {\n      \
    \      \"A-\".to_string()\n        } else if *g >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *g >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *g >= 2.3 {\n            \"B-\".to_string()\n        } else if *g >= 2.0\
    \ {\n            \"C+\".to_string()\n        } else if *g >= 1.7 {\n         \
    \   \"C\".to_string()\n        } else if *g >= 1.3 {\n            \"C-\".to_string()\n\
    \        } else if *g >= 1.0 {\n            \"D+\".to_string()\n        } else\
    \ if *g >= 0.7 {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n\
    \            \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n\
    \        }\n    }).collect()", "    let mut grade_names = Vec::new();\n    for\
    \ grade in grades {\n        if grade == 4.0 {\n            grade_names.push(\"\
    A+\".to_string());\n        } else if grade >= 3.7 {\n            grade_names.push(\"\
    A\".to_string());\n        } else if grade >= 3.3 {\n            grade_names.push(\"\
    A-\".to_string());\n        } else if grade >= 3.0 {\n            grade_names.push(\"\
    B+\".to_string());\n        } else if grade >= 2.7 {\n            grade_names.push(\"\
    B\".to_string());\n        } else if grade >= 2.3 {\n            grade_names.push(\"\
    B-\".to_string());\n        } else if grade >= 2.0 {\n            grade_names.push(\"\
    C+\".to_string());\n        } else if grade >= 1.7 {\n            grade_names.push(\"\
    C\".to_string());\n        } else if grade >= 1.3 {\n            grade_names.push(\"\
    C-\".to_string());\n        } else if grade >= 1.0 {\n            grade_names.push(\"\
    D+\".to_string());\n        } else if grade >= 0.7 {\n            grade_names.push(\"\
    D\".to_string());\n        } else if grade >= 0.0 {\n            grade_names.push(\"\
    D-\".to_string());\n        } else {\n            grade_names.push(\"E\".to_string());\n\
    \        }\n    }\n    grade_names", "    let mut res = Vec::new();\n    for i\
    \ in grades {\n        if i >= 4.0 {\n            res.push(\"A+\".to_string());\n\
    \        } else if i >= 3.7 {\n            res.push(\"A\".to_string());\n    \
    \    } else if i >= 3.3 {\n            res.push(\"A-\".to_string());\n       \
    \ } else if i >= 3.0 {\n            res.push(\"B+\".to_string());\n        } else\
    \ if i >= 2.7 {\n            res.push(\"B\".to_string());\n        } else if i\
    \ >= 2.3 {\n            res.push(\"B-\".to_string());\n        } else if i >=\
    \ 2.0 {\n            res.push(\"C+\".to_string());\n        } else if i >= 1.7\
    \ {\n            res.push(\"C\".to_string());\n        } else if i >= 1.3 {\n\
    \            res.push(\"C-\".to_string());\n        } else if i >= 1.0 {\n   \
    \         res.push(\"D+\".to_string());\n        } else if i >= 0.7 {\n      \
    \      res.push(\"D\".to_string());\n        } else if i >= 0.0 {\n          \
    \  res.push(\"D-\".to_string());\n        } else {\n            res.push(\"E\"\
    .to_string());\n        }\n    }\n    res", "    grades.iter().map(|g| {\n   \
    \     match *g {\n            g if g >= 4.0 => \"A+\".to_string(),\n         \
    \   g if g >= 3.7 => \"A\".to_string(),\n            g if g >= 3.3 => \"A-\".to_string(),\n\
    \            g if g >= 3.0 => \"B+\".to_string(),\n            g if g >= 2.7 =>\
    \ \"B\".to_string(),\n            g if g >= 2.3 => \"B-\".to_string(),\n     \
    \       g if g >= 2.0 => \"C+\".to_string(),\n            g if g >= 1.7 => \"\
    C\".to_string(),\n            g if g >= 1.3 => \"C-\".to_string(),\n         \
    \   g if g >= 1.0 => \"D+\".to_string(),\n            g if g >= 0.7 => \"D\".to_string(),\n\
    \            g if g >= 0.0 => \"D-\".to_string(),\n            _ => \"E\".to_string(),\n\
    \        }\n    }).collect()", '    unimplemented!()', "    let mut ret: Vec<String>\
    \ = Vec::new();\n    for grade in grades {\n        if grade >= 4.0 {\n      \
    \      ret.push(\"A+\".to_string());\n        } else if grade >= 3.7 {\n     \
    \       ret.push(\"A\".to_string());\n        } else if grade >= 3.3 {\n     \
    \       ret.push(\"A-\".to_string());\n        } else if grade >= 3.0 {\n    \
    \        ret.push(\"B+\".to_string());\n        } else if grade >= 2.7 {\n   \
    \         ret.push(\"B\".to_string());\n        } else if grade >= 2.3 {\n   \
    \         ret.push(\"B-\".to_string());\n        } else if grade >= 2.0 {\n  \
    \          ret.push(\"C+\".to_string());\n        } else if grade >= 1.7 {\n \
    \           ret.push(\"C\".to_string());\n        } else if grade >= 1.3 {\n \
    \           ret.push(\"C-\".to_string());\n        } else if grade >= 1.0 {\n\
    \            ret.push(\"D+\".to_string());\n        } else if grade >= 0.7 {\n\
    \            ret.push(\"D\".to_string());\n        } else if grade >= 0.0 {\n\
    \            ret.push(\"D-\".to_string());\n        } else {\n            ret.push(\"\
    E\".to_string());\n        }\n    }\n    ret", "    let names = vec![\"A+\", \"\
    A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"];\n    let mut letters = vec![];\n    for i in grades {\n        if i\
    \ == 4.0 {\n            letters.push(names[0].to_string());\n        } else if\
    \ i > 3.7 {\n            letters.push(names[1].to_string());\n        } else if\
    \ i > 3.3 {\n            letters.push(names[2].to_string());\n        } else if\
    \ i > 3.0 {\n            letters.push(names[3].to_string());\n        } else if\
    \ i > 2.7 {\n            letters.push(names[4].to_string());\n        } else if\
    \ i > 2.3 {\n            letters.push(names[5].to_string());\n        } else if\
    \ i > 2.0 {\n            letters.push(names[6].to_string());\n        } else if\
    \ i > 1.7 {\n            letters.push(names[7].to_string());\n        } else if\
    \ i > 1.3 {\n            letters.push(names[8].to_string());\n        } else if\
    \ i > 1.0 {\n            letters.push(names[9].to_string());\n        } else if\
    \ i > 0.7 {\n            letters.push(names[10].to_string());\n        } else\
    \ if i > 0.0 {\n            letters.push(names[11].to_string());\n        } else\
    \ {\n            letters.push(names[12].to_string());\n        }\n    }\n    letters",
  "    let mut result = Vec::new();\n    for g in grades {\n        if g >= 4.0 {\n\
    \            result.push(\"A+\".to_string());\n        } else if g >= 3.7 {\n\
    \            result.push(\"A\".to_string());\n        } else if g >= 3.3 {\n \
    \           result.push(\"A-\".to_string());\n        } else if g >= 3.0 {\n \
    \           result.push(\"B+\".to_string());\n        } else if g >= 2.7 {\n \
    \           result.push(\"B\".to_string());\n        } else if g >= 2.3 {\n  \
    \          result.push(\"B-\".to_string());\n        } else if g >= 2.0 {\n  \
    \          result.push(\"C+\".to_string());\n        } else if g >= 1.7 {\n  \
    \          result.push(\"C\".to_string());\n        } else if g >= 1.3 {\n   \
    \         result.push(\"C-\".to_string());\n        } else if g >= 1.0 {\n   \
    \         result.push(\"D+\".to_string());\n        } else if g >= 0.7 {\n   \
    \         result.push(\"D\".to_string());\n        } else if g >= 0.0 {\n    \
    \        result.push(\"D-\".to_string());\n        } else {\n            result.push(\"\
    E\".to_string());\n        }\n    }\n    result", "    let mut letters = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            letters.push(\"\
    A+\".to_string());\n        } else if grade >= 3.7 {\n            letters.push(\"\
    A\".to_string());\n        } else if grade >= 3.3 {\n            letters.push(\"\
    A-\".to_string());\n        } else if grade >= 3.0 {\n            letters.push(\"\
    B+\".to_string());\n        } else if grade >= 2.7 {\n            letters.push(\"\
    B\".to_string());\n        } else if grade >= 2.3 {\n            letters.push(\"\
    B-\".to_string());\n        } else if grade >= 2.0 {\n            letters.push(\"\
    C+\".to_string());\n        } else if grade >= 1.7 {\n            letters.push(\"\
    C\".to_string());\n        } else if grade >= 1.3 {\n            letters.push(\"\
    C-\".to_string());\n        } else if grade >= 1.0 {\n            letters.push(\"\
    D+\".to_string());\n        } else if grade >= 0.7 {\n            letters.push(\"\
    D\".to_string());\n        } else if grade >= 0.0 {\n            letters.push(\"\
    D-\".to_string());\n        } else {\n            letters.push(\"E\".to_string());\n\
    \        }\n    }\n    letters", '    grades.iter().map(|x| format!("{}", numerical_letter_grade_helper(*x))).collect()',
  "    let mut result = Vec::new();\n    for grade in grades {\n        let grade_letter\
    \ = match grade {\n            4.0 => \"A+\",\n            x if x > 3.7 => \"\
    A\",\n            x if x > 3.3 => \"A-\",\n            x if x > 3.0 => \"B+\"\
    ,\n            x if x > 2.7 => \"B\",\n            x if x > 2.3 => \"B-\",\n \
    \           x if x > 2.0 => \"C+\",\n            x if x > 1.7 => \"C\",\n    \
    \        x if x > 1.3 => \"C-\",\n            x if x > 1.0 => \"D+\",\n      \
    \      x if x > 0.7 => \"D\",\n            x if x > 0.0 => \"D-\",\n         \
    \   _ => \"E\",\n        };\n        result.push(grade_letter.to_string());\n\
    \    }\n    result", "    grades.iter().map(|x| {\n        let grade = match *x\
    \ {\n            _ if *x == 4.0 => \"A+\",\n            _ if *x > 3.7 => \"A\"\
    ,\n            _ if *x > 3.3 => \"A-\",\n            _ if *x > 3.0 => \"B+\",\n\
    \            _ if *x > 2.7 => \"B\",\n            _ if *x > 2.3 => \"B-\",\n \
    \           _ if *x > 2.0 => \"C+\",\n            _ if *x > 1.7 => \"C\",\n  \
    \          _ if *x > 1.3 => \"C-\",\n            _ if *x > 1.0 => \"D+\",\n  \
    \          _ if *x > 0.7 => \"D\",\n            _ if *x > 0.0 => \"D-\",\n   \
    \         _ => \"E\",\n        };\n        grade.to_string()\n    }).collect()",
  "    let mut res = Vec::new();\n    for mut grade in grades {\n        let mut letter\
    \ = String::new();\n        grade = (grade * 10.0).floor() / 10.0;\n        if\
    \ grade >= 4.0 {\n            letter.push_str(\"A+\");\n        } else if grade\
    \ >= 3.7 {\n            letter.push_str(\"A\");\n        } else if grade >= 3.3\
    \ {\n            letter.push_str(\"A-\");\n        } else if grade >= 3.0 {\n\
    \            letter.push_str(\"B+\");\n        } else if grade >= 2.7 {\n    \
    \        letter.push_str(\"B\");\n        } else if grade >= 2.3 {\n         \
    \   letter.push_str(\"B-\");\n        } else if grade >= 2.0 {\n            letter.push_str(\"\
    C+\");\n        } else if grade >= 1.7 {\n            letter.push_str(\"C\");\n\
    \        } else if grade >= 1.3 {\n            letter.push_str(\"C-\");\n    \
    \    } else if grade >= 1.0 {\n            letter.push_str(\"D+\");\n        }\
    \ else if grade >= 0.7 {\n            letter.push_str(\"D\");\n        } else\
    \ if grade >= 0.0 {\n            letter.push_str(\"D-\");\n        } else {\n\
    \            letter.push_str(\"E\");\n        }\n        res.push(letter);\n \
    \   }\n    res", "    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result", '    grades.iter().map(|g| g.to_string()).collect()', "   \
    \ grades.iter().map(|grade| {\n        if *grade > 4.0 {\n            \"A+\".to_string()\n\
    \        } else if *grade > 3.7 {\n            \"A\".to_string()\n        } else\
    \ if *grade > 3.3 {\n            \"A-\".to_string()\n        } else if *grade\
    \ > 3.0 {\n            \"B+\".to_string()\n        } else if *grade > 2.7 {\n\
    \            \"B\".to_string()\n        } else if *grade > 2.3 {\n           \
    \ \"B-\".to_string()\n        } else if *grade > 2.0 {\n            \"C+\".to_string()\n\
    \        } else if *grade > 1.7 {\n            \"C\".to_string()\n        } else\
    \ if *grade > 1.3 {\n            \"C-\".to_string()\n        } else if *grade\
    \ > 1.0 {\n            \"D+\".to_string()\n        } else if *grade > 0.7 {\n\
    \            \"D\".to_string()\n        } else if *grade > 0.0 {\n           \
    \ \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n      \
    \  }\n    }).collect()", "    let grades = grades\n        .iter()\n        .map(|grade|\
    \ match *grade {\n            x if x > 4.0 => Some(\"A+\"),\n            x if\
    \ x > 3.7 => Some(\"A\"),\n            x if x > 3.3 => Some(\"A-\"),\n       \
    \     x if x > 3.0 => Some(\"B+\"),\n            x if x > 2.7 => Some(\"B\"),\n\
    \            x if x > 2.3 => Some(\"B-\"),\n            x if x > 2.0 => Some(\"\
    C+\"),\n            x if x > 1.7 => Some(\"C\"),\n            x if x > 1.3 =>\
    \ Some(\"C-\"),\n            x if x > 1.0 => Some(\"D+\"),\n            x if x\
    \ > 0.7 => Some(\"D\"),\n            x if x > 0.0 => Some(\"D-\"),\n         \
    \   _ => Some(\"E\"),\n        })\n        .collect::<Vec<_>>();\n    grades.iter().map(|grade|\
    \ grade.unwrap().to_string()).collect()", "    grades.iter().map(|x| {\n     \
    \   if *x >= 4.0 {\n            \"A+\".to_string()\n        } else if *x >= 3.7\
    \ {\n            \"A\".to_string()\n        } else if *x >= 3.3 {\n          \
    \  \"A-\".to_string()\n        } else if *x >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *x >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *x >= 2.3 {\n            \"B-\".to_string()\n        } else if *x >= 2.0\
    \ {\n            \"C+\".to_string()\n        } else if *x >= 1.7 {\n         \
    \   \"C\".to_string()\n        } else if *x >= 1.3 {\n            \"C-\".to_string()\n\
    \        } else if *x >= 1.0 {\n            \"D+\".to_string()\n        } else\
    \ if *x >= 0.7 {\n            \"D\".to_string()\n        } else if *x >= 0.0 {\n\
    \            \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n\
    \        }\n    }).collect()", "    // Some logic here...\n    let mut result\
    \ = Vec::new();\n    for grade in grades.iter() {\n        let letter_grade =\
    \ match *grade {\n            4.0 => \"A+\",\n            v if v > 3.7 => \"A\"\
    ,\n            v if v > 3.3 => \"A-\",\n            v if v > 3.0 => \"B+\",\n\
    \            v if v > 2.7 => \"B\",\n            v if v > 2.3 => \"B-\",\n   \
    \         v if v > 2.0 => \"C+\",\n            v if v > 1.7 => \"C\",\n      \
    \      v if v > 1.3 => \"C-\",\n            v if v > 1.0 => \"D+\",\n        \
    \    v if v > 0.7 => \"D\",\n            v if v > 0.0 => \"D-\",\n           \
    \ _ => \"E\",\n        };\n        result.push(letter_grade.to_string());\n  \
    \  }\n    result", "    grades.iter().map(|grade| match *grade {\n        n if\
    \ n > 4.0 => String::from(\"A+\"),\n        n if n > 3.7 => String::from(\"A\"\
    ),\n        n if n > 3.3 => String::from(\"A-\"),\n        n if n > 3.0 => String::from(\"\
    B+\"),\n        n if n > 2.7 => String::from(\"B\"),\n        n if n > 2.3 =>\
    \ String::from(\"B-\"),\n        n if n > 2.0 => String::from(\"C+\"),\n     \
    \   n if n > 1.7 => String::from(\"C\"),\n        n if n > 1.3 => String::from(\"\
    C-\"),\n        n if n > 1.0 => String::from(\"D+\"),\n        n if n > 0.7 =>\
    \ String::from(\"D\"),\n        n if n > 0.0 => String::from(\"D-\"),\n      \
    \  _ => String::from(\"E\"),\n    }).collect()", "    grades.iter().map(|g| match\
    \ *g {\n        n if n >= 4.0 => \"A+\".to_string(),\n        n if n >= 3.7 =>\
    \ \"A\".to_string(),\n        n if n >= 3.3 => \"A-\".to_string(),\n        n\
    \ if n >= 3.0 => \"B+\".to_string(),\n        n if n >= 2.7 => \"B\".to_string(),\n\
    \        n if n >= 2.3 => \"B-\".to_string(),\n        n if n >= 2.0 => \"C+\"\
    .to_string(),\n        n if n >= 1.7 => \"C\".to_string(),\n        n if n >=\
    \ 1.3 => \"C-\".to_string(),\n        n if n >= 1.0 => \"D+\".to_string(),\n \
    \       n if n >= 0.7 => \"D\".to_string(),\n        n if n >= 0.0 => \"D-\".to_string(),\n\
    \        _ => \"E\".to_string(),\n    }).collect()", '    grades.iter().map(|&x|
    letter_grade(x)).collect()', '    unimplemented!()', "    let grades_letters =\
    \ vec![\n        (4.0, \"A+\"),\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n\
    \        (3.0, \"B+\"),\n        (2.7, \"B\"),\n        (2.3, \"B-\"),\n     \
    \   (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0,\
    \ \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"),\n    ];\n\n    grades\n\
    \        .iter()\n        .map(|grade| {\n            grades_letters\n       \
    \         .iter()\n                .find(|(num, _)| grade > num)\n           \
    \     .unwrap_or((&0.0, \"E\"))\n                .1\n                .to_string()\n\
    \        })\n        .collect()", "    grades.iter().map(|x|\n        match *x\
    \ {\n            4.0 => \"A+\",\n            x if x > 3.7 => \"A\",\n        \
    \    x if x > 3.3 => \"A-\",\n            x if x > 3.0 => \"B+\",\n          \
    \  x if x > 2.7 => \"B\",\n            x if x > 2.3 => \"B-\",\n            x\
    \ if x > 2.0 => \"C+\",\n            x if x > 1.7 => \"C\",\n            x if\
    \ x > 1.3 => \"C-\",\n            x if x > 1.0 => \"D+\",\n            x if x\
    \ > 0.7 => \"D\",\n            x if x > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        }\n    ).collect()", "    let grades_map = [\n        (4.0, String::from(\"\
    A+\")),\n        (3.7, String::from(\"A\")),\n        (3.3, String::from(\"A-\"\
    )),\n        (3.0, String::from(\"B+\")),\n        (2.7, String::from(\"B\")),\n\
    \        (2.3, String::from(\"B-\")),\n        (2.0, String::from(\"C+\")),\n\
    \        (1.7, String::from(\"C\")),\n        (1.3, String::from(\"C-\")),\n \
    \       (1.0, String::from(\"D+\")),\n        (0.7, String::from(\"D\")),\n  \
    \      (0.0, String::from(\"D-\")),\n    ];\n\n    let mut results = Vec::new();\n\
    \    for grade in grades {\n        for (numerical_grade, letter_grade) in grades_map.iter()\
    \ {\n            if grade >= *numerical_grade {\n                results.push(letter_grade.clone());\n\
    \                break;\n            }\n        }\n    }\n\n    results", "  \
    \  let mut grades_letter: Vec<String> = Vec::new();\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            grades_letter.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            grades_letter.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            grades_letter.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            grades_letter.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            grades_letter.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            grades_letter.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            grades_letter.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            grades_letter.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            grades_letter.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            grades_letter.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            grades_letter.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            grades_letter.push(\"D-\".to_string());\n\
    \        } else {\n            grades_letter.push(\"E\".to_string());\n      \
    \  }\n    }\n    grades_letter", "    grades.iter().map(|g| {\n        let gpa\
    \ = *g;\n        if gpa == 4.0 {\n            return \"A+\".to_string();\n   \
    \     } else if gpa > 3.7 {\n            return \"A\".to_string();\n        }\
    \ else if gpa > 3.3 {\n            return \"A-\".to_string();\n        } else\
    \ if gpa > 3.0 {\n            return \"B+\".to_string();\n        } else if gpa\
    \ > 2.7 {\n            return \"B\".to_string();\n        } else if gpa > 2.3\
    \ {\n            return \"B-\".to_string();\n        } else if gpa > 2.0 {\n \
    \           return \"C+\".to_string();\n        } else if gpa > 1.7 {\n      \
    \      return \"C\".to_string();\n        } else if gpa > 1.3 {\n            return\
    \ \"C-\".to_string();\n        } else if gpa > 1.0 {\n            return \"D+\"\
    .to_string();\n        } else if gpa > 0.7 {\n            return \"D\".to_string();\n\
    \        } else if gpa > 0.0 {\n            return \"D-\".to_string();\n     \
    \   } else {\n            return \"E\".to_string();\n        }\n    }).collect()",
  "    grades.iter().map(|g|\n        if *g >= 4.0 {\n            \"A+\".to_string()\n\
    \        } else if *g >= 3.7 {\n            \"A\".to_string()\n        } else\
    \ if *g >= 3.3 {\n            \"A-\".to_string()\n        } else if *g >= 3.0\
    \ {\n            \"B+\".to_string()\n        } else if *g >= 2.7 {\n         \
    \   \"B\".to_string()\n        } else if *g >= 2.3 {\n            \"B-\".to_string()\n\
    \        } else if *g >= 2.0 {\n            \"C+\".to_string()\n        } else\
    \ if *g >= 1.7 {\n            \"C\".to_string()\n        } else if *g >= 1.3 {\n\
    \            \"C-\".to_string()\n        } else if *g >= 1.0 {\n            \"\
    D+\".to_string()\n        } else if *g >= 0.7 {\n            \"D\".to_string()\n\
    \        } else if *g >= 0.0 {\n            \"D-\".to_string()\n        } else\
    \ {\n            \"E\".to_string()\n        }\n    ).collect()", '    unimplemented!();',
  "    let mut letters = Vec::new();\n    for g in grades {\n        letters.push(\n\
    \            match g {\n                4.0 => \"A+\",\n                _ if g\
    \ > 3.7 => \"A\",\n                _ if g > 3.3 => \"A-\",\n                _\
    \ if g > 3.0 => \"B+\",\n                _ if g > 2.7 => \"B\",\n            \
    \    _ if g > 2.3 => \"B-\",\n                _ if g > 2.0 => \"C+\",\n      \
    \          _ if g > 1.7 => \"C\",\n                _ if g > 1.3 => \"C-\",\n \
    \               _ if g > 1.0 => \"D+\",\n                _ if g > 0.7 => \"D\"\
    ,\n                _ if g > 0.0 => \"D-\",\n                _ => \"E\",\n    \
    \        }.to_string(),\n        );\n    }\n    letters", '    unimplemented!()',
  "    let letter_grades = [\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"\
    B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"];\n    let gpa_ranges = vec![\n   \
    \     (0.0, 0.7),\n        (0.7, 1.0),\n        (1.0, 1.3),\n        (1.3, 1.7),\n\
    \        (1.7, 2.0),\n        (2.0, 2.3),\n        (2.3, 2.7),\n        (2.7,\
    \ 3.0),\n        (3.0, 3.3),\n        (3.3, 3.7),\n        (3.7, 4.0),\n     \
    \   (4.0, 4.1),\n    ];\n    grades\n        .iter()\n        .map(|g| {\n   \
    \         gpa_ranges\n                .iter()\n                .zip(letter_grades.iter())\n\
    \                .find(|(range, _)| g >= &range.0 && g < &range.1)\n         \
    \       .map(|(_, grade)| grade.to_string())\n                .unwrap_or_else(||\
    \ \"Invalid Grade\".to_string())\n        })\n        .collect()", "    grades.iter().map(|grade|\
    \ {\n        let rounded_grade = (*grade * 10.0).round() / 10.0;\n        match\
    \ rounded_grade {\n            4.0 => \"A+\".to_string(),\n            _ if rounded_grade\
    \ > 3.7 => \"A\".to_string(),\n            _ if rounded_grade > 3.3 => \"A-\"\
    .to_string(),\n            _ if rounded_grade > 3.0 => \"B+\".to_string(),\n \
    \           _ if rounded_grade > 2.7 => \"B\".to_string(),\n            _ if rounded_grade\
    \ > 2.3 => \"B-\".to_string(),\n            _ if rounded_grade > 2.0 => \"C+\"\
    .to_string(),\n            _ if rounded_grade > 1.7 => \"C\".to_string(),\n  \
    \          _ if rounded_grade > 1.3 => \"C-\".to_string(),\n            _ if rounded_grade\
    \ > 1.0 => \"D+\".to_string(),\n            _ if rounded_grade > 0.7 => \"D\"\
    .to_string(),\n            _ if rounded_grade > 0.0 => \"D-\".to_string(),\n \
    \           _ => \"E\".to_string(),\n        }\n    }).collect()", "    let mut\
    \ output = Vec::new();\n    for grade in grades {\n        if grade == 4.0 {\n\
    \            output.push(\"A+\".to_string());\n        } else if grade > 3.7 {\n\
    \            output.push(\"A\".to_string());\n        } else if grade > 3.3 {\n\
    \            output.push(\"A-\".to_string());\n        } else if grade > 3.0 {\n\
    \            output.push(\"B+\".to_string());\n        } else if grade > 2.7 {\n\
    \            output.push(\"B\".to_string());\n        } else if grade > 2.3 {\n\
    \            output.push(\"B-\".to_string());\n        } else if grade > 2.0 {\n\
    \            output.push(\"C+\".to_string());\n        } else if grade > 1.7 {\n\
    \            output.push(\"C\".to_string());\n        } else if grade > 1.3 {\n\
    \            output.push(\"C-\".to_string());\n        } else if grade > 1.0 {\n\
    \            output.push(\"D+\".to_string());\n        } else if grade > 0.7 {\n\
    \            output.push(\"D\".to_string());\n        } else if grade > 0.0 {\n\
    \            output.push(\"D-\".to_string());\n        } else {\n            output.push(\"\
    E\".to_string());\n        }\n    }\n    output", "    let letter_grades = [\n\
    \        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\",\
    \ \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let grade_values = [4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    let mut result = Vec::new();\n\
    \    for grade in grades {\n        for (i, value) in grade_values.iter().enumerate()\
    \ {\n            if grade >= *value {\n                result.push(letter_grades[i].to_string());\n\
    \                break;\n            }\n        }\n    }\n    result", "    let\
    \ threshold = [\n        (4.0, \"A+\"),\n        (3.7, \"A\"),\n        (3.3,\
    \ \"A-\"),\n        (3.0, \"B+\"),\n        (2.7, \"B\"),\n        (2.3, \"B-\"\
    ),\n        (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3, \"C-\"),\n  \
    \      (1.0, \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"),\n    ];\n\
    \    let mut ret: Vec<String> = Vec::new();\n    for grade in grades {\n     \
    \   for (v, g) in threshold.iter() {\n            if grade >= *v {\n         \
    \       ret.push(g.to_string());\n                break;\n            }\n    \
    \    }\n    }\n    ret", "    let mut result = Vec::new();\n    for i in grades.iter()\
    \ {\n        if i >= &4.0 {\n            result.push(\"A+\".to_string());\n  \
    \      } else if i >= &3.7 {\n            result.push(\"A\".to_string());\n  \
    \      } else if i >= &3.3 {\n            result.push(\"A-\".to_string());\n \
    \       } else if i >= &3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if i >= &2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if i >= &2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if i >= &2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if i >= &1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if i >= &1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if i >= &1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if i >= &0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if i >= &0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result", "    let mut result = Vec::new();\n    for i in grades {\n\
    \        if i == 4.0 {\n            result.push(\"A+\".to_string());\n       \
    \ } else if i > 3.7 {\n            result.push(\"A\".to_string());\n        }\
    \ else if i > 3.3 {\n            result.push(\"A-\".to_string());\n        } else\
    \ if i > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if\
    \ i > 2.7 {\n            result.push(\"B\".to_string());\n        } else if i\
    \ > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if i >\
    \ 2.0 {\n            result.push(\"C+\".to_string());\n        } else if i > 1.7\
    \ {\n            result.push(\"C\".to_string());\n        } else if i > 1.3 {\n\
    \            result.push(\"C-\".to_string());\n        } else if i > 1.0 {\n \
    \           result.push(\"D+\".to_string());\n        } else if i > 0.7 {\n  \
    \          result.push(\"D\".to_string());\n        } else if i > 0.0 {\n    \
    \        result.push(\"D-\".to_string());\n        } else {\n            result.push(\"\
    E\".to_string());\n        }\n    }\n    result", "    let mut letter_grades =\
    \ Vec::new();\n    for g in grades {\n        if g == 4.0 {\n            letter_grades.push(\"\
    A+\".to_string());\n        } else if g > 3.7 {\n            letter_grades.push(\"\
    A\".to_string());\n        } else if g > 3.3 {\n            letter_grades.push(\"\
    A-\".to_string());\n        } else if g > 3.0 {\n            letter_grades.push(\"\
    B+\".to_string());\n        } else if g > 2.7 {\n            letter_grades.push(\"\
    B\".to_string());\n        } else if g > 2.3 {\n            letter_grades.push(\"\
    B-\".to_string());\n        } else if g > 2.0 {\n            letter_grades.push(\"\
    C+\".to_string());\n        } else if g > 1.7 {\n            letter_grades.push(\"\
    C\".to_string());\n        } else if g > 1.3 {\n            letter_grades.push(\"\
    C-\".to_string());\n        } else if g > 1.0 {\n            letter_grades.push(\"\
    D+\".to_string());\n        } else if g > 0.7 {\n            letter_grades.push(\"\
    D\".to_string());\n        } else if g > 0.0 {\n            letter_grades.push(\"\
    D-\".to_string());\n        } else {\n            letter_grades.push(\"E\".to_string());\n\
    \        }\n    }\n    letter_grades", "    let mut output: Vec<String> = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            output.push(\"\
    A+\".to_string());\n        } else if grade >= 3.7 {\n            output.push(\"\
    A\".to_string());\n        } else if grade >= 3.3 {\n            output.push(\"\
    A-\".to_string());\n        } else if grade >= 3.0 {\n            output.push(\"\
    B+\".to_string());\n        } else if grade >= 2.7 {\n            output.push(\"\
    B\".to_string());\n        } else if grade >= 2.3 {\n            output.push(\"\
    B-\".to_string());\n        } else if grade >= 2.0 {\n            output.push(\"\
    C+\".to_string());\n        } else if grade >= 1.7 {\n            output.push(\"\
    C\".to_string());\n        } else if grade >= 1.3 {\n            output.push(\"\
    C-\".to_string());\n        } else if grade >= 1.0 {\n            output.push(\"\
    D+\".to_string());\n        } else if grade >= 0.7 {\n            output.push(\"\
    D\".to_string());\n        } else if grade >= 0.0 {\n            output.push(\"\
    D-\".to_string());\n        } else {\n            output.push(\"E\".to_string());\n\
    \        }\n    }\n    output", "    let mut result = Vec::new();\n    for i in\
    \ grades {\n        match i {\n            4.0 => result.push(\"A+\".to_string()),\n\
    \            _ if i > 3.7 => result.push(\"A\".to_string()),\n            _ if\
    \ i > 3.3 => result.push(\"A-\".to_string()),\n            _ if i > 3.0 => result.push(\"\
    B+\".to_string()),\n            _ if i > 2.7 => result.push(\"B\".to_string()),\n\
    \            _ if i > 2.3 => result.push(\"B-\".to_string()),\n            _ if\
    \ i > 2.0 => result.push(\"C+\".to_string()),\n            _ if i > 1.7 => result.push(\"\
    C\".to_string()),\n            _ if i > 1.3 => result.push(\"C-\".to_string()),\n\
    \            _ if i > 1.0 => result.push(\"D+\".to_string()),\n            _ if\
    \ i > 0.7 => result.push(\"D\".to_string()),\n            _ if i > 0.0 => result.push(\"\
    D-\".to_string()),\n            _ => result.push(\"E\".to_string()),\n       \
    \ }\n    }\n    result", "  let grade_map = [\n    (4.0, \"A+\"),\n    (3.7, \"\
    A\"),\n    (3.3, \"A-\"),\n    (3.0, \"B+\"),\n    (2.7, \"B\"),\n    (2.3, \"\
    B-\"),\n    (2.0, \"C+\"),\n    (1.7, \"C\"),\n    (1.3, \"C-\"),\n    (1.0, \"\
    D+\"),\n    (0.7, \"D\"),\n    (0.0, \"D-\"),\n  ];\n  let mut result = Vec::with_capacity(grades.len());\n\
    \  for grade in grades {\n    let grade_letter = grade_map.iter().find(|&&(g,\
    \ _)| g <= grade).unwrap();\n    result.push(grade_letter.1.to_string());\n  }\n\
    \  result", "    let v: Vec<&str> = vec![\"F\", \"D-\", \"D\", \"D+\", \"C-\"\
    , \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"];\n    let mut lst:\
    \ Vec<f64> = vec![];\n    let mut answer: Vec<String> = vec![];\n    let mut count:\
    \ i32 = 0;\n    for i in grades {\n        lst.push(i);\n    }\n    lst.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for mut i in 0..lst.len() {\n        if\
    \ lst[i] == 4.0 {\n            answer.push(v[12].to_string());\n        } else\
    \ if lst[i] > 3.7 {\n            answer.push(v[11].to_string());\n        } else\
    \ if lst[i] > 3.3 {\n            answer.push(v[10].to_string());\n        } else\
    \ if lst[i] > 3.0 {\n            answer.push(v[9].to_string());\n        } else\
    \ if lst[i] > 2.7 {\n            answer.push(v[8].to_string());\n        } else\
    \ if lst[i] > 2.3 {\n            answer.push(v[7].to_string());\n        } else\
    \ if lst[i] > 2.0 {\n            answer.push(v[6].to_string());\n        } else\
    \ if lst[i] > 1.7 {\n            answer.push(v[5].to_string());\n        } else\
    \ if lst[i] > 1.3 {\n            answer.push(v[4].to_string());\n        } else\
    \ if lst[i] > 1.0 {\n            answer.push(v[3].to_string());\n        } else\
    \ if lst[i] > 0.7 {\n            answer.push(v[2].to_string());\n        } else\
    \ if lst[i] > 0.0 {\n            answer.push(v[1].to_string());\n        } else",
  "    let mut letter_grades = Vec::new();\n    for grade in grades {\n        if\
    \ grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n      \
    \  } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades", '    grades.iter().map(|g| grade_to_string(*g)).collect()',
  "    let mut result: Vec<String> = Vec::new();\n    for grade in grades {\n    \
    \    if grade == 4.0 {\n            result.push(\"A+\".to_string());\n       \
    \ } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n     \
    \   } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n  \
    \      } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result", "    // Write your code here\n    grades.iter().map(|x| match\
    \ *x {\n        4.0 => \"A+\",\n        x if x > 3.7 => \"A\",\n        x if x\
    \ > 3.3 => \"A-\",\n        x if x > 3.0 => \"B+\",\n        x if x > 2.7 => \"\
    B\",\n        x if x > 2.3 => \"B-\",\n        x if x > 2.0 => \"C+\",\n     \
    \   x if x > 1.7 => \"C\",\n        x if x > 1.3 => \"C-\",\n        x if x >\
    \ 1.0 => \"D+\",\n        x if x > 0.7 => \"D\",\n        x if x > 0.0 => \"D-\"\
    ,\n        _ => \"E\",\n    }).collect()", "    grades.iter().map(|&g| {\n   \
    \     let a_4_0 = \"A+\";\n        let a_3_7 = \"A\";\n        let a_3_3 = \"\
    A-\";\n        let b_3_0 = \"B+\";\n        let b_2_7 = \"B\";\n        let b_2_3\
    \ = \"B-\";\n        let c_2_0 = \"C+\";\n        let c_1_7 = \"C\";\n       \
    \ let c_1_3 = \"C-\";\n        let d_1_0 = \"D+\";\n        let d_0_7 = \"D\"\
    ;\n        let d_0_0 = \"D-\";\n        let e_0_0 = \"E\";\n        if g == 4.0\
    \ {\n            a_4_0.to_string()\n        } else if g >= 3.7 {\n           \
    \ a_3_7.to_string()\n        } else if g >= 3.3 {\n            a_3_3.to_string()\n\
    \        } else if g >= 3.0 {\n            b_3_0.to_string()\n        } else if\
    \ g >= 2.7 {\n            b_2_7.to_string()\n        } else if g >= 2.3 {\n  \
    \          b_2_3.to_string()\n        } else if g >= 2.0 {\n            c_2_0.to_string()\n\
    \        } else if g >= 1.7 {\n            c_1_7.to_string()\n        } else if\
    \ g >= 1.3 {\n            c_1_3.to_string()\n        } else if g >= 1.0 {\n  \
    \          d_1_0.to_string()\n        } else if g >= 0.7 {\n            d_0_7.to_string()\n\
    \        } else if g >= 0.0 {\n            d_0_0.to_string()\n        } else {\n\
    \            e_0_0.to_string()\n        }\n    }).collect()", "    let mut result\
    \ = Vec::new();\n    for grade in grades {\n        if grade > 4.0 {\n       \
    \     result.push(\"A+\".to_string());\n        } else if grade > 3.7 {\n    \
    \        result.push(\"A\".to_string());\n        } else if grade > 3.3 {\n  \
    \          result.push(\"A-\".to_string());\n        } else if grade > 3.0 {\n\
    \            result.push(\"B+\".to_string());\n        } else if grade > 2.7 {\n\
    \            result.push(\"B\".to_string());\n        } else if grade > 2.3 {\n\
    \            result.push(\"B-\".to_string());\n        } else if grade > 2.0 {\n\
    \            result.push(\"C+\".to_string());\n        } else if grade > 1.7 {\n\
    \            result.push(\"C\".to_string());\n        } else if grade > 1.3 {\n\
    \            result.push(\"C-\".to_string());\n        } else if grade > 1.0 {\n\
    \            result.push(\"D+\".to_string());\n        } else if grade > 0.7 {\n\
    \            result.push(\"D\".to_string());\n        } else if grade > 0.0 {\n\
    \            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"\
    E\".to_string());\n        }\n    }\n    result", "    grades.iter().map(|x| match\
    \ *x {\n        a if a == 4.0 => \"A+\".to_string(),\n        a if a > 3.7 =>\
    \ \"A\".to_string(),\n        a if a > 3.3 => \"A-\".to_string(),\n        a if\
    \ a > 3.0 => \"B+\".to_string(),\n        a if a > 2.7 => \"B\".to_string(),\n\
    \        a if a > 2.3 => \"B-\".to_string(),\n        a if a > 2.0 => \"C+\".to_string(),\n\
    \        a if a > 1.7 => \"C\".to_string(),\n        a if a > 1.3 => \"C-\".to_string(),\n\
    \        a if a > 1.0 => \"D+\".to_string(),\n        a if a > 0.7 => \"D\".to_string(),\n\
    \        a if a > 0.0 => \"D-\".to_string(),\n        _ => \"E\".to_string(),\n\
    \    }).collect()", "    grades.iter().map(|g| {\n        let s = if *g > 3.7\
    \ {\n            \"A+\"\n        } else if *g > 3.3 {\n            \"A\"\n   \
    \     } else if *g > 3.0 {\n            \"A-\"\n        } else if *g > 2.7 {\n\
    \            \"B+\"\n        } else if *g > 2.3 {\n            \"B\"\n       \
    \ } else if *g > 2.0 {\n            \"B-\"\n        } else if *g > 1.7 {\n   \
    \         \"C+\"\n        } else if *g > 1.3 {\n            \"C\"\n        } else\
    \ if *g > 1.0 {\n            \"C-\"\n        } else if *g > 0.7 {\n          \
    \  \"D+\"\n        } else if *g > 0.0 {\n            \"D\"\n        } else if\
    \ *g > 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n      \
    \  };\n        String::from(s)\n    }).collect()", "    let mut grades_to_return\
    \ = Vec::new();\n    for grade in grades {\n        let grade_string = match grade\
    \ {\n            4.0 => \"A+\",\n            3.7..=std::f64::MAX => \"A\",\n \
    \           3.3..=3.7 => \"A-\",\n            3.0..=3.3 => \"B+\",\n         \
    \   2.7..=3.0 => \"B\",\n            2.3..=2.7 => \"B-\",\n            2.0..=2.3\
    \ => \"C+\",\n            1.7..=2.0 => \"C\",\n            1.3..=1.7 => \"C-\"\
    ,\n            1.0..=1.3 => \"D+\",\n            0.7..=1.0 => \"D\",\n       \
    \     0.0..=0.7 => \"D-\",\n            0.0 => \"E\",\n            _ => \"\"\n\
    \        };\n        grades_to_return.push(grade_string.to_string());\n    }\n\
    \    grades_to_return", "    let mut new_vec = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            new_vec.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            new_vec.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            new_vec.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            new_vec.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            new_vec.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            new_vec.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            new_vec.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            new_vec.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            new_vec.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            new_vec.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            new_vec.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            new_vec.push(\"D-\".to_string());\n\
    \        } else {\n            new_vec.push(\"E\".to_string());\n        }\n \
    \   }\n    new_vec", "    let mut res = Vec::new();\n    for grade in grades {\n\
    \        res.push(if grade >= 4.0 { \"A+\".to_string() }\n                 else\
    \ if grade >= 3.7 { \"A\".to_string() }\n                 else if grade >= 3.3\
    \ { \"A-\".to_string() }\n                 else if grade >= 3.0 { \"B+\".to_string()\
    \ }\n                 else if grade >= 2.7 { \"B\".to_string() }\n           \
    \      else if grade >= 2.3 { \"B-\".to_string() }\n                 else if grade\
    \ >= 2.0 { \"C+\".to_string() }\n                 else if grade >= 1.7 { \"C\"\
    .to_string() }\n                 else if grade >= 1.3 { \"C-\".to_string() }\n\
    \                 else if grade >= 1.0 { \"D+\".to_string() }\n              \
    \   else if grade >= 0.7 { \"D\".to_string() }\n                 else if grade\
    \ >= 0.0 { \"D-\".to_string() }\n                 else { \"E\".to_string() });\n\
    \    }\n    res", "    let mut converted_grades = Vec::new();\n    for grade in\
    \ grades {\n        let mut letter = String::new();\n        if grade == 4.0 {\n\
    \            letter = \"A+\".to_string();\n        } else if grade > 3.7 {\n \
    \           letter = \"A\".to_string();\n        } else if grade > 3.3 {\n   \
    \         letter = \"A-\".to_string();\n        } else if grade > 3.0 {\n    \
    \        letter = \"B+\".to_string();\n        } else if grade > 2.7 {\n     \
    \       letter = \"B\".to_string();\n        } else if grade > 2.3 {\n       \
    \     letter = \"B-\".to_string();\n        } else if grade > 2.0 {\n        \
    \    letter = \"C+\".to_string();\n        } else if grade > 1.7 {\n         \
    \   letter = \"C\".to_string();\n        } else if grade > 1.3 {\n           \
    \ letter = \"C-\".to_string();\n        } else if grade > 1.0 {\n            letter\
    \ = \"D+\".to_string();\n        } else if grade > 0.7 {\n            letter =\
    \ \"D\".to_string();\n        } else if grade > 0.0 {\n            letter = \"\
    D-\".to_string();\n        } else {\n            letter = \"E\".to_string();\n\
    \        }\n        converted_grades.push(letter);\n    }\n    converted_grades",
  "    let mut letter_grades = Vec::new();\n    for grade in grades {\n        if\
    \ grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n      \
    \  } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades", "    let formula = |x: f64| -> String {\n   \
    \     let mut temp = (x * 10.0).round() / 10.0;\n        if temp > 4.0 {\n   \
    \         temp = 4.0;\n        }\n        match temp {\n            4.0 => \"\
    A+\".to_string(),\n            x if x > 3.7 => \"A\".to_string(),\n          \
    \  x if x > 3.3 => \"A-\".to_string(),\n            x if x > 3.0 => \"B+\".to_string(),\n\
    \            x if x > 2.7 => \"B\".to_string(),\n            x if x > 2.3 => \"\
    B-\".to_string(),\n            x if x > 2.0 => \"C+\".to_string(),\n         \
    \   x if x > 1.7 => \"C\".to_string(),\n            x if x > 1.3 => \"C-\".to_string(),\n\
    \            x if x > 1.0 => \"D+\".to_string(),\n            x if x > 0.7 =>\
    \ \"D\".to_string(),\n            x if x > 0.0 => \"D-\".to_string(),\n      \
    \      _ => \"E\".to_string(),\n        }\n    };\n    grades.iter().map(|x| formula(*x)).collect()",
  "    // Your code goes here!\n    // Return a vector of strings!", "    let letter_grades\
    \ = vec![\n        ('A+', 4.0),\n        ('A', 3.7),\n        ('A-', 3.3),\n \
    \       ('B+', 3.0),\n        ('B', 2.7),\n        ('B-', 2.3),\n        ('C+',\
    \ 2.0),\n        ('C', 1.7),\n        ('C-', 1.3),\n        ('D+', 1.0),\n   \
    \     ('D', 0.7),\n        ('D-', 0.0),\n        ('E', 0.0),\n    ];\n    grades\n\
    \        .iter()\n        .map(|grade| {\n            letter_grades\n        \
    \        .iter()\n                .find(|&&(_, comparison)| grade >= &comparison)\n\
    \                .map(|(letter, _)| letter.to_string())\n                .unwrap_or_else(||\
    \ \"ERROR\".to_string())\n        })\n        .collect()", "    grades.iter().map(|g|\
    \ {\n        match *g {\n            4.0 => \"A+\",\n            g if g > 3.7\
    \ => \"A\",\n            g if g > 3.3 => \"A-\",\n            g if g > 3.0 =>\
    \ \"B+\",\n            g if g > 2.7 => \"B\",\n            g if g > 2.3 => \"\
    B-\",\n            g if g > 2.0 => \"C+\",\n            g if g > 1.7 => \"C\"\
    ,\n            g if g > 1.3 => \"C-\",\n            g if g > 1.0 => \"D+\",\n\
    \            g if g > 0.7 => \"D\",\n            g if g > 0.0 => \"D-\",\n   \
    \         _ => \"E\",\n        }\n    }).collect()", "    // Write your code here\n\
    \    let mut result = Vec::new();\n    for grade in grades {\n        if grade\
    \ > 4.0 {\n            result.push(\"A+\".to_string());\n        } else if grade\
    \ >= 3.7 {\n            result.push(\"A\".to_string());\n        } else if grade\
    \ >= 3.3 {\n            result.push(\"A-\".to_string());\n        } else if grade\
    \ >= 3.0 {\n            result.push(\"B+\".to_string());\n        } else if grade\
    \ >= 2.7 {\n            result.push(\"B\".to_string());\n        } else if grade\
    \ >= 2.3 {\n            result.push(\"B-\".to_string());\n        } else if grade\
    \ >= 2.0 {\n            result.push(\"C+\".to_string());\n        } else if grade\
    \ >= 1.7 {\n            result.push(\"C\".to_string());\n        } else if grade\
    \ >= 1.3 {\n            result.push(\"C-\".to_string());\n        } else if grade\
    \ >= 1.0 {\n            result.push(\"D+\".to_string());\n        } else if grade\
    \ >= 0.7 {\n            result.push(\"D\".to_string());\n        } else if grade\
    \ >= 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n \
    \           result.push(\"E\".to_string());\n        }\n    }\n    result", " \
    \   grades.iter().map(|x| match *x {\n        4.0 => \"A+\",\n        x if x >\
    \ 3.7 => \"A\",\n        x if x > 3.3 => \"A-\",\n        x if x > 3.0 => \"B+\"\
    ,\n        x if x > 2.7 => \"B\",\n        x if x > 2.3 => \"B-\",\n        x\
    \ if x > 2.0 => \"C+\",\n        x if x > 1.7 => \"C\",\n        x if x > 1.3\
    \ => \"C-\",\n        x if x > 1.0 => \"D+\",\n        x if x > 0.7 => \"D\",\n\
    \        x if x > 0.0 => \"D-\",\n        _ => \"E\",\n    }).collect()", '    unimplemented!()',
  "    let mut result = Vec::new();\n    for grade in grades {\n        if grade >=\
    \ 4.0 {\n            result.push(\"A+\".to_string());\n        } else if grade\
    \ >= 3.7 {\n            result.push(\"A\".to_string());\n        } else if grade\
    \ >= 3.3 {\n            result.push(\"A-\".to_string());\n        } else if grade\
    \ >= 3.0 {\n            result.push(\"B+\".to_string());\n        } else if grade\
    \ >= 2.7 {\n            result.push(\"B\".to_string());\n        } else if grade\
    \ >= 2.3 {\n            result.push(\"B-\".to_string());\n        } else if grade\
    \ >= 2.0 {\n            result.push(\"C+\".to_string());\n        } else if grade\
    \ >= 1.7 {\n            result.push(\"C\".to_string());\n        } else if grade\
    \ >= 1.3 {\n            result.push(\"C-\".to_string());\n        } else if grade\
    \ >= 1.0 {\n            result.push(\"D+\".to_string());\n        } else if grade\
    \ >= 0.7 {\n            result.push(\"D\".to_string());\n        } else if grade\
    \ >= 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n \
    \           result.push(\"E\".to_string());\n        }\n    }\n    result", " \
    \   let mut transformed_grades: Vec<String> = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            transformed_grades.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            transformed_grades.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            transformed_grades.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            transformed_grades.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            transformed_grades.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            transformed_grades.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            transformed_grades.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            transformed_grades.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            transformed_grades.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            transformed_grades.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            transformed_grades.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            transformed_grades.push(\"D-\".to_string());\n\
    \        } else {\n            transformed_grades.push(\"E\".to_string());\n \
    \       }\n    }\n    transformed_grades", "    grades.iter().map(|&grade| match\
    \ grade {\n        4.0 => \"A+\",\n        grade if grade > 3.7 => \"A\",\n  \
    \      grade if grade > 3.3 => \"A-\",\n        grade if grade > 3.0 => \"B+\"\
    ,\n        grade if grade > 2.7 => \"B\",\n        grade if grade > 2.3 => \"\
    B-\",\n        grade if grade > 2.0 => \"C+\",\n        grade if grade > 1.7 =>\
    \ \"C\",\n        grade if grade > 1.3 => \"C-\",\n        grade if grade > 1.0\
    \ => \"D+\",\n        grade if grade > 0.7 => \"D\",\n        grade if grade >\
    \ 0.0 => \"D-\",\n        _ => \"E\",\n    }).collect()", "    grades.iter().map(|g|\
    \ match *g {\n        g if g >= 4.0 => \"A+\".to_string(),\n        g if g >=\
    \ 3.7 => \"A\".to_string(),\n        g if g >= 3.3 => \"A-\".to_string(),\n  \
    \      g if g >= 3.0 => \"B+\".to_string(),\n        g if g >= 2.7 => \"B\".to_string(),\n\
    \        g if g >= 2.3 => \"B-\".to_string(),\n        g if g >= 2.0 => \"C+\"\
    .to_string(),\n        g if g >= 1.7 => \"C\".to_string(),\n        g if g >=\
    \ 1.3 => \"C-\".to_string(),\n        g if g >= 1.0 => \"D+\".to_string(),\n \
    \       g if g >= 0.7 => \"D\".to_string(),\n        g if g >= 0.0 => \"D-\".to_string(),\n\
    \        _ => \"E\".to_string(),\n    }).collect()", "    let mut result = Vec::new();\n\
    \    for item in grades {\n        if item >= 4.0 {\n            result.push(\"\
    A+\".to_string());\n        } else if item >= 3.7 {\n            result.push(\"\
    A\".to_string());\n        } else if item >= 3.3 {\n            result.push(\"\
    A-\".to_string());\n        } else if item >= 3.0 {\n            result.push(\"\
    B+\".to_string());\n        } else if item >= 2.7 {\n            result.push(\"\
    B\".to_string());\n        } else if item >= 2.3 {\n            result.push(\"\
    B-\".to_string());\n        } else if item >= 2.0 {\n            result.push(\"\
    C+\".to_string());\n        } else if item >= 1.7 {\n            result.push(\"\
    C\".to_string());\n        } else if item >= 1.3 {\n            result.push(\"\
    C-\".to_string());\n        } else if item >= 1.0 {\n            result.push(\"\
    D+\".to_string());\n        } else if item >= 0.7 {\n            result.push(\"\
    D\".to_string());\n        } else if item >= 0.0 {\n            result.push(\"\
    D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n\
    \        }\n    }\n    result", "    grades.iter().map(|g| {\n        if *g >=\
    \ 4.0 {\n            \"A+\".to_string()\n        } else if *g >= 3.7 {\n     \
    \       \"A\".to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()", "    let letter_grades = vec![\n        \"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"\n    ];\n    let intervals = vec![\n        4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0\n    ];\n    let mut letter_grades_vec = Vec::new();\n\
    \    for grade in grades {\n        for (i, interval) in intervals.iter().enumerate()\
    \ {\n            if grade >= *interval {\n                letter_grades_vec.push(letter_grades[i].to_string());\n\
    \                break;\n            }\n        }\n    }\n    letter_grades_vec",
  "    grades.iter().map(|g| match *g {\n        _ if *g >= 4.0 => \"A+\".to_string(),\n\
    \        _ if *g >= 3.7 => \"A\".to_string(),\n        _ if *g >= 3.3 => \"A-\"\
    .to_string(),\n        _ if *g >= 3.0 => \"B+\".to_string(),\n        _ if *g\
    \ >= 2.7 => \"B\".to_string(),\n        _ if *g >= 2.3 => \"B-\".to_string(),\n\
    \        _ if *g >= 2.0 => \"C+\".to_string(),\n        _ if *g >= 1.7 => \"C\"\
    .to_string(),\n        _ if *g >= 1.3 => \"C-\".to_string(),\n        _ if *g\
    \ >= 1.0 => \"D+\".to_string(),\n        _ if *g >= 0.7 => \"D\".to_string(),\n\
    \        _ if *g >= 0.0 => \"D-\".to_string(),\n        _ => \"E\".to_string(),\n\
    \    }).collect()", "    let mut letter_grades = Vec::new();\n    for i in 0..grades.len()\
    \ {\n        if grades[i] >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grades[i] >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grades[i] >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grades[i] >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grades[i] >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grades[i] >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grades[i] >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grades[i] >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grades[i] >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grades[i] >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grades[i] >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grades[i] >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades", "    grades.iter().map(|x| match *x {\n     \
    \   4.0 => \"A+\",\n        g if g > 3.7 => \"A\",\n        g if g > 3.3 => \"\
    A-\",\n        g if g > 3.0 => \"B+\",\n        g if g > 2.7 => \"B\",\n     \
    \   g if g > 2.3 => \"B-\",\n        g if g > 2.0 => \"C+\",\n        g if g >\
    \ 1.7 => \"C\",\n        g if g > 1.3 => \"C-\",\n        g if g > 1.0 => \"D+\"\
    ,\n        g if g > 0.7 => \"D\",\n        g if g > 0.0 => \"D-\",\n        _\
    \ => \"E\",\n    }).collect()", "    let letter_grades = vec![\n        (4.0,\
    \ String::from(\"A+\")),\n        (3.7, String::from(\"A\")),\n        (3.3, String::from(\"\
    A-\")),\n        (3.0, String::from(\"B+\")),\n        (2.7, String::from(\"B\"\
    )),\n        (2.3, String::from(\"B-\")),\n        (2.0, String::from(\"C+\")),\n\
    \        (1.7, String::from(\"C\")),\n        (1.3, String::from(\"C-\")),\n \
    \       (1.0, String::from(\"D+\")),\n        (0.7, String::from(\"D\")),\n  \
    \      (0.0, String::from(\"D-\")),\n    ];\n\n    let mut result = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade < 0.0 {\n            result.push(String::from(\"\
    E\"));\n        } else {\n            for (gradepoint, lettergrade) in letter_grades.iter()\
    \ {\n                if grade >= *gradepoint {\n                    result.push(lettergrade.clone());\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    result", "    let mut string_grades = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            string_grades.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            string_grades.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            string_grades.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            string_grades.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            string_grades.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            string_grades.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            string_grades.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            string_grades.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            string_grades.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            string_grades.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            string_grades.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            string_grades.push(\"D-\".to_string());\n\
    \        } else {\n            string_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    string_grades", "    grades.iter().map(|g| {\n        match *g\
    \ {\n            4.0...std::f64::INFINITY => \"A+\".to_string(),\n           \
    \ 3.7...4.0 => \"A\".to_string(),\n            3.3...3.7 => \"A-\".to_string(),\n\
    \            3.0...3.3 => \"B+\".to_string(),\n            2.7...3.0 => \"B\"\
    .to_string(),\n            2.3...2.7 => \"B-\".to_string(),\n            2.0...2.3\
    \ => \"C+\".to_string(),\n            1.7...2.0 => \"C\".to_string(),\n      \
    \      1.3...1.7 => \"C-\".to_string(),\n            1.0...1.3 => \"D+\".to_string(),\n\
    \            0.7...1.0 => \"D\".to_string(),\n            0.0...0.7 => \"D-\"\
    .to_string(),\n            _ => \"E\".to_string(),\n        }\n    }).collect()",
  '    unimplemented!()', "    grades.iter().map(|&grade| match grade {\n        4.0\
    \ => String::from(\"A+\"),\n        _ if grade > 3.7 => String::from(\"A\"),\n\
    \        _ if grade > 3.3 => String::from(\"A-\"),\n        _ if grade > 3.0 =>\
    \ String::from(\"B+\"),\n        _ if grade > 2.7 => String::from(\"B\"),\n  \
    \      _ if grade > 2.3 => String::from(\"B-\"),\n        _ if grade > 2.0 =>\
    \ String::from(\"C+\"),\n        _ if grade > 1.7 => String::from(\"C\"),\n  \
    \      _ if grade > 1.3 => String::from(\"C-\"),\n        _ if grade > 1.0 =>\
    \ String::from(\"D+\"),\n        _ if grade > 0.7 => String::from(\"D\"),\n  \
    \      _ if grade > 0.0 => String::from(\"D-\"),\n        _ => String::from(\"\
    E\"),\n    }).collect()", '    grades.iter().map(grade_mapper).collect()', " \
    \   grades.iter().map(|x| {\n        if *x == 4.0 {\n            String::from(\"\
    A+\")\n        } else if *x > 3.7 {\n            String::from(\"A\")\n       \
    \ } else if *x > 3.3 {\n            String::from(\"A-\")\n        } else if *x\
    \ > 3.0 {\n            String::from(\"B+\")\n        } else if *x > 2.7 {\n  \
    \          String::from(\"B\")\n        } else if *x > 2.3 {\n            String::from(\"\
    B-\")\n        } else if *x > 2.0 {\n            String::from(\"C+\")\n      \
    \  } else if *x > 1.7 {\n            String::from(\"C\")\n        } else if *x\
    \ > 1.3 {\n            String::from(\"C-\")\n        } else if *x > 1.0 {\n  \
    \          String::from(\"D+\")\n        } else if *x > 0.7 {\n            String::from(\"\
    D\")\n        } else if *x > 0.0 {\n            String::from(\"D-\")\n       \
    \ } else {\n            String::from(\"E\")\n        }\n    }).collect()", " \
    \   // TODO: Write code here\n    // Panics if the implementation is incomplete\n\
    \    unimplemented!();", "    // TODO: Implement your code here\n    let mut vector_of_string:\
    \ Vec<String> = Vec::new();\n    for grade in grades {\n        if grade == 4.0\
    \ {\n            vector_of_string.push(\"A+\".to_string());\n        } else if\
    \ grade > 3.7 {\n            vector_of_string.push(\"A\".to_string());\n     \
    \   } else if grade > 3.3 {\n            vector_of_string.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            vector_of_string.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            vector_of_string.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            vector_of_string.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            vector_of_string.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            vector_of_string.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            vector_of_string.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            vector_of_string.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            vector_of_string.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            vector_of_string.push(\"D-\".to_string());\n\
    \        } else {\n            vector_of_string.push(\"E\".to_string());\n   \
    \     }\n    }\n    vector_of_string", "  let mut out: Vec<String> = Vec::new();\n\
    \  for g in grades {\n    if g >= 4.0 {\n      out.push(\"A+\".to_string());\n\
    \    } else if g >= 3.7 {\n      out.push(\"A\".to_string());\n    } else if g\
    \ >= 3.3 {\n      out.push(\"A-\".to_string());\n    } else if g >= 3.0 {\n  \
    \    out.push(\"B+\".to_string());\n    } else if g >= 2.7 {\n      out.push(\"\
    B\".to_string());\n    } else if g >= 2.3 {\n      out.push(\"B-\".to_string());\n\
    \    } else if g >= 2.0 {\n      out.push(\"C+\".to_string());\n    } else if\
    \ g >= 1.7 {\n      out.push(\"C\".to_string());\n    } else if g >= 1.3 {\n \
    \     out.push(\"C-\".to_string());\n    } else if g >= 1.0 {\n      out.push(\"\
    D+\".to_string());\n    } else if g >= 0.7 {\n      out.push(\"D\".to_string());\n\
    \    } else if g >= 0.0 {\n      out.push(\"D-\".to_string());\n    } else {\n\
    \      out.push(\"E\".to_string());\n    }\n  }\n  out", "    grades.iter().map(|grade|\
    \ {\n        if *grade >= 4.0 {\n            \"A+\".to_string()\n        } else\
    \ if *grade >= 3.7 {\n            \"A\".to_string()\n        } else if *grade\
    \ >= 3.3 {\n            \"A-\".to_string()\n        } else if *grade >= 3.0 {\n\
    \            \"B+\".to_string()\n        } else if *grade >= 2.7 {\n         \
    \   \"B\".to_string()\n        } else if *grade >= 2.3 {\n            \"B-\".to_string()\n\
    \        } else if *grade >= 2.0 {\n            \"C+\".to_string()\n        }\
    \ else if *grade >= 1.7 {\n            \"C\".to_string()\n        } else if *grade\
    \ >= 1.3 {\n            \"C-\".to_string()\n        } else if *grade >= 1.0 {\n\
    \            \"D+\".to_string()\n        } else if *grade >= 0.7 {\n         \
    \   \"D\".to_string()\n        } else if *grade >= 0.0 {\n            \"D-\".to_string()\n\
    \        } else {\n            \"E\".to_string()\n        }\n    }).collect()",
  '    grades.iter().map(grade_match).collect()', "    let mut letter_grades = Vec::new();\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"\
    A+\".to_string());\n        } else if grade >= 3.7 {\n            letter_grades.push(\"\
    A\".to_string());\n        } else if grade >= 3.3 {\n            letter_grades.push(\"\
    A-\".to_string());\n        } else if grade >= 3.0 {\n            letter_grades.push(\"\
    B+\".to_string());\n        } else if grade >= 2.7 {\n            letter_grades.push(\"\
    B\".to_string());\n        } else if grade >= 2.3 {\n            letter_grades.push(\"\
    B-\".to_string());\n        } else if grade >= 2.0 {\n            letter_grades.push(\"\
    C+\".to_string());\n        } else if grade >= 1.7 {\n            letter_grades.push(\"\
    C\".to_string());\n        } else if grade >= 1.3 {\n            letter_grades.push(\"\
    C-\".to_string());\n        } else if grade >= 1.0 {\n            letter_grades.push(\"\
    D+\".to_string());\n        } else if grade >= 0.7 {\n            letter_grades.push(\"\
    D\".to_string());\n        } else if grade >= 0.0 {\n            letter_grades.push(\"\
    D-\".to_string());\n        } else {\n            letter_grades.push(\"E\".to_string());\n\
    \        }\n    }\n    letter_grades"]
stop_tokens:
- "\n}"
