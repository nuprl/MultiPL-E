name: HumanEval_140_fix_spaces
language: rust
prompt: "/// Given a string text, replace all spaces in it with underscores, \n///\
  \ and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n/// fix_spaces(\"\
  Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") == \"_Example_2\"\n\
  /// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text: String)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
  Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
  Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
  Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
  ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
  ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
  -Exa_1_2_2_mple\"));\n}\n"
completions: ["    let mut new_text = String::new();\n    let mut space_num = 0;\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            space_num +=\
    \ 1;\n            if space_num == 1 {\n                new_text.push('_');\n \
    \           } else if space_num == 2 {\n                new_text.push('-');\n\
    \            }\n        } else {\n            new_text.push(ch);\n           \
    \ space_num = 0;\n        }\n    }\n    new_text", "    let mut result = String::new();\n\
    \    let mut flag = false;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            if flag {\n                result.push('-');\n            } else\
    \ {\n                result.push('_');\n                flag = true;\n       \
    \     }\n        } else {\n            result.push(c);\n            flag = false;\n\
    \        }\n    }\n    result", "    let mut result = String::from(\"\");\n  \
    \  let mut spaces = 0;\n    for c in text.chars() {\n        if c.is_whitespace()\
    \ {\n            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces == 1 {\n                result.push('_');\n            }\n          \
    \  spaces = 0;\n            result.push(c);\n        }\n    }\n    if spaces ==\
    \ 1 {\n        result.push('_');\n    }\n    result", "    text.chars().fold(String::new(),\
    \ |mut acc, ch| {\n        if acc.ends_with(\"  \") {\n            acc.pop();\n\
    \            acc.push('-');\n        }\n        if ch == ' ' {\n            acc.push('_');\n\
    \        } else {\n            acc.push(ch);\n        }\n        acc\n    })",
  "    let mut fixed = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces ==\
    \ 1 {\n                fixed.push('_');\n            } else if spaces == 2 {\n\
    \                fixed.push('-');\n            }\n        } else {\n         \
    \   spaces = 0;\n            fixed.push(c);\n        }\n    }\n    fixed", " \
    \   let mut output = String::new();\n    let mut previous_char = '_';\n    for\
    \ character in text.chars() {\n        match character {\n            ' ' => match\
    \ previous_char {\n                ' ' => output.push('-'),\n                _\
    \ => output.push('_'),\n            },\n            _ => output.push(character),\n\
    \        }\n        previous_char = character;\n    }\n    output", '    text.trim().replace("  ",
    "-").replace(" ", "_")', "    let mut result = String::new();\n    let mut prev_was_space\
    \ = false;\n    for ch in text.chars() {\n        match ch {\n            ' '\
    \ => {\n                if prev_was_space {\n                    result.push('-');\n\
    \                } else {\n                    result.push('_');\n           \
    \         prev_was_space = true;\n                }\n            }\n         \
    \   _ => {\n                result.push(ch);\n                prev_was_space =\
    \ false;\n            }\n        }\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut spaces = 0;\n    for c in text.chars() {\n     \
    \   if c == ' ' {\n            spaces += 1;\n            if spaces > 2 {\n   \
    \             continue;\n            }\n        } else {\n            spaces =\
    \ 0;\n        }\n        if c == ' ' {\n            result.push('_');\n      \
    \  } else {\n            result.push(c);\n        }\n    }\n    result", "   \
    \ text.chars().fold(String::new(), |mut acc, c| {\n        if c == ' ' {\n   \
    \         if let Some(prev) = acc.pop() {\n                if prev == ' ' {\n\
    \                    acc.push('-');\n                } else {\n              \
    \      acc.push(prev);\n                    acc.push('_');\n                }\n\
    \            } else {\n                acc.push('_');\n            }\n       \
    \ } else {\n            acc.push(c);\n        }\n        acc\n    })", "    //\
    \ let mut replaced_text = String::new();\n    // let mut char_count = 0;\n   \
    \ // for (_idx, ch) in text.chars().enumerate() {\n    //     if ch == ' ' {\n\
    \    //         if char_count == 0 {\n    //             replaced_text.push('_');\n\
    \    //         } else if char_count > 2 {\n    //             replaced_text.push('-');\n\
    \    //         } else {\n    //             replaced_text.push('_');\n    //\
    \         }\n    //         char_count += 1;\n    //     } else {\n    //    \
    \     replaced_text.push(ch);\n    //         char_count = 0;\n    //     }\n\
    \    // }\n    // replaced_text\n\n    // The code above works but there's a way\
    \ of making the above code simpler using a closure\n    text.chars().fold(\n \
    \       (true, String::new()),\n        |(prev_was_space, mut replaced_text),\
    \ ch| {\n            if ch == ' ' {\n                if prev_was_space {\n   \
    \                 replaced_text.push('-');\n                } else {\n       \
    \             replaced_text.push('_');\n                }\n                (true,\
    \ replaced_text)\n            } else {\n                replaced_text.push(ch);\n\
    \                (false, replaced_text)\n            }\n        },\n    )\n  \
    \  .1", "    // text.replace(\" \", \"_\")\n    let mut result = text.clone();\n\
    \    let result_len = result.len();\n    let mut num_spaces = 0;\n    let mut\
    \ index = 0;\n    for (i, c) in result.chars().enumerate() {\n        if c ==\
    \ ' ' {\n            num_spaces += 1;\n            if num_spaces >= 2 {\n    \
    \            if i != result_len - 1 {\n                    result.remove(index);\n\
    \                    result.insert(index, '-');\n                }\n         \
    \   }\n        } else {\n            if num_spaces > 0 {\n                result.remove(index);\n\
    \                result.insert(index, '_');\n            }\n            num_spaces\
    \ = 0;\n            index = i;\n        }\n    }\n    result", "\tif !text.contains(\"\
    \ \") {\n\t\treturn text;\n\t}\n\tlet count = text.chars().filter(|c| *c == '\
    \ ').count();\n\tlet mut new_string = String::new();\n\tlet mut first_space =\
    \ true;\n\tfor (i,c) in text.chars().enumerate() {\n\t\tif c == ' ' {\n\t\t\t\
    if first_space {\n\t\t\t\tif i == 0 {\n\t\t\t\t\tnew_string.push('_');\n\t\t\t\
    \t} else {\n\t\t\t\t\tnew_string.push('-');\n\t\t\t\t}\n\t\t\t\tfirst_space =\
    \ false;\n\t\t\t}\n\t\t} else {\n\t\t\tnew_string.push(c);\n\t\t\tfirst_space\
    \ = true;\n\t\t}\n\t}\n\tnew_string", "    let spaces = text.chars().filter(|c|\
    \ *c == ' ').count();\n    if spaces == 0 {\n        return text;\n    }\n   \
    \ if spaces == 1 {\n        return text.replace(\" \", \"_\");\n    }\n    let\
    \ mut result = String::new();\n    let mut prev = ' ';\n    for ch in text.chars()\
    \ {\n        if ch == ' ' {\n            if prev == ' ' {\n                if\
    \ result.chars().last().unwrap() != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(ch);\n        }\n  \
    \      prev = ch;\n    }\n    result", '    unimplemented!()', '    text.replace("
    ", "_").replace("__", "-")', '    text.split_whitespace().collect::<Vec<&str>>().join("_")',
  "    let mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for\
    \ c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_space = false;\n    let mut count_space = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            count_space += 1;\n            if last_space\
    \ && count_space > 2 {\n                last_space = false;\n                result.push('-');\n\
    \            } else if !last_space {\n                last_space = true;\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ count_space = 0;\n            last_space = false;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let words: Vec<&str> = text.split(\" \").collect();\n\
    \    let mut output: String = String::new();\n    for i in 0..words.len() {\n\
    \        let word = words[i];\n        if word.len() == 0 {\n            output.push_str(\"\
    -\");\n        } else {\n            output.push_str(word);\n        }\n     \
    \   if i != words.len() - 1 {\n            output.push_str(\"_\");\n        }\n\
    \    }\n    output", '    text.replace(" ", "_").replace("__", "_").replace("__",
    "_")', "    let mut result = text;\n    result = result.replace(\" \", \"_\");\n\
    \    result = result.replace(\"__\", \"-\");\n    result", "    text.chars().fold(String::new(),\
    \ |mut s, c| {\n        if c == ' ' {\n            if s.ends_with(\"_\") {\n \
    \               s.push('-');\n            } else {\n                s.push('_');\n\
    \            }\n        } else {\n            s.push(c);\n        }\n        s\n\
    \    })", "    let mut last_space = false;\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if c.is_whitespace() {\n            if last_space\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n            last_space = true;\n        }\
    \ else {\n            result.push(c);\n            last_space = false;\n     \
    \   }\n    }\n    result", '    unimplemented!()', "    let mut index = 0;\n \
    \   let mut space_count = 0;\n    let mut result = String::new();\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            if space_count < 2 {\n  \
    \              result.push('_');\n            }\n            space_count += 1;\n\
    \        } else {\n            if space_count >= 2 {\n                result.push('-');\n\
    \            }\n            space_count = 0;\n            result.push(c);\n  \
    \      }\n    }\n    result", '    text.replace("  ", "-").replace(" ", "_")',
  "    let mut prev = '_';\n    let mut result = String::from(\"\");\n    for ch in\
    \ text.chars() {\n        if ch == ' ' {\n            if prev == ' ' {\n     \
    \           if result.is_empty() {\n                    result.push('_');\n  \
    \              } else {\n                    result.push('-');\n             \
    \   }\n            } else {\n                result.push('_');\n            }\n\
    \        } else {\n            result.push(ch);\n        }\n        prev = ch;\n\
    \    }\n    result", "    let mut chars = text.chars();\n    let mut result =\
    \ String::new();\n    let mut prev = '_';\n    while let Some(curr) = chars.next()\
    \ {\n        if curr == ' ' {\n            if prev == ' ' {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            result.push(curr);\n        }\n        prev = curr;\n\
    \    }\n    result", '    text.trim().replace(" ", "_").replace("_ _", "-")',
  "\tlet text = text.replace(\" \", \"_\");\n\tlet text = text.replace(\"__\", \"\
    -\");\n\ttext", "    let fix_string = String::from(\" \");\n    let replace_string\
    \ = String::from(\"_\");\n    let replace_string2 = String::from(\"-\");\n   \
    \ let text_fix = text.replace(fix_string.as_str(), replace_string.as_str());\n\
    \    let text_fix2 = text_fix.replace(replace_string.as_str(), replace_string2.as_str());\n\
    \    text_fix2", '    unimplemented!()', "    let mut new_text = String::new();\n\
    \    let mut i = 0;\n    let mut last_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if i != 0 {\n                if last_space\
    \ {\n                    new_text.push('-');\n                } else {\n     \
    \               new_text.push('_');\n                }\n            }\n      \
    \      last_space = true;\n        } else {\n            new_text.push(c);\n \
    \           last_space = false;\n        }\n        i += 1;\n    }\n    new_text",
  "    let mut s = String::new();\n    let mut prev_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                s.push('-');\n\
    \            } else {\n                s.push('_');\n            }\n         \
    \   prev_space = true;\n        } else {\n            s.push(c);\n           \
    \ prev_space = false;\n        }\n    }\n    s", "    let mut result = String::new();\n\
    \    let mut previous = None;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            if previous == Some(' ') {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            result.push(c);\n        }\n        previous = Some(c);\n\
    \    }\n    result", "    let mut result = text.replace(\" \", \"_\");\n    while\
    \ result.contains(\"__\") {\n        result = result.replace(\"__\", \"-\");\n\
    \    }\n    result", "    return text.replace(\"  \", \"-\")\n               \
    \ .replace(\" \", \"_\");", '    text.replace("  ", "-").replace(" ", "_")', " \
    \   let mut s = String::from(\"\");\n    let mut i = 0;\n    let mut space_count\
    \ = 0;\n    while i < text.len() {\n        let c = text.chars().nth(i).unwrap();\n\
    \        if c.is_whitespace() {\n            space_count += 1;\n            if\
    \ space_count > 2 {\n                s.push('-');\n                space_count\
    \ = 0;\n            }\n        } else {\n            if space_count == 1 {\n \
    \               s.push('_');\n            }\n            space_count = 0;\n  \
    \          s.push(c);\n        }\n        i += 1;\n    }\n    if space_count ==\
    \ 1 {\n        s.push('_');\n    }\n    s", "    let mut result = text.clone();\n\
    \    for i in 0..result.len() {\n        if result.get(i..i+1) == Some(\" \")\
    \ {\n            let mut counter = 0;\n            while result.get(i..i+1) ==\
    \ Some(\" \") {\n                counter += 1;\n                i += 1;\n    \
    \        }\n            if counter == 1 {\n                result.replace_range(i-1..i,\
    \ \"_\");\n            } else {\n                result.replace_range(i-counter..i,\
    \ \"-\");\n            }\n        }\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut spaces = 0;\n    for c in text.chars() {\n     \
    \   if c == ' ' {\n            spaces += 1;\n            if spaces == 1 {\n  \
    \              result.push('_');\n            } else if spaces > 2 {\n       \
    \         result.push('-');\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", '    text.split("
    ").collect::<Vec<&str>>().join("_")', '    text.replace(" ", "_").replace("__",
    "-")', '    text.replace(" ", "_").replace("__", "-")', '    unimplemented!()',
  "    // this is obviously not the best solution\n    // but it's good enough for\
    \ this course\n    let mut res = String::new();\n    let mut prev_is_space = false;\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            if prev_is_space\
    \ {\n                res.push('-');\n            } else {\n                res.push('_');\n\
    \            }\n            prev_is_space = true;\n        } else {\n        \
    \    res.push(ch);\n            prev_is_space = false;\n        }\n    }\n   \
    \ res", "    let mut text = text;\n    text = text.replace(\" \", \"_\");\n  \
    \  text = text.replace(\"__\", \"-\");\n    text", "    // Write code here\n \
    \   String::new()", "    // --snip--\n    let mut result = text;\n    let space_regex\
    \ = Regex::new(r\" +\").unwrap();\n    let under_regex = Regex::new(r\"_+\").unwrap();\n\
    \    result = space_regex.replace_all(&result, \" \").to_string();\n    result\
    \ = space_regex.replace_all(&result, \"_\").to_string();\n    result = under_regex.replace_all(&result,\
    \ \"-\").to_string();\n    result", "    let trimmed_text = text.trim().to_string();\n\
    \    let mut new_text = String::new();\n    let mut skip_counter = 0;\n    for\
    \ (i, c) in trimmed_text.chars().enumerate() {\n        if c == ' ' {\n      \
    \      new_text.push('_');\n            skip_counter += 1;\n        } else {\n\
    \            if skip_counter > 2 {\n                new_text.push('-');\n    \
    \        }\n            skip_counter = 0;\n            new_text.push(c);\n   \
    \     }\n    }\n    new_text", '    text.replacen("  ", "-", 1).replace(" ", "_")',
  '    unimplemented!()', "    let mut result = String::new();\n    let mut is_previous_space\
    \ = false;\n    let mut has_three_spaces = false;\n    for (index, c) in text.chars().enumerate()\
    \ {\n        if c == ' ' {\n            if is_previous_space {\n             \
    \   if !has_three_spaces {\n                    has_three_spaces = true;\n   \
    \                 result.push('-');\n                }\n            } else {\n\
    \                result.push('_');\n                is_previous_space = true;\n\
    \            }\n        } else {\n            if has_three_spaces {\n        \
    \        has_three_spaces = false;\n            }\n            is_previous_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut prev_space = false;\n    let mut consecutive_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_space {\n                consecutive_space = true;\n            }\n   \
    \         prev_space = true;\n            result.push('_');\n        } else {\n\
    \            if consecutive_space {\n                result.push('-');\n     \
    \           consecutive_space = false;\n            }\n            prev_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result", "    let\
    \ mut ret = String::from(\"\");\n    let mut prev_is_space = false;\n    let mut\
    \ streak = 0;\n    for c in text.chars() {\n        if c == ' ' {\n          \
    \  prev_is_space = true;\n            streak += 1;\n        } else {\n       \
    \     if prev_is_space {\n                if streak > 2 {\n                  \
    \  ret.push('-');\n                } else {\n                    ret.push('_');\n\
    \                }\n                streak = 0;\n            }\n            prev_is_space\
    \ = false;\n            ret.push(c);\n        }\n    }\n    if prev_is_space {\n\
    \        if streak > 2 {\n            ret.push('-');\n        } else {\n     \
    \       ret.push('_');\n        }\n    }\n    ret", "    let mut result = text;\n\
    \    result = result.replace(\" \", \"_\");\n    let mut space_count = 0;\n  \
    \  for (index, c) in result.chars().enumerate() {\n        if c == '_' {\n   \
    \         space_count += 1;\n        } else {\n            space_count = 0;\n\
    \        }\n        if space_count > 2 {\n            result.replace_range(index\
    \ - 1..index + 1, \"-\");\n        }\n    }\n    result", "    let mut result\
    \ = text.clone();\n    result = result.replace(\" \", \"_\");\n    result = result.replace(\"\
    _ _\", \"_\");\n    result = result.replace(\"_ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _\", \"-\");\n    result\
    \ = result.replace(\"_ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _\
    \ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _ _ _\", \"-\"\
    );\n    result = result.replace(\"_ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _ _ _\
    \ _ _ _\", \"-\");\n    result = result.replace(\"_ _ _ _ _ _ _ _ _ _ _ _\", \"\
    -\");\n    result = result.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n  \
    \  result = result.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result\
    \ = result.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"_\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\");\n    result = result.replace(\"",
  '    text.replace("  ", "-").replace(" ", "_")', "    // Implement the function\
    \ here\n    return text;", '    text.replace(" ", "_").replace("__", "-")', " \
    \   let spaces = Regex::new(r\" +\").unwrap();\n    spaces.replace_all(&text,\
    \ \"_\").to_string()", '    unimplemented!()', '    text.split_whitespace().collect::<Vec<&str>>().join("_")',
  "    let chars: Vec<char> = text.chars().collect();\n    let mut result = String::new();\n\
    \    let mut consecutive_spaces = 0;\n    for c in chars {\n        if c == '\
    \ ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", '    text.replace("  ",
    "-").replace(" ", "_")', '    text.trim().replace(" ", "_").replace("_", "-")',
  "    let mut result = String::new();\n    let mut was_space = false;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            if was_space {\n     \
    \           result.push('-');\n            } else {\n                result.push('_');\n\
    \                was_space = true;\n            }\n        } else {\n        \
    \    result.push(c);\n            was_space = false;\n        }\n    }\n    result",
  "    let mut underscore_buf = Vec::new();\n    let mut dash_buf = Vec::new();\n\
    \    let mut spaces_count = 0;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            spaces_count += 1;\n            if spaces_count > 2 {\n   \
    \             dash_buf.push('-');\n            } else {\n                underscore_buf.push('_');\n\
    \            }\n        } else {\n            spaces_count = 0;\n            dash_buf.push(c);\n\
    \            underscore_buf.push(c);\n        }\n    }\n    if spaces_count >\
    \ 2 {\n        dash_buf.iter().collect()\n    } else {\n        underscore_buf.iter().collect()\n\
    \    }", '    text.replace(" ", "_").replace("  ", "-")', "    let mut previous_char:\
    \ char = ' ';\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            result.push('_');\n            if previous_char\
    \ == ' ' {\n                result.pop();\n                result.push('-');\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \     previous_char = c;\n    }\n    result", "    let space = \" \";\n    let\
    \ mut result = text.replace(space, \"_\");\n    for (i, ch) in result.chars().enumerate()\
    \ {\n        if ch == '_' {\n            let mut j = i + 1;\n            let mut\
    \ count = 1;\n            while result.chars().nth(j) == Some('_') {\n       \
    \         count += 1;\n                j += 1;\n            }\n            if\
    \ count > 2 {\n                let before = &result[..i];\n                let\
    \ after = &result[j..];\n                result = [before, \"-\", after].concat();\n\
    \            }\n        }\n    }\n    result", "    let mut new_text = String::new();\n\
    \    let mut counter = 0;\n    for t in text.chars() {\n        if t == ' ' {\n\
    \            counter += 1;\n            if counter == 1 {\n                new_text.push('_');\n\
    \            } else if counter == 2 {\n                new_text.push('-');\n \
    \           }\n        } else {\n            new_text.push(t);\n            counter\
    \ = 0;\n        }\n    }\n    new_text", '    text.replace(" ", "_").replace("__",
    "-")', "    let mut previous_char = ' ';\n    let mut count = 0;\n    let mut\
    \ result = String::new();\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            count += 1;\n            if count > 2 {\n                result.push('-');\n\
    \                count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            count\
    \ = 0;\n        }\n        previous_char = c;\n    }\n    result", "    let spaces\
    \ = \" \";\n    let underscores = \"_\";\n    let dash = \"-\";\n    let text\
    \ = text.replace(spaces, underscores);\n    text.replace(spaces.repeat(2), dash)",
  "    let mut ans = text.clone();\n    let mut flag = false;\n    for i in 0..ans.len()\
    \ {\n        let cur = ans.chars().nth(i).unwrap();\n        if cur == ' ' {\n\
    \            if flag {\n                ans.replace_range(i..i+1, \"-\");\n  \
    \          } else {\n                ans.replace_range(i..i+1, \"_\");\n     \
    \           flag = true;\n            }\n        } else {\n            flag =\
    \ false;\n        }\n    }\n    return ans;", "    let mut result = text;\n  \
    \  result = result.replace(\" \", \"_\");\n    result = result.replace(\"_ _\"\
    , \"_\");\n    result = result.replace(\"_ _\", \"_\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-\");\n    result = result.replace(\"\
    _ _\", \"-\");\n    result = result.replace(\"_ _\", \"-", '    unimplemented!()',
  '    text.split_whitespace().collect::<Vec<&str>>().join("_")', "    let mut result\
    \ = text;\n    let spaces = \" \".repeat(2);\n    let dash = \"-\";\n    while\
    \ result.contains(&spaces) {\n        result = result.replace(&spaces, &dash);\n\
    \    }\n    result = result.replace(\" \", \"_\");\n    result", '    text.split("
    ").collect::<Vec<&str>>().join("_")', "    let mut count = 0;\n    text.chars().map(|c|\
    \ {\n        if c == ' ' {\n            count += 1;\n            if count > 2\
    \ {\n                '-'\n            } else {\n                '_'\n        \
    \    }\n        } else {\n            count = 0;\n            c\n        }\n \
    \   }).collect()", "    let mut acc = String::new();\n    let mut prev = ' ';\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if prev == '\
    \ ' {\n                acc.push('-');\n            } else {\n                acc.push('_');\n\
    \            }\n        } else {\n            acc.push(c);\n        }\n      \
    \  prev = c;\n    }\n    acc", "    let mut result = String::new();\n    let mut\
    \ prev_is_space = false;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            if prev_is_space {\n                result.push('-');\n         \
    \   } else {\n                result.push('_');\n            }\n            prev_is_space\
    \ = true;\n        } else {\n            result.push(c);\n            prev_is_space\
    \ = false;\n        }\n    }\n    result", '    text.replace(" ", "_").replace("__",
    "-")', '    text.replace(" ", "_").replace("__", "-")', '    text.replace(" ",
    "_").replace("__", "-")', "    let mut last_ch = '_';\n    let mut output = String::new();\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            if last_ch\
    \ == ' ' {\n                output.push('-');\n            } else {\n        \
    \        output.push('_');\n            }\n        } else {\n            output.push(ch);\n\
    \        }\n        last_ch = ch;\n    }\n    output", "    if text.contains(\"\
    \  \") {\n        text.replace(\"  \", \"-\")\n    } else {\n        text.replace(\"\
    \ \", \"_\")\n    }", "    let mut res = String::new();\n    let mut has_space\
    \ = false;\n    let mut spaces = 0;\n    for i in text.chars() {\n        if i.is_whitespace()\
    \ {\n            spaces += 1;\n            if spaces > 2 {\n                res.push('-');\n\
    \                spaces = 0;\n            } else {\n                res.push('_');\n\
    \            }\n            has_space = true;\n        } else {\n            for\
    \ _ in 0..spaces {\n                res.push('_');\n            }\n          \
    \  res.push(i);\n            spaces = 0;\n            has_space = false;\n   \
    \     }\n    }\n    if !has_space {\n        for _ in 0..spaces {\n          \
    \  res.push('_');\n        }\n    }\n    res", "    return text.replace(' ', '_').replace(\"\
    __\", \"-\");", '    text.replace("  ", "-").replace(" ", "_")', "    let mut\
    \ in_spaces = false;\n    let mut first_space = true;\n    let mut spaces = 0;\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ c.is_whitespace() {\n            spaces += 1;\n            if in_spaces && spaces\
    \ > 2 {\n                result.push('-');\n                in_spaces = false;\n\
    \                spaces = 0;\n            } else if !in_spaces {\n           \
    \     in_spaces = true;\n            }\n        } else {\n            if in_spaces\
    \ {\n                if first_space {\n                    result.push('_');\n\
    \                    first_space = false;\n                } else {\n        \
    \            result.push(' ');\n                }\n                in_spaces =\
    \ false;\n                spaces = 0;\n            }\n            result.push(c);\n\
    \        }\n    }\n    if in_spaces {\n        if first_space {\n            result.push('_');\n\
    \        } else {\n            result.push(' ');\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut has_space = false;\n    let mut\
    \ has_two_space = false;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            if has_space {\n                if has_two_space {\n            \
    \        result.push('-');\n                } else {\n                    result.push('_');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n            has_space = true;\n            has_two_space = true;\n\
    \        } else {\n            result.push(c);\n            has_space = false;\n\
    \            has_two_space = false;\n        }\n    }\n    result", "    let mut\
    \ last_char: char = 'a';\n    let mut result: String = String::new();\n    for\
    \ i in text.chars() {\n        if i == ' ' {\n            if last_char == ' '\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n        } else {\n            result.push(i);\n\
    \        }\n        last_char = i;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut space_counter = 0;\n    for ch in text.chars() {\n\
    \        if ch == ' ' {\n            space_counter += 1;\n            if space_counter\
    \ > 2 {\n                continue;\n            }\n        } else {\n        \
    \    space_counter = 0;\n        }\n        if ch == ' ' {\n            result.push('_');\n\
    \        } else {\n            result.push(ch);\n        }\n    }\n    result",
  '    text.replace("  ", "-").replace(" ", "_")', "    let mut result = String::new();\n\
    \    let mut space_counter = 0;\n    for c in text.chars() {\n        if c ==\
    \ ' ' {\n            space_counter += 1;\n            if space_counter < 3 {\n\
    \                result.push('_');\n            }\n        } else {\n        \
    \    if space_counter >= 3 {\n                result.push('-');\n            }\n\
    \            space_counter = 0;\n            result.push(c);\n        }\n    }\n\
    \    if space_counter >= 3 {\n        result.push('-');\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut consecutive_spaces = 0;\n   \
    \ for ch in text.chars() {\n        if ch == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(ch);\n        }\n    }\n    if consecutive_spaces == 1 {\n\
    \        result.push('_');\n    }\n    result", "    let mut res = text.clone();\n\
    \    res = res.replace(\" \", \"_\");\n    res = res.replace(\"_ _\", \"-\");\n\
    \    res = res.replace(\"_ _\", \"-\");\n    res = res.replace(\"__\", \"_\");\n\
    \    res", "    let mut result = String::new();\n    let mut prev_char = ' ';\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result", "    let mut prev_c =\
    \ ' ';\n    let mut spaces = 0;\n    let mut out = String::with_capacity(text.len());\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \        } else {\n            if spaces > 2 {\n                out.push('-');\n\
    \            } else if spaces > 0 {\n                out.push('_');\n        \
    \    }\n            out.push(c);\n            spaces = 0;\n        }\n       \
    \ prev_c = c;\n    }\n    if spaces > 2 {\n        out.push('-');\n    } else\
    \ if spaces > 0 {\n        out.push('_');\n    }\n    out", "    let mut result\
    \ = String::new();\n    let mut was_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if was_space {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n                was_space\
    \ = true;\n            }\n        } else {\n            result.push(c);\n    \
    \        was_space = false;\n        }\n    }\n    result", "    let text = text.replace(\"\
    \ \", \"_\");\n    let result = text.replace(\"_ _ _\", \"-\");\n    result",
  '    text.replace(" ", "_").replace("__", "_").replace("___", "-")', "    // let\
    \ mut output = String::new();\n    // let mut two_before = false;\n    // for\
    \ c in text.chars() {\n    //     if c == ' ' {\n    //         if two_before\
    \ {\n    //             output.push('-');\n    //         } else {\n    //   \
    \          output.push('_');\n    //         }\n    //         two_before = true;\n\
    \    //     } else {\n    //         output.push(c);\n    //         two_before\
    \ = false;\n    //     }\n    // }\n    // output\n\n    // alternative solution\
    \ - using regex\n    // see https://regex101.com/r/RPFQoW/3/\n    lazy_static!\
    \ {\n        static ref RE: Regex = Regex::new(r\" {2,}\").unwrap();\n    }\n\
    \    RE.replace_all(&text, \"-\").to_string().replace(\" \", \"_\")", "    //Your\
    \ code goes here\n    let mut result = String::new();\n    let mut previous =\
    \ '_';\n    for c in text.chars() {\n        if c == ' ' {\n            if previous\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        previous = c;\n    }\n    result", "    text.chars().fold(String::new(),\
    \ |acc, x| {\n        match x {\n            ' ' => {\n                if acc.chars().rev().take(2).eq(\"\
    \  \".chars()) {\n                    acc + \"-\"\n                } else {\n\
    \                    acc + \"_\"\n                }\n            }\n         \
    \   _ => acc + &x.to_string(),\n        }\n    })", "    let mut ret_str = String::new();\n\
    \    let mut space_counter = 0;\n    for c in text.chars() {\n        if c ==\
    \ ' ' {\n            space_counter += 1;\n            if space_counter == 1 {\n\
    \                ret_str.push('_');\n            } else if space_counter > 2 {\n\
    \                ret_str.push('-');\n            }\n        } else {\n       \
    \     space_counter = 0;\n            ret_str.push(c);\n        }\n    }\n   \
    \ ret_str", "    let mut result = \"\".to_string();\n    let mut counter = 0;\n\
    \    for letter in text.chars() {\n        if letter == ' ' {\n            counter\
    \ += 1;\n            if counter == 1 {\n                result.push('_');\n  \
    \          } else if counter >= 2 {\n                result.push('-');\n     \
    \       }\n        } else {\n            result.push(letter);\n            counter\
    \ = 0;\n        }\n    }\n    result", "    // Your code here!\n    let mut result\
    \ = String::new();\n    let mut prev = ' ';\n    for c in text.chars() {\n   \
    \     if c != ' ' || prev != ' ' {\n            result.push(c);\n        }\n \
    \       if c == ' ' && prev == ' ' {\n            result.push('-');\n        }\n\
    \        prev = c;\n    }\n    result", "    let mut result = text.clone();\n\
    \    let space = \" \".to_string();\n    let underscore = \"_\".to_string();\n\
    \    let underscore_space = \"_\".to_string();\n    let dash = \"-\".to_string();\n\
    \    let dash_space = \"-\".to_string();\n    for i in 0..result.len() {\n   \
    \     if result.as_bytes()[i] == space.as_bytes()[0] {\n            result = result.replace(space.as_str(),\
    \ underscore.as_str());\n        }\n    }\n    for i in 0..result.len() {\n  \
    \      if i < result.len() - 2 {\n            if result.as_bytes()[i] == underscore.as_bytes()[0]\n\
    \                && result.as_bytes()[i + 1] == underscore.as_bytes()[0]\n   \
    \             && result.as_bytes()[i + 2] == underscore.as_bytes()[0]\n      \
    \      {\n                result = result.replace(underscore_space.as_str(), dash.as_str());\n\
    \            }\n        }\n    }\n    result", "\tlet mut result = String::new();\n\
    \tlet mut space_count = 0;\n\tfor c in text.chars() {\n\t\tif c == ' ' {\n\t\t\
    \tspace_count += 1;\n\t\t\tif space_count == 1 {\n\t\t\t\tresult.push('_');\n\t\
    \t\t} else if space_count > 2 {\n\t\t\t\tresult.push('-');\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tspace_count = 0;\n\t\t\tresult.push(c);\n\t\t}\n\t}\n\tresult", " \
    \   text.chars().fold(String::new(), |mut res, x| {\n        if x.is_whitespace()\
    \ {\n            if res.ends_with('_') {\n                res.push('-');\n   \
    \         } else {\n                res.push('_');\n            }\n        } else\
    \ {\n            res.push(x);\n        }\n        res\n    })", "    let mut output\
    \ = String::new();\n    let mut i = 0;\n    let text_vec: Vec<char> = text.chars().collect();\n\
    \    for letter in text_vec {\n        if letter != ' ' {\n            output.push(letter);\n\
    \            i = 0;\n        } else {\n            i += 1;\n            if i ==\
    \ 1 {\n                output.push('_');\n            } else if i == 2 {\n   \
    \             output.push('-');\n            }\n        }\n    }\n    output",
  "    let mut result = String::new();\n    let mut spaces_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            spaces_count += 1;\n    \
    \        if spaces_count == 2 {\n                result.push('-');\n         \
    \       spaces_count = 0;\n            }\n        } else {\n            if spaces_count\
    \ == 1 {\n                result.push('_');\n            }\n            spaces_count\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    unimplemented!(\"\
    Fix spaces in '{}'\", text);", "    let re = Regex::new(r\"\\s+\").unwrap();\n\
    \    re.replace_all(&text, |caps: &Captures| match caps.get(0).unwrap().as_str()\
    \ {\n        \" \" => \"_\",\n        _ => \"-\"\n    }).into_owned()", "    let\
    \ mut res = String::new();\n    let mut is_replace = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if !is_replace {\n                res.push('_');\n\
    \                is_replace = true;\n            } else {\n                res.push('-');\n\
    \            }\n        } else {\n            res.push(c);\n            is_replace\
    \ = false;\n        }\n    }\n    res", "    let mut result = String::new();\n\
    \    let mut first_space = true;\n    let mut has_space = false;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            if first_space {\n      \
    \          result.push('_');\n                first_space = false;\n         \
    \   } else if has_space {\n                result.push('-');\n            }\n\
    \            has_space = true;\n        } else {\n            first_space = true;\n\
    \            has_space = false;\n            result.push(c);\n        }\n    }\n\
    \    result", "\tlet mut result = String::new();\n\tlet mut last_ch = ' ';\n\t\
    let mut last_ch_2 = ' ';\n\tfor ch in text.chars() {\n\t\tif ch == ' ' {\n\t\t\
    \tif last_ch == ' ' {\n\t\t\t\tif last_ch_2 == ' ' {\n\t\t\t\t\tresult.push('-');\n\
    \t\t\t\t} else {\n\t\t\t\t\tresult.push('_');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\
    \t\tresult.push('_');\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(ch);\n\t\t}\n\t\
    \tlast_ch_2 = last_ch;\n\t\tlast_ch = ch;\n\t}\n\treturn result;", "    text.chars().map(|c|\
    \ \n        if c == ' ' {\n            if let Some(last) = text.chars().last()\
    \ {\n                if last == ' ' {\n                    '-'\n             \
    \   } else {\n                    '_'\n                }\n            } else {\n\
    \                '_'\n            }\n        } else {\n            c\n       \
    \ }\n    ).collect()", "    let mut result = String::new();\n    let mut has_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if consecutive_spaces < 2 {\n            \
    \    result.push('_');\n            } else {\n                result.push('-');\n\
    \            }\n            consecutive_spaces += 1;\n            has_space =\
    \ true;\n        } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    if !has_space {\n        result = text;\n    }\n    result",
  "    let v: Vec<char> = text.chars().collect();\n    let mut result = String::new();\n\
    \    let mut space_count = 0;\n    for c in v {\n        if c == ' ' {\n     \
    \       space_count += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            space_count\
    \ = 0;\n        }\n    }\n    result", "    if text.is_empty() {\n        return\
    \ text;\n    }\n    let mut curr = '_';\n    let mut prev = '_';\n    let mut\
    \ new_text = String::new();\n    for c in text.chars() {\n        if prev == '\
    \ ' && curr == ' ' {\n            new_text.push('-');\n        } else if c ==\
    \ ' ' {\n            new_text.push('_');\n        } else {\n            new_text.push(c);\n\
    \        }\n        prev = curr;\n        curr = c;\n    }\n    return new_text;",
  "    let mut text = text;\n    let mut index = 0;\n    let mut previous_space =\
    \ false;\n    loop {\n        let index_of_space = text.chars().position(|c| c\
    \ == ' ');\n        if index_of_space == None {\n            break;\n        }\n\
    \        let index_of_space = index_of_space.unwrap();\n        let character\
    \ = text.chars().nth(index_of_space).unwrap();\n        if character == ' ' {\n\
    \            if previous_space {\n                text.replace_range(index_of_space..index_of_space\
    \ + 1, \"-\");\n            } else {\n                text.replace_range(index_of_space..index_of_space\
    \ + 1, \"_\");\n            }\n            previous_space = true;\n        } else\
    \ {\n            previous_space = false;\n        }\n        index = index_of_space\
    \ + 1;\n    }\n    text", "\tlet replace_spaces = text.replace(\" \", \"_\");\n\
    \tlet replace_consecutive_spaces = replace_spaces.replace(\"__\", \"-\");\n\t\
    return replace_consecutive_spaces;", "    let mut result = String::new();\n  \
    \  let mut space_counter = 0;\n    for ch in text.chars() {\n        if ch ==\
    \ ' ' {\n            space_counter += 1;\n            if space_counter == 1 {\n\
    \                result.push('_');\n            } else if space_counter == 2 {\n\
    \                result.push('-');\n            }\n        } else {\n        \
    \    space_counter = 0;\n            result.push(ch);\n        }\n    }\n    result",
  '    text.replace(" ", "_").replace("__", "_").replace("__", "-")', "    let mut\
    \ res = String::new();\n    let mut counter = 0;\n    for ch in text.chars() {\n\
    \        if ch == ' ' {\n            if counter >= 2 {\n                res.push('-');\n\
    \            } else {\n                res.push('_');\n            }\n       \
    \     counter += 1;\n        } else {\n            res.push(ch);\n           \
    \ counter = 0;\n        }\n    }\n    res", "    let mut answer = String::new();\n\
    \    let mut space_count = 0;\n    for ch in text.chars() {\n        if ch ==\
    \ ' ' {\n            space_count += 1;\n            if space_count == 2 {\n  \
    \              answer.push('-');\n            }\n        } else {\n          \
    \  space_count = 0;\n            if ch == ' ' {\n                answer.push('_');\n\
    \            } else {\n                answer.push(ch);\n            }\n     \
    \   }\n    }\n    answer", "    let mut new_text = String::new();\n    let mut\
    \ counter = 0;\n    for c in text.chars() {\n        if c == ' ' {\n         \
    \   counter += 1;\n            if counter > 2 {\n                new_text.push('-');\n\
    \            } else {\n                new_text.push('_');\n            }\n  \
    \      } else {\n            counter = 0;\n            new_text.push(c);\n   \
    \     }\n    }\n    new_text", '    text.replace("  ", "-").replace(" ", "_")',
  '    text.replace("  ", "-").replace(" ", "_")', '    text.replace("  ", "-").replace("
    ", "_")', '    text.replace(" ", "_").replace("  ", "-")', "    let mut result\
    \ = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"-\");\n\
    \    result", "    let mut ans = String::from(\"\");\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces == 1 {\n                ans.push('_');\n            } else\
    \ if spaces == 2 {\n                ans.push('-');\n            }\n        } else\
    \ {\n            spaces = 0;\n            ans.push(c);\n        }\n    }\n   \
    \ ans", "    let mut count = 0;\n    let mut space = false;\n    let mut res =\
    \ String::new();\n    for ch in text.chars() {\n        if ch == ' ' {\n     \
    \       count += 1;\n            space = true;\n        } else {\n           \
    \ count = 0;\n            space = false;\n        }\n        if count > 2 {\n\
    \            continue;\n        }\n        if space {\n            res.push('_');\n\
    \        } else {\n            res.push(ch);\n        }\n    }\n    res", "  \
    \  let mut output = String::from(\"\");\n    let mut last_character_was_space\
    \ = false;\n    for ch in text.chars() {\n        match ch {\n            ' '\
    \ => {\n                if last_character_was_space {\n                    output.push('-');\n\
    \                } else {\n                    output.push('_');\n           \
    \     }\n                last_character_was_space = true;\n            },\n  \
    \          _ => {\n                output.push(ch);\n                last_character_was_space\
    \ = false;\n            }\n        }\n    }\n    output", "    let mut parts =\
    \ text.split(' ');\n    let mut result = String::new();\n    let mut first = true;\n\
    \    let mut count = 0;\n    for part in parts {\n        if first {\n       \
    \     result.push_str(part);\n            first = false;\n        } else {\n \
    \           if part.len() > 0 {\n                if count > 1 {\n            \
    \        result.push('-');\n                } else {\n                    result.push('_');\n\
    \                }\n                result.push_str(part);\n                count\
    \ = 0;\n            } else {\n                count += 1;\n            }\n   \
    \     }\n    }\n    result", "    unimplemented!(\"fix_spaces('{}')\", text);",
  '    unimplemented!()', "    let mut result = String::new();\n    let mut count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            count\
    \ += 1;\n            if count == 1 {\n                result.push('_');\n    \
    \        } else if count == 2 {\n                result.push('-');\n         \
    \   }\n        } else {\n            count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut res = String::new();\n    let mut\
    \ space_flag = false;\n    for c in text.chars() {\n        if c == ' ' {\n  \
    \          if space_flag {\n                res.push('-');\n            } else\
    \ {\n                res.push('_');\n                space_flag = true;\n    \
    \        }\n        } else {\n            res.push(c);\n            space_flag\
    \ = false;\n        }\n    }\n    res", "    let mut result = String::new();\n\
    \    let mut prev_is_space = false;\n    for ch in text.chars() {\n        if\
    \ ch == ' ' {\n            if prev_is_space {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \        prev_is_space = true;\n        } else {\n            result.push(ch);\n\
    \            prev_is_space = false;\n        }\n    }\n    result", "    let mut\
    \ new_text = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            continue;\n\
    \        } else {\n            if spaces == 1 {\n                new_text.push('_');\n\
    \            } else if spaces > 1 {\n                new_text.push('-');\n   \
    \         }\n            new_text.push(c);\n            spaces = 0;\n        }\n\
    \    }\n    new_text", "    let mut last = ' ';\n    let mut res = String::new();\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if last == '\
    \ ' {\n                res.push('-');\n            } else {\n                res.push('_');\n\
    \            }\n        } else {\n            res.push(c);\n        }\n      \
    \  last = c;\n    }\n    res", "    let mut res = String::new();\n    let mut\
    \ space_counter = 0;\n    for c in text.chars() {\n        if c == ' ' {\n   \
    \         space_counter += 1;\n            if space_counter == 1 {\n         \
    \       res.push('_');\n            } else if space_counter > 2 {\n          \
    \      res.push('-');\n            }\n        } else {\n            space_counter\
    \ = 0;\n            res.push(c);\n        }\n    }\n    res", '    text.replace("
    ", "_").replace("__", "-")', "    // panic!(\"Not implemented\");\n    let res\
    \ = text.replace(\" \", \"_\");\n    let res = res.replace(\"__\", \"_\");\n \
    \   let res = res.replace(\"___\", \"-\");\n    res", "    let mut chars = text.chars();\n\
    \    let mut out = String::new();\n    let mut last = ' ';\n    let mut last_last\
    \ = ' ';\n    let mut space_count = 0;\n    while let Some(ch) = chars.next()\
    \ {\n        if ch == ' ' {\n            space_count += 1;\n            if space_count\
    \ == 2 {\n                if last_last == ' ' {\n                    out.push('-');\n\
    \                } else {\n                    out.push('_');\n              \
    \  }\n            }\n        } else {\n            if space_count > 0 {\n    \
    \            out.push('_');\n            }\n            space_count = 0;\n   \
    \         out.push(ch);\n        }\n        last_last = last;\n        last =\
    \ ch;\n    }\n    out", "    let mut result = String::from(\"\");\n    let mut\
    \ spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n          \
    \  spaces += 1;\n            if spaces == 1 {\n                result.push('_');\n\
    \            } else if spaces > 2 {\n                spaces = 0;\n           \
    \     result.push('-');\n            }\n        } else {\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result", "    let mut res = text.replace(\"\
    \ \", \"_\");\n    while res.contains(\"__\") {\n        res = res.replace(\"\
    __\", \"-\");\n    }\n    return res;", "    let mut result = String::new();\n\
    \    let mut spaces_count = 0;\n    for ch in text.chars() {\n        if ch ==\
    \ ' ' {\n            spaces_count += 1;\n            if spaces_count > 2 {\n \
    \               continue;\n            }\n        } else {\n            spaces_count\
    \ = 0;\n        }\n        result.push(match ch {\n            ' ' => {\n    \
    \            if spaces_count > 2 {\n                    '-'\n                }\
    \ else {\n                    '_'\n                }\n            }\n        \
    \    _ => ch,\n        });\n    }\n    result", '    text.replace(" ", "_").replace("__",
    "-")', '    text.replace(" ", "_").replace("__", "-")', "    let mut fixed_spaces\
    \ = text.clone();\n    for space in fixed_spaces.matches(\" \") {\n        if\
    \ space.len() > 2 {\n            fixed_spaces = fixed_spaces.replace(\"   \",\
    \ \"-\");\n        } else {\n            fixed_spaces = fixed_spaces.replace(\"\
    \ \", \"_\");\n        }\n    }\n    fixed_spaces", '    unimplemented!()', " \
    \   let mut result = String::new();\n    let mut word_iter = text.split_whitespace();\n\
    \    loop {\n        let word = match word_iter.next() {\n            Some(w)\
    \ => w,\n            None => break,\n        };\n        if !result.is_empty()\
    \ {\n            result.push('_');\n        }\n        result.push_str(word);\n\
    \    }\n    result", '    text.replace("  ", "-").replace(" ", "_")', "\ttext.replace(\"\
    \  \", \"-\").replace(\" \", \"_\")", "    let mut count = 0;\n    let mut result\
    \ = String::new();\n    for char in text.chars() {\n        if char == ' ' {\n\
    \            count += 1;\n            if count > 2 {\n                count =\
    \ 2;\n            }\n        } else {\n            count = 0;\n        }\n   \
    \     if count == 1 {\n            result.push('_');\n        } else if count\
    \ == 2 {\n            result.push('-');\n        } else {\n            result.push(char);\n\
    \        }\n    }\n    result", "    let mut result = String::from(\"\");\n  \
    \  let mut is_last_space = false;\n    let mut consecutive_spaces = 0;\n    for\
    \ c in text.chars() {\n        if c == ' ' {\n            if !is_last_space {\n\
    \                consecutive_spaces = 1;\n                result.push('_');\n\
    \            } else {\n                consecutive_spaces += 1;\n            \
    \    if consecutive_spaces > 2 {\n                    result.push('-');\n    \
    \            }\n            }\n            is_last_space = true;\n        } else\
    \ {\n            result.push(c);\n            is_last_space = false;\n       \
    \ }\n    }\n    result", '    text.replace("  ", "-").replace(" ", "_")', "  \
    \  let mut result = String::new();\n    let mut lst_letter: char = '-';\n    for\
    \ letter in text.chars() {\n        if letter == ' ' {\n            if lst_letter\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(letter);\n\
    \        }\n        lst_letter = letter;\n    }\n    result", "    let text: String\
    \ = text.chars().map(|x| if x == ' ' { '_' } else { x }).collect();\n    text.replace(\"\
    __\", \"-\")", "    // TODO: Implement\n    unimplemented!();", "    let spaces\
    \ = \" \".repeat(3);\n    let stars = \"-\".repeat(3);\n    text.replace(\" \"\
    , \"_\").replace(&spaces, &stars)", "    let mut result = text.clone();\n    result\
    \ = result.replace(\" \", \"_\");\n    result = result.replace(\"_ _ _\", \"-\"\
    );\n    result = result.replace(\"_ _\", \"-\");\n    result", '    text.replace("  ",
    "-").replace(" ", "_")', "    let mut has_prev_space = false;\n    let mut has_prev_prev_space\
    \ = false;\n    let mut result = String::new();\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if has_prev_space {\n                if has_prev_prev_space\
    \ {\n                    continue;\n                } else {\n               \
    \     result.push('-');\n                    has_prev_prev_space = true;\n   \
    \             }\n            } else {\n                result.push('_');\n   \
    \             has_prev_space = true;\n            }\n        } else {\n      \
    \      result.push(c);\n            has_prev_space = false;\n            has_prev_prev_space\
    \ = false;\n        }\n    }\n    result", '    text.replace(" ", "_").replace("_
    _ _", "-")', '    unimplemented!()', "    let mut ans = String::new();\n    let\
    \ mut consecutive_spaces = 0;\n    for ch in text.chars() {\n        if ch ==\
    \ ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ == 1 {\n                ans.push('_');\n            } else if consecutive_spaces\
    \ > 2 {\n                ans.push('-');\n            }\n        } else {\n   \
    \         consecutive_spaces = 0;\n            ans.push(ch);\n        }\n    }\n\
    \    ans", "    let mut result = String::new();\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n    }\n    result", "    let mut was_space\
    \ = false;\n    let mut num_spaces = 0;\n    let mut result = String::new();\n\
    \    for ch in text.chars() {\n        if ch == ' ' {\n            if !was_space\
    \ {\n                num_spaces = 1;\n                was_space = true;\n    \
    \        } else {\n                num_spaces += 1;\n            }\n        }\
    \ else {\n            if was_space {\n                if num_spaces <= 2 {\n \
    \                   for _ in 0..num_spaces {\n                        result.push('_');\n\
    \                    }\n                } else {\n                    result.push('-');\n\
    \                }\n                was_space = false;\n            }\n      \
    \      result.push(ch);\n        }\n    }\n    if was_space {\n        if num_spaces\
    \ <= 2 {\n            for _ in 0..num_spaces {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push('-');\n        }\n \
    \   }\n    result", "    text.replace(' ', \"_\")\n        .replace(\"__\", \"\
    -\")", "    let mut prev_space = false;\n    let mut now_space = false;\n    let\
    \ mut consecutive_spaces = 0;\n    let mut res = \"\".to_string();\n    for c\
    \ in text.chars() {\n        prev_space = now_space;\n        now_space = c ==\
    \ ' ';\n        if now_space {\n            consecutive_spaces += 1;\n       \
    \ } else {\n            consecutive_spaces = 0;\n        }\n        if consecutive_spaces\
    \ > 2 {\n            res.push('-');\n        } else if now_space {\n         \
    \   res.push('_');\n        } else {\n            res.push(c);\n        }\n  \
    \  }\n    res", "    let mut tmp = text.clone();\n    tmp = tmp.replace(\" \"\
    , \"_\");\n    tmp = tmp.replace(\"__\", \"-\");\n    tmp = tmp.replace(\"___\"\
    , \"-\");\n    tmp = tmp.replace(\"____\", \"-\");\n    tmp = tmp.replace(\"_____\"\
    , \"-\");\n    tmp = tmp.replace(\"______\", \"-\");\n    tmp = tmp.replace(\"\
    _______\", \"-\");\n    tmp = tmp.replace(\"________\", \"-\");\n    tmp = tmp.replace(\"\
    _________\", \"-\");\n    tmp = tmp.replace(\"__________\", \"-\");\n    tmp =\
    \ tmp.replace(\"___________\", \"-\");\n    tmp = tmp.replace(\"____________\"\
    , \"-\");\n    tmp = tmp.replace(\"_____________\", \"-\");\n    tmp = tmp.replace(\"\
    ______________\", \"-\");\n    tmp = tmp.replace(\"_______________\", \"-\");\n\
    \    tmp = tmp.replace(\"________________\", \"-\");\n    tmp = tmp.replace(\"\
    _________________\", \"-\");\n    tmp = tmp.replace(\"__________________\", \"\
    -\");\n    tmp = tmp.replace(\"___________________\", \"-\");\n    tmp = tmp.replace(\"\
    ____________________\", \"-\");\n    tmp = tmp.replace(\"_____________________\"\
    , \"-\");\n    tmp = tmp.replace(\"______________________\", \"-\");\n    tmp\
    \ = tmp.replace(\"_______________________\", \"-\");\n    tmp = tmp.replace(\"\
    ________________________\", \"-\");\n    tmp = tmp.replace(\"_________________________\"\
    , \"-\");\n    tmp = tmp.replace(\"__________________________\", \"-\");\n   \
    \ tmp = tmp.replace(\"___________________________\", \"-\");\n    tmp = tmp.replace(\"\
    ____________________________\", \"-\");\n    tmp = tmp.replace(\"_____________________________\"\
    , \"-\");\n    tmp = tmp.replace(\"______________________________\", \"-\");\n\
    \    tmp = tmp.replace(\"_______________________________\", \"-\");\n    tmp =\
    \ tmp.replace(\"________________________________\", \"-\");\n    tmp = tmp.replace(\"\
    _________________________________\", \"-\");\n    tmp = tmp.replace(\"__________________________________\"\
    , \"-\");\n    tmp = tmp.replace(\"___________________________________\", \"-\"\
    );\n    tmp = tmp.replace(\"____________________________________\", \"-\");\n\
    \    tmp = tmp.replace(\"_____________________________________\", \"-\");\n  \
    \  tmp = tmp.replace(\"______________________________________\", \"-\");\n   \
    \ tmp = tmp.replace(\"_______________________________________\", \"-\");\n   \
    \ tmp = tmp.replace", "    let mut prev_char = '\\n';\n    let mut result = String::from(\"\
    \");\n    for current_char in text.chars() {\n        if current_char == ' ' {\n\
    \            if prev_char == ' ' {\n                result.push('-');\n      \
    \      } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            result.push(current_char);\n        }\n        prev_char = current_char;\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            space_count\
    \ += 1;\n            if space_count >= 2 {\n                if result.ends_with('_')\
    \ {\n                    result.pop();\n                }\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(ch);\n\
    \        }\n    }\n    result", '    unimplemented!()', '    text.replace(" ",
    "_").replace("__", "-")', '    unimplemented!("fix spaces in {}", text);', '    text.replace("  ",
    "-").replace(" ", "_")', "    // unimplemented!()\n    let mut fixed_string =\
    \ String::new();\n    let mut last_char = String::new();\n    let mut consec_space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == \" \" {\n                consec_space_count += 1;\n            } else {\n\
    \                consec_space_count = 1;\n            }\n            if consec_space_count\
    \ >= 2 {\n                fixed_string.push('-');\n            } else {\n    \
    \            fixed_string.push('_');\n            }\n        } else {\n      \
    \      consec_space_count = 0;\n            fixed_string.push(c);\n        }\n\
    \        last_char = c.to_string();\n    }\n    fixed_string", "    let mut result\
    \ = String::new();\n    let mut previous = ' ';\n    for ch in text.chars() {\n\
    \        match (ch, previous) {\n            (' ', ' ') => { result.push('-');\
    \ }\n            (' ', _) => { result.push('_'); }\n            _ => { result.push(ch);\
    \ }\n        }\n        previous = ch;\n    }\n    result", "    let mut string\
    \ = String::new();\n    let mut count = 0;\n    for (i, c) in text.chars().enumerate()\
    \ {\n        if c == ' ' {\n            count += 1;\n            if count == 2\
    \ {\n                string.push('-');\n            }\n        } else {\n    \
    \        count = 0;\n            string.push(c);\n        }\n    }\n    string",
  '    text.replace("  ", "-").replace(" ", "_")', '    text.replace("  ", "-").replace("
    ", "_")', "    let mut result = text.clone();\n    let mut i = 0;\n    let mut\
    \ prev_space = false;\n    while i < result.len() {\n        if result.chars().nth(i).unwrap()\
    \ == ' ' {\n            result.replace_range(i..i+1, \"_\");\n            if prev_space\
    \ {\n                result.replace_range(i..i+1, \"-\");\n            }\n   \
    \         prev_space = true;\n        } else {\n            prev_space = false;\n\
    \        }\n        i += 1;\n    }\n    result", '    text.replace(" ", "_").replace("_
    ", "_").replace("  ", "-")', "    let re = Regex::new(r\"(\\s+)\\s*\").unwrap();\n\
    \    let res = re.replace_all(&text, |caps: &Captures| {\n        match caps.len()\
    \ {\n            2 => String::from(\"_\"),\n            _ => String::from(\"-\"\
    ),\n        }\n    });\n    String::from(res)", "    let mut current_len = 0;\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            if current_len == 0 {\n                result.push('_');\n\
    \            } else if current_len >= 2 {\n                result.push('-');\n\
    \                current_len = 0;\n            } else {\n                result.push('_');\n\
    \                current_len += 1;\n            }\n        } else {\n        \
    \    result.push(c);\n            current_len = 0;\n        }\n    }\n    result",
  "    let mut current_state = 0;\n    let mut result = String::new();\n    for current_char\
    \ in text.chars() {\n        match current_state {\n            0 => {\n     \
    \           if current_char == ' ' {\n                    current_state = 1;\n\
    \                    result.push('_');\n                } else {\n           \
    \         result.push(current_char);\n                }\n            }\n     \
    \       1 => {\n                if current_char == ' ' {\n                   \
    \ current_state = 2;\n                } else {\n                    result.push(current_char);\n\
    \                    current_state = 0;\n                }\n            }\n  \
    \          2 => {\n                if current_char == ' ' {\n                \
    \    current_state = 3;\n                    result.push('-');\n             \
    \   } else {\n                    result.push(current_char);\n               \
    \     current_state = 0;\n                }\n            }\n            3 => {\n\
    \                if current_char == ' ' {\n                    current_state =\
    \ 3;\n                } else {\n                    result.push(current_char);\n\
    \                    current_state = 0;\n                }\n            }\n  \
    \          _ => {}\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut has_space = false;\n    let mut has_two_space = false;\n    for (i,\
    \ letter) in text.chars().enumerate() {\n        if letter == ' ' {\n        \
    \    if has_space {\n                if has_two_space {\n                    continue;\n\
    \                } else {\n                    has_two_space = true;\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             has_space = true;\n                result.push('_');\n         \
    \   }\n        } else {\n            has_space = false;\n            has_two_space\
    \ = false;\n            result.push(letter);\n        }\n    }\n    result", " \
    \   let mut res = String::from(\"\");\n    let mut pre = ' ';\n    let mut count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            if pre\
    \ == ' ' {\n                count += 1;\n            } else {\n              \
    \  count = 1;\n            }\n            if count == 1 {\n                res.push('_');\n\
    \            } else if count == 2 {\n                res.push('-');\n        \
    \    }\n        } else {\n            count = 0;\n            res.push(c);\n \
    \       }\n        pre = c;\n    }\n    res", "    let mut result = String::new();\n\
    \    let mut previous = 'a';\n    for c in text.chars() {\n        if c == ' '\
    \ {\n            if previous == ' ' {\n                result.push('-');\n   \
    \         } else {\n                result.push('_');\n            }\n       \
    \ } else {\n            result.push(c);\n        }\n        previous = c;\n  \
    \  }\n    result"]
stop_tokens:
- "\n}"
