name: HumanEval_35_max_element
language: rust
results:
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    if l.len() == 0 {\n        panic!(\"\
    No elements in the list\");\n    }\n    if l.len() == 1 {\n        return l[0];\n\
    \    }\n    let m = max_element(l[1..].to_vec());\n    if l[0] > m {\n       \
    \ l[0]\n    } else {\n        m\n    }\n}\n\nfn main() {\n    let candidate =\
    \ max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    *l.iter().max().unwrap()\n}\n\n\
    fn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for elem in l {\n        if elem > max {\n            max = elem;\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    // TODO: return maximum element\
    \ in the list\n    0\n}\n\nfn main() {\n    let candidate = max_element;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmp_1thiy7o.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = std::isize::MIN;\n \
    \   for x in l {\n        if x > m {\n            m = x;\n        }\n    }\n \
    \   m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for &x in\
    \ l.iter() {\n        if x > m {\n            m = x;\n        }\n    }\n    m\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  max(l[0], max_element_inner(l, 1))\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n --> /tmp/tmpe5i2jhbn.rs:7:3\n\
    \  |\n7 |   max(l[0], max_element_inner(l, 1))\n  |   ^^^ not found in this scope\n\
    \  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n  |\n\
    \nerror[E0425]: cannot find function `max_element_inner` in this scope\n --> /tmp/tmpe5i2jhbn.rs:7:13\n\
    \  |\n7 |   max(l[0], max_element_inner(l, 1))\n  |             ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for item\
    \ in l {\n        if item > max {\n            max = item;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = 0;\n    for item in\
    \ l {\n        if item > max {\n            max = item;\n        }\n    }\n  \
    \  max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l.iter() {\n        if *i > max {\n            max = *i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(l[0], |acc, e| if\
    \ acc > *e { acc } else { *e })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &e\
    \ in l.iter() {\n        if e > max {\n            max = e;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    // TODO: implement this function\n\
    \    0\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmpvpqh2190.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = isize::min_value();\n\
    \    for e in l {\n        if e > m {\n            m = e;\n        }\n    }\n\
    \    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut n = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > n {\n            n = l[i];\n        }\n    }\n\
    \    n\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for n in\
    \ l {\n        if n > max {\n            max = n;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m: isize = l[0];\n    for\
    \ &e in l.iter() {\n        if e > m {\n            m = e;\n        }\n    }\n\
    \    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for elem\
    \ in l {\n        if elem > max {\n            max = elem;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    assert!(l.len() > 0);\n    let mut\
    \ max = l[0];\n    for &x in l.iter() {\n        if x > max {\n            max\
    \ = x;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut res = None;\n    for i in\
    \ l {\n        match res {\n            None => res = Some(i),\n            Some(v)\
    \ => {\n                if i > v {\n                    res = Some(i);\n     \
    \           }\n            }\n        }\n    }\n    res.unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut r = l[0];\n  for i in 1..l.len()\
    \ {\n    if l[i] > r {\n      r = l[i];\n    }\n  }\n  r\n}\n\nfn main() {\n \
    \   let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = -(std::isize::MAX);\n\
    \    for n in l {\n        if n > max {\n            max = n;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for e in\
    \ l {\n        if e > max {\n            max = e;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(std::isize::MIN, |x,\
    \ y| std::cmp::max(x, *y))\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = 0;\n    for i in l {\n\
    \        if i > m {\n            m = i;\n        }\n    }\n    m\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().max().unwrap().clone()\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = std::isize::MIN;\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut res = l[0];\n    for x in\
    \ l {\n        if x > res {\n            res = x;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut highest = l[0];\n    for\
    \ e in l.iter() {\n        if *e > highest {\n            highest = *e;\n    \
    \    }\n    }\n    highest\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(std::isize::MIN, |acc,\
    \ &n| {\n        if n > acc {\n            n\n        } else {\n            acc\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &e\
    \ in l.iter() {\n        if e > max {\n            max = e;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut res = l[0];\n    for x in\
    \ l {\n        if x > res {\n            res = x;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    match l.iter().max() {\n       \
    \ Some(v) => *v,\n        None => 0,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(std::isize::MIN, |a,\
    \ &b| if a > b { a } else { b })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = -(std::isize::MAX);\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut max = l[0];\n  for &x in l.iter()\
    \ {\n    if x > max {\n      max = x;\n    }\n  }\n  max\n}\n\nfn main() {\n \
    \   let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for e in\
    \ l {\n        if e > max {\n            max = e;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for x in l {\n        if x > max {\n            max = x;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    // TODO\n    let mut max = l[0];\n\
    \    for x in l {\n        if x > max {\n            max = x;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = std::isize::MIN;\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    if l.len() == 0 {\n        panic!(\"\
    List must not be empty!\");\n    }\n    let mut max = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &e\
    \ in l.iter() {\n        if e > max {\n            max = e;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n    for\
    \ i in l {\n        if i > max {\n            max = i;\n        }\n    }\n   \
    \ max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n    for\
    \ x in l {\n        if x > max {\n            max = x;\n        }\n    }\n   \
    \ max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut list = l;\n    let mut max\
    \ = list[0];\n    for i in 1..list.len() {\n        if list[i] > max {\n     \
    \       max = list[i];\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = std::isize::MIN;\n \
    \   for i in l {\n        if i > m {\n            m = i;\n        }\n    }\n \
    \   m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut temp: isize = l[0];\n  \
    \  for i in l {\n        if i > temp {\n            temp = i;\n        }\n   \
    \ }\n    temp\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &n\
    \ in l.iter() {\n        if n > max {\n            max = n;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut it = l.iter();\n    let\
    \ max = it.next().unwrap();\n    it.fold(max, |acc, x| if *x > acc { *x } else\
    \ { acc })\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmposmqnqyx.rs:9:13\n  |\n9 |\
    \     it.fold(max, |acc, x| if *x > acc { *x } else { acc })\n  |            \
    \ ^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the\
    \ borrow\n  |\n9 |     it.fold(*max, |acc, x| if *x > acc { *x } else { acc })\n\
    \  |             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n    for\
    \ element in l {\n        if element > max {\n            max = element;\n   \
    \     }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    // TODO: implement this function.\n\
    \    return 0;\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmpr6zs39ef.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    match l.iter().max() {\n       \
    \ Some(max) => *max,\n        None => 0,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for i in 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n  \
    \      }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for elem\
    \ in l {\n        if elem > max {\n            max = elem;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = std::isize::MIN;\n\
    \    for x in l {\n        if x > max {\n            max = x;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut a = -1;\n    for x in l\
    \ {\n        if x > a {\n            a = x;\n        }\n    }\n    a\n}\n\nfn\
    \ main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = isize::min_value();\n\
    \    for i in l {\n        if i > m {\n            m = i;\n        }\n    }\n\
    \    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for item\
    \ in l.iter() {\n        if *item > max {\n            max = *item;\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = isize::min_value();\n\
    \    for i in 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n\
    \        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplapa11e3.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    if l.len() < 1 {\n        panic!(\"\
    Can't get maximum element of an empty list.\");\n    }\n\n    let mut m = l[0];\n\
    \    for &x in l.iter() {\n        if x > m {\n            m = x;\n        }\n\
    \    }\n    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for item\
    \ in l {\n        if item > max {\n            max = item;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut max = l[0];\n  for x in l\
    \ {\n    if x > max {\n      max = x;\n    }\n  }\n  max\n}\n\nfn main() {\n \
    \   let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = std::isize::MIN;\n\
    \    for x in l {\n        if x > max {\n            max = x;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > m {\n            m = l[i];\n        }\n    }\n\
    \    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut maximum = l[0];\n    for\
    \ x in l {\n        if x > maximum {\n            maximum = x;\n        }\n  \
    \  }\n    maximum\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_c_wopab.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = 0;\n    for num in\
    \ l {\n        if num > max {\n            max = num;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l.iter() {\n        if i > &max {\n            max = *i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = 0;\n    for e in l\
    \ {\n        if e > max {\n            max = e;\n        }\n    }\n    max\n}\n\
    \nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &i\
    \ in l.iter() {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m: isize = l[0];\n    for\
    \ i in 1..l.len() {\n        if l[i] > m {\n            m = l[i];\n        }\n\
    \    }\n    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for i in\
    \ l.iter() {\n        if i > &m {\n            m = *i;\n        }\n    }\n   \
    \ m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(None, |a, &b| Some(a.unwrap_or(b).max(b))).unwrap()\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l.iter() {\n        if x > &max {\n            max = *x;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &i\
    \ in l.iter() {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for x in\
    \ l {\n        if x > m {\n            m = x;\n        }\n    }\n    m\n}\n\n\
    fn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut best = None;\n    for x\
    \ in l {\n        if best.is_none() || x > best.unwrap() {\n            best =\
    \ Some(x);\n        }\n    }\n    return best.unwrap();\n}\n\nfn main() {\n  \
    \  let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(l[0], |x, &y| if x\
    \ > y { x } else { y })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut max = l[0];\n  for &i in l.iter()\
    \ {\n    if i > max {\n      max = i;\n    }\n  }\n  max\n}\n\nfn main() {\n \
    \   let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n\
    \    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4fwwnmop.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    *l.iter().max().unwrap()\n}\n\n\
    fn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = l[0];\n    for i in\
    \ l.iter() {\n        if *i > m {\n            m = *i;\n        }\n    }\n   \
    \ m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = 0;\n    for x in l\
    \ {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n}\n\
    \nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut m = l[0];\n  for &e in l.iter()\
    \ {\n    if e > m {\n      m = e;\n    }\n  }\n  m\n}\n\nfn main() {\n    let\
    \ candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &x\
    \ in l.iter() {\n        if x > max {\n            max = x;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l.iter() {\n        if *i > max {\n            max = *i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    // TODO: implement this function\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = max_element;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmph0uozh1u.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut max: isize = l[0];\n  for\
    \ i in 0..l.len() {\n    if l[i] > max {\n      max = l[i];\n    }\n  }\n  max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for el\
    \ in l {\n        if el > max {\n            max = el;\n        }\n    }\n   \
    \ max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(l[0], |a, &b| if a\
    \ > b { a } else { b })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(0, |acc, &x| if x\
    \ > acc { x } else { acc })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = 0;\n    for n in l\
    \ {\n        if n > max {\n            max = n;\n        }\n    }\n    max\n}\n\
    \nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = std::isize::MIN;\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for elem\
    \ in l {\n        if elem > max {\n            max = elem;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = std::isize::MIN;\n\
    \    for e in l {\n        if e > max {\n            max = e;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut result = isize::min_value();\n\
    \    for v in l {\n        if v > result {\n            result = v;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    // TODO: Implement max_element function.\n\
    \    // Hint: You can use iter and fold functions.\n    l.iter().fold(std::isize::MIN,\
    \ |x, y| if x > *y { x } else { *y })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(std::isize::MIN, |max,\
    \ e| e.max(max))\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpacmkrme4.rs:7:51\n  |\n7 |\
    \     l.iter().fold(std::isize::MIN, |max, e| e.max(max))\n  |               \
    \                                    ^^^\n  |                                \
    \                   |\n  |                                                   expected\
    \ `&isize`, found `isize`\n  |                                               \
    \    help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpacmkrme4.rs:7:45\n  |\n6 | fn max_element(l: Vec<isize>) -> isize\
    \ {\n  |                                  ----- expected `isize` because of return\
    \ type\n7 |     l.iter().fold(std::isize::MIN, |max, e| e.max(max))\n  |     \
    \                                        ^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n7 |     l.iter().fold(std::isize::MIN,\
    \ |max, e| *e.max(max))\n  |                                             +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = -2147483648;\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for elem\
    \ in l {\n        if elem > max {\n            max = elem;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpf5gxgjop.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l.iter() {\n        if i > &max {\n            max = *i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for &n\
    \ in l.iter() {\n        if n > max {\n            max = n;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for e in\
    \ l {\n        if e > max {\n            max = e;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    max_element_sub(l, 0, l.len() as\
    \ isize)\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max_element_sub` in this scope\n -->\
    \ /tmp/tmplobfb3c_.rs:7:5\n  |\n7 |     max_element_sub(l, 0, l.len() as isize)\n\
    \  |     ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for e in\
    \ l {\n        if e > max {\n            max = e;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8z7o6scb.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut current_max = isize::min_value();\n\
    \    for x in l {\n        if x > current_max {\n            current_max = x;\n\
    \        }\n    }\n    current_max\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for n in\
    \ l.iter() {\n        if n > &max {\n            max = *n;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(0, |acc, &x| {\n \
    \       if x > acc {\n            x\n        } else {\n            acc\n     \
    \   }\n    })\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut maximum: isize = l[0];\n\
    \    for elem in l {\n        if elem > maximum {\n            maximum = elem;\n\
    \        }\n    }\n    maximum\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in\
    \ l {\n        if i > result {\n            result = i;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = std::isize::MIN;\n\
    \    for v in l {\n        if v > max {\n            max = v;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    if l.len() == 0 {\n        panic!(\"\
    max_element called on empty list\");\n    }\n    l.iter().fold(l[0], |x, y| if\
    \ x > *y { x } else { *y })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut maximum = std::isize::MIN;\n\
    \    for i in l {\n        if i > maximum {\n            maximum = i;\n      \
    \  }\n    }\n    maximum\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  return l.iter().fold(0, |current_max,\
    \ &x| if x > current_max { x } else { current_max });\n}\n\nfn main() {\n    let\
    \ candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l {\n        if x > max {\n            max = x;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m: isize = l[0];\n    for\
    \ i in 1..l.len() {\n        if l[i] > m {\n            m = l[i];\n        }\n\
    \    }\n    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut maximum = l[0];\n    for\
    \ x in l.iter() {\n        if x > &maximum {\n            maximum = *x;\n    \
    \    }\n    }\n    maximum\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m: isize = l[0];\n    for\
    \ i in 1..l.len() {\n        if l[i] > m {\n            m = l[i];\n        }\n\
    \    }\n    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    match l.first() {\n        Some(x)\
    \ => {\n            let m = max_element(tail(l));\n            if *x > m {\n \
    \               *x\n            } else {\n                m\n            }\n \
    \       }\n        None => isize::min_value(),\n    }\n}\n\nfn main() {\n    let\
    \ candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `tail` in this scope\n --> /tmp/tmpaemp3n_y.rs:9:33\n\
    \  |\n9 |             let m = max_element(tail(l));\n  |                     \
    \            ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(std::isize::MIN, |acc,\
    \ x| if *x > acc { *x } else { acc })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    return l.iter().fold(0, |a, &b|\
    \ if a > b { a } else { b });\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for v in\
    \ l {\n        if v > max {\n            max = v;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for elem\
    \ in l {\n        if elem > max {\n            max = elem;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l.iter() {\n        if *i > max {\n            max = *i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n    for\
    \ item in l {\n        if item > max {\n            max = item;\n        }\n \
    \   }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    if l.len() == 0 {\n        panic!(\"\
    max_element: empty list!\");\n    }\n    let mut max = l[0];\n    for i in l {\n\
    \        if i > max {\n            max = i;\n        }\n    }\n    max\n}\n\n\
    fn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfz3jp08z.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = std::isize::MIN;\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    assert!(l.len() > 0);\n    let mut\
    \ max = l[0];\n    for e in l.iter() {\n        if *e > max {\n            max\
    \ = *e;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(0, |x, y| if x > *y\
    \ { x } else { *y })\n}\n\nfn main() {\n    let candidate = max_element;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut m = std::isize::MIN;\n \
    \   for i in l {\n        if i > m {\n            m = i;\n        }\n    }\n \
    \   m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    // TODO: implement me\n    // Your\
    \ code here\n    let mut m = l[0];\n    for i in l {\n        if i > m {\n   \
    \         m = i;\n        }\n    }\n    m\n}\n\nfn main() {\n    let candidate\
    \ = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = 0;\n    for item in\
    \ l {\n        if item > max {\n            max = item;\n        }\n    }\n  \
    \  max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    assert!(l.len() > 0);\n    let mut\
    \ m = l[0];\n    for i in 1..l.len() {\n        if l[i] > m {\n            m =\
    \ l[i];\n        }\n    }\n    m\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(0, |a, &b| if a >\
    \ b { a } else { b })\n}\n\nfn main() {\n    let candidate = max_element;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n  \
    \      }\n    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut max = -999999999999;\n  for\
    \ i in l {\n    if i > max {\n      max = i;\n    }\n  }\n  max\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut out = l[0];\n    for &x\
    \ in l.iter() {\n        if x > out {\n            out = x;\n        }\n    }\n\
    \    out\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut res = l[0];\n    for item\
    \ in l {\n        if item > res {\n            res = item;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut acc = std::isize::MIN;\n\
    \    for el in l {\n        if el > acc {\n            acc = el;\n        }\n\
    \    }\n    acc\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for item\
    \ in l {\n        if item > max {\n            max = item;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut v: Vec<isize> = l;\n   \
    \ let mut max: isize = 0;\n    let len: usize = v.len();\n    for i in 0..len\
    \ {\n        if v[i] > max {\n            max = v[i];\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    return l.iter().fold(0, |max, &a|\
    \ if a > max { a } else { max });\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for x in l.iter() {\n        if *x > max {\n            max = *x;\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for e in\
    \ l {\n        if e > max {\n            max = e;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for i in\
    \ l {\n        if i > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for x in\
    \ l.iter() {\n        if x > &max {\n            max = *x;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    match l.first() {\n        Some(f)\
    \ => {\n            let mut m = *f;\n            for x in l {\n              \
    \  if x > m {\n                    m = x;\n                }\n            }\n\
    \            m\n        }\n        None => 0,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    return l.iter().fold(std::isize::MIN,\
    \ |acc, i| acc.max(*i));\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for e in\
    \ l {\n        if e > max {\n            max = e;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max: isize = l[0];\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
    \ 124);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmps2l2d9wc.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    if l.len() == 0 {\n        panic!(\"\
    Empty list provided to max_element.\");\n    }\n    let mut m = l[0];\n    for\
    \ i in 1..l.len() {\n        if l[i] > m {\n            m = l[i];\n        }\n\
    \    }\n    m\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    let mut max = l[0];\n    for element\
    \ in l {\n        if element > max {\n            max = element;\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(isize::min_value(),\
    \ |max, v| v.max(max))\n}\n\nfn main() {\n    let candidate = max_element;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8dz0pyec.rs:7:54\n  |\n7 |\
    \     l.iter().fold(isize::min_value(), |max, v| v.max(max))\n  |            \
    \                                          ^^^\n  |                          \
    \                            |\n  |                                          \
    \            expected `&isize`, found `isize`\n  |                           \
    \                           help: consider borrowing here: `&max`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp8dz0pyec.rs:7:48\n  |\n6 | fn max_element(l:\
    \ Vec<isize>) -> isize {\n  |                                  ----- expected\
    \ `isize` because of return type\n7 |     l.iter().fold(isize::min_value(), |max,\
    \ v| v.max(max))\n  |                                                ^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n\
    \  |\n7 |     l.iter().fold(isize::min_value(), |max, v| *v.max(max))\n  |   \
    \                                             +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    l.iter().fold(l[0], |m, &x| if x\
    \ > m { x } else { m })\n}\n\nfn main() {\n    let candidate = max_element;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  if l.len() == 0 {\n    return 0;\n\
    \  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  let a = l[0];\n  let b = max_element(l[1..].to_vec());\n\
    \  if a > b {\n    return a;\n  }\n  return b;\n}\n\nfn main() {\n    let candidate\
    \ = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n    if l.len() < 1 {\n        return\
    \ 0;\n    }\n    let mut max = l[0];\n    for x in l {\n        if x > max {\n\
    \            max = x;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
    /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\n\
    fn max_element(l: Vec<isize>) -> isize {\n  let mut max = 0;\n  for e in l {\n\
    \    if e > max {\n      max = e;\n    }\n  }\n  max\n}\n\nfn main() {\n    let\
    \ candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
