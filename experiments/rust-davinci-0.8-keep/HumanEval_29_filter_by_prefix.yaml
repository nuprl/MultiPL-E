name: HumanEval_29_filter_by_prefix
language: rust
prompt: "/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
  \ Vec<String>, prefix: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
completions: ["    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    // Build a regex that matches only strings that start\
    \ with the given prefix.\n    let prefix_regex_string = regex::escape(&prefix)\
    \ + r\".*\";\n    let prefix_regex = Regex::new(&prefix_regex_string).unwrap();\n\
    \n    // Filter all strings.\n    strings\n        .into_iter()\n        .filter(|x|\
    \ prefix_regex.is_match(x))\n        .collect()", "    let mut results = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            results.push(s);\n\
    \        }\n    }\n    results", "    // iterate over all strings in the given\
    \ list\n    strings\n        .into_iter()\n        // and filter for strings that\
    \ start with the given prefix\n        .filter(|s| s.starts_with(&prefix))\n \
    \       // return the filtered list\n        .collect()", "    strings\n     \
    \   .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n    \
    \    .collect()", "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", '    return
    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();', '    return
    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();', "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    let prefix_len = prefix.len();\n\
    \    strings\n        .into_iter()\n        .filter(|item| item.len() >= prefix_len\
    \ && &item[0..prefix_len] == prefix)\n        .collect()", "    // take strings,\
    \ and apply the closure to each one, keeping those\n    // whose closure returns\
    \ true, which is the case of those that starts\n    // with the prefix passed\
    \ as an argument\n    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|x|\
    \ x.starts_with(&prefix))\n        .collect()", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    let mut filtered: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", "    strings\n        .into_iter()\n       \
    \ .filter(|s| s.starts_with(&prefix))\n        .collect()", '    return strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect();', "    strings\n        .into_iter()\n    \
    \    .filter(|s| {\n            s.chars()\n                .take(prefix.len())\n\
    \                .collect::<String>()\n                .to_lowercase()\n     \
    \           == prefix.to_lowercase()\n        })\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|x| x.starts_with(&prefix))\n        .collect()",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|word|\
    \ word.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result", "    let prefix = prefix.to_string();\n    let\
    \ strings: Vec<String> = strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect();\n    strings", "    strings\n        .into_iter()\n     \
    \   .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n \
    \       .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    let mut results = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            results.push(string);\n\
    \        }\n    }\n    results", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(&prefix))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|str| str.starts_with(&prefix))\n\
    \        .collect()", "    let mut results = Vec::new();\n    for str in strings\
    \ {\n        if str.starts_with(&prefix) {\n            results.push(str);\n \
    \       }\n    }\n    results", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if starts_with(&s, &prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    let filtered: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect();\n    filtered", "    strings\n        .into_iter()\n    \
    \    .filter(|word| word.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result", "    let mut results = Vec::new();\n    for string\
    \ in strings {\n        if string.starts_with(&prefix) {\n            results.push(string);\n\
    \        }\n    }\n    results", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    let mut\
    \ v = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix) {\n\
    \            v.push(s);\n        }\n    }\n    v", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    let mut filtered = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered", '    return
    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();', "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    let filtered: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect();\n    return filtered;", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|input|\
    \ input.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(&prefix))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", '    return strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();',
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    let mut\
    \ filtered: Vec<String> = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered", "    let\
    \ mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", "    let\
    \ options = vec![];\n    options", "    strings\n        .into_iter()\n      \
    \  .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n  \
    \      .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(&prefix) {\n            result.push(s)\n       \
    \ }\n    }\n    result", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|ref\
    \ s| s.starts_with(&prefix))\n        .collect()", "    let mut result = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       result.push(string);\n        }\n    }\n    result", "    strings\n  \
    \      .into_iter()\n        .filter(|name| name.starts_with(&prefix))\n     \
    \   .collect()", "    // TODO Implement this method\n\n    let mut filtered_words:\
    \ Vec<String> = Vec::new();\n\n    for s in strings {\n        if &s[0..1] ==\
    \ prefix {\n            filtered_words.push(s);\n        }\n    }\n\n    filtered_words",
  "    let prefix_len = prefix.len();\n    strings\n        .into_iter()\n       \
    \ .filter(|s| s.len() >= prefix_len && &s[..prefix_len] == prefix)\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|str|\
    \ str.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(&prefix))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(&prefix))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    let mut string_list: Vec<String>\
    \ = Vec::new();\n    for str in strings {\n        if str.starts_with(&prefix)\
    \ {\n            string_list.push(str);\n        }\n    }\n    string_list", " \
    \   let mut strings_starting_with_prefix = Vec::new();\n    for s in strings {\n\
    \        if s.starts_with(&prefix) {\n            strings_starting_with_prefix.push(s)\n\
    \        }\n    }\n    strings_starting_with_prefix", "    let mut prefix_strings\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix) {\n\
    \            prefix_strings.push(s);\n        }\n    }\n    prefix_strings", " \
    \   let mut matches = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            matches.push(string);\n        }\n    }\n    matches", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    let mut results = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       results.push(string);\n        }\n    }\n    results", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    let mut acc = Vec::new();\n    for s in strings {\n\
    \        if s.starts_with(&prefix) {\n            acc.push(s);\n        }\n  \
    \  }\n    acc", "    let mut results = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            results.push(string);\n\
    \        }\n    }\n    results", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    let mut prefix_words = Vec::new();\n\
    \    for word in strings {\n        if word.starts_with(&prefix) {\n         \
    \   prefix_words.push(word);\n        }\n    }\n    prefix_words", "    let mut\
    \ result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    let mut ret = Vec::new();\n    for s in strings {\n\
    \        if s.starts_with(&prefix) {\n            ret.push(s);\n        }\n  \
    \  }\n    ret", "    let mut filtered = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            filtered.push(string)\n\
    \        }\n    }\n    filtered", '    return strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();',
  "    strings\n        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    return strings.into_iter().filter(|s| {\n        s.chars().next().unwrap()\
    \ == prefix.chars().next().unwrap()\n    }).collect::<Vec<String>>();", "    strings\n\
    \        .into_iter()\n        .filter(|str| str.starts_with(&prefix))\n     \
    \   .collect()", "    let mut prefix = prefix;\n    prefix.push('*');\n    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|x| x.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|x|\
    \ x.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    let strings\
    \ = strings.into_iter();\n    strings.filter(|s| s.starts_with(&prefix)).collect()",
  "    let strings = str_to_lower(strings);\n    let prefix = str_to_lower(vec![prefix]);\n\
    \    let prefix = prefix[0].clone();\n    let mut filtered_strings = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings\n        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", '    return
    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect();', "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(&prefix))\n        .collect()", " \
    \   let mut matched = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            matched.push(string);\n        }\n    }\n    matched", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let result:\
    \ Vec<String> = strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect();\n    result", "    strings\n        .into_iter()\n      \
    \  .filter(|string| string.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", '    return strings.into_iter().filter(|x| x.starts_with(&prefix)).collect();',
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    let mut\
    \ result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|ref\
    \ s| s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    let result: Vec<String> = strings\n        .into_iter()\n        .filter(|x|\
    \ x.starts_with(&prefix))\n        .collect();\n    result", "    strings\n  \
    \      .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n \
    \       .collect()", "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    let mut filtered: Vec<String> = Vec::new();\n    for\
    \ string in strings {\n        if string.starts_with(&prefix) {\n            filtered.push(string);\n\
    \        }\n    }\n    filtered", "    strings\n        .into_iter()\n       \
    \ .filter(|x| x.starts_with(&prefix))\n        .collect()", "    strings\n   \
    \     .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n  \
    \      .collect()", "    let mut result = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result", "    let mut matched_strings = Vec::new();\n \
    \   for x in strings {\n        if x.starts_with(&prefix) {\n            matched_strings.push(x);\n\
    \        }\n    }\n    matched_strings", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    let mut filtered: Vec<String> = Vec::new();\n    for s in strings {\n     \
    \   if s.starts_with(&prefix) {\n            filtered.push(s);\n        }\n  \
    \  }\n    filtered", "    strings\n        .into_iter()\n        .filter(|candidate|\
    \ candidate.starts_with(&prefix))\n        .collect()", "    strings\n       \
    \ .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(&prefix))\n        .collect()", " \
    \   let mut strings_iter = strings.into_iter();\n    let mut res = Vec::new();\n\
    \    while let Some(string) = strings_iter.next() {\n        if string.starts_with(&prefix)\
    \ {\n            res.push(string);\n        }\n    }\n    res", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    // TODO\n    Vec::new()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.starts_with(&prefix))\n        .collect()", " \
    \   strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    let mut filtered: Vec<String> = Vec::new();\n    for\
    \ s in strings {\n        if &s[0..1] == prefix {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", "    strings\n        .into_iter()\n       \
    \ .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n   \
    \     .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result", "    // String::starts_with is like Python in\
    \ that it allows full suffixing:\n    // >>> \"ABC\".starts_with(\"A\")\n    //\
    \ True\n    // >>> \"ABC\".starts_with(\"B\")\n    // False\n    // >>> \"ABC\"\
    .starts_with(\"ABC\")\n    // True\n    // strings.iter().filter(|s| s.starts_with(&prefix)).collect()\n\
    \n    // But, if you want a non-suffix type, then we can just use the Rust library\n\
    \    // for this.\n    strings.iter().filter(|s| s.starts_with(&prefix)).collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    // FIXME: implement\n    vec![]", "    strings\n  \
    \      .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.starts_with(&prefix))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .collect()"]
stop_tokens:
- "\n}"
