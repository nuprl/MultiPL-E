name: HumanEval_30_get_positive
language: rust
prompt: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
  \ Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
  \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
  \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
  \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  }\n"
completions: ['    l.into_iter().filter(|n| *n > 0).collect()', "    // TODO return\
    \ a list with only positive numbers\n    l.into_iter().filter(|&x| x > 0).collect()",
  '    l.into_iter().filter(|i| *i > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut result = Vec::new();\n    for n in l {\n    \
    \    if n > 0 {\n            result.push(n);\n        }\n    }\n    result", " \
    \   let mut temp = Vec::new();\n    for i in l {\n        if i > 0 {\n       \
    \     temp.push(i);\n        }\n    }\n    temp", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|n| *n > 0).collect()', '    unimplemented!();',
  "    let mut positive = Vec::new();\n    for num in l {\n        if num > 0 {\n\
    \            positive.push(num);\n        }\n    }\n    positive", '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut r = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            r.push(i);\n        }\n    }\n    r", "    let mut positives\
    \ = Vec::new();\n    for num in l {\n        if num > 0 {\n            positives.push(num);\n\
    \        }\n    }\n    positives", "    let mut pos_list = Vec::new();\n    for\
    \ n in l {\n        if n > 0 {\n            pos_list.push(n);\n        }\n   \
    \ }\n    pos_list", '  unimplemented!()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for el in l {\n        if el > 0 {\n            result.push(el);\n      \
    \  }\n    }\n    result", '    l.into_iter().filter(|n| *n > 0).collect()', " \
    \   let mut output = Vec::new();\n    for i in l {\n        if i > 0 {\n     \
    \       output.push(i);\n        }\n    }\n    output", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()', '    return vec![];', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut ret = Vec::new();\n    for elem in l {\n    \
    \    if elem > 0 {\n            ret.push(elem);\n        }\n    }\n    ret", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', '    Vec::new()', '    unimplemented!()',
  '    l.into_iter().filter(|v| v > &0).collect()', "    // l.iter().filter(|&n| n\
    \ > &0).cloned().collect()\n    l.into_iter().filter(|&n| n > 0).collect()", " \
    \   // C++ code:\n    // vector<int> result;\n    // for (int v : l) {\n    //\
    \     if (v > 0) {\n    //         result.push_back(v);\n    //     }\n    //\
    \ }\n    // return result;\n    l.into_iter().filter(|x| *x > 0).collect()", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()', '    unimplemented!();', "    let\
    \ mut ret = Vec::new();\n    for x in l {\n        if x > 0 {\n            ret.push(x);\n\
    \        }\n    }\n    ret", '    Vec::new()', '    unimplemented!()', "    let\
    \ mut result: Vec<isize> = Vec::new();\n    for x in l {\n        if x > 0 {\n\
    \            result.push(x);\n        }\n    }\n    result", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!();', '    unimplemented!()',
  '    unimplemented!();', "    let mut new_l = Vec::new();\n    for i in l {\n  \
    \      if i > 0 {\n            new_l.push(i);\n        }\n    }\n    new_l", " \
    \   let v: Vec<isize> = l.into_iter().filter(|x| x > &0).collect();\n    v", " \
    \   let mut positive_list: Vec<isize> = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            positive_list.push(i);\n        }\n    }\n    positive_list",
  "    let mut res = Vec::new();\n    for num in l {\n        if num > 0 {\n     \
    \       res.push(num);\n        }\n    }\n    res", "    let mut result = Vec::new();\n\
    \    for number in l {\n        if number > 0 {\n            result.push(number);\n\
    \        }\n    }\n    result", "    // TODO: implement your solution here\n \
    \   let mut r: Vec<isize> = Vec::new();\n    for i in l.iter() {\n        if *i\
    \ > 0 {\n            r.push(*i);\n        }\n    }\n    r", '    unimplemented!()',
  "    let mut m = Vec::new();\n    for i in l {\n        if i > 0 {\n           \
    \ m.push(i);\n        }\n    }\n    m", "    let mut vec: Vec<isize> = Vec::new();\n\
    \    for i in l {\n        if i > 0 {\n            vec.push(i);\n        }\n \
    \   }\n    vec", '    unimplemented!()', "    let mut ret: Vec<isize> = Vec::new();\n\
    \    for i in l {\n        if i > 0 {\n            ret.push(i);\n        }\n \
    \   }\n    ret", '    l.into_iter().filter(|x| *x > 0).collect()', "    let mut\
    \ res = Vec::new();\n    for el in l {\n        if el > 0 {\n            res.push(el);\n\
    \        }\n    }\n    res", '    l.into_iter().filter(|x| *x > 0).collect()',
  '    unimplemented!();', "    let mut new_list = Vec::new();\n    for n in l {\n\
    \        if n > 0 {\n            new_list.push(n);\n        }\n    }\n    new_list",
  '    unimplemented!()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|v|
    *v > 0).collect()', "    let mut out = Vec::new();\n    for i in l {\n       \
    \ if i > 0 {\n            out.push(i);\n        }\n    }\n    out", '    unimplemented!();',
  '    unimplemented!()', '    l.into_iter().filter(|&x| x > 0).collect()', "    let\
    \ mut res = Vec::new();\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    vec![]', "    let mut res = Vec::new();\n  \
    \  for i in l {\n        if i > 0 {\n            res.push(i);\n        }\n   \
    \ }\n    res", '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  "    let mut r = Vec::new();\n    for x in l {\n        if x > 0 {\n           \
    \ r.push(x);\n        }\n    }\n    r", '    unimplemented!()', "    let mut vector\
    \ = Vec::new();\n    for i in l {\n        if i > 0 {\n            vector.push(i);\n\
    \        }\n    }\n    vector", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', "    //~^ ERROR this function's return type contains a borrowed\
    \ value\n    l.into_iter().filter(|x| *x > 0).collect()", "    let mut positives\
    \ = Vec::new();\n    for i in &l {\n        if *i > 0 {\n            positives.push(*i);\n\
    \        }\n    }\n    positives", '    unimplemented!()', "    let mut result\
    \ = Vec::new();\n    for e in l {\n        if e > 0 {\n            result.push(e);\n\
    \        }\n    }\n    result", "    let mut v = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            v.push(i);\n        }\n    }\n    v", '    unimplemented!();',
  "    let mut res = Vec::new();\n    for i in l {\n        if i > 0 {\n         \
    \   res.push(i);\n        }\n    }\n    res", "    let mut k = vec![];\n    for\
    \ i in l.iter() {\n        if *i > 0 {\n            k.push(*i);\n        }\n \
    \   }\n    k", '    l.into_iter().filter(|x| *x > 0).collect()', "    let mut\
    \ pos: Vec<isize> = Vec::new();\n    for n in l {\n        if n > 0 {\n      \
    \      pos.push(n);\n        }\n    }\n    pos", '    unimplemented!()', "   \
    \ let mut pos: Vec<isize> = Vec::new();\n    for i in l {\n        if i > 0 {\n\
    \            pos.push(i);\n        }\n    }\n    pos", '    unimplemented!()',
  "    // replace this\n    Vec::new()", '    l.into_iter().filter(|x| *x > 0).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in l {\n        if i >\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut positive_numbers = Vec::new();\n    for n in l\
    \ {\n        if n > 0 {\n            positive_numbers.push(n);\n        }\n  \
    \  }\n    positive_numbers", '    l.into_iter().filter(|&x| x > 0).collect()',
  '    unimplemented!()', '    unimplemented!();', "    let mut res = Vec::new();\n\
    \    for i in l {\n        if i > 0 {\n            res.push(i);\n        }\n \
    \   }\n    res", "    // TODO: Implement your solution here\n    let mut result\
    \ = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n\
    \        }\n    }\n    result", '    unimplemented!()', "    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n\
    \        }\n    }\n    result", "    let ret = l.iter().filter(|x| **x > 0).map(|x|\
    \ *x).collect();\n    return ret;", '    unimplemented!()', "    let mut result:\
    \ Vec<isize> = Vec::new();\n    for element in l {\n        if element > 0 {\n\
    \            result.push(element);\n        }\n    }\n    result", '    unimplemented!();',
  '    unimplemented!()', '    l.into_iter().filter(|x| *x > 0).collect()', "    let\
    \ mut ret = Vec::new();\n    for i in l {\n        if i > 0 {\n            ret.push(i);\n\
    \        }\n    }\n    ret", '    l.into_iter().filter(|&x| x > 0).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for item in l {\n        if item\
    \ > 0 {\n            result.push(item);\n        }\n    }\n    result", "    let\
    \ mut res = Vec::new();\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    l.into_iter().filter(|x| *x > 0).collect()',
  "    // implement this function\n    let mut list: Vec<isize> = Vec::new();\n  \
    \  for i in 0..l.len() {\n        if l[i] > 0 {\n            list.push(l[i]);\n\
    \        }\n    }\n    list", '    l.into_iter().filter(|&x| x > 0).collect()',
  '    unimplemented!()', "    let mut v = Vec::new();\n    for i in l {\n       \
    \ if i > 0 {\n            v.push(i);\n        }\n    }\n    v", "    // Code here!\n\
    \    l.into_iter().filter(|&x| x > 0).collect()", "    // hint: call is_positive()\n\
    \    unimplemented!()", '    unimplemented!();', "    let mut new_vec = Vec::new();\n\
    \    for num in l {\n        if num > 0 {\n            new_vec.push(num);\n  \
    \      }\n    }\n    new_vec", "    // TODO\n    unimplemented!()", '  l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!();', '    unimplemented!()', '    l.into_iter().filter(|n|
    *n > 0).collect()', "    let mut r: Vec<isize> = Vec::new();\n    for e in l {\n\
    \        if e > 0 {\n            r.push(e);\n        }\n    }\n    r", '    unimplemented!()',
  "    let mut r: Vec<isize> = Vec::new();\n    for e in l {\n        if e > 0 {\n\
    \            r.push(e);\n        }\n    }\n    r", "    let mut v = Vec::new();\n\
    \    for i in l {\n        if i > 0 {\n            v.push(i);\n        }\n   \
    \ }\n    v", "    // TODO: write code here\n    let mut result: Vec<isize> = Vec::new();\n\
    \    for item in l {\n        if item > 0 {\n            result.push(item);\n\
    \        }\n    }\n    result", "    let result = l.into_iter().filter(|i| *i\
    \ > 0).collect();\n    result", "    let mut v = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            v.push(i);\n        }\n    }\n    v", "    let\
    \ mut res = Vec::new();\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    l.into_iter().filter(|i| *i > 0).collect()',
  '    l.into_iter().filter(|i| *i > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut result: Vec<isize> = Vec::new();\n    for i in\
    \ l {\n        if i > 0 {\n            result.push(i);\n        }\n    }\n   \
    \ result", '    unimplemented!();', '    l.into_iter().filter(|&n| n > 0).collect()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut v = Vec::new();\n    for num in l {\n       \
    \ if num > 0 {\n            v.push(num);\n        }\n    }\n    v", "    // Hint:\
    \ You might consider using the .filter and .collect methods.\n    l.into_iter().filter(|&x|\
    \ x > 0).collect()", '    unimplemented!()', '    l.into_iter().filter(|&e| e
    > 0).collect()', "    let mut new_l: Vec<isize> = Vec::new();\n    for i in l\
    \ {\n        if i > 0 {\n            new_l.push(i);\n        }\n    }\n    new_l",
  "    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n      \
    \      result.push(i);\n        }\n    }\n    result", "    let mut l = l;\n \
    \   l.retain(|x| *x > 0);\n    l", "    // TODO: implement!\n    unimplemented!()",
  "    let mut new_l = Vec::new();\n    for i in l {\n        if i > 0 {\n       \
    \     new_l.push(i);\n        }\n    }\n    new_l", '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut l1 = Vec::new();\n    for x in l {\n        if\
    \ x > 0 {\n            l1.push(x);\n        }\n    }\n    l1", "    let mut res\
    \ = Vec::new();\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    l.into_iter().filter(|&x| x > 0).collect()',
  '    Vec::new()', "    // TODO: Implement this function.\n    l.into_iter().filter(|n|\
    \ n > &0).collect()", '    l.into_iter().filter(|x| *x > 0).collect()', "    let\
    \ mut positive_numbers = Vec::new();\n    for i in l {\n        if i > 0 {\n \
    \           positive_numbers.push(i);\n        }\n    }\n    positive_numbers",
  "  let mut vec: Vec<isize> = Vec::new();\n  for e in l {\n    if e > 0 {\n     \
    \ vec.push(e);\n    }\n  }\n  vec", '    unimplemented!()', "    let v = l.iter().filter(|x|\
    \ *x > &0).cloned().collect();\n    return v;", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!()',
  "    let mut ret_vec = Vec::new();\n    for i in l {\n        if i > 0 {\n     \
    \       ret_vec.push(i);\n        }\n    }\n    ret_vec", '    unimplemented!()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!()', "    let mut positive = Vec::new();\n\
    \    for num in l {\n        if num > 0 {\n            positive.push(num);\n \
    \       }\n    }\n    positive", '    unimplemented!()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&i|
    i > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|i| *i > 0).collect()', "    let\
    \ mut pos = Vec::new();\n    for elem in l {\n        if elem > 0 {\n        \
    \    pos.push(elem);\n        }\n    }\n    pos", '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut ret = Vec::new();\n    for i in &l {\n       \
    \ if *i > 0 {\n            ret.push(*i);\n        }\n    }\n    ret", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|x| *x >
    0).collect()', "    let mut r: Vec<isize> = Vec::new();\n    for i in l {\n  \
    \      if i > 0 {\n            r.push(i);\n        }\n    }\n    r", '    unimplemented!();',
  "    let mut positive_vec = Vec::new();\n    for i in &l {\n        if *i > 0 {\n\
    \            positive_vec.push(*i);\n        }\n    }\n    positive_vec", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    vec![]', '    unimplemented!();', "    let mut l2 = Vec::new();\n\
    \    for x in l {\n        if x > 0 {\n            l2.push(x);\n        }\n  \
    \  }\n    l2", '    unimplemented!()']
stop_tokens:
- "\n}"
