name: HumanEval_153_Strongest_Extension
language: rust
prompt: "/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfn Strongest_Extension(class_name: String,\
  \ extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    let mut extensions = extensions.iter().enumerate().map(|(i, v)|\
    \ (i, v.to_string())).collect::<Vec<(usize, String)>>();\n    extensions.sort_by(|a,\
    \ b| {\n        let a_u: u32 = a.1.chars().filter(|&x| x.is_uppercase()).count()\
    \ as u32;\n        let a_l: u32 = a.1.chars().filter(|&x| x.is_lowercase()).count()\
    \ as u32;\n        let b_u: u32 = b.1.chars().filter(|&x| x.is_uppercase()).count()\
    \ as u32;\n        let b_l: u32 = b.1.chars().filter(|&x| x.is_lowercase()).count()\
    \ as u32;\n        let a_s = a_u - a_l;\n        let b_s = b_u - b_l;\n      \
    \  if a_s == b_s {\n            b.0.cmp(&a.0)\n        } else {\n            b_s.cmp(&a_s)\n\
    \        }\n    });\n    format!(\"{}.{}\", class_name, extensions[0].1)", " \
    \   let mut ex_set: Vec<(String, f64)> = Vec::new();\n    for ext in extensions\
    \ {\n        let up_count = ext.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let down_count = ext.chars().filter(|c| c.is_lowercase()).count();\n\
    \        ex_set.push((ext, up_count as f64 - down_count as f64));\n    }\n   \
    \ ex_set.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap());\n    let mut str_ex =\
    \ String::new();\n    str_ex.push_str(&class_name);\n    str_ex.push_str(\".\"\
    );\n    str_ex.push_str(&ex_set[ex_set.len() - 1].0);\n    str_ex", "    let mut\
    \ s: f64 = -1.0;\n    let mut result = String::new();\n    for extension in extensions\
    \ {\n        let uppercase_letters = extension.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let lowercase_letters = extension.chars().filter(|&c| c.is_lowercase()).count();\n\
    \        let strength = (uppercase_letters as f64 - lowercase_letters as f64)\
    \ / extension.len() as f64;\n        if strength > s {\n            s = strength;\n\
    \            result = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ result)", "    let mut strongest_extension = &extensions[0];\n    let mut strongest_extension_strength\
    \ = 0;\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension = &extension;\n            strongest_extension_strength\
    \ = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut max_strength = 0.0;\n    let mut strongest_extension = \"\".to_string();\n\
    \    for extension in extensions {\n        let strength = match extension.chars().filter(|c|\
    \ c.is_uppercase()).count() {\n            0 => 0.0,\n            x => x as f64\
    \ - extension.chars().filter(|c| c.is_lowercase()).count() as f64,\n        };\n\
    \        if strength > max_strength {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    extensions.iter().enumerate().fold((class_name,\
    \ 0.0, 0), |(max_class, max_str, max_index), (i, ext)| {\n        let strength\
    \ = ext.matches(char::is_uppercase).count() as f64 - ext.matches(char::is_lowercase).count()\
    \ as f64;\n        if strength > max_str {\n            (ext.clone(), strength,\
    \ i)\n        } else if strength == max_str {\n            if i < max_index {\n\
    \                (ext.clone(), strength, i)\n            } else {\n          \
    \      (max_class, max_str, max_index)\n            }\n        } else {\n    \
    \        (max_class, max_str, max_index)\n        }\n    }).0", "    let mut strength:f64\
    \ = 0.0;\n    let mut strong_extension = \"\";\n    for extension in extensions\
    \ {\n        let mut sm = 0;\n        let mut cap = 0;\n        for ch in extension.chars()\
    \ {\n            if ch.is_lowercase() {\n                sm += 1;\n          \
    \  } else {\n                cap += 1;\n            }\n        }\n        let\
    \ st = (cap as f64 - sm as f64) / extension.len() as f64;\n        if st > strength\
    \ {\n            strength = st;\n            strong_extension = &extension;\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, strong_extension);",
  "    let strongest_extension = extensions.iter().fold(\n        (String::new(),\
    \ 0),\n        |(strongest_extension, highest_strength), extension| {\n      \
    \      let extension_strength = extension.chars().fold((0, 0), |(cap, sm), letter|\n\
    \                match letter {\n                    'A'...'Z' => (cap + 1, sm),\n\
    \                    'a'...'z' => (cap, sm + 1),\n                    _ => (cap,\
    \ sm),\n                }\n            );\n            let extension_strength\
    \ = extension_strength.0 as i32 - extension_strength.1 as i32;\n            if\
    \ extension_strength > highest_strength {\n                (extension.clone(),\
    \ extension_strength)\n            } else {\n                (strongest_extension,\
    \ highest_strength)\n            }\n        }\n    );\n    format!(\"{}.{}\",\
    \ class_name, strongest_extension.0)", "    let mut strongest_extension: String\
    \ = String::new();\n    let mut strongest_strength: i32 = 0;\n    for i in 0..extensions.len()\
    \ {\n        let extension = &extensions[i];\n        let mut upper_case_count:\
    \ i32 = 0;\n        let mut lower_case_count: i32 = 0;\n        for j in 0..extension.len()\
    \ {\n            let c = extension.chars().nth(j).unwrap();\n            if c.is_uppercase()\
    \ {\n                upper_case_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let strength = upper_case_count - lower_case_count;\n        if strength >\
    \ strongest_strength {\n            strongest_strength = strength;\n         \
    \   strongest_extension = extension.to_string();\n        }\n    }\n    let result\
    \ = class_name + \".\" + &strongest_extension;\n    return result;", "    class_name.to_string()\
    \ + \".\" +\n    &extensions.iter().min_by_key(|i| {\n        let a = i.to_uppercase().to_string();\n\
    \        let a_cnt = a.len();\n        let b = i.to_lowercase().to_string();\n\
    \        let b_cnt = b.len();\n        a_cnt - b_cnt\n    }).unwrap().to_string()",
  "    let mut strongest_extension = \"none\";\n    let mut highest_strength = -100000.0;\n\
    \    for extension in extensions {\n        let capital_letters = extension.chars().filter(|&x|\
    \ x.is_uppercase()).count();\n        let lowercase_letters = extension.chars().filter(|&x|\
    \ x.is_lowercase()).count();\n        let current_strength = (capital_letters\
    \ as f64) - (lowercase_letters as f64);\n        if current_strength > highest_strength\
    \ {\n            highest_strength = current_strength;\n            strongest_extension\
    \ = &extension;\n        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut strongest_ext = String::new();\n    let mut strongest_strength = 0;\n\
    \    for s in extensions {\n        let mut c = 0;\n        let mut sm = 0;\n\
    \        for ch in s.chars() {\n            if ch.is_uppercase() {\n         \
    \       c += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let cur_strength = c - sm;\n        if cur_strength > strongest_strength\
    \ {\n            strongest_strength = cur_strength;\n            strongest_ext\
    \ = s;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_ext)",
  "    // Sort the extensions in descending order.\n    let mut sorted_extensions\
    \ = extensions.clone();\n    sorted_extensions.sort_by(|a, b| a.to_lowercase().cmp(&b.to_lowercase()));\n\
    \    // Find the strongest extension.\n    let strongest_extension = sorted_extensions.iter().fold(\n\
    \        \"\",\n        |acc, extension| {\n            let strength = strength(extension);\n\
    \            let acc_strength = strength(&acc);\n            if strength > acc_strength\
    \ {\n                extension.to_string()\n            } else {\n           \
    \     acc.to_string()\n            }\n        }\n    );\n    // Return the class\
    \ name concatenated with the strongest extension.\n    format!(\"{}.{}\", class_name,\
    \ strongest_extension)", "    let mut strongest_extension = \"\".to_string();\n\
    \    let mut strongest_score = -1;\n    for extension in extensions {\n      \
    \  let cap = extension.chars().filter(|x| x.is_uppercase()).count();\n       \
    \ let small = extension.chars().filter(|x| x.is_lowercase()).count();\n      \
    \  let score = cap - small;\n        if score > strongest_score {\n          \
    \  strongest_score = score;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut strongest_extension: String = \"\".to_string();\n    let mut strength:\
    \ f64 = 0.0;\n    for extension in extensions {\n        let mut caps: i32 = 0;\n\
    \        let mut smalls: i32 = 0;\n        for c in extension.chars() {\n    \
    \        if c.is_uppercase() {\n                caps += 1;\n            } else\
    \ {\n                smalls += 1;\n            }\n        }\n        let this_strength:\
    \ f64 = caps as f64 - smalls as f64;\n        if this_strength > strength {\n\
    \            strength = this_strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut max_diff = 0;\n    let mut max_diff_index = 0;\n    for (index, value)\
    \ in extensions.iter().enumerate() {\n        let letters = value.split(\"\").map(|x|\
    \ x.to_string()).collect::<Vec<String>>();\n        let mut diff = 0;\n      \
    \  for item in letters {\n            if item.to_uppercase() == item {\n     \
    \           diff += 1;\n            } else {\n                diff -= 1;\n   \
    \         }\n        }\n        if diff > max_diff {\n            max_diff = diff;\n\
    \            max_diff_index = index;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extensions[max_diff_index])", "    let mut strongest = 0;\n    let\
    \ mut res = class_name.clone();\n    for extension in extensions {\n        let\
    \ cap = count_upper_case(&extension);\n        let sm = count_lower_case(&extension);\n\
    \        let strength = cap - sm;\n        if strength > strongest {\n       \
    \     strongest = strength;\n            res = class_name.clone() + \".\" + &extension;\n\
    \        }\n    }\n    res", "    let (name, ext) = extensions.iter().fold((class_name,\
    \ String::new()), |acc, extension| {\n        let uppers = extension.chars().filter(|&c|\
    \ c.is_uppercase()).count();\n        let lowers = extension.chars().filter(|&c|\
    \ c.is_lowercase()).count();\n        let strength = uppers as i32 - lowers as\
    \ i32;\n        if strength > acc.1.chars().count() as i32 || strength == acc.1.chars().count()\
    \ as i32 && extension < &acc.1 {\n            (String::from(&acc.0), String::from(extension))\n\
    \        } else {\n            acc\n        }\n    });\n    format!(\"{}.{}\"\
    , name, ext)", "    let mut strongest_extension: (String, i32) = (class_name.clone(),\
    \ 0);\n    for ext in extensions {\n        let cap = ext.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = ext.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = cap as i32 - sm as i32;\n        if strongest_extension.1 < strength\
    \ {\n            strongest_extension = (ext.clone(), strength);\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, strongest_extension.0)", "    // your\
    \ code here\n    String::new()", "    class_name + \".\" + \n        extensions.iter()\n\
    \        .max_by_key(|x| {\n            let mut cnt1 = 0;\n            let mut\
    \ cnt2 = 0;\n            for c in x.chars() {\n                if c.is_uppercase()\
    \ {\n                    cnt1 += 1;\n                } else {\n              \
    \      cnt2 += 1;\n                }\n            }\n            cnt1 - cnt2\n\
    \        }).unwrap()", "    let mut strength = 0;\n    let mut max_strength =\
    \ 0;\n    let mut i = 0;\n    let mut ext = 0;\n    for x in extensions {\n  \
    \      let mut caps = 0;\n        let mut sm = 0;\n        for e in x.chars()\
    \ {\n            if e.is_uppercase() {\n                caps += 1;\n         \
    \   } else {\n                sm += 1;\n            }\n        }\n        strength\
    \ = caps - sm;\n        if strength > max_strength {\n            max_strength\
    \ = strength;\n            ext = i;\n        }\n        i += 1;\n    }\n    return\
    \ format!(\"{}.{}\", class_name, extensions[ext]);", "    // your code here\n\
    \    let mut strongest = 0.0;\n    let mut strongest_ext = \"\".to_string();\n\
    \    for ext in extensions {\n        let mut upper = 0;\n        let mut lower\
    \ = 0;\n        for c in ext.chars() {\n            if c.is_uppercase() {\n  \
    \              upper += 1;\n            } else {\n                lower += 1;\n\
    \            }\n        }\n        let strength = (upper as f64) - (lower as f64);\n\
    \        if strength > strongest {\n            strongest = strength;\n      \
    \      strongest_ext = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ strongest_ext)", "    if extensions.len() == 0 {\n        return format!(\"\
    {}\", class_name);\n    }\n\n    let mut best_extension = String::new();\n   \
    \ let mut highest_strength = 0;\n    for i in 0..extensions.len() {\n        let\
    \ extension = &extensions[i];\n        let mut upper_chars = 0;\n        let mut\
    \ lower_chars = 0;\n        for j in 0..extension.len() {\n            let c =\
    \ extension.chars().nth(j).unwrap();\n            if c.is_uppercase() {\n    \
    \            upper_chars += 1;\n            } else {\n                lower_chars\
    \ += 1;\n            }\n        }\n        let strength = upper_chars - lower_chars;\n\
    \        if strength > highest_strength {\n            highest_strength = strength;\n\
    \            best_extension = extension.clone();\n        }\n    }\n\n    format!(\"\
    {}.{}\", class_name, best_extension)", "    class_name + \".\" +\n    extensions.iter()\n\
    \              .fold((\"\", 0, \"\"),\n                    |acc, ext| if acc.1\
    \ < (ext.chars().filter(|&c| c.is_uppercase()).count() as isize) -\n         \
    \                              (ext.chars().filter(|&c| c.is_lowercase()).count()\
    \ as isize) {\n                                   (ext,\n                    \
    \                (ext.chars().filter(|&c| c.is_uppercase()).count() as isize)\
    \ -\n                                    (ext.chars().filter(|&c| c.is_lowercase()).count()\
    \ as isize),\n                                    ext)\n                     \
    \          } else {\n                                   acc\n                \
    \               })\n              .2\n              .as_str()", "    let mut strongest_name\
    \ = String::new();\n    let mut strongest_strength = -2.0;\n    for extension\
    \ in extensions {\n        let mut uppercase_count = 0;\n        let mut lowercase_count\
    \ = 0;\n        for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                uppercase_count += 1;\n            } else if character.is_lowercase()\
    \ {\n                lowercase_count += 1;\n            }\n        }\n       \
    \ let strength = (uppercase_count as f64) - (lowercase_count as f64);\n      \
    \  if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_name = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_name)", "    let mut strongest_extension: String = String::new();\n\
    \    let mut strength: f64 = 0.0;\n    for extension in extensions {\n       \
    \ let extension_strength = extension.chars().fold((0, 0), |mut acc, x| {\n   \
    \         if x.is_uppercase() {\n                acc.0 += 1;\n            } else\
    \ {\n                acc.1 += 1;\n            }\n            acc\n        });\n\
    \        let extension_strength = extension_strength.0 as f64 - extension_strength.1\
    \ as f64;\n        if extension_strength > strength {\n            strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    // Best\
    \ result\n    let mut best_res: (f64, &String) = (0.0, &extensions[0]);\n    //\
    \ Iterate over all extensions\n    for s in extensions {\n        // Calculate\
    \ strength\n        let mut strength: f64 = 0.0;\n        for c in s.chars() {\n\
    \            if c.is_uppercase() {\n                strength += 1.0;\n       \
    \     } else {\n                strength -= 1.0;\n            }\n        }\n \
    \       // Update best\n        if strength > best_res.0 {\n            best_res\
    \ = (strength, &s);\n        }\n    }\n    // Return\n    return format!(\"{}.{}\"\
    , class_name, best_res.1);", "    extensions.iter().fold(\n        format!(\"\
    {}.{}\", class_name, extensions[0]),\n        |a,b| {\n            if strength(&a)\
    \ > strength(&b.to_string()) { a } else { b.to_string() }\n        }\n    )",
  "\t// your code here\n\treturn format!(\"{}.{}\", class_name, extensions[0]);",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for ext in extensions {\n        let ext_strength = ext.as_bytes().iter().fold(0.0,\
    \ |acc, &x| {\n            acc + match x {\n                65...90 => 1.0,\n\
    \                97...122 => -1.0,\n                _ => 0.0,\n            }\n\
    \        });\n        if ext_strength > strongest_extension_strength {\n     \
    \       strongest_extension_strength = ext_strength;\n            strongest_extension\
    \ = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  '    extensions.iter().map(|s| (s, fraction(s))).max_by_key(|&(_, fr)| fr).map(|(s,
    _)| format!("{}.{}", class_name, s)).unwrap()', "    String::from(class_name)\
    \ + \".\" + extensions.iter().max_by_key(|x|{\n        let upper = x.chars().filter(|x|\
    \ x.is_uppercase()).count();\n        let lower = x.chars().filter(|x| x.is_lowercase()).count();\n\
    \        (upper - lower)\n    }).unwrap()", "\tclass_name + \".\" + &extensions.iter().max_by_key(|&x|\
    \ x.chars().filter(|&x| x.is_uppercase()).count() - x.chars().filter(|&x| x.is_lowercase()).count()).unwrap().clone()",
  "    extensions.iter().fold(class_name, |class_name, ext| {\n        let class_score\
    \ = get_score(&class_name);\n        let ext_score = get_score(&ext);\n      \
    \  if ext_score > class_score {\n            format!(\"{}.{}\", class_name, ext)\n\
    \        } else {\n            class_name\n        }\n    })", "    let mut strongest_strength\
    \ = 0;\n    let mut strongest_extension = String::new();\n    for ext in extensions\
    \ {\n        let cap = ext.chars().filter(|&c| c.is_uppercase()).count();\n  \
    \      let sm = ext.chars().filter(|&c| c.is_lowercase()).count();\n        let\
    \ strength = cap - sm;\n        if strength > strongest_strength {\n         \
    \   strongest_strength = strength;\n            strongest_extension = ext;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_idx = 0;\n    let mut max_strength = f64::MIN;\n    let\
    \ mut unique_extensions = vec![];\n    let mut sum_cap = 0;\n    let mut sum_sm\
    \ = 0;\n    let mut curr_str = \"\".to_string();\n    for x in 0..extensions.len()\
    \ {\n        for (idx, ch) in extensions[x].chars().enumerate() {\n          \
    \  if idx == 0 {\n                curr_str = \"\".to_string();\n             \
    \   sum_cap = 0;\n                sum_sm = 0;\n            }\n            if ch.is_uppercase()\
    \ {\n                sum_cap += 1;\n            } else {\n                sum_sm\
    \ += 1;\n            }\n            curr_str.push(ch);\n            if idx ==\
    \ extensions[x].len() - 1 {\n                let str = format!(\"{}.{}\", class_name,\
    \ curr_str);\n                unique_extensions.push(str);\n            }\n  \
    \      }\n    }\n    for x in 0..unique_extensions.len() {\n        if (sum_cap\
    \ - sum_sm) as f64 > max_strength {\n            max_strength = (sum_cap - sum_sm)\
    \ as f64;\n            strongest_idx = x;\n        }\n    }\n    unique_extensions[strongest_idx].clone()",
  "    let mut extensions_strength: Vec<(String, f64)> = Vec::new();\n    let mut\
    \ class_strength: f64 = 0.0;\n    let mut class_ext: String = String::new();\n\
    \    for ext in extensions {\n        let mut strength: f64 = 0.0;\n        for\
    \ letter in ext.chars() {\n            if letter.is_lowercase() {\n          \
    \      strength -= 1.0;\n            } else {\n                strength += 1.0;\n\
    \            }\n        }\n        extensions_strength.push((ext, strength));\n\
    \    }\n    extensions_strength.sort_by(|a, b| b.1.partial_cmp(&a.1).unwrap());\n\
    \    for (ext, strength) in extensions_strength {\n        if strength > class_strength\
    \ {\n            class_strength = strength;\n            class_ext = ext;\n  \
    \      }\n    }\n    return format!(\"{}.{}\", class_name, class_ext);", "   \
    \ let mut strongest_extension = \"\".to_string();\n    let mut strength = 0;\n\
    \    for i in 0..extensions.len() {\n        let up = 'A' as i32;\n        let\
    \ mut cap = 0;\n        let mut sm = 0;\n        for c in extensions[i].chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let current_strength\
    \ = cap - sm;\n        if current_strength > strength {\n            strength\
    \ = current_strength;\n            strongest_extension = extensions[i].clone();\n\
    \        }\n    }\n    class_name + \".\" + &strongest_extension", "    let mut\
    \ result = String::new();\n    let mut strength = -100;\n    for extension in\
    \ extensions {\n        let strength_extension = \n            extension.chars().fold(0,\
    \ |acc, c| if c.is_uppercase() {acc + 1} else {acc - 1});\n        if strength_extension\
    \ > strength {\n            strength = strength_extension;\n            result\
    \ = class_name.clone() + \".\" + &extension;\n        }\n    }\n    result", " \
    \   let mut current_strongest_extension = extensions[0].clone();\n    let mut\
    \ current_strongest_strength = 0;\n    for ext in extensions {\n        let strength\
    \ = ext.chars().fold(0, |acc, c| {\n            acc + (if c.is_uppercase() { 1\
    \ } else { -1 })\n        });\n        if strength > current_strongest_strength\
    \ {\n            current_strongest_strength = strength;\n            current_strongest_extension\
    \ = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name, current_strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut max_strength = 0.0;\n\
    \    for extension in extensions {\n        let strength = count_lowercase_letters(&extension)\
    \ as f64 - count_uppercase_letters(&extension) as f64;\n        if strength >\
    \ max_strength {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let (mut strength, extension) = extensions.iter().enumerate()\n           \
    \                         .map(|(i, ext)| (strength(ext), i))\n              \
    \                      .max().unwrap();\n    if strength == 0.0 {\n        return\
    \ format!(\"{}\", class_name);\n    }\n    return format!(\"{}.{}\", class_name,\
    \ extensions[extension]);", "    let mut best = (String::new(), 0);\n    for ext\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in ext.chars() {\n            if c.is_uppercase() {\n                cap\
    \ += 1;\n            } else {\n                sm += 1;\n            }\n     \
    \   }\n        let s = cap - sm;\n        if s > best.1 {\n            best =\
    \ (ext, s);\n        }\n    }\n    format!(\"{}.{}\", class_name, best.0)", " \
    \   let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let extension_strength =\
    \ extension.chars().fold((0, 0), |acc, c| {\n            if c.is_uppercase() {\n\
    \                (acc.0 + 1, acc.1)\n            } else {\n                (acc.0,\
    \ acc.1 + 1)\n            }\n        });\n        let diff = extension_strength.0\
    \ as f64 - extension_strength.1 as f64;\n        if diff > strongest_strength\
    \ {\n            strongest_strength = diff;\n            strongest_extension =\
    \ extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut ext: Vec<_> = extensions.into_iter().map(|x| {\n        let caps =\
    \ x.chars().filter(|x| x.is_uppercase()).count();\n        let lower = x.chars().filter(|x|\
    \ x.is_lowercase()).count();\n        (caps as f64 - lower as f64, x)\n    }).collect();\n\
    \    ext.sort_by(|a, b| {\n        a.0.partial_cmp(&b.0).unwrap().reverse()\n\
    \    });\n    format!(\"{}.{}\", class_name, ext[0].1)", "    let strength = |extension:\
    \ &String| {\n        extension.chars().fold((0, 0), |(cap, sm), c| match c {\n\
    \            'A' ... 'Z' => (cap + 1, sm),\n            'a' ... 'z' => (cap, sm\
    \ + 1),\n            _ => (cap, sm),\n        })\n    };\n    let mut strongest\
    \ = &extensions[0];\n    let mut strength_of_strongest = strength(strongest);\n\
    \    for extension in extensions.iter().skip(1) {\n        let strength_of_extension\
    \ = strength(extension);\n        if strength_of_extension > strength_of_strongest\
    \ {\n            strongest = extension;\n            strength_of_strongest = strength_of_extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest)", "    let mut\
    \ name = class_name;\n    let mut strongest = (\"\".to_string(), 0.0);\n    for\
    \ ext in extensions {\n        let caps = ext.chars().filter(|&a| a.is_uppercase()).count();\n\
    \        let sm = ext.chars().filter(|&a| a.is_lowercase()).count();\n       \
    \ let strength = (caps as f64) - (sm as f64);\n        if strength > strongest.1\
    \ {\n            strongest = (ext, strength);\n        }\n    }\n    name.push_str(\"\
    .\");\n    name.push_str(&strongest.0);\n    name", "    let mut best_extension\
    \ = String::new();\n    let mut best_strength = 0.0;\n    for ext in extensions\
    \ {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count();\n \
    \       let lower = ext.chars().filter(|c| c.is_lowercase()).count();\n      \
    \  let strength = upper as f64 - lower as f64;\n        if strength > best_strength\
    \ {\n            best_strength = strength;\n            best_extension = ext;\n\
    \        }\n    }\n    class_name + \".\" + &best_extension", "    println!(\"\
    Class: {} with {} extensions.\", class_name, extensions.len());\n    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        println!(\"\\tTrying {}...\", extension);\n        let\
    \ mut upper_count = 0;\n        let mut lower_count = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                upper_count += 1;\n  \
    \          } else if c.is_lowercase() {\n                lower_count += 1;\n \
    \           }\n        }\n        println!(\"\\t\\tUpper count: {}.\", upper_count);\n\
    \        println!(\"\\t\\tLower count: {}.\", lower_count);\n        let strength\
    \ = (upper_count as f64) - (lower_count as f64);\n        println!(\"\\t\\tStrength:\
    \ {}.\", strength);\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    if strongest_extension == \"\" {\n        strongest_extension = \"none\"\
    .to_string();\n    }\n    println!(\"Strongest extension for {} is {}.\", class_name,\
    \ strongest_extension);\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut result = class_name.clone();\n    let mut max_strength = 0;\n    for\
    \ e in extensions {\n        let num_lower = e.chars().filter(|&c| c.is_lowercase()).count();\n\
    \        let num_upper = e.chars().filter(|&c| c.is_uppercase()).count();\n  \
    \      let e_strength = num_upper - num_lower;\n        if e_strength > max_strength\
    \ {\n            max_strength = e_strength;\n            result = format!(\"{}.{}\"\
    , class_name, e);\n        }\n    }\n    result", "    if class_name.is_empty()\
    \ || extensions.is_empty() {\n        return class_name;\n    }\n    let mut max_strength:\
    \ f64 = -f64::MAX;\n    let mut max_idx: usize = 0;\n    for (idx, ext) in extensions.iter().enumerate()\
    \ {\n        let lower_count: f64 = ext.chars().filter(|c| c.is_lowercase()).count()\
    \ as f64;\n        let upper_count: f64 = ext.chars().filter(|c| c.is_uppercase()).count()\
    \ as f64;\n        let strength: f64 = upper_count - lower_count;\n        if\
    \ strength > max_strength {\n            max_strength = strength;\n          \
    \  max_idx = idx;\n        }\n    }\n    let class_ext: String = format!(\"{}.{}\"\
    , class_name, extensions[max_idx]);\n    class_ext", "    let mut strength = 0.0;\n\
    \    let mut strongest_extension = \"\".to_string();\n    for i in extensions\
    \ {\n        let extension_name: Vec<char> = i.chars().collect();\n        let\
    \ mut upper_case = 0.0;\n        let mut lower_case = 0.0;\n        for j in extension_name\
    \ {\n            if j.is_uppercase() {\n                upper_case += 1.0;\n \
    \           } else {\n                lower_case += 1.0;\n            }\n    \
    \    }\n        let mut current_strength = upper_case - lower_case;\n        if\
    \ current_strength > strength {\n            strength = current_strength;\n  \
    \          strongest_extension = i;\n        }\n    }\n    class_name + \".\"\
    \ + &strongest_extension", "    let mut result = class_name.clone();\n    let\
    \ mut strength: f64 = -1.0;\n    for ext in extensions {\n        let ext_strength\
    \ = (ext.as_bytes().iter().filter(|c| c.is_ascii_uppercase()).count() as f64)\
    \ -\n            (ext.as_bytes().iter().filter(|c| c.is_ascii_lowercase()).count()\
    \ as f64);\n        if ext_strength > strength {\n            strength = ext_strength;\n\
    \            result.push('.');\n            result.push_str(&ext);\n        }\n\
    \    }\n    result", "    class_name + \".\" + &extensions.iter().fold(\n    \
    \    \"\", |acc, s| {\n            let strength = (s.chars().filter(|&c| c.is_uppercase()).count()\
    \ as i64) -\n                (s.chars().filter(|&c| c.is_lowercase()).count()\
    \ as i64);\n            if strength > acc.parse::<i64>().unwrap_or(0) {\n    \
    \            format!(\"{}\", strength)\n            } else {\n               \
    \ acc\n            }\n        }\n    )", "    let mut max_index = 0;\n    let\
    \ mut max_strength = -99999;\n    for i in 0..extensions.len() {\n        let\
    \ strength = strength(&extensions[i]);\n        if strength > max_strength {\n\
    \            max_strength = strength;\n            max_index = i;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extensions[max_index])", "    let mut\
    \ strongest = String::new();\n    let mut strength = -100;\n    for x in extensions\
    \ {\n        let count_cap = x.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let count_low = x.chars().filter(|c| c.is_lowercase()).count();\n   \
    \     let cap_minus_low = count_cap - count_low;\n        if cap_minus_low > strength\
    \ {\n            strength = cap_minus_low;\n            strongest = x;\n     \
    \   }\n    }\n    return class_name + \".\" + &strongest;", "    let mut strongest_extension\
    \ = extensions[0].clone();\n    let mut strongest_extension_strength = 0;\n  \
    \  for i in 1..extensions.len() {\n        let strength = CAP_count(&extensions[i])\
    \ - SM_count(&extensions[i]);\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extensions[i].clone();\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ strongest_extension)", "    let mut strongest = \"\";\n    let mut max_strength\
    \ = 0.0;\n    for ext in extensions {\n        let mut cap = 0;\n        let mut\
    \ sm = 0;\n        for c in ext.chars() {\n            if c.is_ascii_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > max_strength {\n            max_strength = strength;\n\
    \            strongest = ext.as_str();\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;", "    let mut a = vec![];\n    for i in extensions {\n\
    \        let mut b = 0;\n        let mut c = 0;\n        for j in i.chars() {\n\
    \            if j.is_uppercase() {\n                b = b + 1;\n            }\
    \ else {\n                c = c + 1;\n            }\n        }\n        a.push((i,\
    \ b - c));\n    }\n    a.sort_by(|a, b| b.1.cmp(&a.1));\n    println!(\"{:?}\"\
    , a);\n    class_name + \".\" + &a[0].0", "    let (index, _) = extensions.iter().enumerate().fold((0,\
    \ 0.0), |(best_index, best_strength), (index, extension)| {\n        let upper\
    \ = extension.chars().filter(|&x| x.is_uppercase()).count();\n        let lower\
    \ = extension.chars().filter(|&x| x.is_lowercase()).count();\n        let strength\
    \ = upper as f64 - lower as f64;\n        if strength > best_strength {\n    \
    \        (index, strength)\n        } else {\n            (best_index, best_strength)\n\
    \        }\n    });\n    format!(\"{}.{}\", class_name, extensions[index])", " \
    \   let mut strongest_extension = String::new();\n    let mut highest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut upper_case_count\
    \ = 0.0;\n        let mut lower_case_count = 0.0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                upper_case_count += 1.0;\n\
    \            } else if c.is_lowercase() {\n                lower_case_count +=\
    \ 1.0;\n            }\n        }\n        let strength = upper_case_count - lower_case_count;\n\
    \        if strength > highest_strength {\n            highest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut kp = 0;\n    let mut\
    \ cp = 0;\n    let mut nm = \"\";\n    for n in extensions {\n        let mut\
    \ l = 0;\n        let mut u = 0;\n        for c in n.chars() {\n            if\
    \ c.is_lowercase() {\n                l += 1;\n            } else {\n        \
    \        u += 1;\n            }\n        }\n        let v = u - l;\n        if\
    \ kp < v {\n            kp = v;\n            cp = 0;\n            nm = &n;\n \
    \       } else if kp == v {\n            cp += 1;\n        }\n    }\n    return\
    \ if cp == 0 {\n        format!(\"{}.{}\", class_name, nm)\n    } else {\n   \
    \     class_name\n    };", "    return format!(\"{}.{}\", class_name, extensions.iter().max_by_key(|e|\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in e.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        return\
    \ cap - sm;\n    }).unwrap());", "    let mut strongest_extension = extensions[0].clone();\n\
    \    let mut max_strength = 0.0;\n    for extension in extensions {\n        let\
    \ strength = extension.chars().fold((0, 0), |(cap, sm), character| {\n       \
    \     if character.is_uppercase() {\n                (cap + 1, sm)\n         \
    \   } else {\n                (cap, sm + 1)\n            }\n        });\n    \
    \    let strength = (strength.0 as f64) - (strength.1 as f64);\n        if strength\
    \ > max_strength {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strengths: Vec<(i32, String)> = Vec::new();\n    for i in extensions\
    \ {\n        let mut caps: i32 = 0;\n        let mut smalls: i32 = 0;\n      \
    \  for j in i.chars() {\n            if j.is_ascii_uppercase() {\n           \
    \     caps += 1;\n            } else {\n                smalls += 1;\n       \
    \     }\n        }\n        strengths.push((caps - smalls, i));\n    }\n    strengths.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    let mut result = String::new();\n    result.push_str(&class_name);\n\
    \    result.push_str(\".\");\n    result.push_str(&strengths[strengths.len() -\
    \ 1].1);\n    result", "    let mut cap_sm = Vec::new();\n    for ext in extensions\
    \ {\n        let cap: u32 = ext.chars().filter(|&c| c.is_uppercase()).count()\
    \ as u32;\n        let sm: u32 = ext.chars().filter(|&c| c.is_lowercase()).count()\
    \ as u32;\n        cap_sm.push((cap, sm));\n    }\n    let (i, (cap, sm)) = cap_sm.iter().enumerate().max_by_key(|&(i,\
    \ (cap, sm))| cap - sm).unwrap();\n    format!(\"{}.{}\", class_name, extensions[i])",
  "    let mut strongest_ext: &str = \"\";\n    let mut strong_ext_cap: f64 = 0.0;\n\
    \    for ext in extensions {\n        let cap: f64 = ext.chars().filter(|&c| c.is_uppercase()).count()\
    \ as f64;\n        let sm: f64 = ext.chars().filter(|&c| c.is_lowercase()).count()\
    \ as f64;\n        let diff: f64 = cap - sm;\n        if diff > strong_ext_cap\
    \ {\n            strong_ext_cap = diff;\n            strongest_ext = &ext;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, strongest_ext)", "    class_name\
    \ + \".\" + extensions.iter().fold(String::new(), |a, b| \n        if get_strength(a)\
    \ > get_strength(b) { a } else { b }).as_str()", "    let mut strongest = &extensions[0];\n\
    \    let mut strongest_strength = 0;\n    for ext in extensions {\n        let\
    \ mut upper_count = 0;\n        let mut lower_count = 0;\n        for c in ext.chars()\
    \ {\n            if c.is_uppercase() {\n                upper_count += 1;\n  \
    \          } else {\n                lower_count += 1;\n            }\n      \
    \  }\n        let strength = upper_count - lower_count;\n        if strength >\
    \ strongest_strength {\n            strongest = &ext;\n            strongest_strength\
    \ = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest)",
  "    let mut strongest = extensions[0].clone();\n    let mut strength = extensions[0].chars().filter(|x|\
    \ x.is_uppercase()).count() - extensions[0].chars().filter(|x| x.is_lowercase()).count();\n\
    \    for i in 1..extensions.len() {\n        let temp = extensions[i].chars().filter(|x|\
    \ x.is_uppercase()).count() - extensions[i].chars().filter(|x| x.is_lowercase()).count();\n\
    \        if temp > strength {\n            strongest = extensions[i].clone();\n\
    \            strength = temp;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ strongest)", "\tlet mut strength = 0;\n\tlet mut strongest = String::new();\n\
    \tfor ext in extensions {\n\t\tlet mut ext_strength = 0;\n\t\tfor i in ext.chars()\
    \ {\n\t\t\tif i.is_uppercase() {\n\t\t\t\text_strength += 1;\n\t\t\t} else {\n\
    \t\t\t\text_strength -= 1;\n\t\t\t}\n\t\t}\n\t\tif ext_strength > strength {\n\
    \t\t\tstrength = ext_strength;\n\t\t\tstrongest = ext;\n\t\t}\n\t}\n\tformat!(\"\
    {}.{}\", class_name, strongest)", "    let mut s = String::new();\n    let mut\
    \ score = 0;\n    for ext in extensions {\n        let cap = ext.chars().filter(|&x|\
    \ x.is_uppercase()).count();\n        let sm = ext.chars().filter(|&x| x.is_lowercase()).count();\n\
    \        let sc = cap - sm;\n        if sc > score {\n            score = sc;\n\
    \            s = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name, s)",
  "    let mut strongest_extension = String::new();\n    let mut extension_strength\
    \ = 0;\n    for extension in extensions {\n        let strength = Count_Caps(&extension)\
    \ - Count_Lower(&extension);\n        if strength > extension_strength {\n   \
    \         extension_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + &strongest_extension;", " \
    \   let mut strong = 0.0;\n    let mut result = \"\".to_string();\n    for i in\
    \ extensions {\n        let cap = i.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let sm = i.chars().filter(|&c| c.is_lowercase()).count();\n        let\
    \ str_i = cap as f64 - sm as f64;\n        if str_i > strong {\n            strong\
    \ = str_i;\n            result = i;\n        }\n    }\n    format!(\"{}.{}\",\
    \ class_name, result)", "    let mut strongest_strength = std::f64::NEG_INFINITY;\n\
    \    let mut strongest_extension = \"\";\n    for ext in extensions {\n      \
    \  let mut extension_strength = 0;\n        for c in ext.chars() {\n         \
    \   if c.is_ascii_uppercase() {\n                extension_strength += 1;\n  \
    \          } else {\n                extension_strength -= 1;\n            }\n\
    \        }\n        if extension_strength > strongest_strength {\n           \
    \ strongest_strength = extension_strength;\n            strongest_extension =\
    \ ext.as_str();\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut output = String::new();\n    let mut ext: Vec<(i32, String)> = Vec::new();\n\
    \    for i in extensions {\n        let mut upper = 0;\n        let mut lower\
    \ = 0;\n        for j in i.chars() {\n            if j.is_uppercase() {\n    \
    \            upper += 1;\n            } else {\n                lower += 1;\n\
    \            }\n        }\n        ext.push((upper - lower, i));\n    }\n    ext.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n    output.push_str(&format!(\"{}.{}\", class_name, ext[0].1));\n\
    \    output", "    let mut max_strength = 0;\n    let mut max_extension = String::new();\n\
    \    for extension in extensions {\n        let strength = extension.chars().fold((0,\
    \ 0), |(cap, sm), c| if c.is_uppercase() {\n            (cap + 1, sm)\n      \
    \  } else {\n            (cap, sm + 1)\n        }).0 - extension.chars().fold((0,\
    \ 0), |(cap, sm), c| if c.is_uppercase() {\n            (cap + 1, sm)\n      \
    \  } else {\n            (cap, sm + 1)\n        }).1;\n        if strength > max_strength\
    \ {\n            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    class_name + \".\" + &max_extension", "    let mut strength:\
    \ f64 = 0.0;\n    let mut res = \"\".to_string();\n    for i in extensions {\n\
    \        let mut cap = 0;\n        let mut small = 0;\n        for j in i.chars()\
    \ {\n            if j.is_ascii_uppercase() {\n                cap += 1;\n    \
    \        } else {\n                small += 1;\n            }\n        }\n   \
    \     let temp = (cap as f64) - (small as f64);\n        if temp > strength {\n\
    \            strength = temp;\n            res = i.clone();\n        }\n    }\n\
    \    return format!(\"{}.{}\", class_name, res);", "    let mut strongest = extensions[0].clone();\n\
    \    let mut strength = strongest.chars().filter(|&c| c.is_uppercase()).count()\
    \ as f64;\n    strength -= strongest.chars().filter(|&c| c.is_lowercase()).count()\
    \ as f64;\n    for s in extensions.iter().skip(1) {\n        let this_strength\
    \ = s.chars().filter(|&c| c.is_uppercase()).count() as f64;\n        this_strength\
    \ -= s.chars().filter(|&c| c.is_lowercase()).count() as f64;\n        if this_strength\
    \ > strength {\n            strongest = s.clone();\n            strength = this_strength;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest)", "    let mut\
    \ strongest_ext = \"\";\n    let mut strongest_ext_strength = 0.0;\n    for ext\
    \ in extensions {\n        let strength = ext.chars().filter(|c| c.is_uppercase()).count()\
    \ as f64\n            - ext.chars().filter(|c| c.is_lowercase()).count() as f64;\n\
    \        if strength > strongest_ext_strength {\n            strongest_ext_strength\
    \ = strength;\n            strongest_ext = &ext;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_ext)", "    let mut strongest_extension = 0;\n\
    \    let mut strongest_extension_name = String::new();\n    for i in 0..extensions.len()\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extensions[i].chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        if cap\
    \ - sm > strongest_extension {\n            strongest_extension = cap - sm;\n\
    \            strongest_extension_name = extensions[i].clone();\n        }\n  \
    \  }\n    format!(\"{}.{}\", class_name, strongest_extension_name)", "    let\
    \ mut strength = std::f64::NEG_INFINITY;\n    let mut ans = String::new();\n \
    \   for i in extensions {\n        let mut cap = 0;\n        let mut small = 0;\n\
    \        for j in i.chars() {\n            if j.is_uppercase() {\n           \
    \     cap += 1;\n            } else {\n                small += 1;\n         \
    \   }\n        }\n        let mut str = (cap as f64) - (small as f64);\n     \
    \   if str > strength {\n            strength = str;\n            ans = i;\n \
    \       }\n    }\n    let mut ans = format!(\"{}.{}\", class_name, ans);\n   \
    \ ans", "    let mut best = (\"\".to_string(), 0.0);\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|&c| c.is_lowercase()).count();\n \
    \       let strength = cap as f64 - sm as f64;\n        if strength > best.1 {\n\
    \            best = (extension, strength);\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, best.0)", "    let mut max_strength = 0.0;\n    let mut strongest_extension\
    \ = String::new();\n    for ext in extensions {\n        let strength = (ext.chars().filter(|x|\
    \ x.is_uppercase()).count() as f64) - (ext.chars().filter(|x| x.is_lowercase()).count()\
    \ as f64);\n        if strength > max_strength {\n            max_strength = strength;\n\
    \            strongest_extension = ext;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut best_extension = String::new();\n\
    \    let mut best_power = -1.0;\n    for extension in extensions {\n        let\
    \ small_letters = extension.chars().filter(|&c| c.is_lowercase()).count();\n \
    \       let big_letters = extension.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let current_power = big_letters as f64 - small_letters as f64;\n    \
    \    if current_power > best_power {\n            best_power = current_power;\n\
    \            best_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, best_extension)", "    let mut max_strength = 0;\n    let mut strongest_extension\
    \ = \"\";\n    for extension in extensions {\n        let mut strength = 0;\n\
    \        for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                strength += 1;\n            } else {\n                strength\
    \ -= 1;\n            }\n        }\n        if strength > max_strength {\n    \
    \        max_strength = strength;\n            strongest_extension = &extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut str_ext = String::new();\n    let mut ext_str = 0.0;\n    for i in\
    \ 0..extensions.len() {\n        let mut upp = 0;\n        let mut low = 0;\n\
    \        for j in 0..extensions[i].len() {\n            if extensions[i].chars().nth(j).unwrap().is_uppercase()\
    \ {\n                upp += 1;\n            } else {\n                low += 1;\n\
    \            }\n        }\n        let strength = (upp - low) as f64 / extensions[i].len()\
    \ as f64;\n        if strength > ext_str {\n            ext_str = strength;\n\
    \            str_ext = extensions[i].clone();\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, str_ext);", "    format!(\"{}.{}\", class_name, extensions.iter().max_by_key(|ext|\
    \ ext.chars().fold((0, 0), |(max, min), ch| {\n        if ch.is_uppercase() {\n\
    \            (max + 1, min)\n        } else {\n            (max, min + 1)\n  \
    \      }\n    })).unwrap())", "    let mut max = 0.0;\n    let mut ext_name =\
    \ String::new();\n    for ext in extensions {\n        let mut upper = 0;\n  \
    \      let mut lower = 0;\n        for i in ext.chars() {\n            if i.is_uppercase()\
    \ {\n                upper += 1;\n            } else {\n                lower\
    \ += 1;\n            }\n        }\n        let stren = (upper as f64) - (lower\
    \ as f64);\n        if stren > max {\n            max = stren;\n            ext_name\
    \ = ext;\n        }\n    }\n    return format!(\"{}.{}\", class_name, ext_name);",
  "    let (mut class_name, mut s_extensions) = (class_name, extensions);\n    let\
    \ mut strength = -1.0;\n    let mut extension = \"\".to_string();\n    let mut\
    \ index = 0;\n    while index < s_extensions.len() {\n        let mut caps = 0;\n\
    \        let mut smalls = 0;\n        for x in s_extensions[index].chars() {\n\
    \            if x.is_uppercase() {\n                caps += 1;\n            }\
    \ else {\n                smalls += 1;\n            }\n        }\n        let\
    \ current_strength = (caps as f64) - (smalls as f64);\n        if current_strength\
    \ > strength {\n            strength = current_strength;\n            extension\
    \ = s_extensions[index].clone();\n        }\n        index += 1;\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    class_name + \".\" + \n        &extensions.iter()\n\
    \        .map(|x| (x.chars().filter(|&x| x.is_uppercase()).count() as i32) - (x.chars().filter(|&x|\
    \ x.is_lowercase()).count() as i32))\n        .max_by(|x, y| x.cmp(y))\n     \
    \   .map(|x| x.to_string())\n        .unwrap()", "    let mut strongest_extension\
    \ = extensions[0].clone();\n    let mut strength = (strongest_extension.to_uppercase().chars().count()\
    \ -\n                        strongest_extension.to_lowercase().chars().count())\
    \ as f64;\n    for extension in extensions {\n        let new_strength = (extension.to_uppercase().chars().count()\
    \ -\n                            extension.to_lowercase().chars().count()) as\
    \ f64;\n        if new_strength > strength {\n            strength = new_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut best_extension = \"\"\
    .to_string();\n    let mut best_strength = 0;\n    for i in 0..extensions.len()\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for j in 0..extensions[i].len()\
    \ {\n            if extensions[i].chars().nth(j).unwrap().is_uppercase() {\n \
    \               cap += 1;\n            } else {\n                sm += 1;\n  \
    \          }\n        }\n        let strength = cap - sm;\n        if strength\
    \ > best_strength {\n            best_strength = strength;\n            best_extension\
    \ = extensions[i].clone();\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ best_extension)", "    let extensions_strength = extensions.iter().map(|e| {\n\
    \        (e, e.chars().fold((0, 0), |acc, c| {\n            if c.is_uppercase()\
    \ {\n                (acc.0 + 1, acc.1)\n            } else {\n              \
    \  (acc.0, acc.1 + 1)\n            }\n        }))\n    }).collect::<Vec<_>>();\n\
    \    let (res, _) = extensions_strength.iter().fold((None, 0), |acc, &(e, (cap,\
    \ sm))| {\n        let strength = cap as f64 / sm as f64;\n        if strength\
    \ < acc.1 {\n            acc\n        } else {\n            (Some(e), strength)\n\
    \        }\n    });\n    format!(\"{}.{}\", class_name, res.unwrap())", "    let\
    \ mut extension_strengths: Vec<(i32, &String)> = Vec::new();\n    let mut len\
    \ = 0;\n    let mut sm = 0;\n    for (i, extension) in extensions.iter().enumerate()\
    \ {\n        len = extension.len() as i32;\n        sm = 0;\n        for letter\
    \ in extension.chars() {\n            if letter.is_uppercase() {\n           \
    \     len -= 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        extension_strengths.push((len - sm, &extensions[i]));\n  \
    \  }\n    extension_strengths.sort_by(|a, b| b.0.cmp(&a.0));\n    let mut strongest_extension:\
    \ String = String::from(&class_name);\n    strongest_extension.push('.');\n  \
    \  strongest_extension.push_str(&extension_strengths[0].1);\n    return strongest_extension;",
  "    let mut strongest = \"\";\n    let mut strength = 0;\n    for extension in\
    \ extensions {\n        let cap_num = extension.matches(char::is_uppercase).count();\n\
    \        let sm_num = extension.matches(char::is_lowercase).count();\n       \
    \ let cur_strength = cap_num - sm_num;\n        if strength < cur_strength {\n\
    \            strength = cur_strength;\n            strongest = &extension;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, strongest)", "    class_name\
    \ + \".\" + &extensions.iter().fold(String::new(),\n    |acc, val| if val.len()\
    \ == 0 {\n        acc\n    } else {\n        if let Some(acc_len) = acc.len()\
    \ {\n            if acc_len > 0 {\n                if val.chars().filter(|&c|\
    \ c.is_uppercase()).count() as i32 - val.chars().filter(|&c| c.is_lowercase()).count()\
    \ as i32\n                    >\n                    acc.chars().filter(|&c| c.is_uppercase()).count()\
    \ as i32 - acc.chars().filter(|&c| c.is_lowercase()).count() as i32\n        \
    \        {\n                    val.to_string()\n                } else {\n  \
    \                  acc\n                }\n            } else {\n            \
    \    val.to_string()\n            }\n        } else {\n            String::new()\n\
    \        }\n    })", "    let mut strongest = 0;\n    let mut strongest_extension\
    \ = \"\";\n    for extension in extensions {\n        let strength = extension.chars().fold((0,\
    \ 0), |acc, c| {\n            match c {\n                'A' ... 'Z' => (acc.0\
    \ + 1, acc.1),\n                'a' ... 'z' => (acc.0, acc.1 + 1),\n         \
    \       _ => acc\n            }\n        });\n        if (strength.0 - strength.1)\
    \ > strongest {\n            strongest = strength.0 - strength.1;\n          \
    \  strongest_extension = extension.as_str();\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut res = class_name.clone();\n\
    \    let mut max_val = 0;\n    for ext in extensions {\n        let mut num_caps\
    \ = 0;\n        let mut num_sm = 0;\n        for c in ext.chars() {\n        \
    \    if c.is_uppercase() {\n                num_caps += 1;\n            } else\
    \ {\n                num_sm += 1;\n            }\n        }\n        let val =\
    \ num_caps - num_sm;\n        if val > max_val {\n            max_val = val;\n\
    \            res = format!(\"{}.{}\", class_name, ext);\n        }\n    }\n  \
    \  res", "\tlet mut strongest_extension = extensions[0].clone();\n\tlet mut strongest_strength\
    \ = 0;\n\tfor ext in extensions {\n\t\tlet mut cap = 0;\n\t\tlet mut sm = 0;\n\
    \t\tfor ch in ext.chars() {\n\t\t\tif ch.is_uppercase() {\n\t\t\t\tcap += 1;\n\
    \t\t\t} else {\n\t\t\t\tsm += 1;\n\t\t\t}\n\t\t}\n\t\tlet strength = cap - sm;\n\
    \t\tif strength > strongest_strength {\n\t\t\tstrongest_strength = strength;\n\
    \t\t\tstrongest_extension = ext;\n\t\t}\n\t}\n\treturn format!(\"{}.{}\", class_name,\
    \ strongest_extension);", "    let mut strongest = 0f64;\n    let mut strongest_string\
    \ = \"\".to_string();\n    for i in extensions {\n        let mut cap = 0f64;\n\
    \        let mut sm = 0f64;\n        for j in i.chars() {\n            if j.is_ascii_uppercase()\
    \ {\n                cap += 1f64;\n            } else {\n                sm +=\
    \ 1f64;\n            }\n        }\n        let strength = cap - sm;\n        if\
    \ strength > strongest {\n            strongest = strength;\n            strongest_string\
    \ = i;\n        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_string);",
  "    class_name + \".\" + extensions.iter().max_by_key(|&ext| {\n        let CAP\
    \ = ext.chars().filter(|&c| c.is_uppercase()).count();\n        let SM = ext.chars().filter(|&c|\
    \ c.is_lowercase()).count();\n        CAP - SM\n    }).unwrap()", "    let mut\
    \ best_extension = (0.0, \"\".to_string());\n    for extension in extensions {\n\
    \        let caps = extension.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let smalls = extension.chars().filter(|&c| c.is_lowercase()).count();\n\
    \        let strength = caps as f64 - smalls as f64;\n        if strength > best_extension.0\
    \ {\n            best_extension = (strength, extension);\n        }\n    }\n \
    \   class_name + \".\" + &best_extension.1", "    let mut max_strength = 0;\n\
    \    let mut result = class_name;\n    for extension in extensions {\n       \
    \ let strength = extension.matches(char::is_uppercase).count() as i32\n      \
    \      - extension.matches(char::is_lowercase).count() as i32;\n        if strength\
    \ > max_strength {\n            max_strength = strength;\n            result =\
    \ format!(\"{}.{}\", class_name, extension);\n        }\n    }\n    result", " \
    \   let mut extensions = extensions;\n    extensions.sort_by(|a, b| {\n      \
    \  let ac = a.chars().filter(|&c| c.is_uppercase()).count();\n        let asm\
    \ = a.chars().filter(|&c| c.is_lowercase()).count();\n        let bc = b.chars().filter(|&c|\
    \ c.is_uppercase()).count();\n        let bsm = b.chars().filter(|&c| c.is_lowercase()).count();\n\
    \        (ac - asm).cmp(&(bc - bsm))\n    });\n    format!(\"{}.{}\", class_name,\
    \ extensions[0])", '    class_name + "." + &extensions.iter().max_by_key(|&x|
    strength(x)).unwrap().clone()', "    let strongest_extension = extensions.iter().fold((0.0,\
    \ 0, String::new()), |(max_strength, _, strongest_extension), extension| {\n \
    \       let strength = count_upper_case_letters(extension) as f64 - count_lower_case_letters(extension)\
    \ as f64;\n        if strength > max_strength {\n            (strength, extension.len(),\
    \ extension.clone())\n        } else if strength == max_strength {\n         \
    \   if extension.len() < strongest_extension.len() {\n                (strength,\
    \ extension.len(), extension.clone())\n            } else {\n                (max_strength,\
    \ strongest_extension.len(), strongest_extension.clone())\n            }\n   \
    \     } else {\n            (max_strength, strongest_extension.len(), strongest_extension.clone())\n\
    \        }\n    });\n    return class_name + \".\" + &strongest_extension.2;",
  "    String::from(class_name) + \".\" + \n        &extensions.iter().max_by_key(|x|\
    \ {\n            let caps = x.chars().filter(|c| c.is_uppercase()).count();\n\
    \            let lowers = x.chars().filter(|c| c.is_lowercase()).count();\n  \
    \          caps - lowers\n        }).unwrap()", "    let mut strongest_extension:\
    \ (usize, usize) = (0, 0);\n    let mut strongest_extension_index: usize = 0;\n\
    \    for (index, extension) in extensions.iter().enumerate() {\n        let upper_case_letters:\
    \ usize = extension.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ lower_case_letters: usize = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength: (usize, usize) = (upper_case_letters, lower_case_letters);\n\
    \        if strength > strongest_extension {\n            strongest_extension\
    \ = strength;\n            strongest_extension_index = index;\n        }\n   \
    \ }\n    format!(\"{}.{}\", class_name, extensions[strongest_extension_index])",
  "    let mut cap_counts = HashMap::new();\n    let mut sm_counts = HashMap::new();\n\
    \    let mut strength_counts = HashMap::new();\n    let mut class_name_counts\
    \ = HashMap::new();\n    let mut sorted_counts = HashMap::new();\n    let mut\
    \ result = String::new();\n    let mut max_strength:f64 = 0.0;\n    let mut sorted_name\
    \ = String::new();\n    let mut last_name = String::new();\n    let mut last_count\
    \ = 0;\n    let mut last_strength = 0.0;\n    for word in extensions.iter() {\n\
    \        let mut cap_count = 0;\n        let mut sm_count = 0;\n        for c\
    \ in word.chars() {\n            if c.is_uppercase() {\n                cap_count\
    \ += 1;\n            } else {\n                sm_count += 1;\n            }\n\
    \        }\n        *cap_counts.entry(word).or_insert(cap_count) = cap_count;\n\
    \        *sm_counts.entry(word).or_insert(sm_count) = sm_count;\n        let strength\
    \ = (cap_count as f64) - (sm_count as f64);\n        *strength_counts.entry(word).or_insert(strength)\
    \ = strength;\n        if strength > max_strength {\n            max_strength\
    \ = strength;\n        }\n    }\n    for i in strength_counts.iter() {\n     \
    \   let count = i.1;\n        if *count == max_strength {\n            sorted_counts.insert(i.0,\
    \ count);\n        }\n    }\n    for sorted_name in sorted_counts.keys() {\n \
    \       let strength = sorted_counts.get(sorted_name).unwrap();\n        if *strength\
    \ == max_strength {\n            result = format!(\"{}.{}\", class_name, sorted_name);\n\
    \            break;\n        }\n    }\n    result", '    format!("{}.{}", class_name,
    &extensions.iter().max_by_key(|e| strength(e)).unwrap())', "    let mut strongest\
    \ = String::new();\n    let mut max_strength = 0.0;\n    for x in extensions {\n\
    \        let caps = count_upper(&x);\n        let sm = count_lower(&x);\n    \
    \    let strength = caps as f64 - sm as f64;\n        if strength > max_strength\
    \ {\n            max_strength = strength;\n            strongest = x;\n      \
    \  }\n    }\n    return class_name + \".\" + &strongest;", "    let mut max =\
    \ 0;\n    let mut c = 'a';\n    for ext in extensions {\n        let v: Vec<char>\
    \ = ext.chars().collect();\n        let mut upper = 0;\n        let mut lower\
    \ = 0;\n        for i in v {\n            if i.is_uppercase() {\n            \
    \    upper += 1;\n            } else {\n                lower += 1;\n        \
    \    }\n        }\n        let x = upper - lower;\n        if x > max {\n    \
    \        max = x;\n            c = v[0];\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, c)", "    let mut ext = (0.0, String::new());\n    for e in extensions\
    \ {\n        let mut uppercase = 0;\n        let mut lowercase = 0;\n        for\
    \ c in e.chars() {\n            if c.is_uppercase() {\n                uppercase\
    \ += 1;\n            } else {\n                lowercase += 1;\n            }\n\
    \        }\n        let strength = uppercase as f64 - lowercase as f64;\n    \
    \    if strength > ext.0 {\n            ext = (strength, e);\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, ext.1)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0;\n    for e in extensions\
    \ {\n        let strength = e.clone().into_bytes().iter().fold(0, |sum, c| {\n\
    \            if c.is_ascii_uppercase() {\n                sum + 1\n          \
    \  } else {\n                sum - 1\n            }\n        });\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = e;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ strongest_extension)", "    let mut strongest_extension = String::new();\n \
    \   let mut strongest_strength = -1;\n    for e in extensions {\n        let strength\
    \ = (e.to_uppercase().chars().count() as i32) - \n                       (e.to_lowercase().chars().count()\
    \ as i32);\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength;\n            strongest_extension = e;\n        }\n    }\n    return\
    \ class_name + \".\" + &strongest_extension;", "\tlet mut strongest = (\"\".to_string(),\
    \ 0.0);\n\tfor ext in extensions {\n\t\tlet uppercase_cnt = ext.chars().filter(|c|\
    \ c.is_uppercase()).count();\n\t\tlet lowercase_cnt = ext.chars().filter(|c| c.is_lowercase()).count();\n\
    \t\tlet strength = uppercase_cnt as f64 - lowercase_cnt as f64;\n\t\tif strength\
    \ > strongest.1 {\n\t\t\tstrongest = (ext, strength);\n\t\t}\n\t}\n\tformat!(\"\
    {}.{}\", class_name, strongest.0)", '    return "my_class.AA".to_string();', " \
    \   let (mut max_strength, mut max_ext_name) = (-100.0, \"\");\n    for ext in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in ext.chars() {\n            if c.is_uppercase() {\n                cap +=\
    \ 1;\n            } else {\n                sm += 1;\n            }\n        }\n\
    \        let strength = cap as f64 - sm as f64;\n        if strength > max_strength\
    \ {\n            max_strength = strength;\n            max_ext_name = ext.as_str();\n\
    \        }\n    }\n    return class_name + \".\" + max_ext_name;", "    let mut\
    \ strongest_extension: String = String::new();\n    let mut strength: f64 = -std::f64::MAX;\n\
    \    for ext in extensions {\n        let mut cap: i64 = 0;\n        let mut sm:\
    \ i64 = 0;\n        for c in ext.chars() {\n            if c.is_uppercase() {\n\
    \                cap += 1;\n            } else {\n                sm += 1;\n \
    \           }\n        }\n        let new_strength: f64 = cap as f64 - sm as f64;\n\
    \        if new_strength > strength {\n            strength = new_strength;\n\
    \            strongest_extension = ext;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    // let strength: |String| -> i32 = |ext|\
    \ {\n    //     let caps: i32 = ext.chars().filter(|c| c.is_uppercase()).count()\
    \ as i32;\n    //     let lowers: i32 = ext.chars().filter(|c| c.is_lowercase()).count()\
    \ as i32;\n    //     caps - lowers\n    // };\n    let strength = |ext: &String|\
    \ {\n        let caps: i32 = ext.chars().filter(|c| c.is_uppercase()).count()\
    \ as i32;\n        let lowers: i32 = ext.chars().filter(|c| c.is_lowercase()).count()\
    \ as i32;\n        caps - lowers\n    };\n    // let max = extensions.iter().max_by(|a,\
    \ b| strength(a).cmp(&strength(b)));\n    let max = extensions.iter().max_by(|a,\
    \ b| strength(a).cmp(&strength(b)));\n    format!(\"{}.{}\", class_name, max.unwrap())",
  "    let mut class_name_string = class_name;\n    let mut class_name_strength =\
    \ Strength(class_name_string.clone());\n    for extension in extensions {\n  \
    \      let temp_strength = Strength(extension.clone());\n        if class_name_strength\
    \ < temp_strength {\n            class_name_strength = temp_strength;\n      \
    \      class_name_string = extension;\n        }\n    }\n    class_name + \".\"\
    \ + &class_name_string", "    let mut strongest = (0, \"\", \"\");\n    for ext\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in ext.chars() {\n            if c.is_uppercase() {\n                cap\
    \ += 1;\n            } else {\n                sm += 1;\n            }\n     \
    \   }\n        let strength = cap - sm;\n        if strongest.0 < strength {\n\
    \            strongest = (strength, ext, \"\");\n        } else if strongest.0\
    \ == strength {\n            if strongest.1 == \"\" {\n                strongest\
    \ = (strength, ext, strongest.2);\n            } else if strongest.2 == \"\" {\n\
    \                strongest = (strength, strongest.1, ext);\n            }\n  \
    \      }\n    }\n    if strongest.2 == \"\" {\n        format!(\"{}.{}\", class_name,\
    \ strongest.1)\n    } else {\n        format!(\"{}.{}\", class_name, strongest.2)\n\
    \    }", "    let (_, u_cnt, l_cnt) = count_upper_lower(class_name);\n    let\
    \ mut extend_strenght: Vec<(f64, String)> = Vec::new();\n    for extension in\
    \ extensions {\n        let (strength, upper_count, lower_count) = count_upper_lower(extension);\n\
    \        extend_strenght.push((strength, extension));\n    }\n    extend_strenght.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    let strongest_extension = extend_strenght.last().unwrap();\n\
    \    let mut new_class_name = class_name.clone();\n    new_class_name.push_str(\"\
    .\");\n    new_class_name.push_str(&strongest_extension.1);\n    return new_class_name;",
  "    let mut max_strength = -100.0;\n    let mut strongest_extension = String::new();\n\
    \    for extension in extensions {\n        let mut strength = 0.0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  strength += 1.0;\n            } else {\n                strength -= 1.0;\n\
    \            }\n        }\n        if strength > max_strength {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest\
    \ = 0.0;\n    let mut result = String::new();\n    for ext in extensions {\n \
    \       let cap = ext.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = ext.chars().filter(|c| c.is_lowercase()).count();\n        let fraction\
    \ = cap as f64 - sm as f64;\n        if fraction > strongest {\n            strongest\
    \ = fraction;\n            result = class_name.clone() + \".\" + &ext;\n     \
    \   }\n    }\n    result", "    let mut strengths: Vec<f64> = vec![];\n    for\
    \ ext in extensions {\n        let mut strength: f64 = 0.0;\n        for c in\
    \ ext.chars() {\n            if c.is_uppercase() {\n                strength +=\
    \ 1.0;\n            } else {\n                strength -= 1.0;\n            }\n\
    \        }\n        strengths.push(strength);\n    }\n    let max_strength: f64\
    \ = *strengths.iter().max().unwrap();\n    let mut strongest_ext: Vec<String>\
    \ = vec![];\n    for (idx, strength) in strengths.iter().enumerate() {\n     \
    \   if strength == &max_strength {\n            strongest_ext.push(extensions[idx].clone());\n\
    \        }\n    }\n    let mut strongest_ext: Vec<String> = strongest_ext.iter().map(|x|\
    \ x.to_string()).collect();\n    strongest_ext.sort();\n    format!(\"{}.{}\"\
    , class_name, strongest_ext[0])", "    let mut strengths: Vec<f64> = Vec::new();\n\
    \    let mut caps: Vec<i32> = Vec::new();\n    let mut sm: Vec<i32> = Vec::new();\n\
    \    for extension in extensions {\n        let mut cap = 0;\n        let mut\
    \ s = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                s += 1;\n\
    \            }\n        }\n        strengths.push(f64::from(cap - s));\n     \
    \   caps.push(cap);\n        sm.push(s);\n    }\n    let max_strength = strengths.iter().max().unwrap();\n\
    \    let mut max_index = 0;\n    for i in 0..strengths.len() {\n        if strengths[i]\
    \ == *max_strength {\n            max_index = i;\n            break;\n       \
    \ }\n    }\n    format!(\"{}.{}\", class_name, extensions[max_index])", "\tif\
    \ extensions.len() == 0 {\n\t\treturn class_name;\n\t}\n\tlet mut strongest_extension\
    \ = &extensions[0];\n\tlet mut strongest_extension_strength = strength(&extensions[0]);\n\
    \tfor i in 1..extensions.len() {\n\t\tlet current_strength = strength(&extensions[i]);\n\
    \t\tif current_strength > strongest_extension_strength {\n\t\t\tstrongest_extension\
    \ = &extensions[i];\n\t\t\tstrongest_extension_strength = current_strength;\n\t\
    \t}\n\t}\n\tformat!(\"{}.{}\", class_name, strongest_extension)", "    let class_strength\
    \ = |s: &String| {\n        let (cap, sm) = s.chars().fold((0, 0), |(cap, sm),\
    \ c| {\n            if c.is_uppercase() {\n                (cap + 1, sm)\n   \
    \         } else {\n                (cap, sm + 1)\n            }\n        });\n\
    \        cap - sm\n    };\n    let mut strongest = (0, \"\".to_string());\n  \
    \  for ext in extensions {\n        let strength = class_strength(&ext);\n   \
    \     if strongest.0 < strength {\n            strongest = (strength, ext);\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest.1)", "    let\
    \ mut max_strength = 0.0;\n    let mut max_extension = String::new();\n    for\
    \ (index, extension) in extensions.iter().enumerate() {\n        let caps_count\
    \ = extension.chars().filter(|c| c.is_uppercase()).count();\n        let smalls_count\
    \ = extension.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = caps_count as f64 - smalls_count as f64;\n        if strength > max_strength\
    \ {\n            max_strength = strength;\n            max_extension = extension.clone();\n\
    \        } else if strength == max_strength {\n            if max_extension ==\
    \ \"\" {\n                max_extension = extension.clone();\n            } else\
    \ {\n                let max_index = extensions.iter().position(|x| x == &max_extension).unwrap();\n\
    \                if index < max_index {\n                    max_extension = extension.clone();\n\
    \                }\n            }\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ max_extension)", "    let mut strongest_ext = String::new();\n    let mut highest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let strength = extension.chars().filter(|x|\
    \ x.is_uppercase()).count() as f64 -\n                       extension.chars().filter(|x|\
    \ x.is_lowercase()).count() as f64;\n        if strength > highest_strength {\n\
    \            highest_strength = strength;\n            strongest_ext = extension;\n\
    \        }\n    }\n    class_name + \".\" + &strongest_ext", "    let mut ext_strength\
    \ = Vec::new();\n    let mut strong = 0;\n    let mut ext_name = String::new();\n\
    \    for i in 0..extensions.len() {\n        let mut cap = 0;\n        let mut\
    \ sm = 0;\n        for j in 0..extensions[i].len() {\n            if extensions[i].chars().nth(j).unwrap().is_ascii_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        ext_strength.push(cap - sm);\n    }\n    for\
    \ i in 0..ext_strength.len() {\n        if ext_strength[i] > strong {\n      \
    \      strong = ext_strength[i];\n            ext_name = extensions[i].clone();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, ext_name)", "    let mut\
    \ strength = 0.0;\n    let mut strongest_extension = \"\";\n    for ext in extensions\
    \ {\n        let ext_s = ext.to_uppercase();\n        let cap_len = ext_s.len();\n\
    \        let sm_len = ext.len();\n        let str = (cap_len - sm_len) as f64;\n\
    \        if str > strength {\n            strength = str;\n            strongest_extension\
    \ = ext.as_str();\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    let mut strongest_extension = \"\";\n    let mut strength = 0.0;\n    for extension\
    \ in extensions {\n        let strength_candidate = extension.chars().filter(|x|\
    \ x.is_uppercase()).count() as f64 -\n            extension.chars().filter(|x|\
    \ x.is_lowercase()).count() as f64;\n        if strength_candidate > strength\
    \ {\n            strength = strength_candidate;\n            strongest_extension\
    \ = extension.as_str();\n        }\n    }\n    return format!(\"{}.{}\", class_name,\
    \ strongest_extension);", '    class_name + "." + &extensions.iter().max_by_key(|e|
    count_cap_sm(&e)).unwrap()', "    // your code here\n    let mut ex = String::new();\n\
    \    let mut strength = 0;\n    for i in extensions.iter() {\n        let cap\
    \ = i.chars().filter(|&i| i.is_uppercase()).count();\n        let small = i.chars().filter(|&i|\
    \ i.is_lowercase()).count();\n        let sum = cap - small;\n        if sum >\
    \ strength {\n            strength = sum;\n            ex = i.to_string();\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, ex)", "    let mut strongest\
    \ = Vec::new();\n    for extension in extensions {\n        let mut upper = 0;\n\
    \        let mut lower = 0;\n        for letter in extension.chars() {\n     \
    \       if letter.is_uppercase() {\n                upper += 1;\n            }\
    \ else {\n                lower += 1;\n            }\n        }\n        let strength\
    \ = upper - lower;\n        strongest.push((strength, extension));\n    }\n  \
    \  let mut strongest = strongest.into_iter().max().unwrap();\n    return format!(\"\
    {}.{}\", class_name, strongest.1);", "    let mut strongest = (0, class_name.clone());\n\
    \    for s in extensions {\n        let caps = s.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = s.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = (caps - sm) as i32;\n        if strength > strongest.0 {\n      \
    \      strongest = (strength, s);\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ strongest.1)", '    unimplemented!()', "    let mut strength = std::f64::NEG_INFINITY;\n\
    \    let mut extension = \"\";\n    for extension_string in extensions {\n   \
    \     let caps = extension_string.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension_string.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let current_strength = caps as f64 - sm as f64;\n        if current_strength\
    \ > strength {\n            strength = current_strength;\n            extension\
    \ = extension_string.as_str();\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut output = class_name;\n    let mut strength = 0;\n\
    \    for i in extensions {\n        let upper = i.chars().filter(|&x| x.is_uppercase()).count();\n\
    \        let lower = i.chars().filter(|&x| x.is_lowercase()).count();\n      \
    \  let value = upper - lower;\n        if value > strength {\n            strength\
    \ = value;\n            output = format!(\"{}.{}\", class_name, i);\n        }\n\
    \    }\n    output", '    unimplemented!()', "    let mut strong = 0;\n    let\
    \ mut str = \"\".to_string();\n    for (i, x) in extensions.iter().enumerate()\
    \ {\n        let mut upper = 0;\n        let mut lower = 0;\n        for y in\
    \ x.chars() {\n            if y.is_uppercase() {\n                upper += 1;\n\
    \            } else {\n                lower += 1;\n            }\n        }\n\
    \        if upper - lower > strong {\n            strong = upper - lower;\n  \
    \          str = x.to_string();\n        } else if upper - lower == strong {\n\
    \            if str > x {\n                str = x.to_string();\n            }\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, str)", '    "".to_string()',
  "    let mut strongest_extension: (f64, String) = (0.0, String::new());\n    for\
    \ s in extensions {\n        let strength = strength(&s);\n        if strongest_extension.0\
    \ < strength {\n            strongest_extension = (strength, s);\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, strongest_extension.1)", "    class_name\
    \ + \".\" + &extensions.iter().fold(\"\", |a,b| {\n        let s: f64 = b.chars().fold(0,\
    \ |c,d| {\n            if d.is_uppercase() {\n                c + 1\n        \
    \    } else {\n                c - 1\n            }\n        }).max(0).min(b.len())\
    \ as f64 / b.len() as f64;\n        if s > a.chars().fold(0, |c,d| {\n       \
    \     if d.is_uppercase() {\n                c + 1\n            } else {\n   \
    \             c - 1\n            }\n        }).max(0).min(a.len()) as f64 / a.len()\
    \ as f64 {\n            b.to_string()\n        } else {\n            a.to_string()\n\
    \        }\n    })", "    let uppercase = Regex::new(r\"\\p{Lu}\").unwrap();\n\
    \    let mut max = 0.0;\n    let mut max_idx = 0;\n    for (i, extension) in extensions.iter().enumerate()\
    \ {\n        let mut count_uppercase = 0;\n        let mut count_lowercase = 0;\n\
    \        for c in extension.chars() {\n            if uppercase.is_match(&c.to_string())\
    \ {\n                count_uppercase += 1;\n            } else {\n           \
    \     count_lowercase += 1;\n            }\n        }\n        let ratio = (count_uppercase\
    \ as f64) / (count_lowercase as f64);\n        if max < ratio {\n            max\
    \ = ratio;\n            max_idx = i;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, extensions[max_idx]);", "    //\n    extensions.iter().fold(class_name,\
    \ |acc, x| {\n        //\n        if x.chars().filter(|&c| c.is_uppercase()).count()\
    \ -\n           x.chars().filter(|&c| c.is_lowercase()).count() >\n          \
    \ acc.chars().filter(|&c| c.is_uppercase()).count() -\n           acc.chars().filter(|&c|\
    \ c.is_lowercase()).count() {\n            //\n            format!(\"{}.{}\",\
    \ class_name, x)\n        } else {\n            //\n            acc\n        }\n\
    \    })", "    extensions.iter().map(|e| {\n        (\n            e.chars().filter(|c|\
    \ c.is_uppercase()).count() as i32\n                - e.chars().filter(|c| c.is_lowercase()).count()\
    \ as i32,\n            e,\n        )\n    })\n    .max()\n    .map(|(_, e)| format!(\"\
    {}.{}\", class_name, e))\n    .unwrap_or(class_name)", "    let mut strongest\
    \ = String::new();\n    let mut strength = 0f64;\n    for extension in extensions\
    \ {\n        let caps: u32 = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ as u32;\n        let smalls: u32 = extension.chars().filter(|c| c.is_lowercase()).count()\
    \ as u32;\n        let tstrength = caps as f64 - smalls as f64;\n        if tstrength\
    \ > strength {\n            strength = tstrength;\n            strongest = extension;\n\
    \        }\n    }\n    class_name + \".\" + &strongest", "    let mut strongest\
    \ = 0.0;\n    let mut strongest_extension = String::new();\n    for extension\
    \ in extensions {\n        let (cap, small) = extension.chars().fold((0, 0), |(cap,\
    \ small), x| {\n            if x.is_uppercase() {\n                (cap + 1, small)\n\
    \            } else {\n                (cap, small + 1)\n            }\n     \
    \   });\n        let strength = (cap as f64) - (small as f64);\n        if strength\
    \ > strongest {\n            strongest = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    class_name + \".\" + &strongest_extension",
  "\tlet mut strongest_extension = \"\";\n\tlet mut strength = 0;\n\tfor extension\
    \ in extensions {\n\t\tlet temp_strength = strength(extension.clone());\n\t\t\
    if temp_strength > strength {\n\t\t\tstrength = temp_strength;\n\t\t\tstrongest_extension\
    \ = extension.as_str();\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;",
  "    format!(\"{}.{}\",\n            class_name,\n            extensions.iter()\n\
    \                      .map(|e| (e.chars().filter(|&c| c.is_uppercase()).count()\
    \ -\n                                e.chars().filter(|&c| c.is_lowercase()).count(),\n\
    \                                e))\n                      .max()\n         \
    \             .unwrap()\n                      .1)", "    let mut strongest_extension\
    \ = \"\".to_string();\n    let mut strongest_strength = 0;\n    for extension\
    \ in extensions {\n        let upper = extension.chars().filter(|&x| x.is_uppercase()).count();\n\
    \        let lower = extension.chars().filter(|&x| x.is_lowercase()).count();\n\
    \        let strength = upper - lower;\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut result = class_name.clone();\n    let mut strength: f64 = 0.0;\n  \
    \  for ext in extensions {\n        let mut small_count = 0;\n        let mut\
    \ cap_count = 0;\n        for c in ext.chars() {\n            if c.is_uppercase()\
    \ {\n                cap_count += 1;\n            } else {\n                small_count\
    \ += 1;\n            }\n        }\n        let strg = (cap_count as f64) - (small_count\
    \ as f64);\n        if strg > strength {\n            strength = strg;\n     \
    \       result = format!(\"{}.{}\", class_name, ext);\n        }\n    }\n    result",
  "    let mut result: (String, isize) = (String::new(), 0);\n    for extension in\
    \ extensions {\n        let caps: isize = extension.chars().filter(|&c| c.is_uppercase()).count()\
    \ as isize;\n        let sm: isize = extension.chars().filter(|&c| c.is_lowercase()).count()\
    \ as isize;\n        let strength: isize = caps - sm;\n        if strength > result.1\
    \ {\n            result = (extension.clone(), strength);\n        }\n    }\n \
    \   format!(\"{}.{}\", class_name, result.0)", "    let mut res = Vec::new();\n\
    \    for i in extensions {\n        let mut strength = 0i32;\n        for ii in\
    \ i.chars() {\n            match ii {\n                'A'...'Z' => strength +=\
    \ 1,\n                'a'...'z' => strength -= 1,\n                _ => (),\n\
    \            }\n        }\n        res.push((i, strength));\n    }\n    format!(\"\
    {}.{}\", class_name, res.iter().max_by_key(|x| x.1).unwrap().0)", "    let mut\
    \ ret = format!(\"{}.{}\", class_name, extensions[0]);\n    let mut strength =\
    \ 0;\n    for extension in extensions {\n        let cap = extension.chars().filter(|&c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|&c| c.is_lowercase()).count();\n\
    \        let st = cap - sm;\n        if st > strength {\n            strength\
    \ = st;\n            ret = format!(\"{}.{}\", class_name, extension);\n      \
    \  }\n    }\n    ret", "    let mut strongest_strength = 0.0;\n    let mut strongest_extension\
    \ = \"\".to_string();\n    for extension in extensions {\n        let mut caps\
    \ = 0;\n        let mut sms = 0;\n        for letter in extension.chars() {\n\
    \            if letter.is_ascii_uppercase() {\n                caps += 1;\n  \
    \          } else {\n                sms += 1;\n            }\n        }\n   \
    \     let strength = caps as f64 - sms as f64;\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut best_strength = 0.0;\n    let mut best_extension = String::new();\n\
    \    for ext in extensions {\n        let strength = ext.matches(char::is_uppercase).count()\
    \ as f64 - ext.matches(char::is_lowercase).count() as f64;\n        if strength\
    \ > best_strength {\n            best_strength = strength;\n            best_extension\
    \ = ext;\n        }\n    }\n    return format!(\"{}.{}\", class_name, best_extension);",
  "    let mut strongest_extension = \"\";\n    let mut strongest_strength = 0;\n\
    \    for extension in extensions {\n        let mut strength = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  strength += 1;\n            } else {\n                strength -= 1;\n    \
    \        }\n        }\n        if strength > strongest_strength {\n          \
    \  strongest_strength = strength;\n            strongest_extension = &extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let strength = |extension: &String| extension.chars().fold((0, 0), |acc, ch|\
    \ match ch {\n        'A' ... 'Z' => (acc.0 + 1, acc.1),\n        'a' ... 'z'\
    \ => (acc.0, acc.1 + 1),\n        _ => acc,\n    });\n    let mut strongest_extension\
    \ = (strength(&extensions[0]), 0);\n    for (i, extension) in extensions.iter().enumerate()\
    \ {\n        let current_strength = strength(extension);\n        if current_strength\
    \ > strongest_extension.0 {\n            strongest_extension = (current_strength,\
    \ i);\n        }\n    }\n    format!(\"{}.{}\", class_name, extensions[strongest_extension.1])",
  "    let mut strength: (f64, &String) = (0f64, &\"\".to_string());\n    for ext\
    \ in extensions {\n        let mut up_count = 0u32;\n        let mut lo_count\
    \ = 0u32;\n        for c in ext.chars() {\n            if c.is_ascii_uppercase()\
    \ {\n                up_count += 1u32;\n            } else if c.is_ascii_lowercase()\
    \ {\n                lo_count += 1u32;\n            }\n        }\n        let\
    \ s = up_count as f64 - lo_count as f64;\n        if s > strength.0 {\n      \
    \      strength = (s, &ext);\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ strength.1)", "    let mut res: (f64, &String) = (0.0, &extensions[0]);\n  \
    \  for ext in extensions {\n        let mut lower_count = 0;\n        let mut\
    \ upper_count = 0;\n        for c in ext.chars() {\n            if c.is_lowercase()\
    \ {\n                lower_count += 1;\n            } else {\n               \
    \ upper_count += 1;\n            }\n        }\n        let diff = (upper_count\
    \ as f64) - (lower_count as f64);\n        if diff > res.0 {\n            res\
    \ = (diff, &ext);\n        }\n    }\n    format!(\"{}.{}\", class_name, res.1)",
  "    let mut temp = extensions[0].clone();\n    let mut strongest = 0.0;\n    for\
    \ extension in extensions {\n        let upper = extension.chars().filter(|x|\
    \ x.is_uppercase()).count();\n        let lower = extension.chars().filter(|x|\
    \ x.is_lowercase()).count();\n        let current = upper as f64 - lower as f64;\n\
    \        if current > strongest {\n            strongest = current;\n        \
    \    temp = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, temp)",
  "    let mut strength: f64 = -1.0;\n    let mut ext_name = String::new();\n    for\
    \ ext in extensions {\n        let mut uppercase_count = 0;\n        let mut lowercase_count\
    \ = 0;\n        for c in ext.chars() {\n            if c.is_ascii_uppercase()\
    \ {\n                uppercase_count += 1;\n            } else if c.is_ascii_lowercase()\
    \ {\n                lowercase_count += 1;\n            }\n        }\n       \
    \ let current_strength = uppercase_count as f64 - lowercase_count as f64;\n  \
    \      if current_strength > strength {\n            strength = current_strength;\n\
    \            ext_name = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ ext_name)", "    let mut strongest_extension: &str = &extensions[0];\n    let\
    \ mut strongest_extension_strength: f32 = 0.;\n    for ext in extensions {\n \
    \       let ext_strength = extension_strength(&ext);\n        if ext_strength\
    \ > strongest_extension_strength {\n            strongest_extension = &ext;\n\
    \            strongest_extension_strength = ext_strength;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut sum_class_name:\
    \ i32 = 0;\n    for c in class_name.chars() {\n        if c.is_uppercase() {\n\
    \            sum_class_name += 1;\n        }\n    }\n    for i in 0..extensions.len()\
    \ {\n        let mut sum_extension: i32 = 0;\n        for c in extensions[i].chars()\
    \ {\n            if c.is_uppercase() {\n                sum_extension += 1;\n\
    \            }\n        }\n        let mut sum_extension: i32 = sum_extension\
    \ - extensions[i].len() as i32;\n        if sum_extension == sum_class_name {\n\
    \            return class_name + \".\" + &extensions[i];\n        }\n    }\n \
    \   return class_name;", "    let mut strongest_extension = String::new();\n \
    \   let mut strongest_extension_strength = f64::MIN;\n    for extension in extensions\
    \ {\n        let upper_letters = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let lower_letters = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let extension_strength = (upper_letters as f64) - (lower_letters as f64);\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let\
    \ mut res = class_name.clone();\n    let mut max_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut caps_cnt = 0;\n        let mut small_cnt =\
    \ 0;\n        for ch in extension.chars() {\n            if ch.is_uppercase()\
    \ {\n                caps_cnt += 1;\n            } else {\n                small_cnt\
    \ += 1;\n            }\n        }\n        let strength = (caps_cnt as f64) -\
    \ (small_cnt as f64);\n        if strength > max_strength {\n            max_strength\
    \ = strength;\n            res = format!(\"{}.{}\", class_name, extension);\n\
    \        }\n    }\n    res", "    if extensions.len() == 0 { return class_name;\
    \ }\n    let strong_extension = extensions\n        .iter()\n        .map(|ext|\
    \ (ext, strength(ext)))\n        .max_by(|&(a, b), &(c, d)| b.partial_cmp(&d).unwrap())\n\
    \        .unwrap();\n    format!(\"{}.{}\", class_name, strong_extension.0)",
  "    let mut strongest = 0;\n    let mut result = class_name.clone();\n    for ext\
    \ in extensions {\n        let mut sum = 0;\n        for ch in ext.chars() {\n\
    \            match ch {\n                'A'..='Z' => sum += 1,\n            \
    \    'a'..='z' => sum -= 1,\n                _ => {},\n            }\n       \
    \ }\n        if sum > strongest {\n            strongest = sum;\n            result\
    \ = class_name.clone() + \".\" + &ext;\n        }\n    }\n    result", "    let\
    \ mut max_score = 0;\n    let mut extension = String::new();\n    for name in\
    \ extensions {\n        let score = score(&name);\n        if score > max_score\
    \ {\n            max_score = score;\n            extension = name;\n        }\n\
    \    }\n    class_name + \".\" + &extension", "    let mut best = (\"\", -100.0);\n\
    \    for e in extensions {\n        let c = e.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let s = e.chars().filter(|&c| c.is_lowercase()).count();\n        let\
    \ strength = f64::from(c) - f64::from(s);\n        if strength > best.1 {\n  \
    \          best = (e, strength);\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ best.0)", "    let mut max_strength = 0.0;\n    let mut max_extension = String::new();\n\
    \    for extension in extensions {\n        let strength = calculate_strength(&extension);\n\
    \        if strength > max_strength {\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, max_extension);", "    let s = extensions.iter().fold((\"\
    \".to_string(), -1f64), |(class, strength), extension|\n        if strength <=\
    \ extension.chars().fold(0f64, |count, ch| if ch.is_uppercase() {count + 1f64}\
    \ else {count}) - extension.chars().fold(0f64, |count, ch| if ch.is_lowercase()\
    \ {count + 1f64} else {count}) {\n            (extension.to_string(), extension.chars().fold(0f64,\
    \ |count, ch| if ch.is_uppercase() {count + 1f64} else {count}) - extension.chars().fold(0f64,\
    \ |count, ch| if ch.is_lowercase() {count + 1f64} else {count}))\n        } else\
    \ {\n            (class, strength)\n        }\n    );\n    class_name + \".\"\
    \ + &s.0", "    return class_name + \".\" + &extensions\n        .iter()\n   \
    \     .map(|ext| (ext.to_lowercase(), Score(ext)))\n        .max_by(|a, b| a.1.partial_cmp(&b.1).unwrap())\n\
    \        .unwrap()\n        .0;", "    if extensions.len() == 0 {\n        return\
    \ class_name + \".\";\n    }\n    let (mut strongest_extension, mut strength):\
    \ (String, f64) = (extensions[0].clone(), 0.0);\n    for extension in extensions\
    \ {\n        let mut cap_count = 0;\n        let mut small_count = 0;\n      \
    \  for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                cap_count += 1;\n            } else if character.is_lowercase()\
    \ {\n                small_count += 1;\n            }\n        }\n        let\
    \ extension_strength = (cap_count as f64) - (small_count as f64);\n        if\
    \ extension_strength > strength {\n            strongest_extension = extension.clone();\n\
    \            strength = extension_strength;\n        }\n    }\n    return class_name\
    \ + \".\" + &strongest_extension;", "    let mut strong = Vec::new();\n    for\
    \ i in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n     \
    \   for j in i.chars() {\n            if (j >= 'A' && j <= 'Z') {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap - sm;\n        strong.push((i, strength));\n\
    \    }\n    strong.sort_by(|a, b| {\n        if a.1 != b.1 {\n            return\
    \ a.1.cmp(&b.1);\n        }\n        return a.0.cmp(&b.0);\n    });\n    let mut\
    \ st = String::new();\n    st.push_str(&class_name);\n    st.push_str(\".\");\n\
    \    st.push_str(&strong[0].0);\n    st", '    return "my_class.AA".to_string();',
  "    let mut class_str_strength = 0.0;\n    let mut class_str_strength_name = String::new();\n\
    \    for ext in extensions {\n        let mut cnt_small = 0;\n        let mut\
    \ cnt_capital = 0;\n        for c in ext.chars() {\n            if c.is_lowercase()\
    \ {\n                cnt_small += 1;\n            } else {\n                cnt_capital\
    \ += 1;\n            }\n        }\n        let strength = (cnt_capital - cnt_small)\
    \ as f64;\n        if strength > class_str_strength {\n            class_str_strength\
    \ = strength;\n            class_str_strength_name = ext;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, class_str_strength_name)", "    // Your code\
    \ goes here\n    String::new()", "    // let mut result = class_name.clone();\n\
    \    // let mut strongest = 0.0;\n    // for extension in extensions {\n    //\
    \     let caps: usize = extension.chars().filter(|ch| ch.is_uppercase()).count();\n\
    \    //     let lowers: usize = extension.chars().filter(|ch| ch.is_lowercase()).count();\n\
    \    //     let strength = caps as f64 - lowers as f64;\n    //     if strength\
    \ > strongest {\n    //         strongest = strength;\n    //         result =\
    \ format!(\"{}.{}\", class_name, extension);\n    //     }\n    // }\n    // result\n\
    \    let cname = &class_name;\n    let (class, extension) = extensions.into_iter()\n\
    \        .fold((class_name, \"\".to_string()),\n              |(class, extension),\
    \ ext| {\n                  let caps: usize = ext.chars().filter(|ch| ch.is_uppercase()).count();\n\
    \                  let lowers: usize = ext.chars().filter(|ch| ch.is_lowercase()).count();\n\
    \                  let strength = caps as f64 - lowers as f64;\n             \
    \     if strength > extension.to_string().parse::<f64>().unwrap_or(0.0) {\n  \
    \                    (class, strength.to_string())\n                  } else {\n\
    \                      (class, extension)\n                  }\n             \
    \ });\n    format!(\"{}.{}\", class, extension)", "    let mut new_extension =\
    \ extensions.clone();\n    new_extension.push(class_name);\n    let mut strongest\
    \ = new_extension[0].clone();\n    let mut strength:f64 = 0.0;\n    for extension\
    \ in new_extension {\n        let mut upcase_count = 0;\n        let mut downcase_count\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                upcase_count += 1;\n            } else {\n              \
    \  downcase_count += 1;\n            }\n        }\n        let test_strength =\
    \ (upcase_count as f64 - downcase_count as f64).abs();\n        if test_strength\
    \ > strength {\n            strength = test_strength;\n            strongest =\
    \ extension;\n        }\n    }\n    return strongest;", "    let (ext, _) = extensions.iter().fold((String::new(),\
    \ 0), |acc, x| {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in x.chars() {\n            if c.is_uppercase() {\n                cap +=\
    \ 1;\n            } else {\n                sm += 1;\n            }\n        }\n\
    \        if acc.1 < cap - sm {\n            (x.clone(), cap - sm)\n        } else\
    \ {\n            acc\n        }\n    });\n    format!(\"{}.{}\", class_name, ext)",
  "    let mut strongest_extension: (String, f64) = (String::new(), 0.0);\n    let\
    \ mut current_extension: (String, f64) = (String::new(), 0.0);\n    for e in extensions\
    \ {\n        let CAP = e.chars().filter(|x| x.is_uppercase()).count();\n     \
    \   let SM = e.chars().filter(|x| x.is_lowercase()).count();\n        let strength\
    \ = CAP as f64 - SM as f64;\n        current_extension = (e, strength);\n    \
    \    if current_extension.1 > strongest_extension.1 {\n            strongest_extension\
    \ = current_extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension.0)",
  '    class_name + "." + &extensions.iter().max_by_key(|e| strength(e)).unwrap()',
  "\tlet mut strongest = extensions[0].clone();\n\tlet mut strength = 0.0;\n\tlet\
    \ mut tmp = 0.0;\n\tfor i in extensions {\n\t\tlet cnt = Regex::new(r\"[A-Z]\"\
    ).unwrap().find_iter(&i).count();\n\t\tlet cnt2 = Regex::new(r\"[a-z]\").unwrap().find_iter(&i).count();\n\
    \t\ttmp = cnt as f64 - cnt2 as f64;\n\t\tif tmp > strength {\n\t\t\tstrength =\
    \ tmp;\n\t\t\tstrongest = i.clone();\n\t\t}\n\t}\n\treturn format!(\"{}.{}\",\
    \ class_name, strongest);", "    let mut strongest_class = class_name.clone();\n\
    \    let mut strongest_value = 0.;\n    for i in extensions {\n        let mut\
    \ cap = 0;\n        let mut sm = 0;\n        for c in i.chars() {\n          \
    \  if c.is_uppercase() {\n                cap += 1;\n            } else {\n  \
    \              sm += 1;\n            }\n        }\n        let value = cap as\
    \ f64 - sm as f64;\n        if value > strongest_value {\n            strongest_value\
    \ = value;\n            strongest_class = class_name.clone() + \".\" + &i;\n \
    \       }\n    }\n    strongest_class", '    class_name + "." + &extensions.iter().max_by_key(|x|
    x.chars().filter(|x| x.is_uppercase()).count() as i32 - x.chars().filter(|x| x.is_lowercase()).count()
    as i32).unwrap()', "    let mut it = extensions.iter().enumerate();\n    let mut\
    \ max_upper = 0;\n    let mut max_lower = 0;\n    let mut max_ext_index = 0;\n\
    \    for (index, extension) in it {\n        let mut upper = 0;\n        let mut\
    \ lower = 0;\n        for ch in extension.chars() {\n            if ch.is_uppercase()\
    \ {\n                upper += 1;\n            } else {\n                lower\
    \ += 1;\n            }\n        }\n        if upper - lower > max_upper - max_lower\
    \ {\n            max_upper = upper;\n            max_lower = lower;\n        \
    \    max_ext_index = index;\n        }\n    }\n    return format!(\"{}.{}\", class_name,\
    \ extensions[max_ext_index]);", "\tlet mut strongest_extension: String = \"\"\
    .to_string();\n\tlet mut highest_strength: f64 = 0.0;\n\tfor extension in extensions\
    \ {\n\t\tlet mut upper: usize = 0;\n\t\tlet mut lower: usize = 0;\n\t\tfor c in\
    \ extension.chars() {\n\t\t\tif c.is_uppercase() {\n\t\t\t\tupper += 1;\n\t\t\t\
    } else {\n\t\t\t\tlower += 1;\n\t\t\t}\n\t\t}\n\t\tlet strength: f64 = upper as\
    \ f64 - lower as f64;\n\t\tif strength > highest_strength {\n\t\t\thighest_strength\
    \ = strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut class_name = class_name.clone();\n\
    \    let mut strength = -100;\n    let mut extension = \"\".to_string();\n   \
    \ for s in extensions {\n        let mut s = s.clone();\n        let mut num_of_upper_case\
    \ = 0;\n        let mut num_of_lower_case = 0;\n        for ch in s.chars() {\n\
    \            if ch.is_uppercase() {\n                num_of_upper_case += 1;\n\
    \            } else {\n                num_of_lower_case += 1;\n            }\n\
    \        }\n        let temp_strength = num_of_upper_case - num_of_lower_case;\n\
    \        if temp_strength > strength {\n            strength = temp_strength;\n\
    \            extension = s;\n        }\n    }\n    class_name.push_str(\".\");\n\
    \    class_name.push_str(&extension);\n    class_name", "    let mut max_i = 0;\n\
    \    let mut max_score = 0;\n    for (i, ext) in extensions.iter().enumerate()\
    \ {\n        let (upper, lower) = ext.split_at(ext.chars().filter(|c| *c >= 'A'\
    \ && *c <= 'Z').count());\n        let score = upper.len() - lower.len();\n  \
    \      if score > max_score {\n            max_score = score;\n            max_i\
    \ = i;\n        }\n    }\n    format!(\"{}.{}\", class_name, extensions[max_i])",
  "    let mut max_idx = 0;\n    let mut max_strength = 0;\n    for i in 0..extensions.len()\
    \ {\n        let (cap, sm) = get_strength(extensions[i].clone());\n        let\
    \ strength = cap - sm;\n        if strength > max_strength {\n            max_strength\
    \ = strength;\n            max_idx = i;\n        }\n    }\n    class_name + \"\
    .\" + &extensions[max_idx]", "    let mut strongest_extension: &str = \"\";\n\
    \    let mut current_strength: f64 = 0.0;\n    for ext in extensions {\n     \
    \   let capital_letters: usize = ext.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let small_letters: usize = ext.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength: f64 = (capital_letters as f64) - (small_letters as f64);\n\
    \        if strength > current_strength {\n            current_strength = strength;\n\
    \            strongest_extension = &ext;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    if extensions.len() == 0 {\n       \
    \ return class_name;\n    }\n    let mut strongest_extension = extensions[0].clone();\n\
    \    let mut strongest_extension_strength = get_extension_strength(&extensions[0]);\n\
    \    for i in 1..extensions.len() {\n        let extension_strength = get_extension_strength(&extensions[i]);\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extensions[i].clone();\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut best = (0.0, String::new());\n    for ext in extensions {\n       \
    \ let (cap, sm) = ext.chars().fold((0, 0), |mut acc, ch| {\n            if ch.is_uppercase()\
    \ {\n                acc.0 += 1;\n            } else {\n                acc.1\
    \ += 1;\n            }\n            acc\n        });\n        let strength = (cap\
    \ as f64) - (sm as f64);\n        if strength > best.0 {\n            best = (strength,\
    \ ext);\n        }\n    }\n    format!(\"{}.{}\", class_name, best.1)"]
stop_tokens:
- "\n}"
