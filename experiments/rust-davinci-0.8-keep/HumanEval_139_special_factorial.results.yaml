name: HumanEval_139_special_factorial
language: rust
results:
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    return n *\
    \ special_factorial(n - 1);\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp3ps2tyb2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  if n <= 1 {\n    return 1;\n  }\n\n  let mut result = 1;\n\
    \  for i in 1..=n {\n    result *= i * (i - 1);\n  }\n\n  result\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmp7hyr7uky.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n.factorial() * (n - 1).factorial()\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `factorial` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpqgqs8g0f.rs:10:7\n   |\n10 |     n.factorial()\
    \ * (n - 1).factorial()\n   |       ^^^^^^^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `factorial` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpqgqs8g0f.rs:10:29\n   |\n10 |     n.factorial() * (n -\
    \ 1).factorial()\n   |                             ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcz3ngj05.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        1 => 1,\n        x => x * special_factorial(x\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmplptcoq2n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial = 1;\n    for x in 1..n+1 {\n     \
    \   factorial *= x * factorial;\n    }\n    factorial\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `576`,\n right: `288`', /tmp/tmpnhn8p_nn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // YOUR CODE HERE\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1fttsmvt.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_kv4_lzm.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Write your code here\n    (1..=n).fold(1, |acc, x|\
    \ acc * x * (x - 1))\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmpj_2ew85u.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n * n - 1\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `288`', /tmp/tmps6c00a_n.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // YOUR CODE HERE\n    0\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmpk9zwf57a.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpq64ebaty.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n\n    let factorials:\
    \ Vec<isize> = (1..=n).collect();\n    factorials.iter().fold(1, |acc, factorial|\
    \ acc * factorial)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_6hionuy.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n\n    special_factorial(n-1)\
    \ * factorial(n)\n}\n\nfn main() {\n    let candidate = special_factorial;\n \
    \   assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n   \
    \ assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpghts9yi1.rs:14:30\n\
    \   |\n14 |     special_factorial(n-1) * factorial(n)\n   |                  \
    \            ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp5lbnx642.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2k5j9lg8.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Your code here\n    (1..n + 1).fold(1, |acc, x| acc\
    \ * x * factorial(x - 1))\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp2sstnior.rs:11:43\n\
    \   |\n11 |     (1..n + 1).fold(1, |acc, x| acc * x * factorial(x - 1))\n   |\
    \                                           ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    let mut i = n;\n    while i\
    \ > 0 {\n        result *= factorial(i);\n        i -= 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp52f0hq7l.rs:13:19\n\
    \   |\n13 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // your code here\n    0\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmp41widk0z.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n\n    let mut\
    \ result = n;\n    for i in 1..n {\n        result *= i;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpm8zq9smj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprt2rbhgm.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp5nzglceh.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    assert!(n > 0);\n    // unimplemented!();\n    return\
    \ mult_range(n, 1);\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mult_range` in this scope\n  --> /tmp/tmpied83q7l.rs:12:12\n\
    \   |\n12 |     return mult_range(n, 1);\n   |            ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut total\
    \ = 1;\n    for i in 1..n + 1 {\n        let mut factorial = 1;\n        for j\
    \ in 1..i + 1 {\n            factorial *= j;\n        }\n        total *= factorial;\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyom96u1j.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n + 1).map(|x| factorial(x)).product()\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpf38v7sgn.rs:10:24\n\
    \   |\n10 |     (1..n + 1).map(|x| factorial(x)).product()\n   |             \
    \           ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2se1xt0d.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7auz3mjw.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpat9gicc3.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpv62m34ka.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut sf = 1;\n    for i in 1..n + 1 {\n        sf\
    \ *= factorial(i);\n    }\n    sf\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpmxhx7g6d.rs:12:15\n\
    \   |\n12 |         sf *= factorial(i);\n   |               ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    let mut brazilian_factorial\
    \ = 1;\n    for x in 1..n + 1 {\n        brazilian_factorial *= factorial(x);\n\
    \    }\n    brazilian_factorial\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpyiqi3e7i.rs:15:32\n\
    \   |\n15 |         brazilian_factorial *= factorial(x);\n   |               \
    \                 ^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpomh0hlga.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial = 1;\n    for x in (1..n + 1).rev()\
    \ {\n        factorial *= x;\n    }\n    factorial\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpl30397xl.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // your code here\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsv60zkvj.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n+1).fold(1, |acc, x| acc * x) * (1..n).fold(1, |acc,\
    \ x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `288`', /tmp/tmp4rxbpoki.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: return the correct value\n    1\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `288`', /tmp/tmp8g8ihymi.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  // This is a classic example of a **recursive** method.\
    \ See special_factorial.py\n  // for a step-by-step explanation of how this method\
    \ operates.\n  match n {\n    0 => 1,\n    n => n * special_factorial(n - 1),\n\
    \  }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpu5x3y_3z.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp7l5hcvu5.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    factorial(n) * factorial(n - 1)\n}\n\nfn main() {\n \
    \   let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n \
    \   assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmps_08g186.rs:10:5\n\
    \   |\n10 |     factorial(n) * factorial(n - 1)\n   |     ^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `factorial` in this scope\n\
    \  --> /tmp/tmps_08g186.rs:10:20\n   |\n10 |     factorial(n) * factorial(n -\
    \ 1)\n   |                    ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `288`', /tmp/tmphng3pqnq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        (1..=n).product::<isize>()\
    \ * special_factorial(n - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpa3ytwiz4.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n + 1).map(simple_factorial).product()\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `simple_factorial` in this scope\n  -->\
    \ /tmp/tmpup_fhwg8.rs:10:20\n   |\n10 |     (1..n + 1).map(simple_factorial).product()\n\
    \   |                    ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 2..=n {\n        result\
    \ *= i * (i - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `288`', /tmp/tmpqfxme0c_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    return n *\
    \ special_factorial(n - 1);\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp8bmk2g5n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut total = 1;\n    for x in 1..n+1 {\n        total\
    \ *= x;\n        total *= x-1;\n    }\n    total\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmp133tkrh9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // your code here\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0g6_gq1x.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprss9j7d1.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        special_factorial(n-1)\
    \ * factorial(n)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpgupikhcp.rs:13:34\n\
    \   |\n13 |         special_factorial(n-1) * factorial(n)\n   |              \
    \                    ^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpi0h7jim5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Hmm, should this be a recursive function?\n    n *\
    \ special_factorial(n - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Unimplemented!()\n    // let mut sum = 1;\n    //\
    \ for i in 1..n+1 {\n    //     sum *= i * (i-1);\n    // }\n    // sum\n    let\
    \ range = 1..=n;\n    let mut sum = range.product::<isize>();\n    for i in 1..n\
    \ {\n        sum *= i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `288`', /tmp/tmp3bhjyjiq.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkhwm8d1h.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    factorial(n) * factorial(n - 1)\n}\n\nfn main() {\n \
    \   let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n \
    \   assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpcaq_9xhm.rs:10:5\n\
    \   |\n10 |     factorial(n) * factorial(n - 1)\n   |     ^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `factorial` in this scope\n\
    \  --> /tmp/tmpcaq_9xhm.rs:10:20\n   |\n10 |     factorial(n) * factorial(n -\
    \ 1)\n   |                    ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    assert!(n > 0);\n    let mut total = 1;\n    for i in\
    \ (1..=n).rev() {\n        let mut factorial = 1;\n        for j in (1..=i).rev()\
    \ {\n            factorial *= j;\n        }\n        total *= factorial;\n   \
    \ }\n    total\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // You can write your code here!\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppdl9iut_.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut res\
    \ = 1;\n    for i in 1..=n {\n        res *= i * factorial(i - 1);\n    }\n  \
    \  res\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpslrbyqq8.rs:15:20\n\
    \   |\n15 |         res *= i * factorial(i - 1);\n   |                    ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpy0attpiq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    return n;\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `288`', /tmp/tmp38h22w58.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmp2mw9ly4u.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n * n.wrapping_sub(1) * n.wrapping_sub(2) * n.wrapping_sub(3)\
    \ * n.wrapping_sub(4)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmpgd1lv3m3.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1_8wjypf.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for x in 1..=n {\n        result\
    \ *= x;\n        result *= x - 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmplk6j856v.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp9amo0got.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n < 1 {\n        return 1;\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..n + 1 {\n        result *= i * special_factorial(i - 1);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `576`,\n right: `288`', /tmp/tmpht6r0md9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Your code here\n    return 0;\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmpjdb1b55i.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..=n).rev().fold(1, |acc, i| acc * i * i)\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `576`,\n right: `288`', /tmp/tmprcciehnv.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        (1..n+1).map(|i|\
    \ factorial(i)).product()\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpe01zsup8.rs:13:26\n\
    \   |\n13 |         (1..n+1).map(|i| factorial(i)).product()\n   |           \
    \               ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    let mut i = 1;\n    while i\
    \ <= n {\n        result *= factorial(i);\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp_esb7svh.rs:13:19\n\
    \   |\n13 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpnb80633n.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n + 1).map(|x| factorial(x)).product()\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp9zv0ekgj.rs:10:24\n\
    \   |\n10 |     (1..n + 1).map(|x| factorial(x)).product()\n   |             \
    \           ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjybx99me.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpial_1ylh.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpwwmchf1d.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpb7hu7eld.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpls7phciw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n+1).fold(1, |acc, x| acc * x)\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprg00podu.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: implement the function here!\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpa1b1fw7x.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbnpn409n.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  let mut factorial = 1;\n  for i in 1..n+1 {\n    factorial\
    \ *= i;\n  }\n  for i in 1..n-1 {\n    factorial *= i;\n  }\n  factorial\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `48`,\n right: `288`', /tmp/tmpoqk53rix.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpbh1bdmea.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = n;\n    for i in 2..n {\n        result\
    \ *= (n - i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `288`', /tmp/tmpjetfm5ga.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n + 1).fold(1, |acc, x| acc * x)\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp9hstmxt9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp9uozx0ku.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut out\
    \ = 1;\n    for i in (1..n + 1).rev() {\n        out *= factorial(i);\n    }\n\
    \    out\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp2vi35ah8.rs:15:16\n\
    \   |\n15 |         out *= factorial(i);\n   |                ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  // Write your code here\n  let mut res = 1;\n  for i in\
    \ (1..n+1).rev() {\n    res *= i;\n  }\n  res\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp7u3qrphk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let factorial = |n: isize| -> isize {\n        if n <=\
    \ 1 { 1 } else { n * factorial(n - 1) }\n    };\n    if n <= 0 { 1 } else { factorial(n)\
    \ / factorial(n - 1) }\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpkcyeddfr.rs:11:36\n\
    \   |\n11 |         if n <= 1 { 1 } else { n * factorial(n - 1) }\n   |      \
    \                              ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    assert!(n > 0);\n    let mut res = 1;\n    for i in 1..n+1\
    \ {\n        let mut fact = 1;\n        for j in 1..i+1 {\n            fact *=\
    \ j;\n        }\n        res *= fact;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        let mut\
    \ product = 1;\n        for i in 0..n {\n            product *= factorial(n -\
    \ i);\n        }\n        product\n    }\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp7n7vdz7f.rs:15:24\n\
    \   |\n15 |             product *= factorial(n - i);\n   |                   \
    \     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for x in 1..n + 1 {\n      \
    \  result *= x * (n - x + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `576`,\n right: `288`', /tmp/tmprcrr4xwa.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp87kdj9u.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpef3vb11c.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // unimplemented!();\n    let mut factorial = 1;\n  \
    \  for i in 1..n + 1 {\n        factorial *= i;\n    }\n    factorial\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpfgkh3n36.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdhdno9k_.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: Fill out this function.\n    if n == 0 {\n \
    \       1\n    } else {\n        n * special_factorial(n - 1)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp5cggh5nt.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut output = n;\n    for i in (1..n).rev() {\n  \
    \      output *= i;\n    }\n    output\n}\n\nfn main() {\n    let candidate =\
    \ special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpul7w8ajx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpamvcqvvp.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpisvbx05n.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut res = 1;\n    for i in 1..=n {\n        res *=\
    \ factorial(i);\n    }\n    res\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp82o4csy5.rs:12:16\n\
    \   |\n12 |         res *= factorial(i);\n   |                ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n\n    let mut\
    \ acc = 1;\n    for i in 1..=n {\n        acc *= i * factorial(i - 1);\n    }\n\
    \    acc\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp8s8tt461.rs:16:20\n\
    \   |\n16 |         acc *= i * factorial(i - 1);\n   |                    ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // write code here\n    let mut result = 1;\n    let\
    \ mut i = n;\n    while i >= 1 {\n        result *= i;\n        i -= 1;\n    }\n\
    \    let mut i = n - 1;\n    while i >= 1 {\n        result *= i;\n        i -=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `288`', /tmp/tmpnfq4hxzn.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i * special_factorial(i - 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `576`,\n right: `288`', /tmp/tmps_ps9qxh.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..=n).map(factorial).product()\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `factorial` in this scope\n  --> /tmp/tmpx04q4ar2.rs:10:17\n\
    \   |\n10 |     (1..=n).map(factorial).product()\n   |                 ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwmdk5zp6.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpjx6zy5yn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpmlrjwppo.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyvsgpm7j.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n.factorial() * (n - 1).factorial()\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `factorial` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmplrbyzuup.rs:10:7\n   |\n10 |     n.factorial()\
    \ * (n - 1).factorial()\n   |       ^^^^^^^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `factorial` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmplrbyzuup.rs:10:29\n   |\n10 |     n.factorial() * (n -\
    \ 1).factorial()\n   |                             ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial: isize = 1;\n    let mut i: isize =\
    \ n;\n    while i > 0 {\n        factorial *= i;\n        i -= 1;\n    }\n   \
    \ factorial\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_fuavurt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    special_factorial(n\
    \ - 1) * n * (n - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `288`', /tmp/tmpemesnrhg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjastg1xo.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpq5q92lcw.rs:10:3\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpb1zi9qpq.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: implement this function!\n    let mut result\
    \ = n;\n    while n > 1 {\n        result *= n - 1;\n        n -= 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpydtf3clp.rs:14:9\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \    - help: consider making this binding mutable: `mut n`\n...\n14 |        \
    \ n -= 1;\n   |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpoysborc5.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let nums = (1..=n).collect::<Vec<isize>>();\n    let\
    \ mut prod = 1;\n    let fact = factorial(nums);\n    for i in fact {\n      \
    \  prod *= i;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpq6urel19.rs:12:16\n\
    \   |\n12 |     let fact = factorial(nums);\n   |                ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // YOUR CODE HERE\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp355z7cs.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwdkftsro.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // https://www.math.upenn.edu/~deturck/m170/wk1/numbergame.html\n\
    \    // (1) is true for n = 1, n = 2, and n = 3.\n    // (2) is true for n = 1.\n\
    \    // (3) is true for n = 1, n = 2, and n = 3.\n    // (4) is true for n = 1,\
    \ n = 2, and n = 3.\n    // (5) is true for n = 1, n = 2, and n = 3.\n    // (6)\
    \ is true for n = 1, n = 2, and n = 3.\n    // (7) is true for n = 1, n = 2, and\
    \ n = 3.\n    // (8) is true for n = 1, n = 2, and n = 3.\n    // (9) is true\
    \ for n = 1, n = 2, and n = 3.\n    // (10) is true for n = 1, n = 2, and n =\
    \ 3.\n    // (11) is true for n = 1, n = 2, and n = 3.\n    // (12) is true for\
    \ n = 1, n = 2, and n = 3.\n    // (13) is true for n = 1, n = 2, and n = 3.\n\
    \    // (14) is true for n = 1, n = 2, and n = 3.\n    // (15) is true for n =\
    \ 1, n = 2, and n = 3.\n    // (16) is true for n = 1, n = 2, and n = 3.\n   \
    \ // (17) is true for n = 1, n = 2, and n = 3.\n    // (18) is true for n = 1,\
    \ n = 2, and n = 3.\n    // (19) is true for n = 1, n = 2, and n = 3.\n    //\
    \ (20) is true for n = 1, n = 2, and n = 3.\n    // Therefore the properties are\
    \ true for n = 1, n = 2, and n = 3.\n    // We have proved that they are true\
    \ for n = 1, n = 2, and n = 3.\n    // We have\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppc43pgvh.rs:9:35\n  |\n9 |\
    \ fn special_factorial(n: isize) -> isize {\n  |    -----------------        \
    \      ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt79tez4x.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // YOUR CODE HERE\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7a6frvbz.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n < 0 {\n        panic!(\"special_factorial: number\
    \ should be positive\")\n    }\n    if n < 2 {\n        return 1;\n    }\n   \
    \ return n * special_factorial(n - 1);\n}\n\nfn main() {\n    let candidate =\
    \ special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpmk9pjg_8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Readme:\n    // The product is too big to store in\
    \ an isize, so you'll need to use a\n    // u64 for that.\n    //\n    // The\
    \ factorial of 0 is equal to 1.\n    // I'm not sure if it's supposed to be included\
    \ in the product.\n\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp91gubpzy.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n < 0 {\n        -1\n    } else if n <= 1 {\n    \
    \    1\n    } else {\n        n * special_factorial(n - 1)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmppmfwk3kr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp94_78jj5.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n < 1 {\n        return 1;\n    }\n    if n > 1 {\n\
    \        return n * special_factorial(n - 1);\n    }\n    return n;\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp24lhlmgg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Your code here\n    n\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `288`', /tmp/tmp8flf__lc.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: Implement special_factorial\n    1\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `288`', /tmp/tmps858cnh6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    factorial(n) / factorial(n - 2)\n}\n\nfn main() {\n \
    \   let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n \
    \   assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpd0tailpd.rs:10:5\n\
    \   |\n10 |     factorial(n) / factorial(n - 2)\n   |     ^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `factorial` in this scope\n\
    \  --> /tmp/tmpd0tailpd.rs:10:20\n   |\n10 |     factorial(n) / factorial(n -\
    \ 2)\n   |                    ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp5wea557a.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut product = 1;\n    for i in 1..n + 1 {\n     \
    \   let mut fac = 1;\n        for j in 1..i + 1 {\n            fac *= j;\n   \
    \     }\n        product *= fac;\n    }\n    product\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial = 1;\n    for i in (1..n+1).rev() {\n\
    \        factorial *= i;\n    }\n    factorial\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpf4jcblm2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpffugqed7.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpe1g5li9q.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n+1 {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpjxpb20bx.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n+1).fold(1, |acc, x| acc * x)\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp42utztqo.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n+1).fold(1, |acc, x| acc * fac(x))\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fac` in this scope\n  --> /tmp/tmp_np7gs1d.rs:10:37\n\
    \   |\n10 |     (1..n+1).fold(1, |acc, x| acc * fac(x))\n   |                \
    \                     ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7l5mbx98.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n.factorial() / (1..n).rev().map(|k| k.factorial()).product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `factorial` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmputuold3g.rs:10:7\n   |\n10 |     n.factorial()\
    \ / (1..n).rev().map(|k| k.factorial()).product()\n   |       ^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `factorial` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmputuold3g.rs:10:44\n   |\n10\
    \ |     n.factorial() / (1..n).rev().map(|k| k.factorial()).product()\n   |  \
    \                                          ^^^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n + 1 {\n      \
    \  result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp6pcqn20v.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // unimplemented!(\"special_factorial({})\", n)\n   \
    \ if n <= 1 {\n        return 1;\n    }\n    n * special_factorial(n - 1)\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp5vlxl7p0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpl12o7kzd.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n\n    let mut\
    \ result = 1;\n    for i in (1..=n).rev() {\n        result *= factorial(i);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz9lq57am.rs:16:19\n\
    \   |\n16 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  if n == 0 { return 1; }\n  return n * special_factorial(n\
    \ - 1);\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp2j_barl9.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4qxa_28q.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpka5wul_w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n.times(n-1).product()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `times` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpdj_fr5jf.rs:10:7\n   |\n10 |     n.times(n-1).product()\n\
    \   |       ^^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut total = 1;\n    for i in 1..n + 1 {\n       \
    \ total *= factorial(i);\n    }\n    total\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpb20_gz0b.rs:12:18\n\
    \   |\n12 |         total *= factorial(i);\n   |                  ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    panic!(\"Not implemented.\");\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Not implemented.', /tmp/tmp2l1xv47f.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in (1..n + 1).rev() {\n\
    \        result *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpot8dewok.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpod75xgfu.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpetsgmd_i.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorial: isize = n;\n    while n > 1 {\n  \
    \      factorial *= (n - 1);\n        n -= 1;\n    }\n    factorial\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpp5sgrig7.rs:12:22\n\
    \   |\n12 |         factorial *= (n - 1);\n   |                      ^     ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n12 -         factorial *= (n - 1);\n12 +         factorial *= n - 1;\n\
    \   | \n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpp5sgrig7.rs:13:9\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \    - help: consider making this binding mutable: `mut n`\n...\n13 |        \
    \ n -= 1;\n   |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2ij8qru6.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let (mut n_fact, mut n_minus_fact) = (1, 1);\n    if\
    \ n == 0 {\n        return 0;\n    }\n    for i in 1..n + 1 {\n        n_fact\
    \ *= i;\n        if i == n {\n            break;\n        }\n        n_minus_fact\
    \ *= i;\n    }\n    n_fact * n_minus_fact\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `288`', /tmp/tmprgfbfwhb.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut output = 1;\n    for x in 1..n+1 {\n        output\
    \ *= factorial(x);\n    }\n    output\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpgjuweyow.rs:12:19\n\
    \   |\n12 |         output *= factorial(x);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: Please implement the function\n    0\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmp9qwlu3__.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    assert!(n > 0);\n    // TODO: implement special_factorial\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdvjg7rjc.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n *\n}\n\nfn main() {\n  \
    \  let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n  \
    \  assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpt6ake2hp.rs:11:1\n\
    \   |\n11 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9epg89_w.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  // your code here\n  let mut result: isize = 1;\n  let\
    \ mut factorial: isize = 1;\n  for i in 1..n+1 {\n    factorial *= i;\n    result\
    \ *= factorial;\n  }\n  result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n < 0 {\n        panic!(\"special_factorial: n should\
    \ be positive\");\n    } else if n == 0 {\n        1\n    } else {\n        n\
    \ * special_factorial(n - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmppwknlk2t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO\n    if n == 0 {\n        return 1;\n    }\n\
    \    else if n == 1 {\n        return 1;\n    }\n    else {\n        let mut value\
    \ = n;\n        let mut fin = n;\n        while value != 1 {\n            fin\
    \ = fin * (value - 1);\n            value = value - 1;\n        }\n        return\
    \ fin;\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp6em_wv1c.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwfz7h9zu.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: implement the special factorial\n    let mut\
    \ result: isize = 1;\n    for i in 1..n + 1 {\n        result *= factorial(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp78mrlwl5.rs:13:19\n\
    \   |\n13 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    n.factorial() * (n - 1).factorial()\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `factorial` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpskmypnch.rs:10:7\n   |\n10 |     n.factorial()\
    \ * (n - 1).factorial()\n   |       ^^^^^^^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `factorial` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpskmypnch.rs:10:29\n   |\n10 |     n.factorial() * (n -\
    \ 1).factorial()\n   |                             ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n+1).fold(1, |acc, x| acc * factorial(x))\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpy_29kcxz.rs:10:37\n\
    \   |\n10 |     (1..n+1).fold(1, |acc, x| acc * factorial(x))\n   |          \
    \                           ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi3feefci.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    assert!(n > 0);\n    let mut answer = 1;\n    for i in\
    \ 1..n + 1 {\n        answer *= factorial(i);\n    }\n    answer\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp8fbjvq6c.rs:13:19\n\
    \   |\n13 |         answer *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut factorials = (1..=n).collect::<Vec<isize>>();\n\
    \    let mut result = 1;\n    while let Some(last) = factorials.pop() {\n    \
    \    result *= last;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmplaczmoo8.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmprhjz_n4f.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4pgzvnld.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..=n).rev().fold(1, |acc, x| acc * x * factorial(x\
    \ - 1))\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpis58_uyo.rs:10:46\n\
    \   |\n10 |     (1..=n).rev().fold(1, |acc, x| acc * x * factorial(x - 1))\n \
    \  |                                              ^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpo4w6xhce.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8kg3cov4.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcxmxahm8.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    if n == 1\
    \ {\n        return 1;\n    }\n    return n * special_factorial(n - 1);\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmps_mkhlhk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // TODO: write your code here\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpytugmyfm.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp6odt6lt6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_9p5o_yy.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        let mut\
    \ product = 1;\n        for i in 1..=n {\n            product *= i * (i - 1);\n\
    \        }\n        product\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmpqdoa417p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 { return 1; }\n    n * special_factorial(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpr6b7oaq_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        0\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmpmn8gyxp2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  if n <= 1 {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmptaap1u70.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbk2vyw0j.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut sum = 1;\n    for num in 1..n + 1 {\n       \
    \ sum *= num;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpu77hnkfn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        1\n    } else {\n        n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpdbul9szu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= factorial(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpafplfejc.rs:12:19\n\
    \   |\n12 |         result *= factorial(i);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n  return 0;\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `288`', /tmp/tmp6rdayu_8.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    (1..n+1).fold(1, |product, i| product * factorial(i))\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpp3sw__tj.rs:10:45\n\
    \   |\n10 |     (1..n+1).fold(1, |product, i| product * factorial(i))\n   |  \
    \                                           ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // `n` is the number you should calculate the special\
    \ factorial of.\n    // Write your code here\n    n\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `288`', /tmp/tmphxdn4jkw.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        1\n    } else {\n        (1..=n).product::<isize>()\
    \ * special_factorial(n - 1)\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n <= 1 {\n        return 1;\n    }\n    return n *\
    \ special_factorial(n - 1);\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpwgq5d_ua.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpduih9gja.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Your code here\n    let mut v: isize = 1;\n    for\
    \ i in 1..=n {\n        v *= i;\n    }\n    for i in 1..n {\n        v *= i;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `288`', /tmp/tmp0wg2fnt0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3sp4pkqy.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    return n *\
    \ special_factorial(n - 1);\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1n30wc9u.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    // Your code here\n    let mut factorial = 1;\n    for\
    \ i in 1..n+1 {\n        factorial *= i;\n    }\n    factorial\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp063gbig0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut acc\
    \ = 1;\n    for i in 1..=n {\n        acc *= factorial(i);\n    }\n    acc\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpp2d9zvlx.rs:15:16\n\
    \   |\n15 |         acc *= factorial(i);\n   |                ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
