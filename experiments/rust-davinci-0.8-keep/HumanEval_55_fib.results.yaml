name: HumanEval_55_fib
language: rust
results:
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in\
    \ 1..n {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    b\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      1 => 1,\n        2 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut current\
    \ = 0;\n    let mut next = 1;\n    for _ in 0..n {\n        let new_next = current\
    \ + next;\n        current = next;\n        next = new_next;\n    }\n    current\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in\
    \ 0..n - 1 {\n        let tmp = a + b;\n        a = b;\n        b = tmp;\n   \
    \ }\n    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in\
    \ 0..n - 1 {\n        let tmp = a + b;\n        a = b;\n        b = tmp;\n   \
    \ }\n    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      1 => return 1,\n        2 => return 1,\n        _ => return fib(n - 1)\
    \ + fib(n - 2),\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fib_iter(n, 1,\
    \ 0)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_iter` in this scope\n --> /tmp/tmpghp0pe42.rs:9:5\n\
    \  |\n9 |     fib_iter(n, 1, 0)\n  |     ^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n  let mut a = 0;\n\
    \  let mut b = 1;\n  let mut c;\n  if n < 0 {\n    return fib((n as f64).abs()\
    \ as isize) as isize;\n  } else if n == 0 {\n    return 0;\n  } else if n == 1\
    \ {\n    return 1;\n  }\n  for _ in 2..n + 1 {\n    c = a + b;\n    a = b;\n \
    \   b = c;\n  }\n  return b;\n}\n\nfn main() {\n    let candidate = fib;\n   \
    \ assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let c = a + b;\n        a =\
    \ b;\n        b = c;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n  if n <= 1 {\n  \
    \  return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n  // your code here.\n\
    \  return 0;\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `55`', /tmp/tmp8t8y53th.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n  if n == 0 { return\
    \ 0; }\n  if n == 1 { return 1; }\n  fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n  // should return\
    \ 55 if n == 10\n  if n <= 1 {\n    return n;\n  } else {\n    return fib(n -\
    \ 1) + fib(n - 2);\n  }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 1,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpol24knp9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in\
    \ 1..n {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    b\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fib_helper(n,\
    \ 0, 1)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_helper` in this scope\n --> /tmp/tmpkyaqomcg.rs:9:5\n\
    \  |\n9 |     fib_helper(n, 0, 1)\n  |     ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut n1 = 0;\n\
    \    let mut n2 = 1;\n    let mut i = 0;\n    while i < n {\n        let n3 =\
    \ n1 + n2;\n        n1 = n2;\n        n2 = n3;\n        i += 1;\n    }\n    n1\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n  if n == 0 {\n  \
    \  return 0;\n  }\n  if n == 1 {\n    return 1;\n  }\n  return fib(n - 1) + fib(n\
    \ - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n \
    \   let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 | 1 => n,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // TODO: implementation\n\
    \    return 0;\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `55`', /tmp/tmpd_t0oqw4.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let mut x: isize = 0;\n    let mut y: isize = 1;\n\
    \    for _ in 0..n - 1 {\n        let tmp = x + y;\n        x = y;\n        y\
    \ = tmp;\n    }\n    y\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 | 1 => n,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      1 => return 1,\n        2 => return 1,\n        _ => return fib(n - 1)\
    \ + fib(n - 2),\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let t = a + b;\n        a =\
    \ b;\n        b = t;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut last = 0;\n    let mut cur = 1;\n    for\
    \ _ in 1..n {\n        let tmp = cur;\n        cur = last + cur;\n        last\
    \ = tmp;\n    }\n    cur\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let c = a + b;\n        a =\
    \ b;\n        b = c;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n\n    let mut result = 1;\n    let mut i = 2;\n   \
    \ let mut old = 1;\n    let mut temp = 0;\n\n    while i < n {\n        temp =\
    \ result;\n        result = result + old;\n        old = temp;\n        i += 1;\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n\n    let mut a = 0;\n    let mut b = 1;\n    for _\
    \ in 0..n - 1 {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n\
    \    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 | 1 => n,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut fib_1\
    \ = 1;\n    let mut fib_2 = 1;\n    let mut result = 1;\n    if n < 3 {\n    \
    \    return 1;\n    }\n    for _ in 0..n - 2 {\n        result = fib_1 + fib_2;\n\
    \        fib_1 = fib_2;\n        fib_2 = result;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    let mut count = 1;\n    while count < n {\n        let\
    \ temp = a + b;\n        a = b;\n        b = temp;\n        count += 1;\n    }\n\
    \    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      1 => 1,\n        2 => 1,\n        n => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 { return\
    \ 0; }\n    if n == 1 { return 1; }\n    return fib(n - 1) + fib(n - 2);\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    let mut i = 0;\n    while i < n {\n        let c = a\
    \ + b;\n        a = b;\n        b = c;\n        i = i + 1;\n    }\n    a\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut f1 = 0;\n\
    \    let mut f2 = 1;\n    let mut i = 0;\n    while i < n {\n        f1 = f1 +\
    \ f2;\n        f2 = f1 - f2;\n        i = i + 1;\n    }\n    f1\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n  if n <= 1 {\n  \
    \  return n;\n  }\n  let mut a = 0;\n  let mut b = 1;\n  for _ in 0..n - 1 {\n\
    \    let temp = a + b;\n    a = b;\n    b = temp;\n  }\n  b\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let temp = a;\n        a = b;\n\
    \        b = temp + b;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        n => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n  if n <= 1 {\n  \
    \  return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        n => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fib_iter(1, 0,\
    \ n)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_iter` in this scope\n --> /tmp/tmprd2m2uzt.rs:9:5\n\
    \  |\n9 |     fib_iter(1, 0, n)\n  |     ^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in\
    \ 0..n-1 {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n  \
    \  b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n \
    \   let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut x1 = 0;\n\
    \    let mut x2 = 1;\n    let mut x = 0;\n    if n == 0 {\n        x1\n    } else\
    \ if n == 1 {\n        x2\n    } else {\n        for _ in 1..n {\n           \
    \ x = x1 + x2;\n            x1 = x2;\n            x2 = x;\n        }\n       \
    \ x\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in\
    \ 1..n {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    b\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut prev = 0;\n    let mut curr = 1;\n    for\
    \ _ in 1..n {\n        let next = prev + curr;\n        prev = curr;\n       \
    \ curr = next;\n    }\n    curr\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    let mut i = 0;\n    while i < n {\n        let c = a\
    \ + b;\n        a = b;\n        b = c;\n        i = i + 1;\n    }\n    a\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let c = a + b;\n        a =\
    \ b;\n        b = c;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let mut prev = 0;\n    let mut current = 1;\n \
    \   for _ in 2..n {\n        let tmp = current;\n        current = prev + current;\n\
    \        prev = tmp;\n    }\n    current\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `34`,\n right: `55`', /tmp/tmpskd87mvq.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in\
    \ 2..=n {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n   \
    \ b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        n => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let c = a + b;\n        a =\
    \ b;\n        b = c;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 | 1 => n,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut n = n;\n\
    \    let mut result = 0;\n    let mut prev = 1;\n    while n > 0 {\n        result\
    \ += prev;\n        prev = result - prev;\n        n -= 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let zero = 0;\n\
    \    if n < 2 {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let a = 0;\n    let b = 1;\n    let mut c = 0;\n\
    \    for _ in 0..n {\n        c = a + b;\n        a = b;\n        b = c;\n   \
    \ }\n    c\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `a`\n  --> /tmp/tmp1wy411jh.rs:17:9\n\
    \   |\n12 |     let a = 0;\n   |         -\n   |         |\n   |         first\
    \ assignment to `a`\n   |         help: consider making this binding mutable:\
    \ `mut a`\n...\n17 |         a = b;\n   |         ^^^^^ cannot assign twice to\
    \ immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable\
    \ `b`\n  --> /tmp/tmp1wy411jh.rs:18:9\n   |\n13 |     let b = 1;\n   |       \
    \  -\n   |         |\n   |         first assignment to `b`\n   |         help:\
    \ consider making this binding mutable: `mut b`\n...\n18 |         b = c;\n  \
    \ |         ^^^^^ cannot assign twice to immutable variable\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n >= 0);\n\
    \    let mut a = 0;\n    let mut b = 1;\n    for _ in 0..n {\n        let c =\
    \ a + b;\n        a = b;\n        b = c;\n    }\n    a\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut first = 0;\n    let mut second = 1;\n \
    \   for _ in 0..n - 1 {\n        let current = first + second;\n        first\
    \ = second;\n        second = current;\n    }\n    second\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n >= 0);\n\
    \    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 1;\n\
    \    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut current = 1;\n    let mut previous = 0;\n\
    \    for _ in 1..n {\n        let tmp = current;\n        current = current +\
    \ previous;\n        previous = tmp;\n    }\n    current\n}\n\nfn main() {\n \
    \   let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n >= 0);\n\
    \    let mut a = 0;\n    let mut b = 1;\n    for _ in 0..n {\n        let c =\
    \ a + b;\n        a = b;\n        b = c;\n    }\n    a\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut cur = 1;\n    let mut prev = 1;\n    for\
    \ _ in 2..n {\n        let tmp = cur;\n        cur = cur + prev;\n        prev\
    \ = tmp;\n    }\n    cur\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut fib = vec![0, 1];\n    for i in 2..n {\n\
    \        fib.push(fib[i - 1] + fib[i - 2]);\n    }\n    fib[n - 1]\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpqaog_8o7.rs:14:18\n   |\n14 |         fib.push(fib[i - 1] + fib[i -\
    \ 2]);\n   |                  ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqaog_8o7.rs:14:31\n   |\n14 |  \
    \       fib.push(fib[i - 1] + fib[i - 2]);\n   |                             \
    \  ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpqaog_8o7.rs:16:5\n\
    \   |\n16 |     fib[n - 1]\n   |     ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fib_iter(n, 1,\
    \ 0)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_iter` in this scope\n --> /tmp/tmphi4j29_0.rs:9:5\n\
    \  |\n9 |     fib_iter(n, 1, 0)\n  |     ^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // The `match`\
    \ statement allows you to compare a value against a series of patterns and\n \
    \   // then execute code based on which pattern matches. Pattern matching is a\
    \ particularly\n    // powerful feature of Rust.\n    match n {\n        // Special\
    \ \"exit\" cases.\n        0 => 0,\n        1 => 1,\n        // The `_` wildcard\
    \ pattern will match any value.\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let c = a + b;\n        a =\
    \ b;\n        b = c;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    return ((1f64\
    \ + 5f64.sqrt()) / 2f64).powi(n) as isize;\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvbxdp5rj.rs:9:47\n  |\n9 |\
    \     return ((1f64 + 5f64.sqrt()) / 2f64).powi(n) as isize;\n  |            \
    \                                   ^ expected `i32`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to an `i32` and panic if the converted value doesn't\
    \ fit\n  |\n9 |     return ((1f64 + 5f64.sqrt()) / 2f64).powi(n.try_into().unwrap())\
    \ as isize;\n  |                                                ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut current:\
    \ isize = 0;\n    let mut next: isize = 1;\n    for _ in 0..n {\n        let new_next\
    \ = current + next;\n        current = next;\n        next = new_next;\n    }\n\
    \    current\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fib_iter(1, 0,\
    \ n)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_iter` in this scope\n --> /tmp/tmp4bib_ihz.rs:9:5\n\
    \  |\n9 |     fib_iter(1, 0, n)\n  |     ^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    return if n <=\
    \ 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    };\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut first\
    \ = 0;\n    let mut second = 1;\n    let mut current;\n    for _ in 0..n {\n \
    \       current = first + second;\n        first = second;\n        second = current;\n\
    \    }\n    first\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fib_recursive(n)\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_recursive` in this scope\n -->\
    \ /tmp/tmpkde3jxxf.rs:9:5\n  |\n9 |     fib_recursive(n)\n  |     ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    for _ in\
    \ 0..n - 1 {\n        let next = a + b;\n        a = b;\n        b = next;\n \
    \   }\n    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n\n    let mut f0 = 0;\n    let mut f1 = 1;\n    for\
    \ _ in 2..n + 1 {\n        let tmp = f0 + f1;\n        f0 = f1;\n        f1 =\
    \ tmp;\n    }\n    f1\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n\n    let mut result = 1;\n    let mut a = 1;\n   \
    \ let mut b = 1;\n\n    for _ in 3..=n {\n        result = a + b;\n        a =\
    \ b;\n        b = result;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let mut prev = 0;\n    let mut current = 1;\n \
    \   for _ in 2..=n {\n        let tmp = prev + current;\n        prev = current;\n\
    \        current = tmp;\n    }\n    current\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let c = a + b;\n        a =\
    \ b;\n        b = c;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
