name: HumanEval_160_do_algebra
language: rust
results:
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  let mut result = operand[0];\n  for i in\
    \ 0..operator.len() {\n    match operator[i].as_str() {\n      \"+\" => result\
    \ += operand[i + 1],\n      \"-\" => result -= operand[i + 1],\n      \"*\" =>\
    \ result *= operand[i + 1],\n      \"//\" => result /= operand[i + 1],\n     \
    \ \"**\" => result = result.pow(operand[i + 1] as u32),\n      _ => result = result,\n\
    \    }\n  }\n  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n   \
    \ assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvx_dccvk.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut opd = operand.clone();\n    let\
    \ mut result = opd.remove(0);\n    for (op, x) in operator.iter().zip(opd) {\n\
    \        match op.as_str() {\n            \"+\" => result += x,\n            \"\
    -\" => result -= x,\n            \"*\" => result *= x,\n            \"//\" =>\
    \ result /= x,\n            \"**\" => result = result.pow(*x as u32),\n      \
    \      _ => return 0,\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp2tpm41cs.rs:28:41\n\
    \   |\n28 |             \"**\" => result = result.pow(*x as u32),\n   |      \
    \                                   ^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand_iter = operand.iter();\n\
    \    let first_operand = operand_iter.next().unwrap();\n    operator.iter().fold(*first_operand,\
    \ |acc, x| {\n        let y = operand_iter.next().unwrap();\n        match x.as_str()\
    \ {\n            \"+\" => acc + y,\n            \"-\" => acc - y,\n          \
    \  \"*\" => acc * y,\n            \"//\" => acc / y,\n            \"**\" => acc.pow(*y\
    \ as u32),\n            _ => 0,\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp8_c5mdlv.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = 0;\n    let mut i = 0;\n\
    \    for op in operator {\n        match op.as_str() {\n            \"+\" => {\n\
    \                res += operand[i];\n                i += 1;\n            }\n\
    \            \"-\" => {\n                res -= operand[i];\n                i\
    \ += 1;\n            }\n            \"*\" => {\n                res *= operand[i];\n\
    \                i += 1;\n            }\n            \"//\" => {\n           \
    \     res /= operand[i];\n                i += 1;\n            }\n           \
    \ \"**\" => {\n                res = res.pow(operand[i] as u32);\n           \
    \     i += 1;\n            }\n            _ => {}\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `37`', /tmp/tmpp32mhxxp.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.iter().skip(1).zip(operator.iter()).fold(operand[0],\n\
    \        |acc, (x, op)| match op.as_str() {\n            \"+\" => acc + x,\n \
    \           \"-\" => acc - x,\n            \"*\" => acc * x,\n            \"//\"\
    \ => acc / x,\n            \"**\" => acc.pow(*x as u32),\n            _ => panic!(\"\
    Unknown operator {}\", op),\n        })\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp8n9ih0zd.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmp8i5ebxuz.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut output = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op_one = output;\n        let op_two = operand[i\
    \ + 1];\n        output = match operator[i].as_str() {\n            \"+\" => op_one\
    \ + op_two,\n            \"-\" => op_one - op_two,\n            \"*\" => op_one\
    \ * op_two,\n            \"//\" => op_one / op_two,\n            \"**\" => op_one.pow(op_two\
    \ as u32),\n            _ => 0,\n        };\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplg5qquup.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut result = operand[i];\n\
    \    i += 1;\n    for j in 0..operator.len() {\n        match operator[j].as_str()\
    \ {\n            \"+\" => result += operand[i],\n            \"-\" => result -=\
    \ operand[i],\n            \"*\" => result *= operand[i],\n            \"//\"\
    \ => result /= operand[i],\n            \"**\" => result = result.pow(operand[i]\
    \ as u32),\n            _ => {},\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpr_9p8s_b.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = vec![];\n \
    \   let mut op_iter = operator.iter();\n    for num in operand {\n        stack.push(num);\n\
    \        if let Some(op) = op_iter.next() {\n            let back = stack.pop().unwrap();\n\
    \            let front = stack.pop().unwrap();\n            stack.push(match op.as_str()\
    \ {\n                \"+\" => front + back,\n                \"-\" => front -\
    \ back,\n                \"*\" => front * back,\n                \"//\" => front\
    \ / back,\n                \"**\" => front.pow(back as u32),\n               \
    \ _ => unreachable!()\n            });\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpf6lk04h2.rs:26:37\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let oper = &operator[i];\n        let val =\
    \ operand[i + 1];\n        match oper.as_str() {\n            \"+\" => result\
    \ += val,\n            \"-\" => result -= val,\n            \"*\" => result *=\
    \ val,\n            \"//\" => result /= val,\n            \"**\" => result = result.pow(val\
    \ as u32),\n            _ => panic!(\"{} is not a valid operator\", oper),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4qighqee.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let op_iter = operator.iter();\n    let\
    \ mut operation_stack: Vec<isize> = Vec::new();\n    let mut operand_stack: Vec<isize>\
    \ = Vec::new();\n    for op in op_iter {\n        operation_stack.push(match op.as_ref()\
    \ {\n            \"+\" => 1,\n            \"-\" => 2,\n            \"*\" => 3,\n\
    \            \"/\" => 4,\n            \"^\" => 5,\n            _ => panic!(\"\
    invalid operator {}\", op),\n        });\n    }\n    operation_stack.reverse();\n\
    \    for num in operand {\n        operand_stack.push(num);\n    }\n    let mut\
    \ result = 0;\n    let mut op_iter = operation_stack.iter();\n    loop {\n   \
    \     match op_iter.next() {\n            Some(op) => {\n                let a\
    \ = operand_stack.pop().unwrap();\n                let b = operand_stack.pop().unwrap();\n\
    \                match op {\n                    1 => result = a + b,\n      \
    \              2 => result = a - b,\n                    3 => result = a * b,\n\
    \                    4 => result = a / b,\n                    5 => result = a.pow(b\
    \ as u32),\n                    _ => panic!(\"invalid operator\"),\n         \
    \       }\n                operand_stack.push(result);\n            }\n      \
    \      None => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'invalid operator **', /tmp/tmp6bnn52tx.rs:30:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let num = operand[i + 1];\n        if operator[i]\
    \ == \"+\" {\n            result += num;\n        } else if operator[i] == \"\
    -\" {\n            result -= num;\n        } else if operator[i] == \"*\" {\n\
    \            result *= num;\n        } else if operator[i] == \"//\" {\n     \
    \       result /= num;\n        } else if operator[i] == \"**\" {\n          \
    \  result = result.pow(num as u32);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpty7iueed.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut x = operand[0];\n    for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let y = operand[i + 1];\n       \
    \ match op.as_str() {\n            \"+\" => x += y,\n            \"-\" => x -=\
    \ y,\n            \"*\" => x *= y,\n            \"//\" => x /= y,\n          \
    \  \"**\" => x = x.pow(y as u32),\n            _ => panic!(\"Invalid operator\
    \ {}\", op),\n        }\n    }\n    x\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpkkz2u153.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n \
    \   let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpl1td6zu5.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = vec![];\n \
    \   let mut operand_iter = operand.iter();\n    for op in operator {\n       \
    \ match op.as_str() {\n            \"+\" => {\n                let o1 = operand_iter.next().unwrap();\n\
    \                let o2 = operand_iter.next().unwrap();\n                stack.push(*o1\
    \ + *o2);\n            }\n            \"-\" => {\n                let o1 = operand_iter.next().unwrap();\n\
    \                let o2 = operand_iter.next().unwrap();\n                stack.push(*o1\
    \ - *o2);\n            }\n            \"*\" => {\n                let o1 = operand_iter.next().unwrap();\n\
    \                let o2 = operand_iter.next().unwrap();\n                stack.push(*o1\
    \ * *o2);\n            }\n            \"//\" => {\n                let o1 = operand_iter.next().unwrap();\n\
    \                let o2 = operand_iter.next().unwrap();\n                stack.push(*o1\
    \ / *o2);\n            }\n            \"**\" => {\n                let o1 = operand_iter.next().unwrap();\n\
    \                let o2 = operand_iter.next().unwrap();\n                stack.push(o1.pow(*o2\
    \ as u32));\n            }\n            _ => {}\n        }\n    }\n    match stack.pop()\
    \ {\n        Some(i) => i,\n        None => 0,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpo37psun0.rs:25:46\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.iter().fold(0, |prev, curr| {\n\
    \        let curr_op = operator.pop().unwrap();\n        match curr_op.as_str()\
    \ {\n            \"+\" => prev + curr,\n            \"-\" => prev - curr,\n  \
    \          \"*\" => prev * curr,\n            \"/\" => prev / curr,\n        \
    \    \"^\" => prev.pow(*curr as u32),\n            _ => 0,\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `operator` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp8blv9ao0.rs:21:23\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |               -------- help:\
    \ consider changing this to be mutable: `mut operator`\n20 |     operand.iter().fold(0,\
    \ |prev, curr| {\n21 |         let curr_op = operator.pop().unwrap();\n   |  \
    \                     ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operand.len() - 1 {\n        match operator[i].as_str() {\n          \
    \  \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unexpected operator\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4wc66mdx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ s) in operator.iter().enumerate() {\n        let op2 = operand[i + 1];\n   \
    \     match s.as_str() {\n            \"+\" => result += op2,\n            \"\
    -\" => result -= op2,\n            \"*\" => result *= op2,\n            \"//\"\
    \ => result /= op2,\n            \"**\" => result = result.pow(op2 as u32),\n\
    \            _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpupwiwbze.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // This function is not yet implemented!\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = do_algebra;\n  \
    \  assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4_j0tfll.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3bnmcia3.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // your code here\n    0\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmp4i2wv_vm.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5kepzmd5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for (i,\
    \ o) in operator.iter().enumerate() {\n        match o.as_str() {\n          \
    \  \"+\" => res += operand[i + 1],\n            \"-\" => res -= operand[i + 1],\n\
    \            \"*\" => res *= operand[i + 1],\n            \"//\" => res /= operand[i\
    \ + 1],\n            \"**\" => res = res.pow(operand[i + 1] as u32),\n       \
    \     _ => panic!(\"Invalid operator!\"),\n        }\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppqby62u7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand = operand;\n    let mut\
    \ op_index = 0;\n    let mut result = operand.remove(0);\n    while operand.len()\
    \ > 0 {\n        let op = &operator[op_index];\n        let value = operand.remove(0);\n\
    \        match op.as_str() {\n            \"+\" => result += value,\n        \
    \    \"-\" => result -= value,\n            \"*\" => result *= value,\n      \
    \      \"//\" => result /= value,\n            \"**\" => result = result.pow(value\
    \ as u32),\n            _ => (),\n        }\n        op_index += 1;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpy8hpyc8a.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => println!(\"unexpected\"),\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzen0prty.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let operator_iter = operator.iter();\n\
    \    let operand_iter = operand.iter();\n    let mut res = 0;\n    let mut operand_sum\
    \ = 0;\n    let mut operand_multi = 0;\n    let mut operand_minus = 0;\n    let\
    \ mut operand_div = 0;\n    let mut operand_exp = 0;\n    let mut res_div = 0;\n\
    \    let mut res_exp = 0;\n    let mut res_multi = 0;\n    let mut sum_res = 0;\n\
    \    let mut minus_res = 0;\n    let mut multi_res = 0;\n    let mut div_res =\
    \ 0;\n    let mut exp_res = 0;\n    let mut res_minus = 0;\n    let mut res_sum\
    \ = 0;\n    let mut res_minus = 0;\n    let mut res_multi = 0;\n    let mut res_exp\
    \ = 0;\n    let mut res_div = 0;\n    let mut op_sum = 0;\n    let mut op_minus\
    \ = 0;\n    let mut op_multi = 0;\n    let mut op_div = 0;\n    let mut op_exp\
    \ = 0;\n    let mut sum_num = 0;\n    let mut minus_num = 0;\n    let mut multi_num\
    \ = 0;\n    let mut div_num = 0;\n    let mut exp_num = 0;\n    for op in operator_iter\
    \ {\n        if op == \"+\" {\n            for num in operand_iter {\n       \
    \         op_sum += 1;\n                operand_sum += num;\n            }\n \
    \           sum_num = op_sum - 1;\n            sum_res = operand_sum - operand[sum_num];\n\
    \        }\n        if op == \"-\" {\n            for num in operand_iter {\n\
    \                op_minus += 1;\n                operand_minus += num;\n     \
    \       }\n            minus_num = op_minus - 1;\n            minus_res = operand_minus\
    \ - operand[minus_num];\n        }\n        if op == \"*\" {\n            for\
    \ num in operand_iter {\n                op_multi += 1;\n                operand_multi\
    \ +=\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpcbv4kdd6.rs:80:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n...\n52 |     for op in operator_iter {\n   |          \
    \                   - unclosed delimiter\n...\n69 |         if op == \"*\" {\n\
    \   |                      - unclosed delimiter\n70 |             for num in operand_iter\
    \ {\n   |                                     - this delimiter might not be properly\
    \ closed...\n...\n73 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n80 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmpcbv4kdd6.rs:73:1\n\
    \   |\n73 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcbv4kdd6.rs:52:5\n   |\n19 |   fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                          ----- expected `isize` because of return type\n...\n\
    52 | /     for op in operator_iter {\n53 | |         if op == \"+\" {\n54 | |\
    \             for num in operand_iter {\n55 | |                 op_sum += 1;\n\
    ...  |\n79 | |     assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"\
    *\")], vec![7, 3, 4]), 8);\n80 | | }\n   | |__^ expected `isize`, found `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut value: Vec<isize> = vec![];\n \
    \   let mut op: Vec<String> = vec![];\n    let mut prec: Vec<usize> = vec![];\n\
    \    for s in operator {\n        match s.as_str() {\n            \"+\" => {\n\
    \                op.push(s);\n                prec.push(0);\n            }\n \
    \           \"-\" => {\n                op.push(s);\n                prec.push(0);\n\
    \            }\n            \"*\" => {\n                op.push(s);\n        \
    \        prec.push(1);\n            }\n            \"/\" => {\n              \
    \  op.push(s);\n                prec.push(1);\n            }\n            \"^\"\
    \ => {\n                op.push(s);\n                prec.push(2);\n         \
    \   }\n            _ => (),\n        }\n    }\n    let mut i = 0;\n    while i\
    \ < operand.len() {\n        value.push(operand[i]);\n        if op.len() == 0\
    \ {\n            break;\n        }\n        if prec[0] < 2 {\n            value.push(op.remove(0));\n\
    \            prec.remove(0);\n        } else {\n            while prec[0] == 2\
    \ {\n                value.push(op.remove(0));\n                prec.remove(0);\n\
    \                value.push(operand[i + 1]);\n                i += 1;\n      \
    \      }\n            if op.len() == 0 {\n                break;\n           \
    \ }\n            value.push(op.remove(0));\n            prec.remove(0);\n    \
    \    }\n        i += 1;\n    }\n    while op.len() > 0 {\n        value.push(op.remove(0));\n\
    \        prec.remove(0);\n        value.push(operand[i]);\n        i += 1;\n \
    \   }\n    return eval(value);\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `eval` in this scope\n  --> /tmp/tmp3qt7z_fg.rs:78:12\n\
    \   |\n78 |     return eval(value);\n   |            ^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3qt7z_fg.rs:55:24\n   |\n55 |\
    \             value.push(op.remove(0));\n   |                        ^^^^^^^^^^^^\
    \ expected `isize`, found struct `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3qt7z_fg.rs:59:28\n   |\n59 |                 value.push(op.remove(0));\n\
    \   |                            ^^^^^^^^^^^^ expected `isize`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3qt7z_fg.rs:67:24\n   |\n67 |\
    \             value.push(op.remove(0));\n   |                        ^^^^^^^^^^^^\
    \ expected `isize`, found struct `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3qt7z_fg.rs:73:20\n   |\n73 |         value.push(op.remove(0));\n\
    \   |                    ^^^^^^^^^^^^ expected `isize`, found struct `String`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Write your code here\n    operand.iter().zip(operator.iter()).fold(0,\
    \ |acc, (x, y)| {\n        acc + match y.as_str() {\n            \"+\" => *x,\n\
    \            \"-\" => -*x,\n            \"*\" => 2 * *x,\n            \"//\" =>\
    \ *x / 2,\n            \"**\" => x.pow(2),\n            _ => 0,\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `37`', /tmp/tmpis5gj6fg.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // ...\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_uh8ybxy.rs:19:62\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for i in\
    \ 0..operator.len() {\n        let op: &str = &operator[i];\n        let op1 =\
    \ &operand[i + 1];\n        res = match op {\n            \"+\" => res + op1,\n\
    \            \"-\" => res - op1,\n            \"*\" => res * op1,\n          \
    \  \"//\" => res / op1,\n            \"**\" => res.pow(*op1 as u32),\n       \
    \     _ => unreachable!(),\n        };\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdxz8empk.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => res += operand[i + 1],\n            \"-\" => res -= operand[i + 1],\n   \
    \         \"*\" => res *= operand[i + 1],\n            \"//\" => res /= operand[i\
    \ + 1],\n            \"**\" => res = res.pow(operand[i + 1] as u32),\n       \
    \     _ => panic!(\"Unknown operator\"),\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9abkiu4y.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppnvykca9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpt7vomhcr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let num = operand[i + 1];\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += num,\n            \"-\" => result -= num,\n\
    \            \"*\" => result *= num,\n            \"//\" => result /= num,\n \
    \           \"**\" => result = result.pow(num as u32),\n            _ => unreachable!(),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp8zqk5yok.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() + 1 != operand.len()\
    \ {\n        return 0;\n    }\n    let mut stack: Vec<isize> = Vec::new();\n \
    \   let mut op_idx = 0;\n    for item in operand {\n        stack.push(item);\n\
    \        if op_idx < operator.len() {\n            let val1 = stack.pop().unwrap();\n\
    \            let val2 = stack.pop().unwrap();\n            stack.push(match operator[op_idx].as_str()\
    \ {\n                \"+\" => val2 + val1,\n                \"-\" => val2 - val1,\n\
    \                \"*\" => val2 * val1,\n                \"//\" => val2 / val1,\n\
    \                \"**\" => val2.pow(val1 as u32),\n                _ => 0,\n \
    \           });\n            op_idx += 1;\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpvp44mc2w.rs:29:36\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut r = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => r += operand[i\
    \ + 1],\n            \"-\" => r -= operand[i + 1],\n            \"*\" => r *=\
    \ operand[i + 1],\n            \"//\" => r /= operand[i + 1],\n            \"\
    **\" => r = r.pow(operand[i + 1] as u32),\n            _ => {}\n        }\n  \
    \  }\n    r\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjlayb4d1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut curr = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let v = operand[i + 1];\n    \
    \    match op.as_str() {\n            \"+\" => curr += v,\n            \"-\" =>\
    \ curr -= v,\n            \"*\" => curr *= v,\n            \"//\" => curr /= v,\n\
    \            \"**\" => curr = curr.pow(v as u32),\n            _ => unreachable!(),\n\
    \        }\n    }\n    curr\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvqw3xw12.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ o) in operator.iter().enumerate() {\n        match o.as_str() {\n          \
    \  \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => return 0,\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpihbiqxyc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpf__ks325.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    for op in operator {\n        let right = operand.pop().unwrap();\n     \
    \   let left = operand.pop().unwrap();\n        match op.as_str() {\n        \
    \    \"+\" => {\n                stack.push(left + right);\n            }\n  \
    \          \"-\" => {\n                stack.push(left - right);\n           \
    \ }\n            \"*\" => {\n                stack.push(left * right);\n     \
    \       }\n            \"/\" => {\n                stack.push(left / right);\n\
    \            }\n            \"^\" => {\n                stack.push(left.pow(right\
    \ as u32));\n            }\n            _ => {\n                stack.push(0);\n\
    \            }\n        }\n    }\n    stack.pop().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `operand` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpiybqbf6v.rs:22:21\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \             ------- help: consider changing this to be mutable: `mut operand`\n\
    ...\n22 |         let right = operand.pop().unwrap();\n   |                  \
    \   ^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `operand`\
    \ as mutable, as it is not declared as mutable\n  --> /tmp/tmpiybqbf6v.rs:23:20\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                      ------- help: consider changing\
    \ this to be mutable: `mut operand`\n...\n23 |         let left = operand.pop().unwrap();\n\
    \   |                    ^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.iter().zip(operator.iter()).fold((operand[0],\
    \ 1), |(acc, _), (o, c)| {\n        (match c.as_str() {\n            \"+\" =>\
    \ acc + o,\n            \"-\" => acc - o,\n            \"*\" => acc * o,\n   \
    \         \"/\" => acc / o,\n            \"^\" => acc.pow(*o as u32),\n      \
    \      _ => panic!(\"Unsupported operator\")\n        }, 1)\n    }).0\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Unsupported operator', /tmp/tmpgny6vy3p.rs:27:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    let mut opr = operator.iter();\n    let mut opn = operand.iter();\n    while\
    \ let Some(op) = opr.next() {\n        let num = opn.next().unwrap();\n      \
    \  match op.as_str() {\n            \"+\" => stack.push(*num),\n            \"\
    -\" => stack.push(-*num),\n            \"*\" => {\n                let mut oper\
    \ = opn.next().unwrap();\n                stack.push(stack.pop().unwrap() * oper);\n\
    \            }\n            \"/\" => {\n                let mut oper = opn.next().unwrap();\n\
    \                stack.push(stack.pop().unwrap() / oper);\n            }\n   \
    \         \"**\" => {\n                let mut oper = opn.next().unwrap();\n \
    \               stack.push(stack.pop().unwrap().pow(*oper as u32));\n        \
    \    }\n            _ => panic!(\"Unrecoganized operator!\"),\n        }\n   \
    \ }\n    stack.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp6l197945.rs:29:21\n\
    \   |\n29 |                 let mut oper = opn.next().unwrap();\n   |        \
    \             ----^^^^\n   |                     |\n   |                     help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    warning: variable does not need to be mutable\n  --> /tmp/tmp6l197945.rs:33:21\n\
    \   |\n33 |                 let mut oper = opn.next().unwrap();\n   |        \
    \             ----^^^^\n   |                     |\n   |                     help:\
    \ remove this `mut`\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp6l197945.rs:37:21\n\
    \   |\n37 |                 let mut oper = opn.next().unwrap();\n   |        \
    \             ----^^^^\n   |                     |\n   |                     help:\
    \ remove this `mut`\n\nerror[E0499]: cannot borrow `stack` as mutable more than\
    \ once at a time\n  --> /tmp/tmp6l197945.rs:30:28\n   |\n30 |                \
    \ stack.push(stack.pop().unwrap() * oper);\n   |                 -----------^^^^^^^^^^^-----------------\n\
    \   |                 |     |    |\n   |                 |     |    second mutable\
    \ borrow occurs here\n   |                 |     first borrow later used by call\n\
    \   |                 first mutable borrow occurs here\n   |\nhelp: try adding\
    \ a local storing this argument...\n  --> /tmp/tmp6l197945.rs:30:28\n   |\n30\
    \ |                 stack.push(stack.pop().unwrap() * oper);\n   |           \
    \                 ^^^^^^^^^^^\nhelp: ...and then using that local as the argument\
    \ to this call\n  --> /tmp/tmp6l197945.rs:30:17\n   |\n30 |                 stack.push(stack.pop().unwrap()\
    \ * oper);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmp6l197945.rs:34:28\n\
    \   |\n34 |                 stack.push(stack.pop().unwrap() / oper);\n   |   \
    \              -----------^^^^^^^^^^^-----------------\n   |                 |\
    \     |    |\n   |                 |     |    second mutable borrow occurs here\n\
    \   |                 |     first borrow lat"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let opd = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += opd,\n  \
    \          \"-\" => result -= opd,\n            \"*\" => result *= opd,\n    \
    \        \"//\" => result /= opd,\n            \"**\" => result = result.pow(opd\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpu2sxpu87.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut r = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => r += operand[i\
    \ + 1],\n            \"-\" => r -= operand[i + 1],\n            \"*\" => r *=\
    \ operand[i + 1],\n            \"//\" => r /= operand[i + 1],\n            \"\
    **\" => r = r.pow(operand[i + 1] as u32),\n            _ => (),\n        }\n \
    \   }\n    r\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmg5r3nb4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i + 1];\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            result\
    \ = result.pow(operand[i + 1] as u32);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpn67tdn_0.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op_it = operator.iter();\n    let\
    \ mut op1 = *op_it.next().unwrap();\n    let mut op2 = *op_it.next().unwrap();\n\
    \    let mut a1 = operand[0];\n    let mut a2 = operand[1];\n    let mut a3 =\
    \ operand[2];\n    let mut a4 = operand[3];\n    let mut a5 = operand[4];\n  \
    \  let mut a6 = operand[5];\n    let mut a7 = operand[6];\n    let mut a8 = operand[7];\n\
    \    let mut a9 = operand[8];\n    let mut a10 = operand[9];\n    let mut a11\
    \ = operand[10];\n    let mut a12 = operand[11];\n    let mut a13 = operand[12];\n\
    \    let mut a14 = operand[13];\n    let mut a15 = operand[14];\n    let mut a16\
    \ = operand[15];\n    let mut a17 = operand[16];\n    let mut a18 = operand[17];\n\
    \    let mut a19 = operand[18];\n    let mut a20 = operand[19];\n    let mut a21\
    \ = operand[20];\n    let mut a22 = operand[21];\n    let mut a23 = operand[22];\n\
    \    let mut a24 = operand[23];\n    let mut a25 = operand[24];\n    let mut a26\
    \ = operand[25];\n    let mut a27 = operand[26];\n    let mut a28 = operand[27];\n\
    \    let mut a29 = operand[28];\n    let mut a30 = operand[29];\n    let mut a31\
    \ = operand[30];\n    let mut a32 = operand[31];\n    let mut a33 = operand[32];\n\
    \    let mut a34 = operand[33];\n    let mut a35 = operand[34];\n    let mut a36\
    \ = operand[35];\n    let mut a37 = operand[36];\n    let mut a38 = operand[37];\n\
    \    let mut a39 = operand[\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `]`\n  --> /tmp/tmp9iip1axn.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmp9iip1axn.rs:61:26\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                              - closing delimiter possibly meant for this\n...\n\
    61 |     let mut a39 = operand[\n   |                          ^ unclosed delimiter\n\
    62 | }\n   | ^ mismatched closing delimiter\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (index,\
    \ op) in operator.iter().enumerate() {\n        let op_next = operand[index +\
    \ 1];\n        match op.as_str() {\n            \"+\" => result += op_next,\n\
    \            \"-\" => result -= op_next,\n            \"*\" => result *= op_next,\n\
    \            \"//\" => result /= op_next,\n            \"**\" => result = result.pow(op_next\
    \ as u32),\n            _ => println!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqrr99nzq.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    stack.push(operand[0]);\n    for (i, o) in operator.iter().enumerate() {\n\
    \        let op: isize = operand[i + 1];\n        match o.as_str() {\n       \
    \     \"+\" => stack.push(op),\n            \"-\" => stack.push(-op),\n      \
    \      \"*\" => stack.push(stack.pop().unwrap() * op),\n            \"//\" =>\
    \ stack.push(stack.pop().unwrap() / op),\n            \"**\" => stack.push(stack.pop().unwrap().pow(op\
    \ as u32)),\n            _ => panic!(\"Invalid operation\"),\n        }\n    }\n\
    \    return stack.iter().sum();\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmp2b5nu754.rs:27:31\n   |\n27 |             \"*\" => stack.push(stack.pop().unwrap()\
    \ * op),\n   |                    -----------^^^^^^^^^^^---------------\n   |\
    \                    |     |    |\n   |                    |     |    second mutable\
    \ borrow occurs here\n   |                    |     first borrow later used by\
    \ call\n   |                    first mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmp2b5nu754.rs:27:31\n\
    \   |\n27 |             \"*\" => stack.push(stack.pop().unwrap() * op),\n   |\
    \                               ^^^^^^^^^^^\nhelp: ...and then using that local\
    \ as the argument to this call\n  --> /tmp/tmp2b5nu754.rs:27:20\n   |\n27 |  \
    \           \"*\" => stack.push(stack.pop().unwrap() * op),\n   |            \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot borrow\
    \ `stack` as mutable more than once at a time\n  --> /tmp/tmp2b5nu754.rs:28:32\n\
    \   |\n28 |             \"//\" => stack.push(stack.pop().unwrap() / op),\n   |\
    \                     -----------^^^^^^^^^^^---------------\n   |            \
    \         |     |    |\n   |                     |     |    second mutable borrow\
    \ occurs here\n   |                     |     first borrow later used by call\n\
    \   |                     first mutable borrow occurs here\n   |\nhelp: try adding\
    \ a local storing this argument...\n  --> /tmp/tmp2b5nu754.rs:28:32\n   |\n28\
    \ |             \"//\" => stack.push(stack.pop().unwrap() / op),\n   |       \
    \                         ^^^^^^^^^^^\nhelp: ...and then using that local as the\
    \ argument to this call\n  --> /tmp/tmp2b5nu754.rs:28:21\n   |\n28 |         \
    \    \"//\" => stack.push(stack.pop().unwrap() / op),\n   |                  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot borrow `stack`\
    \ as mutable more than once at a time\n  --> /tmp/tmp2b5nu754.rs:29:32\n   |\n\
    29 |             \"**\" => stack.push(stack.pop().unwrap().pow(op as u32)),\n\
    \   |                     -----------^^^^^^^^^^^-------------------------\n  \
    \ |  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = vec![];\n \
    \   for (op, a) in operator.iter().zip(operand.iter()) {\n        match op.as_str()\
    \ {\n            \"+\" => stack.push(*a),\n            \"-\" => stack.push(-a),\n\
    \            \"*\" => {\n                let a = *a;\n                stack.push(stack.pop().unwrap()\
    \ * a);\n            }\n            \"//\" => {\n                let a = *a;\n\
    \                stack.push(stack.pop().unwrap() / a);\n            }\n      \
    \      \"**\" => {\n                let a = *a;\n                stack.push(stack.pop().unwrap().pow(a\
    \ as u32));\n            }\n            _ => unreachable!(),\n        }\n    }\n\
    \    stack.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmp3a9_a7zu.rs:27:28\n   |\n27 |                 stack.push(stack.pop().unwrap()\
    \ * a);\n   |                 -----------^^^^^^^^^^^--------------\n   |     \
    \            |     |    |\n   |                 |     |    second mutable borrow\
    \ occurs here\n   |                 |     first borrow later used by call\n  \
    \ |                 first mutable borrow occurs here\n   |\nhelp: try adding a\
    \ local storing this argument...\n  --> /tmp/tmp3a9_a7zu.rs:27:28\n   |\n27 |\
    \                 stack.push(stack.pop().unwrap() * a);\n   |                \
    \            ^^^^^^^^^^^\nhelp: ...and then using that local as the argument to\
    \ this call\n  --> /tmp/tmp3a9_a7zu.rs:27:17\n   |\n27 |                 stack.push(stack.pop().unwrap()\
    \ * a);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmp3a9_a7zu.rs:31:28\n\
    \   |\n31 |                 stack.push(stack.pop().unwrap() / a);\n   |      \
    \           -----------^^^^^^^^^^^--------------\n   |                 |     |\
    \    |\n   |                 |     |    second mutable borrow occurs here\n  \
    \ |                 |     first borrow later used by call\n   |              \
    \   first mutable borrow occurs here\n   |\nhelp: try adding a local storing this\
    \ argument...\n  --> /tmp/tmp3a9_a7zu.rs:31:28\n   |\n31 |                 stack.push(stack.pop().unwrap()\
    \ / a);\n   |                            ^^^^^^^^^^^\nhelp: ...and then using\
    \ that local as the argument to this call\n  --> /tmp/tmp3a9_a7zu.rs:31:17\n \
    \  |\n31 |                 stack.push(stack.pop().unwrap() / a);\n   |       \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot borrow\
    \ `stack` as mutable more than once at a time\n  --> /tmp/tmp3a9_a7zu.rs:35:28\n\
    \   |\n35 |                 stack.push(stack.pop().unwrap().pow(a as u32));\n\
    \   |                 -----------^^^^^^^^^^^------------------------\n   |   \
    \              |     |    |\n   |                 |     |    second mutable borrow\
    \ occurs h"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        match op.as_str() {\n        \
    \    \"+\" => res += operand[i + 1],\n            \"-\" => res -= operand[i +\
    \ 1],\n            \"*\" => res *= operand[i + 1],\n            \"//\" => res\
    \ /= operand[i + 1],\n            \"**\" => res = res.pow(operand[i + 1] as u32),\n\
    \            _ => (),\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptaspxh7x.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand_iter = operand.iter();\n\
    \    let mut res = *operand_iter.next().unwrap();\n    for op in operator {\n\
    \        let num = *operand_iter.next().unwrap();\n        res = match op.as_str()\
    \ {\n            \"+\" => res + num,\n            \"-\" => res - num,\n      \
    \      \"*\" => res * num,\n            \"//\" => res / num,\n            \"**\"\
    \ => res.pow(num as u32),\n            _ => panic!(\"I don't know how to calculate\
    \ {}\", op),\n        };\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwgy8fsp9.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operation = operator.into_iter();\n\
    \    let mut operand = operand.into_iter();\n    let first = operand.next().unwrap();\n\
    \    let mut result = operand.fold(first, |acc, x| match operation.next().unwrap().as_ref()\
    \ {\n        \"+\" => acc + x,\n        \"-\" => acc - x,\n        \"*\" => acc\
    \ * x,\n        \"//\" => acc / x,\n        \"**\" => acc.pow(x as u32),\n   \
    \     _ => panic!(\"unknown operator\"),\n    });\n    for op in operation {\n\
    \        let n = operand.next().unwrap();\n        result = match op.as_ref()\
    \ {\n            \"+\" => result + n,\n            \"-\" => result - n,\n    \
    \        \"*\" => result * n,\n            \"//\" => result / n,\n           \
    \ \"**\" => result.pow(n as u32),\n            _ => panic!(\"unknown operator\"\
    ),\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `operand`\n    --> /tmp/tmp3mu1zdro.rs:32:17\n\
    \     |\n21   |       let mut operand = operand.into_iter();\n     |         \
    \  ----------- move occurs because `operand` has type `std::vec::IntoIter<isize>`,\
    \ which does not implement the `Copy` trait\n22   |       let first = operand.next().unwrap();\n\
    23   |       let mut result = operand.fold(first, |acc, x| match operation.next().unwrap().as_ref()\
    \ {\n     |  ______________________________-\n24   | |         \"+\" => acc +\
    \ x,\n25   | |         \"-\" => acc - x,\n26   | |         \"*\" => acc * x,\n\
    ...    |\n29   | |         _ => panic!(\"unknown operator\"),\n30   | |     });\n\
    \     | |______- `operand` moved due to this method call\n31   |       for op\
    \ in operation {\n32   |           let n = operand.next().unwrap();\n     |  \
    \                 ^^^^^^^^^^^^^^ value borrowed here after move\n     |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `operand`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  (0..operator.len()).fold(operand[0], |acc,\
    \ i| {\n    match operator[i].as_str() {\n      \"+\" => acc + operand[i + 1],\n\
    \      \"-\" => acc - operand[i + 1],\n      \"*\" => acc * operand[i + 1],\n\
    \      \"//\" => acc / operand[i + 1],\n      \"**\" => acc.pow(operand[i + 1]\
    \ as u32),\n      _ => 0,\n    }\n  })\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp8d7idvla.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n \
    \   let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqsrhju4r.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let next = operand[i + 1];\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += next,\n            \"-\" => result -= next,\n\
    \            \"*\" => result *= next,\n            \"//\" => result /= next,\n\
    \            \"**\" => result = result.pow(next as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", operator[i]),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpshkro_8e.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let exp = operator.iter().zip(operand.iter()).fold(\n\
    \        (operand[0], \"\".to_string()),\n        |(acc, exp), (op, num)| (match\
    \ op.as_str() {\n            \"+\" => acc + num,\n            \"-\" => acc - num,\n\
    \            \"*\" => acc * num,\n            \"//\" => acc / num,\n         \
    \   \"**\" => acc.pow(*num as u32),\n            _ => acc,\n        }, exp + op),\n\
    \    );\n    exp.0\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `37`', /tmp/tmp2ujjtt7w.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut answer = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        if op == \"+\" {\n           \
    \ answer += operand[i + 1];\n        } else if op == \"-\" {\n            answer\
    \ -= operand[i + 1];\n        } else if op == \"*\" {\n            answer *= operand[i\
    \ + 1];\n        } else if op == \"//\" {\n            answer /= operand[i + 1];\n\
    \        } else if op == \"**\" {\n            answer = answer.pow(operand[i +\
    \ 1] as u32);\n        }\n    }\n    answer\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6tb8wofv.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut r = operand[0];\n    for i in 0..operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => r += operand[i\
    \ + 1],\n            \"-\" => r -= operand[i + 1],\n            \"*\" => r *=\
    \ operand[i + 1],\n            \"//\" => r /= operand[i + 1],\n            \"\
    **\" => r = r.pow(operand[i + 1] as u32),\n            _ => return 0,\n      \
    \  }\n    }\n    r\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpx5xvxt27.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for (i,\
    \ o) in operator.iter().enumerate() {\n        res = match o.as_str() {\n    \
    \        \"+\" => res + operand[i + 1],\n            \"-\" => res - operand[i\
    \ + 1],\n            \"*\" => res * operand[i + 1],\n            \"//\" => res\
    \ / operand[i + 1],\n            \"**\" => res.pow(operand[i + 1] as u32),\n \
    \           _ => 0,\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfvgml1kb.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  // Create the string expression\n  let mut\
    \ expression = format!(\"{}\", operand[0]);\n  for i in 0..operator.len() {\n\
    \    expression = format!(\"{} {} {}\", expression, operator[i], operand[i + 1]);\n\
    \  }\n  //println!(\"expression: {}\", expression);\n  // Evaluate the expression\n\
    \  let mut ans = String::new();\n  unsafe {\n    let c_expression = CString::new(expression).unwrap();\n\
    \    libc::printf(c_expression.as_ptr());\n    std::io::stdin().read_line(&mut\
    \ ans).unwrap();\n  }\n  ans.trim().parse::<isize>().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `libc`\n\
    \  --> /tmp/tmpzd3j03il.rs:30:5\n   |\n30 |     libc::printf(c_expression.as_ptr());\n\
    \   |     ^^^^ use of undeclared crate or module `libc`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `CString`\n   --> /tmp/tmpzd3j03il.rs:29:24\n\
    \    |\n29  |       let c_expression = CString::new(expression).unwrap();\n  \
    \  |                          ^^^^^^^\n    |\nhelp: a struct with a similar name\
    \ exists\n    |\n29  |     let c_expression = String::new(expression).unwrap();\n\
    \    |                        ~~~~~~\nhelp: consider importing this type alias\n\
    \    |\n1   | use std::ffi::CString;\n    |\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut f = operand[0];\n    for i in 1..operand.len()\
    \ {\n        match operator[i - 1].as_str() {\n            \"+\" => f += operand[i],\n\
    \            \"-\" => f -= operand[i],\n            \"*\" => f *= operand[i],\n\
    \            \"//\" => f /= operand[i],\n            \"**\" => f = f.pow(operand[i]\
    \ as u32),\n            _ => panic!(\"Invalid operator: {}\", operator[i - 1]),\n\
    \        }\n    }\n    f\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpid0c_iw7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = vec![];\n \
    \   let mut ops: Vec<String> = vec![];\n    let mut opr: Vec<isize> = vec![];\n\
    \    opr.push(operand[0]);\n    for i in 1..operand.len() {\n        let mut opr2\
    \ = operand[i];\n        while ops.len() > 0 && (is_larger(ops[ops.len() - 1].as_str(),\
    \ operator[i - 1].as_str()) || ops[ops.len() - 1] == operator[i - 1]) {\n    \
    \        opr2 = apply(ops.pop().unwrap().as_str(), opr.pop().unwrap(), opr2);\n\
    \        }\n        ops.push(operator[i - 1].clone());\n        opr.push(opr2);\n\
    \    }\n    while ops.len() > 0 {\n        opr[opr.len() - 2] = apply(ops.pop().unwrap().as_str(),\
    \ opr[opr.len() - 2], opr[opr.len() - 1]);\n        opr.pop();\n    }\n    return\
    \ opr[0];\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_larger` in this scope\n  --> /tmp/tmp50so2keq.rs:26:33\n\
    \   |\n26 |         while ops.len() > 0 && (is_larger(ops[ops.len() - 1].as_str(),\
    \ operator[i - 1].as_str()) || ops[ops.len() - 1] == operator[i - 1]) {\n   |\
    \                                 ^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `apply` in this scope\n  --> /tmp/tmp50so2keq.rs:27:20\n\
    \   |\n27 |             opr2 = apply(ops.pop().unwrap().as_str(), opr.pop().unwrap(),\
    \ opr2);\n   |                    ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `apply` in this scope\n  --> /tmp/tmp50so2keq.rs:33:30\n\
    \   |\n33 |         opr[opr.len() - 2] = apply(ops.pop().unwrap().as_str(), opr[opr.len()\
    \ - 2], opr[opr.len() - 1]);\n   |                              ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ val) in operand.iter().enumerate().skip(1) {\n        match operator[i - 1].as_str()\
    \ {\n            \"+\" => result += val,\n            \"-\" => result -= val,\n\
    \            \"*\" => result *= val,\n            \"/\" => result /= val,\n  \
    \          \"**\" => result = result.pow(*val as u32),\n            _ => panic!(\"\
    Should not happen\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpu2yvd9no.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO - fill this out\n    0\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmps6avgpmr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  // this is the easy way, but not the requested\
    \ one\n  // operand.iter().zip(operator.iter()).fold(0, |acc, (op1,op2)| acc +\
    \ op1*op2)\n\n  let mut stack = Vec::new();\n  let mut i = 0;\n  for op in operator\
    \ {\n    let res = match op.as_str() {\n      \"+\" => operand[i] + operand[i+1],\n\
    \      \"-\" => operand[i] - operand[i+1],\n      \"*\" => operand[i] * operand[i+1],\n\
    \      \"//\" => operand[i] / operand[i+1],\n      \"**\" => operand[i].pow(operand[i+1]\
    \ as u32),\n      _ => panic!(\"Unknown operator\")\n    };\n    stack.push(res);\n\
    \    i += 1;\n  }\n  stack.iter().sum()\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `37`', /tmp/tmpwa_bo1lk.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let op: Vec<char> = operator.iter().map(|x|\
    \ x.chars().nth(0).unwrap()).collect();\n    let mut result = operand[0];\n  \
    \  for i in 0..op.len() {\n        match op[i] {\n            '+' => result +=\
    \ operand[i + 1],\n            '-' => result -= operand[i + 1],\n            '*'\
    \ => result *= operand[i + 1],\n            '/' => result /= operand[i + 1],\n\
    \            '^' => result = result.pow(operand[i + 1] as u32),\n            _\
    \ => println!(\"wrong char\"),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `37`', /tmp/tmp7oesod2g.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ next) in operand.iter().skip(1).enumerate() {\n        let op = &operator[i];\n\
    \        if op == \"+\" {\n            result += next;\n        } else if op ==\
    \ \"-\" {\n            result -= next;\n        } else if op == \"*\" {\n    \
    \        result *= next;\n        } else if op == \"//\" {\n            result\
    \ /= next;\n        } else if op == \"**\" {\n            result = result.pow(*next\
    \ as u32);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpc_a7xsww.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() == 0 {\n        return\
    \ 0;\n    }\n\n    let mut result = operand[0];\n    for i in 0..operand.len()\
    \ - 1 {\n        match operator[i].as_str() {\n            \"+\" => result +=\
    \ operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n          \
    \  \"*\" => result *= operand[i + 1],\n            \"/\" => result /= operand[i\
    \ + 1],\n            \"^\" => result = result.pow(operand[i + 1] as u32),\n  \
    \          _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `37`', /tmp/tmpy2iftp67.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let a = operand[i];\n\
    \        let b = operand[i + 1];\n        result = match op.as_str() {\n     \
    \       \"+\" => a + b,\n            \"-\" => a - b,\n            \"*\" => a *\
    \ b,\n            \"//\" => a / b,\n            \"**\" => a.pow(b as u32),\n \
    \           _ => panic!(\"Invalid operator\"),\n        };\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpoaaj3s5c.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  operator.iter().zip(operand.iter().zip(operand.iter().skip(1)))\n\
    \    .fold(operand[0], |acc, (op, (lhs, rhs))| match op.as_str() {\n      \"+\"\
    \ => acc + lhs,\n      \"-\" => acc - lhs,\n      \"*\" => acc * lhs,\n      \"\
    //\" => acc / lhs,\n      \"**\" => acc.pow(*lhs as u32),\n      _ => unreachable!(),\n\
    \    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `37`', /tmp/tmpq7j1iqfc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n \
    \   let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp44wccsty.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operator.len() == operand.len()\
    \ - 1);\n    assert!(operator.len() > 0);\n    assert!(operand.len() > 1);\n \
    \   let mut total = operand[0];\n    for i in 0..operator.len() {\n        match\
    \ operator[i].as_str() {\n            \"+\" => total += operand[i + 1],\n    \
    \        \"-\" => total -= operand[i + 1],\n            \"*\" => total *= operand[i\
    \ + 1],\n            \"//\" => total /= operand[i + 1],\n            \"**\" =>\
    \ total = total.pow(operand[i + 1] as u32),\n            _ => (),\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgpjn_xe2.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let v = &operator[i];\n        let a = &operand[i];\n\
    \        let b = &operand[i + 1];\n        match v.as_str() {\n            \"\
    +\" => result += a + b,\n            \"-\" => result += a - b,\n            \"\
    *\" => result += a * b,\n            \"//\" => result += a / b,\n            \"\
    **\" => result += a.pow(*b as u32),\n            _ => result = 0,\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `31`,\n right: `37`', /tmp/tmpi2_e0caq.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  let mut result = operand[0];\n  for i in\
    \ 0..operator.len() {\n    match operator[i].as_str() {\n      \"+\" => result\
    \ += operand[i + 1],\n      \"-\" => result -= operand[i + 1],\n      \"*\" =>\
    \ result *= operand[i + 1],\n      \"//\" => result /= operand[i + 1],\n     \
    \ \"**\" => result = result.pow(operand[i + 1] as u32),\n      _ => panic!(\"\
    Undefined operator {}\", operator[i]),\n    }\n  }\n  result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvtnpez07.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand = operand;\n    let mut\
    \ res = operand.remove(0);\n    for (i, op) in operator.iter().enumerate() {\n\
    \        let b = operand.remove(0);\n        match op.as_str() {\n           \
    \ \"+\" => res += b,\n            \"-\" => res -= b,\n            \"*\" => res\
    \ *= b,\n            \"//\" => res /= b,\n            \"**\" => res = res.pow(b\
    \ as u32),\n            _ => panic!(\"bad operator\"),\n        }\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpenkgrt9a.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut input = operand;\n    for x in\
    \ operator {\n        let num1 = input.pop().unwrap();\n        let num2 = input.pop().unwrap();\n\
    \        let result = match x.as_str() {\n            \"+\" => num1 + num2,\n\
    \            \"-\" => num1 - num2,\n            \"*\" => num1 * num2,\n      \
    \      \"//\" => num1 / num2,\n            \"**\" => num1.pow(num2 as u32),\n\
    \            _ => 0,\n        };\n        input.push(result);\n    }\n    input.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1877`,\n right: `37`', /tmp/tmpi56_e43y.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // let mut stack: Vec<isize> = vec![];\n\
    \    // for idx in 0..operator.len() {\n    //     stack.push(operand[idx]);\n\
    \    //     let res = match operator[idx].as_str() {\n    //         \"+\" =>\
    \ stack.pop().unwrap() + stack.pop().unwrap(),\n    //         \"-\" => -stack.pop().unwrap()\
    \ + stack.pop().unwrap(),\n    //         \"*\" => stack.pop().unwrap() * stack.pop().unwrap(),\n\
    \    //         \"//\" => (stack.pop().unwrap() / stack.pop().unwrap()).floor(),\n\
    \    //         \"**\" => stack.pop().unwrap().powf(stack.pop().unwrap()),\n \
    \   //         _ => panic!(\"Unknown operator\"),\n    //     };\n    //     stack.push(res);\n\
    \    // }\n    // stack.pop().unwrap()\n    let mut stack: Vec<isize> = vec![];\n\
    \    for idx in 0..operator.len() {\n        stack.push(operand[idx]);\n     \
    \   let res = match operator[idx].as_str() {\n            \"+\" => stack.pop().unwrap()\
    \ + stack.pop().unwrap(),\n            \"-\" => -stack.pop().unwrap() + stack.pop().unwrap(),\n\
    \            \"*\" => stack.pop().unwrap() * stack.pop().unwrap(),\n         \
    \   \"//\" => stack.pop().unwrap() / stack.pop().unwrap(),\n            \"**\"\
    \ => stack.pop().unwrap().powf(stack.pop().unwrap()),\n            _ => panic!(\"\
    Unknown operator\"),\n        };\n        stack.push(res);\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `powf` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6wwusabc.rs:42:42\n   |\n42 |             \"**\" => stack.pop().unwrap().powf(stack.pop().unwrap()),\n\
    \   |                                          ^^^^ help: there is an associated\
    \ function with a similar name: `pow`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO: Your algebraic expression here\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = do_algebra;\n  \
    \  assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp488rh04v.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() == 0 || operand.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut result = operand[0];\n    for\
    \ i in 0..operator.len() {\n        let op = &operator[i];\n        let num =\
    \ operand[i + 1];\n        if op == \"+\" {\n            result += num;\n    \
    \    } else if op == \"-\" {\n            result -= num;\n        } else if op\
    \ == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n \
    \           result /= num;\n        } else if op == \"**\" {\n            result\
    \ = result.pow(num as u32);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpurqfmrio.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operator.iter().rev().fold(\n        operand.pop().unwrap(),\n\
    \        |acc, op| {\n            let b = operand.pop().unwrap();\n          \
    \  match op.as_str() {\n                \"+\" => b + acc,\n                \"\
    -\" => b - acc,\n                \"*\" => b * acc,\n                \"/\" => b\
    \ / acc,\n                \"^\" => b.pow(acc as u32),\n                _ => panic!(\"\
    Unknown operation\"),\n            }\n        },\n    )\n}\n\nfn main() {\n  \
    \  let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `operand` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp41134bm2.rs:23:21\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \             ------- help: consider changing this to be mutable: `mut operand`\n\
    ...\n23 |             let b = operand.pop().unwrap();\n   |                  \
    \   ^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `operand`\
    \ as mutable, as it is not declared as mutable\n  --> /tmp/tmp41134bm2.rs:21:9\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                      ------- help: consider changing\
    \ this to be mutable: `mut operand`\n20 |     operator.iter().rev().fold(\n21\
    \ |         operand.pop().unwrap(),\n   |         ^^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ x) in operator.iter().enumerate() {\n        let n = operand[i + 1];\n     \
    \   if x == \"+\" {\n            result += n;\n        } else if x == \"-\" {\n\
    \            result -= n;\n        } else if x == \"*\" {\n            result\
    \ *= n;\n        } else if x == \"//\" {\n            result /= n;\n        }\
    \ else if x == \"**\" {\n            result = result.pow(n as u32);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplc_w34o7.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ oper) in operator.iter().enumerate() {\n        if oper == \"+\" {\n       \
    \     result += operand[i + 1];\n        } else if oper == \"-\" {\n         \
    \   result -= operand[i + 1];\n        } else if oper == \"*\" {\n           \
    \ result *= operand[i + 1];\n        } else if oper == \"//\" {\n            result\
    \ /= operand[i + 1];\n        } else if oper == \"**\" {\n            result =\
    \ result.pow(operand[i + 1] as u32);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpaiajhvwo.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.windows(2).zip(operator.iter())\n\
    \        .fold(operand[0], |acc, (&x, &op)| match op.as_str() {\n            \"\
    +\" => acc + x,\n            \"-\" => acc - x,\n            \"*\" => acc * x,\n\
    \            \"//\" => acc / x,\n            \"**\" => acc.pow(x as u32),\n  \
    \          _ => panic!(\"unexpected operator!\"),\n        })\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmphyd611mw.rs:21:35\n   |\n21 |         .fold(operand[0],\
    \ |acc, (&x, &op)| match op.as_str() {\n   |                                 \
    \  ^ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `[isize]`\n   = note: all local variables must have a\
    \ statically known size\n   = help: unsized locals are gated as an unstable feature\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmphyd611mw.rs:22:24\n   |\n22 |             \"+\" => acc +\
    \ x,\n   |                        ^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\nerror[E0277]:\
    \ cannot add `[isize]` to `isize`\n  --> /tmp/tmphyd611mw.rs:22:24\n   |\n22 |\
    \             \"+\" => acc + x,\n   |                        ^ no implementation\
    \ for `isize + [isize]`\n   |\n   = help: the trait `Add<[isize]>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the size for values of type `[isize]` cannot be known\
    \ at compilation time\n  --> /tmp/tmphyd611mw.rs:23:24\n   |\n23 |           \
    \  \"-\" => acc - x,\n   |                        ^ doesn't have a size known\
    \ at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\
    \nerror[E0277]: cannot subtract `[isize]` from `isize`\n  --> /tmp/tmphyd611mw.rs:23:24\n\
    \   |\n23 |             \"-\" => acc - x,\n   |                        ^ no implementation\
    \ for `isize - [isize]`\n   |\n   = help: the trait `Sub<[isize]>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let result = if let Some(x) = operand.get(0)\
    \ {\n        *x\n    } else {\n        panic!(\"operand is not allowed to be empty\"\
    )\n    };\n    let mut iter = operator.iter().zip(operand.iter().skip(1));\n \
    \   while let Some((op, x)) = iter.next() {\n        match op.as_str() {\n   \
    \         \"+\" => result += x,\n            \"-\" => result -= x,\n         \
    \   \"*\" => result *= x,\n            \"//\" => result /= x,\n            \"\
    **\" => result = result.pow(*x as u32),\n            _ => panic!(\"unknown operator\"\
    ),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `result` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp18u1ijvi.rs:28:20\n   |\n20 |     let result = if\
    \ let Some(x) = operand.get(0) {\n   |         ------ help: consider changing\
    \ this to be mutable: `mut result`\n...\n28 |             \"+\" => result += x,\n\
    \   |                    ^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot\
    \ borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmp18u1ijvi.rs:29:20\n\
    \   |\n20 |     let result = if let Some(x) = operand.get(0) {\n   |         ------\
    \ help: consider changing this to be mutable: `mut result`\n...\n29 |        \
    \     \"-\" => result -= x,\n   |                    ^^^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp18u1ijvi.rs:30:20\n   |\n20 |     let result = if let Some(x) =\
    \ operand.get(0) {\n   |         ------ help: consider changing this to be mutable:\
    \ `mut result`\n...\n30 |             \"*\" => result *= x,\n   |            \
    \        ^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `result`\
    \ as mutable, as it is not declared as mutable\n  --> /tmp/tmp18u1ijvi.rs:31:21\n\
    \   |\n20 |     let result = if let Some(x) = operand.get(0) {\n   |         ------\
    \ help: consider changing this to be mutable: `mut result`\n...\n31 |        \
    \     \"//\" => result /= x,\n   |                     ^^^^^^ cannot borrow as\
    \ mutable\n\nerror[E0384]: cannot assign twice to immutable variable `result`\n\
    \  --> /tmp/tmp18u1ijvi.rs:32:21\n   |\n20 |     let result = if let Some(x) =\
    \ operand.get(0) {\n   |         ------\n   |         |\n   |         first assignment\
    \ to `result`\n   |         help: consider making this binding mutable: `mut result`\n\
    ...\n32 |             \"**\" => result = result.pow(*x as u32),\n   |        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0384, E0596.\nFor more information about an error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // if operator is [] or operand is [] return\
    \ 0\n    // if operator is [..] and operand is [_] return operand[0]\n    // if\
    \ operator is [..] and operand is [_, _] return operand[0] op operand[1]\n   \
    \ // else recursive call, op(0) is the first operation, op(1) the second, then\
    \ merge the result\n    // with the second operand, then recurse\n    if operator.is_empty()\
    \ || operand.is_empty() {\n        return 0;\n    }\n    let mut op = operator.clone();\n\
    \    let mut opr = operand.clone();\n    if op.len() == 1 && opr.len() == 2 {\n\
    \        return do_algebra_one_operator(op.remove(0), opr.remove(0), opr.remove(0));\n\
    \    }\n    let opr_0 = opr.remove(0);\n    let opr_1 = opr.remove(0);\n    let\
    \ r = do_algebra_one_operator(op.remove(0), opr_0, opr_1);\n    opr.insert(0,\
    \ r);\n    do_algebra(op, opr)\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_algebra_one_operator` in this scope\n\
    \  --> /tmp/tmp29iajddw.rs:31:16\n   |\n31 |         return do_algebra_one_operator(op.remove(0),\
    \ opr.remove(0), opr.remove(0));\n   |                ^^^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `do_algebra_one_operator`\
    \ in this scope\n  --> /tmp/tmp29iajddw.rs:35:13\n   |\n35 |     let r = do_algebra_one_operator(op.remove(0),\
    \ opr_0, opr_1);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // your code here\n    0\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpg4ofl90q.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut expr = operand[0].to_string();\n\
    \    for i in 0..operand.len() - 1 {\n        expr.push_str(&operator[i]);\n \
    \       expr.push_str(&operand[i + 1].to_string());\n    }\n    return eval_expr(&expr);\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `eval_expr` in this scope\n  --> /tmp/tmpvlsza6c9.rs:25:12\n\
    \   |\n25 |     return eval_expr(&expr);\n   |            ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let operand_result = match op.as_str()\
    \ {\n            \"+\" => result + operand[i + 1],\n            \"-\" => result\
    \ - operand[i + 1],\n            \"*\" => result * operand[i + 1],\n         \
    \   \"//\" => result / operand[i + 1],\n            \"**\" => result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        };\n\
    \        result = operand_result;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdq3ms4s4.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // iterate over both vectors of operators\
    \ and operands, make them match\n    // and add up operands as we go.\n    //\
    \ if an operator is not defined, we return -1\n    // if there are less operands\
    \ than operators, we return -1\n    let mut result = -1;\n    if operand.len()\
    \ < 2 {\n        return result;\n    }\n    if operator.len() != operand.len()\
    \ - 1 {\n        return result;\n    }\n    result = operand[0];\n    for i in\
    \ 0..operator.len() {\n        if operator[i] == \"+\" {\n            result +=\
    \ operand[i + 1];\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            result\
    \ = result.pow(operand[i + 1] as u32);\n        } else {\n            return -1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfk3ykyku.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand = operand;\n    let mut\
    \ pos = 0;\n    while pos < operator.len() {\n        let op = &operator[pos];\n\
    \        let pos = pos + 1;\n        let num1 = operand[pos];\n        let num2\
    \ = operand[pos + 1];\n        let ret = if op == \"-\" {\n            num1 -\
    \ num2\n        } else if op == \"+\" {\n            num1 + num2\n        } else\
    \ if op == \"*\" {\n            num1 * num2\n        } else if op == \"//\" {\n\
    \            num1 / num2\n        } else if op == \"**\" {\n            num1.pow(num2\
    \ as u32)\n        } else {\n            panic!(\"unexpected operator\");\n  \
    \      };\n        operand.remove(pos);\n        operand.remove(pos);\n      \
    \  operand.insert(pos, ret);\n    }\n    operand[0]\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 2 but the index\
    \ is 2', /tmp/tmplzxcsgcz.rs:26:20\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand = operand;\n    let mut\
    \ last = operand.pop().unwrap();\n    let mut r = last;\n    while !operand.is_empty()\
    \ {\n        let a = operand.pop().unwrap();\n        let o = operator.pop().unwrap();\n\
    \        r = match o.as_str() {\n            \"+\" => a + last,\n            \"\
    -\" => a - last,\n            \"*\" => a * last,\n            \"//\" => a / last,\n\
    \            \"**\" => a.pow(last as u32),\n            _ => panic!(\"unknown\
    \ operator: {}\", o),\n        };\n        last = r;\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `operator` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp_zqqxk52.rs:25:17\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |               -------- help:\
    \ consider changing this to be mutable: `mut operator`\n...\n25 |         let\
    \ o = operator.pop().unwrap();\n   |                 ^^^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpf2yu9fy9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() != operand.len() - 1\
    \ {\n        panic!(\"unexpected\");\n    }\n    let mut result = operand[0];\n\
    \    for i in 0..operator.len() {\n        match operator[i].as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpan8_ntpl.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let p1 = operand[i];\n\
    \        let p2 = operand[i + 1];\n        result = match op.as_str() {\n    \
    \        \"+\" => p1 + p2,\n            \"-\" => p1 - p2,\n            \"*\" =>\
    \ p1 * p2,\n            \"//\" => p1 / p2,\n            \"**\" => p1.pow(p2 as\
    \ u32),\n            _ => p1 + p2,\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpficaw3p8.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut iter_op = operator.iter();\n  \
    \  let mut iter_opd = operand.iter();\n    let mut ans = *iter_opd.next().unwrap();\n\
    \    for opd in iter_opd {\n        match iter_op.next().unwrap().as_str() {\n\
    \            \"+\" => ans += opd,\n            \"-\" => ans -= opd,\n        \
    \    \"*\" => ans *= opd,\n            \"//\" => ans /= opd,\n            \"**\"\
    \ => ans = ans.pow(*opd as u32),\n            _ => return -1,\n        }\n   \
    \ }\n    ans\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp482t5zbg.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Write your code here\n    let mut new_operator\
    \ = operator.clone();\n    let mut new_operand = operand.clone();\n    let mut\
    \ i = 0;\n    while i < new_operator.len() {\n        if new_operator[i] == \"\
    **\" {\n            new_operand[i] = new_operand[i].pow(new_operand[i + 1] as\
    \ u32);\n            new_operand.remove(i + 1);\n            new_operator.remove(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    new_operand[0] =\
    \ match new_operator[0].as_str() {\n        \"+\" => new_operand[0] + new_operand[1],\n\
    \        \"-\" => new_operand[0] - new_operand[1],\n        \"*\" => new_operand[0]\
    \ * new_operand[1],\n        \"//\" => new_operand[0] / new_operand[1],\n    \
    \    _ => new_operand[0],\n    };\n    new_operand.remove(1);\n    new_operator.remove(0);\n\
    \    while new_operator.len() > 0 {\n        new_operand[0] = match new_operator[0].as_str()\
    \ {\n            \"+\" => new_operand[0] + new_operand[1],\n            \"-\"\
    \ => new_operand[0] - new_operand[1],\n            \"*\" => new_operand[0] * new_operand[1],\n\
    \            \"//\" => new_operand[0] / new_operand[1],\n            _ => new_operand[0],\n\
    \        };\n        new_operand.remove(1);\n        new_operator.remove(0);\n\
    \    }\n    new_operand[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpnv3l29u5.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    for (i, op) in operator.iter().enumerate() {\n        if op == \"+\" {\n\
    \            stack.push(operand[i]);\n        } else if op == \"-\" {\n      \
    \      stack.push(-operand[i]);\n        } else if op == \"*\" {\n           \
    \ stack.push(stack.pop().unwrap() * operand[i]);\n        } else if op == \"//\"\
    \ {\n            stack.push(stack.pop().unwrap() / operand[i]);\n        } else\
    \ if op == \"**\" {\n            stack.push(stack.pop().unwrap().pow(operand[i]\
    \ as u32));\n        }\n    }\n    stack.iter().sum()\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmpfakkg8qc.rs:27:24\n   |\n27 |             stack.push(stack.pop().unwrap()\
    \ * operand[i]);\n   |             -----------^^^^^^^^^^^-----------------------\n\
    \   |             |     |    |\n   |             |     |    second mutable borrow\
    \ occurs here\n   |             |     first borrow later used by call\n   |  \
    \           first mutable borrow occurs here\n   |\nhelp: try adding a local storing\
    \ this argument...\n  --> /tmp/tmpfakkg8qc.rs:27:24\n   |\n27 |             stack.push(stack.pop().unwrap()\
    \ * operand[i]);\n   |                        ^^^^^^^^^^^\nhelp: ...and then using\
    \ that local as the argument to this call\n  --> /tmp/tmpfakkg8qc.rs:27:13\n \
    \  |\n27 |             stack.push(stack.pop().unwrap() * operand[i]);\n   |  \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot\
    \ borrow `stack` as mutable more than once at a time\n  --> /tmp/tmpfakkg8qc.rs:29:24\n\
    \   |\n29 |             stack.push(stack.pop().unwrap() / operand[i]);\n   | \
    \            -----------^^^^^^^^^^^-----------------------\n   |             |\
    \     |    |\n   |             |     |    second mutable borrow occurs here\n\
    \   |             |     first borrow later used by call\n   |             first\
    \ mutable borrow occurs here\n   |\nhelp: try adding a local storing this argument...\n\
    \  --> /tmp/tmpfakkg8qc.rs:29:24\n   |\n29 |             stack.push(stack.pop().unwrap()\
    \ / operand[i]);\n   |                        ^^^^^^^^^^^\nhelp: ...and then using\
    \ that local as the argument to this call\n  --> /tmp/tmpfakkg8qc.rs:29:13\n \
    \  |\n29 |             stack.push(stack.pop().unwrap() / operand[i]);\n   |  \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot\
    \ borrow `stack` as mutable more than once at a time\n  --> /tmp/tmpfakkg8qc.rs:31:24\n\
    \   |\n31 |             stack.push(stack.pop().unwrap().pow(operand[i] as u32));\n\
    \   |             -----------^^^^^^^^^^^---------------------------------\n  \
    \ |             |     |    |\n   |             |     |    second mutable bor"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (index,\
    \ op) in operator.iter().enumerate() {\n        let num2 = operand[index + 1];\n\
    \        match op.as_str() {\n            \"+\" => result += num2,\n         \
    \   \"-\" => result -= num2,\n            \"*\" => result *= num2,\n         \
    \   \"//\" => result /= num2,\n            \"**\" => result = result.pow(num2\
    \ as u32),\n            _ => result = 0,\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpkzm2yj_4.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    let mut operator_iter = operator.iter();\n    let mut operand_iter = operand.iter();\n\
    \    let first_operand = operand_iter.next().unwrap();\n    stack.push(*first_operand);\n\
    \    for (op, num) in operator_iter.zip(operand_iter) {\n        match op.as_str()\
    \ {\n            \"+\" => stack.push(*num),\n            \"-\" => stack.push(-*num),\n\
    \            \"*\" => stack.push(stack.pop().unwrap() * *num),\n            \"\
    //\" => stack.push(stack.pop().unwrap() / *num),\n            \"**\" => stack.push(stack.pop().unwrap().pow(*num\
    \ as u32)),\n            _ => (),\n        }\n    }\n    stack.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp0h26d6yz.rs:21:9\n\
    \   |\n21 |     let mut operator_iter = operator.iter();\n   |         ----^^^^^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0499]: cannot borrow `stack` as mutable more than once\
    \ at a time\n  --> /tmp/tmp0h26d6yz.rs:29:31\n   |\n29 |             \"*\" =>\
    \ stack.push(stack.pop().unwrap() * *num),\n   |                    -----------^^^^^^^^^^^-----------------\n\
    \   |                    |     |    |\n   |                    |     |    second\
    \ mutable borrow occurs here\n   |                    |     first borrow later\
    \ used by call\n   |                    first mutable borrow occurs here\n   |\n\
    help: try adding a local storing this argument...\n  --> /tmp/tmp0h26d6yz.rs:29:31\n\
    \   |\n29 |             \"*\" => stack.push(stack.pop().unwrap() * *num),\n  \
    \ |                               ^^^^^^^^^^^\nhelp: ...and then using that local\
    \ as the argument to this call\n  --> /tmp/tmp0h26d6yz.rs:29:20\n   |\n29 |  \
    \           \"*\" => stack.push(stack.pop().unwrap() * *num),\n   |          \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]: cannot borrow\
    \ `stack` as mutable more than once at a time\n  --> /tmp/tmp0h26d6yz.rs:30:32\n\
    \   |\n30 |             \"//\" => stack.push(stack.pop().unwrap() / *num),\n \
    \  |                     -----------^^^^^^^^^^^-----------------\n   |       \
    \              |     |    |\n   |                     |     |    second mutable\
    \ borrow occurs here\n   |                     |     first borrow later used by\
    \ call\n   |                     first mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmp0h26d6yz.rs:30:32\n\
    \   |\n30 |             \"//\" => stack.push(stack.pop().unwrap() / *num),\n \
    \  |                                ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmp0h26d6yz.rs:30:21\n   |\n\
    30 |             \"//\" => stack.push(stack.pop().unwrap() / *num),\n   |    \
    \                 ^^^^^^^^^^^^^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptxjtn2ky.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut val: isize = operand[0];\n    for\
    \ (i, op) in operator.iter().enumerate() {\n        match op.as_str() {\n    \
    \        \"+\" => val += operand[i + 1],\n            \"-\" => val -= operand[i\
    \ + 1],\n            \"*\" => val *= operand[i + 1],\n            \"//\" => val\
    \ /= operand[i + 1],\n            \"**\" => val = val.pow(operand[i + 1] as u32),\n\
    \            _ => (),\n        }\n    }\n    val\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpnwryrzoa.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i + 1];\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            result\
    \ = result.pow(operand[i + 1] as u32);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp82fe3ixq.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut expr = operand[0].to_string();\n\
    \    for i in 0..operator.len() {\n        expr += &format!(\" {} {};\", operator[i],\
    \ operand[i + 1]);\n    }\n    eval(&expr)\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `eval` in this scope\n  --> /tmp/tmp7mzkutkf.rs:24:5\n\
    \   |\n24 |     eval(&expr)\n   |     ^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() == 0 || operand.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut result = operand[0];\n    for\
    \ i in 0..operator.len() {\n        match operator[i].as_str() {\n           \
    \ \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => unreachable!(),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_2e3bk0a.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op = operator;\n    let mut num\
    \ = operand;\n    while op.len() > 0 {\n        let p = op.iter().position(|x|\
    \ *x == \"**\").unwrap_or(op.len());\n        if p < op.len() {\n            num[p]\
    \ = num[p].pow(num[p + 1] as u32);\n            num.remove(p + 1);\n         \
    \   op.remove(p);\n        }\n        let p = op.iter().position(|x| *x == \"\
    //\").unwrap_or(op.len());\n        if p < op.len() {\n            num[p] = num[p]\
    \ / num[p + 1];\n            num.remove(p + 1);\n            op.remove(p);\n \
    \       }\n        let p = op.iter().position(|x| *x == \"*\").unwrap_or(op.len());\n\
    \        if p < op.len() {\n            num[p] = num[p] * num[p + 1];\n      \
    \      num.remove(p + 1);\n            op.remove(p);\n        }\n        let p\
    \ = op.iter().position(|x| *x == \"-\").unwrap_or(op.len());\n        if p < op.len()\
    \ {\n            num[p] = num[p] - num[p + 1];\n            num.remove(p + 1);\n\
    \            op.remove(p);\n        }\n        let p = op.iter().position(|x|\
    \ *x == \"+\").unwrap_or(op.len());\n        if p < op.len() {\n            num[p]\
    \ = num[p] + num[p + 1];\n            num.remove(p + 1);\n            op.remove(p);\n\
    \        }\n    }\n    num[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operators = operator.iter().peekable();\n\
    \    let mut operands = operand.iter().peekable();\n    let mut result = operands.next().unwrap().clone();\n\
    \    while let Some(op) = operators.next() {\n        match op.as_str() {\n  \
    \          \"+\" => result += operands.next().unwrap(),\n            \"-\" =>\
    \ result -= operands.next().unwrap(),\n            \"*\" => result *= operands.next().unwrap(),\n\
    \            \"//\" => result /= operands.next().unwrap(),\n            \"**\"\
    \ => result = result.pow(operands.next().unwrap() as u32),\n            _ => (),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `u32` is invalid\n  --> /tmp/tmpa_d027a3.rs:29:41\n\
    \   |\n29 |             \"**\" => result = result.pow(operands.next().unwrap()\
    \ as u32),\n   |                                         ------------------------^^^^^^^\n\
    \   |                                         |\n   |                        \
    \                 cannot cast `&isize` as `u32`\n   |                        \
    \                 help: dereference the expression: `*operands.next().unwrap()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let op = match op.as_str() {\n\
    \            \"+\" => &Add,\n            \"-\" => &Sub,\n            \"*\" =>\
    \ &Mul,\n            \"//\" => &Div,\n            \"**\" => &Exp,\n          \
    \  _ => panic!(\"Unrecognized operator: {}\", op),\n        };\n        result\
    \ = op.eval(result, operand[i + 1]);\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `Add` in this scope\n  --> /tmp/tmpat23erdk.rs:23:21\n\
    \   |\n23 |             \"+\" => &Add,\n   |                     ^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `Sub` in this scope\n  -->\
    \ /tmp/tmpat23erdk.rs:24:21\n   |\n24 |             \"-\" => &Sub,\n   |     \
    \                ^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `Mul` in this scope\n  --> /tmp/tmpat23erdk.rs:25:21\n   |\n25 |           \
    \  \"*\" => &Mul,\n   |                     ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `Div` in this scope\n  --> /tmp/tmpat23erdk.rs:26:22\n   |\n\
    26 |             \"//\" => &Div,\n   |                      ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `Exp` in this scope\n  --> /tmp/tmpat23erdk.rs:27:22\n\
    \   |\n27 |             \"**\" => &Exp,\n   |                      ^^^ not found\
    \ in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (op,\
    \ num) in operator.iter().zip(operand.iter().skip(1)) {\n        result = match\
    \ op.as_str() {\n            \"+\" => result + num,\n            \"-\" => result\
    \ - num,\n            \"*\" => result * num,\n            \"//\" => result / num,\n\
    \            \"**\" => result.pow(*num as u32),\n            _ => panic!(\"Unsupported\
    \ operator.\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpn0lv6dp_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut temp = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => temp += operand[i + 1],\n            \"-\" => temp -= operand[i + 1],\n \
    \           \"*\" => temp *= operand[i + 1],\n            \"//\" => temp /= operand[i\
    \ + 1],\n            \"**\" => temp = temp.pow(operand[i + 1] as u32),\n     \
    \       _ => (),\n        }\n    }\n    temp\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpm9730i3s.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  let mut operator_iter = operator.iter();\n\
    \  let mut operand_iter = operand.iter();\n  let mut result = *operand_iter.next().unwrap();\n\
    \  for operand in operand_iter {\n    match operator_iter.next().unwrap().as_str()\
    \ {\n      \"+\" => result += operand,\n      \"-\" => result -= operand,\n  \
    \    \"*\" => result *= operand,\n      \"//\" => result /= operand,\n      \"\
    **\" => result = result.pow(*operand as u32),\n      _ => panic!(\"Invalid operator:\
    \ {}\", operator_iter.next().unwrap()),\n    }\n  }\n  result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsj7dl4oy.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Write your code here\n    0\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpauzbt3je.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.iter().zip(operator.iter())\n \
    \       .fold((operand[0], 0), |(acc, _), (o, op)| {\n            match op.as_str()\
    \ {\n                \"+\" => (acc + o, acc + o),\n                \"-\" => (acc\
    \ - o, acc - o),\n                \"*\" => (acc * o, acc * o),\n             \
    \   \"//\" => (acc / o, acc / o),\n                \"**\" => (acc.pow(*o as u32),\
    \ acc.pow(*o as u32)),\n                _ => (acc, 0)\n            }\n       \
    \ }).0\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `37`', /tmp/tmpotrdhv2j.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() == 0 || operand.len()\
    \ < 2 {\n        panic!(\"invalid input!\");\n    }\n    let mut op: Vec<fn(isize,\
    \ isize) -> isize> = vec![];\n    let mut opr: Vec<isize> = vec![];\n    for o\
    \ in operator {\n        match o.as_str() {\n            \"+\" => op.push(|a,\
    \ b| a + b),\n            \"-\" => op.push(|a, b| a - b),\n            \"*\" =>\
    \ op.push(|a, b| a * b),\n            \"/\" => op.push(|a, b| a / b),\n      \
    \      \"^\" => op.push(|a, b| a.pow(b as u32)),\n            _ => panic!(\"invalid\
    \ operator!\"),\n        }\n    }\n    for i in 0..operand.len() {\n        if\
    \ i == 0 {\n            opr.push(operand[i]);\n        } else {\n            let\
    \ val = op[i - 1](opr[i - 1], operand[i]);\n            opr.push(val);\n     \
    \   }\n    }\n    opr[opr.len() - 1]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'invalid operator!', /tmp/tmp688yd2tu.rs:32:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  //TODO do_algebra\n  if operator.len() ==\
    \ operand.len() - 1 {\n    if operator.len() == 0 || operand.len() == 0 {\n  \
    \    0\n    } else {\n      let mut result = operand[0];\n      for i in 0..operator.len()\
    \ {\n        let op = &operator[i];\n        let num = operand[i + 1];\n     \
    \   match op.as_ref() {\n          \"+\" => result += num,\n          \"-\" =>\
    \ result -= num,\n          \"*\" => result *= num,\n          \"//\" => result\
    \ /= num,\n          \"**\" => result = result.pow(num as u32),\n          _ =>\
    \ result = 0,\n        }\n      }\n      result\n    }\n  } else {\n    0\n  }\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2sj2myss.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut result = operand[i];\n\
    \    for op in operator {\n        i += 1;\n        match op.as_str() {\n    \
    \        \"+\" => result += operand[i],\n            \"-\" => result -= operand[i],\n\
    \            \"*\" => result *= operand[i],\n            \"//\" => result /= operand[i],\n\
    \            \"**\" => result = result.pow(operand[i] as u32),\n            _\
    \ => (),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0453ogj3.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => res += operand[i + 1],\n            \"-\" => res -= operand[i + 1],\n   \
    \         \"*\" => res *= operand[i + 1],\n            \"//\" => res /= operand[i\
    \ + 1],\n            \"**\" => res = res.pow(operand[i + 1] as u32),\n       \
    \     _ => panic!(\"Invalid operator\"),\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_9_oxw22.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut left = operand[0];\n    let mut\
    \ operator_iter = operator.iter();\n    let mut operand_iter = operand.iter().skip(1);\n\
    \    while let Some(right) = operand_iter.next() {\n        let op = operator_iter.next().unwrap();\n\
    \        match op.as_str() {\n            \"+\" => left += right,\n          \
    \  \"-\" => left -= right,\n            \"*\" => left *= right,\n            \"\
    //\" => left /= right,\n            \"**\" => left = left.pow(*right as u32),\n\
    \            _ => panic!(\"Unexpected operator\"),\n        }\n    }\n    left\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpabkzwq7a.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut op: Option<&str>\
    \ = None;\n    for (i, n) in operand.iter().enumerate() {\n        if i == 0 {\n\
    \            result = *n;\n        } else {\n            match op {\n        \
    \        Some(\"+\") => result += n,\n                Some(\"-\") => result -=\
    \ n,\n                Some(\"*\") => result *= n,\n                Some(\"//\"\
    ) => result /= n,\n                Some(\"**\") => result = result.pow(*n as u32),\n\
    \                None => (),\n                _ => continue,\n            }\n\
    \            op = operator.get(i - 1).map(|s| s.as_str());\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `80`,\n right: `37`', /tmp/tmpgdt6wqlh.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n  return 0;\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmphmixy3cg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    let mut operand_ptr = operand.iter();\n    let mut answer = operand_ptr.next().unwrap();\n\
    \    while let Some(op) = operand_ptr.next() {\n        match operator.pop() {\n\
    \            Some(ref op_str) => {\n                match op_str.as_str() {\n\
    \                    \"+\" => {\n                        *answer += *op;\n   \
    \                 }\n                    \"-\" => {\n                        *answer\
    \ -= *op;\n                    }\n                    \"*\" => {\n           \
    \             *answer *= *op;\n                    }\n                    \"/\"\
    \ => {\n                        *answer /= *op;\n                    }\n     \
    \               \"**\" => {\n                        *answer = answer.pow(*op\
    \ as u32);\n                    }\n                    _ => panic!(\"Should not\
    \ be here\"),\n                }\n            }\n            None => {\n     \
    \           panic!(\"Should not be here\");\n            }\n        }\n    }\n\
    \    return *answer;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `stack`\n  --> /tmp/tmpcpfjleeh.rs:20:13\n  \
    \ |\n20 |     let mut stack: Vec<isize> = Vec::new();\n   |             ^^^^^\
    \ help: if this is intentional, prefix it with an underscore: `_stack`\n   |\n\
    \   = note: `#[warn(unused_variables)]` on by default\n\nwarning: variable does\
    \ not need to be mutable\n  --> /tmp/tmpcpfjleeh.rs:20:9\n   |\n20 |     let mut\
    \ stack: Vec<isize> = Vec::new();\n   |         ----^^^^^\n   |         |\n  \
    \ |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on\
    \ by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpcpfjleeh.rs:22:9\n\
    \   |\n22 |     let mut answer = operand_ptr.next().unwrap();\n   |         ----^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n\nerror[E0596]: cannot\
    \ borrow `operator` as mutable, as it is not declared as mutable\n  --> /tmp/tmpcpfjleeh.rs:24:15\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |               -------- help: consider changing this to be mutable: `mut\
    \ operator`\n...\n24 |         match operator.pop() {\n   |               ^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0594]: cannot assign to `*answer`, which\
    \ is behind a `&` reference\n  --> /tmp/tmpcpfjleeh.rs:28:25\n   |\n22 |     let\
    \ mut answer = operand_ptr.next().unwrap();\n   |         ---------- help: consider\
    \ changing this to be a mutable reference: `&mut isize`\n...\n28 |           \
    \              *answer += *op;\n   |                         ^^^^^^^^^^^^^^ `answer`\
    \ is a `&` reference, so the data it refers to cannot be written\n\nerror[E0594]:\
    \ cannot assign to `*answer`, which is behind a `&` reference\n  --> /tmp/tmpcpfjleeh.rs:31:25\n\
    \   |\n22 |     let mut answer = operand_ptr.next().unwrap();\n   |         ----------\
    \ help: consider changing this to be a mutable reference: `&mut isize`\n...\n\
    31 |                         *answer -= *op;\n   |                         ^^^^^^^^^^^^^^\
    \ `answer` is a `&` reference, so the data it refers to cannot be written\n\n\
    error[E0594]: cannot assign to `*answer`, which is behind a `&` referenc"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let result = operand.iter().zip(operator.iter()).fold(operand[0],\
    \ |acc, (e, s)| {\n        match s.as_str() {\n            \"+\" => acc + e,\n\
    \            \"-\" => acc - e,\n            \"*\" => acc * e,\n            \"\
    //\" => acc / e,\n            \"**\" => acc.pow(*e as u32),\n            _ =>\
    \ 0,\n        }\n    });\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `37`', /tmp/tmprash3ixy.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => res += operand[i + 1],\n            \"-\" => res -= operand[i + 1],\n   \
    \         \"*\" => res *= operand[i + 1],\n            \"//\" => res /= operand[i\
    \ + 1],\n            \"**\" => res = res.pow(operand[i + 1] as u32),\n       \
    \     _ => unreachable!(),\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3onrldog.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op: Vec<Box<Fn(isize, isize) ->\
    \ isize>> = vec![];\n    for o in operator {\n        match o.as_str() {\n   \
    \         \"+\" => op.push(Box::new(|a, b| a + b)),\n            \"-\" => op.push(Box::new(|a,\
    \ b| a - b)),\n            \"*\" => op.push(Box::new(|a, b| a * b)),\n       \
    \     \"//\" => op.push(Box::new(|a, b| a / b)),\n            \"**\" => op.push(Box::new(|a,\
    \ b| a.pow(b as u32))),\n            _ => return 0,\n        }\n    }\n    op.iter().rev().fold(operand.pop().unwrap(),\
    \ |a, f| f(a, operand.pop().unwrap()))\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: trait objects without an explicit `dyn` are deprecated\n  -->\
    \ /tmp/tmpg83wf8_f.rs:20:25\n   |\n20 |     let mut op: Vec<Box<Fn(isize, isize)\
    \ -> isize>> = vec![];\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(bare_trait_objects)]` on by default\n   = warning: this\
    \ is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n\
    \   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    help: use `dyn`\n   |\n20 -     let mut op: Vec<Box<Fn(isize, isize) -> isize>>\
    \ = vec![];\n20 +     let mut op: Vec<Box<dyn Fn(isize, isize) -> isize>> = vec![];\n\
    \   | \n\nerror[E0596]: cannot borrow `operand` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpg83wf8_f.rs:31:62\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \             ------- help: consider changing this to be mutable: `mut operand`\n\
    ...\n31 |     op.iter().rev().fold(operand.pop().unwrap(), |a, f| f(a, operand.pop().unwrap()))\n\
    \   |                                                              ^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `operand` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmpg83wf8_f.rs:31:26\n   |\n19\
    \ | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |\
    \                                      ------- help: consider changing this to\
    \ be mutable: `mut operand`\n...\n31 |     op.iter().rev().fold(operand.pop().unwrap(),\
    \ |a, f| f(a, operand.pop().unwrap()))\n   |                          ^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut it = operand.iter();\n    let mut\
    \ res = *it.next().unwrap();\n    for op in operator {\n        let op2 = *it.next().unwrap();\n\
    \        res = match op.as_str() {\n            \"+\" => res + op2,\n        \
    \    \"-\" => res - op2,\n            \"*\" => res * op2,\n            \"//\"\
    \ => res / op2,\n            \"**\" => res.pow(op2 as u32),\n            _ =>\
    \ panic!(\"Invalid operator {}\", op),\n        };\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp38454iy1.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut total = operand[0];\n    for i\
    \ in 0..operator.len() {\n        if operator[i] == \"+\" {\n            total\
    \ += operand[i + 1];\n        } else if operator[i] == \"-\" {\n            total\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            total\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            total\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            total\
    \ = total.pow(operand[i + 1] as u32);\n        }\n    }\n    total\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpd8lwemy5.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut ans = operand[0];\n    for i in\
    \ 0..operator.len() {\n        let op = operator[i].as_str();\n        let op_l\
    \ = operand[i];\n        let op_r = operand[i + 1];\n        if op == \"+\" {\n\
    \            ans += op_r;\n        } else if op == \"-\" {\n            ans -=\
    \ op_r;\n        } else if op == \"*\" {\n            ans *= op_r;\n        }\
    \ else if op == \"//\" {\n            ans /= op_r;\n        } else if op == \"\
    **\" {\n            ans = ans.pow(op_r as u32);\n        }\n    }\n    ans\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppoycb2dg.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    for i in 0..operator.len() {\n        let operand1 = stack.pop().unwrap();\n\
    \        let operand2 = operand[i + 1];\n        match operator[i].as_str() {\n\
    \            \"+\" => stack.push(operand1 + operand2),\n            \"-\" => stack.push(operand1\
    \ - operand2),\n            \"*\" => stack.push(operand1 * operand2),\n      \
    \      \"//\" => stack.push(operand1 / operand2),\n            \"**\" => stack.push(operand1.pow(operand2\
    \ as u32)),\n            _ => {}\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp9oiew9pk.rs:22:36\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Write your code here\n    let mut stack:\
    \ Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < operand.len() {\n\
    \        stack.push(operand[i]);\n        i += 1;\n    }\n    i = 0;\n    while\
    \ i < operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => {\n                let y = stack.pop().unwrap();\n                let x =\
    \ stack.pop().unwrap();\n                stack.push(x + y);\n            }\n \
    \           \"-\" => {\n                let y = stack.pop().unwrap();\n      \
    \          let x = stack.pop().unwrap();\n                stack.push(x - y);\n\
    \            }\n            \"*\" => {\n                let y = stack.pop().unwrap();\n\
    \                let x = stack.pop().unwrap();\n                stack.push(x *\
    \ y);\n            }\n            \"/\" => {\n                let y = stack.pop().unwrap();\n\
    \                let x = stack.pop().unwrap();\n                stack.push(x /\
    \ y);\n            }\n            \"^\" => {\n                let y = stack.pop().unwrap();\n\
    \                let x = stack.pop().unwrap();\n                stack.push(x.pow(y\
    \ as u32));\n            }\n            _ => {\n                println!(\"Operator\
    \ {} not supported!\", operator[i]);\n            }\n        }\n        i += 1;\n\
    \    }\n    stack.pop().unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: "Operator ** not supported!\n"
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `23`,\n right: `37`', /tmp/tmpnmzuaqm4.rs:66:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operator.len() == 0 || operand.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut result = operand[0];\n    for\
    \ i in 0..operator.len() {\n        match operator[i].as_str() {\n           \
    \ \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => println!(\"Invalid Operator\"),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphxwu4owz.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let num = operand[i + 1];\n  \
    \      match op.as_str() {\n            \"+\" => result += num,\n            \"\
    -\" => result -= num,\n            \"*\" => result *= num,\n            \"//\"\
    \ => result /= num,\n            \"**\" => result = result.pow(num as u32),\n\
    \            _ => {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2lr5evml.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand = operand;\n    for i in\
    \ 0..operator.len() {\n        let op = &operator[i];\n        match op.as_str()\
    \ {\n            \"+\" => operand[i+1] = operand[i] + operand[i+1],\n        \
    \    \"-\" => operand[i+1] = operand[i] - operand[i+1],\n            \"*\" =>\
    \ operand[i+1] = operand[i] * operand[i+1],\n            \"//\" => operand[i+1]\
    \ = operand[i] / operand[i+1],\n            \"**\" => operand[i+1] = operand[i].pow(operand[i+1]\
    \ as u32),\n            _ => unreachable!(),\n        }\n    }\n    operand[operand.len()-1]\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2plzbqa2.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut num =\
    \ operand[0];\n    for i in 0..operand.len() - 1 {\n        match operator[i].as_str()\
    \ {\n            \"+\" => num += operand[i + 1],\n            \"-\" => num -=\
    \ operand[i + 1],\n            \"*\" => num *= operand[i + 1],\n            \"\
    //\" => num /= operand[i + 1],\n            \"**\" => num = num.pow(operand[i\
    \ + 1] as u32),\n            _ => return result,\n        }\n    }\n    result\
    \ = num;\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfxrlwh5r.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => result = operand[i + 1],\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvsqad1ck.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ v) in operator.iter().enumerate() {\n        match v.as_str() {\n          \
    \  \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => unreachable!(),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdx91urdr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let op: Vec<fn(isize, isize) -> isize>\
    \ = vec![\n        |a, b| a + b,\n        |a, b| a - b,\n        |a, b| a * b,\n\
    \        |a, b| a / b,\n        |a, b| a.pow(b as u32),\n    ];\n    let mut stack:\
    \ Vec<isize> = Vec::new();\n    for i in 0..operator.len() {\n        let op1\
    \ = operand[i];\n        let op2 = operand[i + 1];\n        let index = match\
    \ operator[i].as_str() {\n            \"+\" => 0,\n            \"-\" => 1,\n \
    \           \"*\" => 2,\n            \"/\" => 3,\n            \"**\" => 4,\n \
    \           _ => panic!(\"unknown operator {}\", operator[i]),\n        };\n \
    \       stack.push(op[index](op1, op2));\n    }\n    let mut result = stack[0];\n\
    \    for i in 1..stack.len() {\n        result = stack[i];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpljkmoexr.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operand.iter().zip(operator.iter()).fold(operand[0],\
    \ |acc, (op2, op)| {\n        match op.as_str() {\n            \"+\" => acc +\
    \ op2,\n            \"-\" => acc - op2,\n            \"*\" => acc * op2,\n   \
    \         \"/\" => acc / op2,\n            \"^\" => acc.pow(*op2 as u32),\n  \
    \          _ => panic!(\"Unknown operator {}\", op),\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Unknown operator **', /tmp/tmp72ju1fiw.rs:27:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut ops = operator.iter().cloned().map(|s|\
    \ {\n        match s.as_str() {\n            \"+\" => Operator::Add,\n       \
    \     \"-\" => Operator::Sub,\n            \"*\" => Operator::Mul,\n         \
    \   \"/\" => Operator::Div,\n            \"**\" => Operator::Pow,\n          \
    \  _ => panic!(\"Unexpected operator\"),\n        }\n    });\n    let mut res\
    \ = operand[0];\n    for op in operand.iter().skip(1) {\n        let operator\
    \ = ops.next().unwrap();\n        res = eval(res, operator, *op);\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operator`\n  -->\
    \ /tmp/tmp_2hv6uyz.rs:22:20\n   |\n22 |             \"+\" => Operator::Add,\n\
    \   |                    ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmp_2hv6uyz.rs:23:20\n\
    \   |\n23 |             \"-\" => Operator::Sub,\n   |                    ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmp_2hv6uyz.rs:24:20\n   |\n24 |    \
    \         \"*\" => Operator::Mul,\n   |                    ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmp_2hv6uyz.rs:25:20\n   |\n25 |             \"/\" => Operator::Div,\n\
    \   |                    ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmp_2hv6uyz.rs:26:21\n\
    \   |\n26 |             \"**\" => Operator::Pow,\n   |                     ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0425]: cannot find function `eval`\
    \ in this scope\n  --> /tmp/tmp_2hv6uyz.rs:33:15\n   |\n33 |         res = eval(res,\
    \ operator, *op);\n   |               ^^^^ not found in this scope\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    stack.push(operand[0]);\n    let mut i = 0;\n    while i < operator.len()\
    \ {\n        match operator[i].as_str() {\n            \"+\" => stack.push(operand[i\
    \ + 1]),\n            \"-\" => stack.push(-operand[i + 1]),\n            \"*\"\
    \ => {\n                let val = stack.pop().unwrap();\n                stack.push(val\
    \ * operand[i + 1]);\n            }\n            \"//\" => {\n               \
    \ let val = stack.pop().unwrap();\n                stack.push(val / operand[i\
    \ + 1]);\n            }\n            \"**\" => {\n                let val = stack.pop().unwrap();\n\
    \                stack.push(val.pow(operand[i + 1] as u32));\n            }\n\
    \            _ => {}\n        }\n        i += 1;\n    }\n    stack.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operand.len() - 1 {\n        match operator[i].as_str() {\n          \
    \  \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpf3v1w9jq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut answer = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => answer += operand[i + 1],\n            \"-\" => answer -= operand[i + 1],\n\
    \            \"*\" => answer *= operand[i + 1],\n            \"//\" => answer\
    \ /= operand[i + 1],\n            \"**\" => answer = answer.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Operator unknown\"),\n        }\n    }\n\
    \    answer\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjuxrydn_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        match op.as_str() {\n        \
    \    \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"unknown operator: {}\", op),\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqy1qtrv8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    operator.iter().fold(operand[0], |acc,\
    \ x| {\n        match x.as_str() {\n            \"+\" => acc + operand[x.len()],\n\
    \            \"-\" => acc - operand[x.len()],\n            \"*\" => acc * operand[x.len()],\n\
    \            \"//\" => acc / operand[x.len()],\n            \"**\" => acc.pow(operand[x.len()]\
    \ as u32),\n            _ => 0,\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `51`,\n right: `37`', /tmp/tmpi63htdqk.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for index\
    \ in 1..operand.len() {\n        match operator[index - 1].as_str() {\n      \
    \      \"+\" => result += operand[index],\n            \"-\" => result -= operand[index],\n\
    \            \"*\" => result *= operand[index],\n            \"//\" => result\
    \ /= operand[index],\n            \"**\" => result = result.pow(operand[index]\
    \ as u32),\n            _ => panic!(\"unsupported operator\"),\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpko4321os.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut exp = operand[0].to_string();\n\
    \    for i in 0..operator.len() {\n        exp.push_str(&format!(\" {} {}\", operator[i],\
    \ operand[i + 1]));\n    }\n    do_eval(exp)\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `do_eval` in this scope\n  --> /tmp/tmplydbf3_2.rs:24:5\n\
    \   |\n24 |     do_eval(exp)\n   |     ^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    assert!(operator.len() == operand.len()\
    \ - 1);\n    assert!(operator.len() >= 1);\n    assert!(operand.len() >= 2);\n\
    \    match operator.len() {\n        1 => operand[0] + operand[1],\n        2\
    \ => operand[0] + operand[1] + operand[2],\n        3 => operand[0] + operand[1]\
    \ + operand[2] + operand[3],\n        4 => operand[0] + operand[1] + operand[2]\
    \ + operand[3] + operand[4],\n        5 => operand[0] + operand[1] + operand[2]\
    \ + operand[3] + operand[4] + operand[5],\n        6 => operand[0] + operand[1]\
    \ + operand[2] + operand[3] + operand[4] + operand[5] + operand[6],\n        7\
    \ => operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5]\
    \ + operand[6] + operand[7],\n        8 => operand[0] + operand[1] + operand[2]\
    \ + operand[3] + operand[4] + operand[5] + operand[6] + operand[7] + operand[8],\n\
    \        9 => operand[0] + operand[1] + operand[2] + operand[3] + operand[4] +\
    \ operand[5] + operand[6] + operand[7] + operand[8] + operand[9],\n        10\
    \ => operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5]\
    \ + operand[6] + operand[7] + operand[8] + operand[9] + operand[10],\n       \
    \ 11 => operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5]\
    \ + oper\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpak3s_r1x.rs:42:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n...\n23 |     match operator.len() {\n   |             \
    \             - this delimiter might not be properly closed...\n...\n35 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n42 | }\n\
    \   |   ^\n\nerror[E0425]: cannot find value `oper` in this scope\n  --> /tmp/tmpak3s_r1x.rs:34:93\n\
    \   |\n34 |         11 => operand[0] + operand[1] + operand[2] + operand[3] +\
    \ operand[4] + operand[5] + oper\n   |                                       \
    \                                                      ^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpak3s_r1x.rs:23:5\n  \
    \ |\n23 | /     match operator.len() {\n24 | |         1 => operand[0] + operand[1],\n\
    25 | |         2 => operand[0] + operand[1] + operand[2],\n26 | |         3 =>\
    \ operand[0] + operand[1] + operand[2] + operand[3],\n...  |\n34 | |         11\
    \ => operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5]\
    \ + oper\n35 | | }\n   | | ^- help: consider using a semicolon here\n   | |_|\n\
    \   |   expected `()`, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpak3s_r1x.rs:19:62\n   |\n19 | fn do_algebra(operator: Vec<String>, operand:\
    \ Vec<isize>) -> isize {\n   |    ----------                                 \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let left = operand[i];\n     \
    \   let right = operand[i + 1];\n        match op.as_str() {\n            \"+\"\
    \ => result = left + right,\n            \"-\" => result = left - right,\n   \
    \         \"*\" => result = left * right,\n            \"//\" => result = left\
    \ / right,\n            \"**\" => result = left.pow(right as u32),\n         \
    \   _ => unreachable!(),\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpon61dgvc.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (x,\
    \ y) in operator.iter().zip(operand.iter().skip(1)) {\n        match x.as_str()\
    \ {\n            \"+\" => result += y,\n            \"-\" => result -= y,\n  \
    \          \"*\" => result *= y,\n            \"/\" => result /= y,\n        \
    \    \"^\" => result = result.pow(*y as u32),\n            _ => (),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `37`', /tmp/tmpclpr4oe8.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < operand.len() {\n        if i == 0 {\n    \
    \        result = operand[i];\n        } else {\n            match operator[j].as_str()\
    \ {\n                \"+\" => result += operand[i],\n                \"-\" =>\
    \ result -= operand[i],\n                \"*\" => result *= operand[i],\n    \
    \            \"//\" => result /= operand[i],\n                \"**\" => result\
    \ = result.pow(operand[i] as u32),\n                _ => {}\n            }\n \
    \           j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6k2udkne.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand = operand;\n    for (operator,\
    \ operand) in operator.iter().zip(operand.iter_mut()) {\n        match operator.as_str()\
    \ {\n            \"+\" => *operand += *operand + *operand,\n            \"-\"\
    \ => *operand -= *operand + *operand,\n            \"*\" => *operand *= *operand\
    \ + *operand,\n            \"//\" => *operand /= *operand + *operand,\n      \
    \      \"**\" => *operand = *operand.pow(*operand as u32),\n            _ => return\
    \ -1,\n        }\n    }\n    operand[0]\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpa9td2o61.rs:27:32\n\
    \   |\n27 |             \"**\" => *operand = *operand.pow(*operand as u32),\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = 0;\n    let mut temp_operand\
    \ = operand.clone();\n    for operator in operator {\n        match operator.as_str()\
    \ {\n            \"+\" => result += temp_operand.remove(0),\n            \"-\"\
    \ => result -= temp_operand.remove(0),\n            \"*\" => result *= temp_operand.remove(0),\n\
    \            \"//\" => result /= temp_operand.remove(0),\n            \"**\" =>\
    \ result = result.pow(temp_operand.remove(0) as u32),\n            _ => panic!(\"\
    Unknown operator {}\", operator),\n        }\n    }\n    result += temp_operand.remove(0);\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpywbiadn9.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // write code here\n    let mut stack:\
    \ Vec<isize> = Vec::new();\n    for (i, s) in operator.iter().enumerate() {\n\
    \        match s.as_str() {\n            \"+\" => {\n                let j = operand[i];\n\
    \                let k = operand[i + 1];\n                stack.push(j + k);\n\
    \            }\n            \"-\" => {\n                let j = operand[i];\n\
    \                let k = operand[i + 1];\n                stack.push(j - k);\n\
    \            }\n            \"*\" => {\n                let j = operand[i];\n\
    \                let k = operand[i + 1];\n                stack.push(j * k);\n\
    \            }\n            \"//\" => {\n                let j = operand[i];\n\
    \                let k = operand[i + 1];\n                stack.push(j / k);\n\
    \            }\n            \"**\" => {\n                let j = operand[i];\n\
    \                let k = operand[i + 1];\n                stack.push(j.pow(k as\
    \ u32));\n            }\n            _ => (),\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmp179_pjj9.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let operation = &operator[i];\n        let tmp\
    \ = &operand[i + 1];\n        match operation.as_str() {\n            \"+\" =>\
    \ result += tmp,\n            \"-\" => result -= tmp,\n            \"*\" => result\
    \ *= tmp,\n            \"//\" => result /= tmp,\n            \"**\" => result\
    \ = result.pow(*tmp as u32),\n            _ => panic!(\"invalid operation\"),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplaoifrcv.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i + 1];\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            result\
    \ = result.pow(operand[i + 1] as u32);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpy9fnitmm.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    if operand.len() < 2 {\n        panic!(\"\
    Operand list must have at least two operands.\");\n    }\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"Length of operator list must be equal\
    \ to the length of operand list minus one.\");\n    }\n    let mut expression\
    \ = String::new();\n    for (op, opd) in operator.iter().zip(operand.iter()) {\n\
    \        expression.push_str(&format!(\"{} {} \", op, opd));\n    }\n    let mut\
    \ tokens = expression.split_whitespace();\n    let mut next_token = || tokens.next().unwrap();\n\
    \    let mut num_stack = vec![];\n    while let Some(token) = next_token() {\n\
    \        if let Ok(opnd) = token.parse::<isize>() {\n            num_stack.push(opnd);\n\
    \        } else {\n            let b = num_stack.pop().unwrap();\n           \
    \ let a = num_stack.pop().unwrap();\n            match token {\n             \
    \   \"+\" => num_stack.push(a + b),\n                \"-\" => num_stack.push(a\
    \ - b),\n                \"*\" => num_stack.push(a * b),\n                \"//\"\
    \ => num_stack.push(a / b),\n                \"**\" => num_stack.push(a.pow(b\
    \ as u32)),\n                _ => unreachable!()\n            }\n        }\n \
    \   }\n    num_stack.pop().unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3l1ivdiz.rs:33:15\n   |\n\
    33 |     while let Some(token) = next_token() {\n   |               ^^^^^^^^^^^\
    \   ------------ this expression has type `&str`\n   |               |\n   | \
    \              expected `str`, found enum `Option`\n   |\n   = note: expected\
    \ type `str`\n              found enum `Option<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut output: isize = operand[0];\n \
    \   for (i, op) in operator.iter().enumerate() {\n        let tmp = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => output += tmp,\n  \
    \          \"-\" => output -= tmp,\n            \"*\" => output *= tmp,\n    \
    \        \"//\" => output /= tmp,\n            \"**\" => output = output.pow(tmp\
    \ as u32),\n            _ => {}\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_2lezauv.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp73r9dhtv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for i in\
    \ 0..operator.len() {\n        let op: String = operator[i].chars().collect();\n\
    \        match op.as_str() {\n            \"+\" => res += operand[i + 1],\n  \
    \          \"-\" => res -= operand[i + 1],\n            \"*\" => res *= operand[i\
    \ + 1],\n            \"//\" => res /= operand[i + 1],\n            \"**\" => res\
    \ = res.pow(operand[i + 1] as u32),\n            _ => {}\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9ocizglk.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = vec![];\n \
    \   for i in 0..operator.len() {\n        let oper = match operator[i].as_str()\
    \ {\n            \"+\" => &Operator::Add,\n            \"-\" => &Operator::Sub,\n\
    \            \"*\" => &Operator::Mul,\n            \"/\" => &Operator::Div,\n\
    \            \"^\" => &Operator::Pow,\n            _ => panic!(\"Invalid operator\"\
    ),\n        };\n        match oper {\n            Operator::Add => {\n       \
    \         let opr = operand[i + 1];\n                let opr1 = operand[i];\n\
    \                stack.push(opr + opr1);\n            }\n            Operator::Sub\
    \ => {\n                let opr = operand[i + 1];\n                let opr1 =\
    \ operand[i];\n                stack.push(opr - opr1);\n            }\n      \
    \      Operator::Mul => {\n                let opr = operand[i + 1];\n       \
    \         let opr1 = operand[i];\n                stack.push(opr * opr1);\n  \
    \          }\n            Operator::Div => {\n                let opr = operand[i\
    \ + 1];\n                let opr1 = operand[i];\n                stack.push(opr\
    \ / opr1);\n            }\n            Operator::Pow => {\n                let\
    \ opr = operand[i + 1];\n                let opr1 = operand[i];\n            \
    \    stack.push(opr.pow(opr1 as u32));\n            }\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operator`\n  -->\
    \ /tmp/tmpxja0s786.rs:23:21\n   |\n23 |             \"+\" => &Operator::Add,\n\
    \   |                     ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpxja0s786.rs:24:21\n\
    \   |\n24 |             \"-\" => &Operator::Sub,\n   |                     ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpxja0s786.rs:25:21\n   |\n25 |    \
    \         \"*\" => &Operator::Mul,\n   |                     ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpxja0s786.rs:26:21\n   |\n26 |             \"/\" => &Operator::Div,\n\
    \   |                     ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpxja0s786.rs:27:21\n\
    \   |\n27 |             \"^\" => &Operator::Pow,\n   |                     ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpxja0s786.rs:31:13\n   |\n31 |    \
    \         Operator::Add => {\n   |             ^^^^^^^^ use of undeclared type\
    \ `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpxja0s786.rs:36:13\n   |\n36 |             Operator::Sub => {\n\
    \   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpxja0s786.rs:41:13\n\
    \   |\n41 |             Operator::Mul => {\n   |             ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpxja0s786.rs:46:13\n   |\n46 |             Operator::Div => {\n\
    \   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpxja0s786.rs:51:13\n\
    \   |\n51 |             Operator::Pow => {\n   |             ^^^^^^^^ use of undecl"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        if op == \"\
    +\" {\n            result += operand[i + 1];\n        } else if op == \"-\" {\n\
    \            result -= operand[i + 1];\n        } else if op == \"*\" {\n    \
    \        result *= operand[i + 1];\n        } else if op == \"//\" {\n       \
    \     result /= operand[i + 1];\n        } else if op == \"**\" {\n          \
    \  result = result.pow(operand[i + 1] as u32);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppdca2ixp.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let n = operand[i + 1];\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += n,\n            \"-\" => result -= n,\n  \
    \          \"*\" => result *= n,\n            \"//\" => result /= n,\n       \
    \     \"**\" => result = result.pow(n as u32),\n            _ => {}\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptb5gfv5c.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ oper) in operator.iter().enumerate() {\n        match oper.as_str() {\n    \
    \        \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Illegal operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpc8brkiie.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    stack.push(operand[0]);\n    for i in 1..operand.len() {\n        match operator[i\
    \ - 1].as_str() {\n            \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n\
    \            \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n       \
    \     \"*\" => stack.push(stack.pop().unwrap() * operand[i]),\n            \"\
    //\" => stack.push(stack.pop().unwrap() / operand[i]),\n            \"**\" =>\
    \ stack.push(stack.pop().unwrap().pow(operand[i] as u32)),\n            _ => {\n\
    \                return 0;\n            }\n        }\n    }\n    return stack.pop().unwrap();\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `stack` as mutable more than once at a time\n\
    \  --> /tmp/tmpwqg2puzh.rs:24:31\n   |\n24 |             \"+\" => stack.push(stack.pop().unwrap()\
    \ + operand[i]),\n   |                    -----------^^^^^^^^^^^-----------------------\n\
    \   |                    |     |    |\n   |                    |     |    second\
    \ mutable borrow occurs here\n   |                    |     first borrow later\
    \ used by call\n   |                    first mutable borrow occurs here\n   |\n\
    help: try adding a local storing this argument...\n  --> /tmp/tmpwqg2puzh.rs:24:31\n\
    \   |\n24 |             \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n\
    \   |                               ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmpwqg2puzh.rs:24:20\n   |\n\
    24 |             \"+\" => stack.push(stack.pop().unwrap() + operand[i]),\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmpwqg2puzh.rs:25:31\n\
    \   |\n25 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \   |                    -----------^^^^^^^^^^^-----------------------\n   | \
    \                   |     |    |\n   |                    |     |    second mutable\
    \ borrow occurs here\n   |                    |     first borrow later used by\
    \ call\n   |                    first mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmpwqg2puzh.rs:25:31\n\
    \   |\n25 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n\
    \   |                               ^^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmpwqg2puzh.rs:25:20\n   |\n\
    25 |             \"-\" => stack.push(stack.pop().unwrap() - operand[i]),\n   |\
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0499]:\
    \ cannot borrow `stack` as mutable more than once at a time\n  --> /tmp/tmpwqg2puzh.rs:26:31\n\
    \   |\n26 |             \"*\" => stack.push(stack.pop().unwrap() * operand[i]),\n\
    \   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let a = operand[i];\n        let\
    \ b = operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ += b,\n            \"-\" => result -= b,\n            \"*\" => result *= b,\n\
    \            \"//\" => result /= b,\n            \"**\" => result = result.pow(b\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0pxfi41m.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    for (i, op) in operator.iter().enumerate() {\n        let left = operand[i];\n\
    \        let right = operand[i + 1];\n        match op.as_str() {\n          \
    \  \"+\" => stack.push(left + right),\n            \"-\" => stack.push(left -\
    \ right),\n            \"*\" => stack.push(left * right),\n            \"//\"\
    \ => stack.push(left / right),\n            \"**\" => stack.push(left.pow(right\
    \ as u32)),\n            _ => panic!(\"Undefined operator.\"),\n        }\n  \
    \  }\n    let mut result = 0;\n    while !stack.is_empty() {\n        result +=\
    \ stack.pop().unwrap();\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `37`', /tmp/tmp555_rpot.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp79rr4prq.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    let mut operator_iter = operator.iter();\n    let mut operand_iter = operand.iter();\n\
    \    let op = operand_iter.next().unwrap();\n    stack.push(*op);\n    while let\
    \ Some(opt) = operator_iter.next() {\n        let op = operand_iter.next().unwrap();\n\
    \        if opt == \"+\" {\n            stack.push(*op);\n        } else if opt\
    \ == \"-\" {\n            stack.push(-*op);\n        } else if opt == \"*\" {\n\
    \            let v = stack.pop().unwrap();\n            stack.push(v * *op);\n\
    \        } else if opt == \"//\" {\n            let v = stack.pop().unwrap();\n\
    \            stack.push(v / *op);\n        } else if opt == \"**\" {\n       \
    \     let v = stack.pop().unwrap();\n            stack.push(v.pow(*op as u32));\n\
    \        }\n    }\n    return stack.iter().sum();\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let exp = get_exp(operator, operand);\n\
    \    exp.iter().fold(0, |total, o| total + o)\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_exp` in this scope\n  --> /tmp/tmpxv7zlkc8.rs:20:15\n\
    \   |\n20 |     let exp = get_exp(operator, operand);\n   |               ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let operator: Vec<fn(isize, isize) -> isize>\
    \ = operator.iter().map(|o| match o.as_str() {\n        \"+\" => std::ops::Add::add,\n\
    \        \"-\" => std::ops::Sub::sub,\n        \"*\" => std::ops::Mul::mul,\n\
    \        \"//\" => std::ops::Div::div,\n        \"**\" => std::ops::Pow::pow,\n\
    \        _ => unreachable!()\n    }).collect();\n    (0..operator.len()).fold(operand[0],\
    \ |acc, i| operator[i](acc, operand[i + 1]))\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: could not find `Pow` in `ops`\n  --> /tmp/tmpydmjimx5.rs:25:27\n\
    \   |\n25 |         \"**\" => std::ops::Pow::pow,\n   |                      \
    \     ^^^ could not find `Pow` in `ops`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ e) in operator.iter().enumerate() {\n        let op2 = operand[i + 1];\n   \
    \     match e.as_str() {\n            \"+\" => result += op2,\n            \"\
    -\" => result -= op2,\n            \"*\" => result *= op2,\n            \"//\"\
    \ => result /= op2,\n            \"**\" => result = result.pow(op2 as u32),\n\
    \            _ => result = 0,\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfyo82le5.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op = operand.clone();\n    for\
    \ i in 0..operator.len() {\n        let tmp = op[i] + if operator[i] == \"+\"\
    \ { op[i + 1] }\n        else if operator[i] == \"-\" { -op[i + 1] }\n       \
    \ else if operator[i] == \"*\" { op[i] * op[i + 1] }\n        else if operator[i]\
    \ == \"//\" { op[i] / op[i + 1] }\n        else { op[i].pow(op[i + 1] as u32)\
    \ };\n        op[i + 1] = tmp;\n    }\n    op[op.len() - 1]\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `55`,\n right: `37`', /tmp/tmp8g1ics5w.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let rhs = operand[i + 1];\n  \
    \      match op.as_str() {\n            \"+\" => res += rhs,\n            \"-\"\
    \ => res -= rhs,\n            \"*\" => res *= rhs,\n            \"//\" => res\
    \ /= rhs,\n            \"**\" => res = res.pow(rhs as u32),\n            _ =>\
    \ panic!(\"unknown operator: {}\", op),\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0t6_1rej.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpd5zofiq9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unexpected operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgjevhlrj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let op_list = operator\n        .iter()\n\
    \        .map(|op| match op.as_str() {\n            \"+\" => Op::Add,\n      \
    \      \"-\" => Op::Sub,\n            \"*\" => Op::Mul,\n            \"/\" =>\
    \ Op::Div,\n            \"**\" => Op::Pow,\n            _ => panic!(\"not a valid\
    \ operator\"),\n        })\n        .collect::<Vec<Op>>();\n    let mut n = operand[0];\n\
    \    for (i, op) in op_list.iter().enumerate() {\n        let k = operand[i +\
    \ 1];\n        n = match op {\n            Op::Add => n + k,\n            Op::Sub\
    \ => n - k,\n            Op::Mul => n * k,\n            Op::Div => n / k,\n  \
    \          Op::Pow => n.pow(*k as u32),\n        };\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Op`\n  --> /tmp/tmpwd8nl1sa.rs:23:20\n\
    \   |\n23 |             \"+\" => Op::Add,\n   |                    ^^ use of undeclared\
    \ type `Op`\n\nerror[E0433]: failed to resolve: use of undeclared type `Op`\n\
    \  --> /tmp/tmpwd8nl1sa.rs:24:20\n   |\n24 |             \"-\" => Op::Sub,\n \
    \  |                    ^^ use of undeclared type `Op`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Op`\n  --> /tmp/tmpwd8nl1sa.rs:25:20\n \
    \  |\n25 |             \"*\" => Op::Mul,\n   |                    ^^ use of undeclared\
    \ type `Op`\n\nerror[E0433]: failed to resolve: use of undeclared type `Op`\n\
    \  --> /tmp/tmpwd8nl1sa.rs:26:20\n   |\n26 |             \"/\" => Op::Div,\n \
    \  |                    ^^ use of undeclared type `Op`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Op`\n  --> /tmp/tmpwd8nl1sa.rs:27:21\n \
    \  |\n27 |             \"**\" => Op::Pow,\n   |                     ^^ use of\
    \ undeclared type `Op`\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `Op`\n  --> /tmp/tmpwd8nl1sa.rs:35:13\n   |\n35 |             Op::Add => n +\
    \ k,\n   |             ^^ use of undeclared type `Op`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Op`\n  --> /tmp/tmpwd8nl1sa.rs:36:13\n \
    \  |\n36 |             Op::Sub => n - k,\n   |             ^^ use of undeclared\
    \ type `Op`\n\nerror[E0433]: failed to resolve: use of undeclared type `Op`\n\
    \  --> /tmp/tmpwd8nl1sa.rs:37:13\n   |\n37 |             Op::Mul => n * k,\n \
    \  |             ^^ use of undeclared type `Op`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Op`\n  --> /tmp/tmpwd8nl1sa.rs:38:13\n   |\n38 |   \
    \          Op::Div => n / k,\n   |             ^^ use of undeclared type `Op`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Op`\n  --> /tmp/tmpwd8nl1sa.rs:39:13\n\
    \   |\n39 |             Op::Pow => n.pow(*k as u32),\n   |             ^^ use\
    \ of undeclared type `Op`\n\nerror[E0412]: cannot find type `Op` in this scope\n\
    \  --> /tmp/tmpwd8nl1sa.rs:30:24\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |              - help: you"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let temp = match operator[i].as_ref() {\n  \
    \          \"+\" => result + operand[i + 1],\n            \"-\" => result - operand[i\
    \ + 1],\n            \"*\" => result * operand[i + 1],\n            \"//\" =>\
    \ result / operand[i + 1],\n            \"**\" => result.pow(operand[i + 1] as\
    \ u32),\n            _ => result,\n        };\n        result = temp;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpn8bhc73s.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpyw11nlfk.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpkrh2s1p9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n \
    \   let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplr8i_sin.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut operand = operand;\n    let mut\
    \ algebra = String::new();\n    while let Some(op) = operator.pop() {\n      \
    \  match op.as_str() {\n            \"+\" => {\n                algebra.push_str(&format!(\"\
    +{}\", operand.pop().unwrap()));\n            }\n            \"-\" => {\n    \
    \            algebra.push_str(&format!(\"-{}\", operand.pop().unwrap()));\n  \
    \          }\n            \"*\" => {\n                algebra.push_str(&format!(\"\
    *{}\", operand.pop().unwrap()));\n            }\n            \"//\" => {\n   \
    \             algebra.push_str(&format!(\"//{}\", operand.pop().unwrap()));\n\
    \            }\n            \"**\" => {\n                algebra.push_str(&format!(\"\
    **{}\", operand.pop().unwrap()));\n            }\n            _ => panic!(\"Unknown\
    \ operator\"),\n        }\n    }\n    let mut result = format!(\"{}{}\", operand.pop().unwrap(),\
    \ algebra);\n    result.replace(\"**\", \"**(\").replace(\"//\", \"//(\").replace(\"\
    *\", \")*(\").replace(\"+\", \")+(\").replace(\"-\", \")-(\");\n    let result\
    \ = format!(\"{})\", result);\n    result.parse::<isize>().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp8pmabmlq.rs:42:9\n\
    \   |\n42 |     let mut result = format!(\"{}{}\", operand.pop().unwrap(), algebra);\n\
    \   |         ----^^^^^^\n   |         |\n   |         help: remove this `mut`\n\
    \   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0596]: cannot\
    \ borrow `operator` as mutable, as it is not declared as mutable\n  --> /tmp/tmp8pmabmlq.rs:22:26\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |               -------- help: consider changing this to be mutable: `mut\
    \ operator`\n...\n22 |     while let Some(op) = operator.pop() {\n   |       \
    \                   ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => result = 0,\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6_wmx3yy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let operators = {\n        operator\n \
    \           .iter()\n            .map(|operand| match operand.as_str() {\n   \
    \             \"+\" => Operator::Add,\n                \"-\" => Operator::Sub,\n\
    \                \"*\" => Operator::Mul,\n                \"/\" => Operator::Div,\n\
    \                \"**\" => Operator::Exp,\n                _ => panic!(\"Operator\
    \ not found\"),\n            })\n            .collect::<Vec<Operator>>()\n   \
    \ };\n\n    let mut stack = vec![];\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let operand_len = operand.len();\n    let operator_len = operators.len();\n\
    \n    while j < operand_len {\n        let operand = operand[j];\n        if i\
    \ < operator_len {\n            let operator = operators[i];\n            match\
    \ operator {\n                Operator::Add => {\n                    stack.push(operand);\n\
    \                }\n                Operator::Sub => {\n                    stack.push(-operand);\n\
    \                }\n                Operator::Mul => {\n                    stack.push(stack.pop().unwrap()\
    \ * operand);\n                }\n                Operator::Div => {\n       \
    \             stack.push(stack.pop().unwrap() / operand);\n                }\n\
    \                Operator::Exp => {\n                    stack.push(stack.pop().unwrap().pow(operand\
    \ as u32));\n                }\n            }\n            i += 1;\n        }\
    \ else {\n            stack.push(operand);\n        }\n        j += 1;\n    }\n\
    \n    let mut result = 0;\n    for v in stack {\n        result += v;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operator`\n  -->\
    \ /tmp/tmpy6m9_puq.rs:24:24\n   |\n24 |                 \"+\" => Operator::Add,\n\
    \   |                        ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpy6m9_puq.rs:25:24\n\
    \   |\n25 |                 \"-\" => Operator::Sub,\n   |                    \
    \    ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Operator`\n  --> /tmp/tmpy6m9_puq.rs:26:24\n   |\n26\
    \ |                 \"*\" => Operator::Mul,\n   |                        ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpy6m9_puq.rs:27:24\n   |\n27 |    \
    \             \"/\" => Operator::Div,\n   |                        ^^^^^^^^ use\
    \ of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Operator`\n  --> /tmp/tmpy6m9_puq.rs:28:25\n   |\n28 |               \
    \  \"**\" => Operator::Exp,\n   |                         ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpy6m9_puq.rs:45:17\n   |\n45 |                 Operator::Add =>\
    \ {\n   |                 ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpy6m9_puq.rs:48:17\n\
    \   |\n48 |                 Operator::Sub => {\n   |                 ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpy6m9_puq.rs:51:17\n   |\n51 |    \
    \             Operator::Mul => {\n   |                 ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpy6m9_puq.rs:54:17\n   |\n54 |                 Operator::Div =>\
    \ {\n   |                 ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpy6m9_puq.rs:57:17\n\
    \   |\n57 |       "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let ops: Vec<fn(isize, isize) -> isize>\
    \ = vec![add, sub, mul, floor_div, exp];\n    let mut itr = operand.iter();\n\
    \    let mut result = *itr.next().unwrap();\n    for o in operator.iter() {\n\
    \        let n = *itr.next().unwrap();\n        let f = match o.as_str() {\n \
    \           \"+\" => ops[0],\n            \"-\" => ops[1],\n            \"*\"\
    \ => ops[2],\n            \"//\" => ops[3],\n            \"**\" => ops[4],\n \
    \           _ => panic!(\"Unexpected operator\"),\n        };\n        result\
    \ = f(result, n);\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `add` in this scope\n  --> /tmp/tmpge03h4ib.rs:20:52\n\
    \   |\n20 |     let ops: Vec<fn(isize, isize) -> isize> = vec![add, sub, mul,\
    \ floor_div, exp];\n   |                                                    ^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `sub` in this scope\n\
    \  --> /tmp/tmpge03h4ib.rs:20:57\n   |\n20 |     let ops: Vec<fn(isize, isize)\
    \ -> isize> = vec![add, sub, mul, floor_div, exp];\n   |                     \
    \                                    ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `mul` in this scope\n  --> /tmp/tmpge03h4ib.rs:20:62\n   |\n\
    20 |     let ops: Vec<fn(isize, isize) -> isize> = vec![add, sub, mul, floor_div,\
    \ exp];\n   |                                                              ^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `floor_div` in this\
    \ scope\n  --> /tmp/tmpge03h4ib.rs:20:67\n   |\n20 |     let ops: Vec<fn(isize,\
    \ isize) -> isize> = vec![add, sub, mul, floor_div, exp];\n   |              \
    \                                                     ^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `exp` in this scope\n  --> /tmp/tmpge03h4ib.rs:20:78\n\
    \   |\n20 |     let ops: Vec<fn(isize, isize) -> isize> = vec![add, sub, mul,\
    \ floor_div, exp];\n   |                                                     \
    \                         ^^^ not found in this scope\n\nerror: aborting due to\
    \ 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut array: Vec<isize> = operand;\n\
    \    let mut oper: Vec<String> = operator;\n    let mut i = 0;\n    while i <\
    \ oper.len() {\n        if oper[i] == \"**\" {\n            array[i] = array[i].pow(array[i\
    \ + 1] as u32);\n            array.remove(i + 1);\n            oper.remove(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    i = 0;\n    while\
    \ i < oper.len() {\n        if oper[i] == \"//\" {\n            array[i] = array[i]\
    \ / array[i + 1];\n            array.remove(i + 1);\n            oper.remove(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    i = 0;\n    while\
    \ i < oper.len() {\n        if oper[i] == \"*\" {\n            array[i] = array[i]\
    \ * array[i + 1];\n            array.remove(i + 1);\n            oper.remove(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    i = 0;\n    while\
    \ i < oper.len() {\n        if oper[i] == \"+\" {\n            array[i] = array[i]\
    \ + array[i + 1];\n            array.remove(i + 1);\n            oper.remove(i);\n\
    \        } else if oper[i] == \"-\" {\n            array[i] = array[i] - array[i\
    \ + 1];\n            array.remove(i + 1);\n            oper.remove(i);\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    array[0]\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i + 1];\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            result\
    \ = result.pow(operand[i + 1] as u32);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpef5nxdod.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // TODO: Implement this function\n    0\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpcksg30x1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ c) in operator.iter().enumerate() {\n        match c.as_str() {\n          \
    \  \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator {}\", c),\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpbihk_th_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = operator[i].as_str();\n        let\
    \ op1 = operand[i];\n        let op2 = operand[i + 1];\n        match op {\n \
    \           \"+\" => result = result + op2,\n            \"-\" => result = result\
    \ - op2,\n            \"*\" => result = result * op2,\n            \"//\" => result\
    \ = result / op2,\n            \"**\" => result = result.pow(op2 as u32),\n  \
    \          _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0rnsyrlw.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut answer = operand[0];\n    for i\
    \ in 0..operator.len() {\n        if operator[i] == \"+\" {\n            answer\
    \ += operand[i + 1];\n        } else if operator[i] == \"-\" {\n            answer\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            answer\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            answer\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            answer\
    \ = answer.pow(operand[i + 1] as u32);\n        }\n    }\n    answer\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_272jo5g.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => unreachable!(),\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjzf6avu3.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut output = operand[0];\n    for (i,\
    \ item) in operator.iter().enumerate() {\n        let b = operand[i + 1];\n  \
    \      match item.as_str() {\n            \"+\" => output += b,\n            \"\
    -\" => output -= b,\n            \"*\" => output *= b,\n            \"//\" =>\
    \ output /= b,\n            \"**\" => output = output.pow(b as u32),\n       \
    \     _ => panic!(\"unknown operator: {}\", item),\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2nwp6q_1.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Write your code here\n    let mut result\
    \ = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str()\
    \ {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result\
    \ -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n       \
    \     \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpk1tgd9yl.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut res = operand[0];\n    for i in\
    \ 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\"\
    \ => res += operand[i + 1],\n            \"-\" => res -= operand[i + 1],\n   \
    \         \"*\" => res *= operand[i + 1],\n            \"//\" => res /= operand[i\
    \ + 1],\n            \"**\" => res = res.pow(operand[i + 1] as u32),\n       \
    \     _ => println!(\"Oops!\"),\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdpuijjqa.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        match op.as_str() {\n        \
    \    \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => {\n                println!(\"Invalid operator:\
    \ {}\", op);\n                break;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5gog31nd.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpe1qepksm.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut tmp = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let n2 = operand[i + 1];\n   \
    \     match op.as_str() {\n            \"+\" => tmp += n2,\n            \"-\"\
    \ => tmp -= n2,\n            \"*\" => tmp *= n2,\n            \"//\" => tmp /=\
    \ n2,\n            \"**\" => tmp = tmp.pow(n2 as u32),\n            _ => tmp +=\
    \ n2,\n        }\n    }\n    tmp\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpwll4x2gx.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i + 1];\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            result\
    \ = result.pow(operand[i + 1] as u32);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmpavlb91.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    use std::ops::*;\n    let mut expression\
    \ = operand[0];\n    for (p, o) in operator.iter().zip(operand.iter().skip(1))\
    \ {\n        match p.as_str() {\n            \"+\" => expression = expression\
    \ + o,\n            \"-\" => expression = expression - o,\n            \"*\" =>\
    \ expression = expression * o,\n            \"/\" => expression = expression /\
    \ o,\n            \"^\" => expression = expression.pow(*o as u32),\n         \
    \   _ => (),\n        }\n    }\n    expression\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `37`', /tmp/tmp_3tii8_h.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    // Write your code here\n    0\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmp6r32fgen.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut op_stack: Vec<isize> = vec![];\n\
    \    let mut op_stack_n: Vec<isize> = vec![];\n    for (i, oper) in operator.iter().enumerate()\
    \ {\n        match oper.as_str() {\n            \"+\" => {\n                op_stack.push(operand[i]);\n\
    \                op_stack_n.push(operand[i + 1]);\n            }\n           \
    \ \"-\" => {\n                op_stack.push(operand[i]);\n                op_stack_n.push(-operand[i\
    \ + 1]);\n            }\n            \"*\" => {\n                op_stack.push(op_stack.pop().unwrap()\
    \ * operand[i + 1]);\n                op_stack_n.push(operand[i + 1]);\n     \
    \       }\n            \"//\" => {\n                op_stack.push(op_stack.pop().unwrap()\
    \ / operand[i + 1]);\n                op_stack_n.push(operand[i + 1]);\n     \
    \       }\n            \"**\" => {\n                let prev = op_stack.pop().unwrap();\n\
    \                op_stack.push(prev.pow(operand[i + 1] as u32));\n           \
    \     op_stack_n.push(operand[i + 1]);\n            }\n            _ => println!(\"\
    Bad operator: {}\", oper),\n        }\n    }\n    let result = op_stack.iter().sum::<isize>();\n\
    \    println!(\"{:?}\", op_stack);\n    println!(\"{:?}\", op_stack_n);\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `op_stack` as mutable more than once at a time\n\
    \  --> /tmp/tmpe6pbmb26.rs:33:31\n   |\n33 |                 op_stack.push(op_stack.pop().unwrap()\
    \ * operand[i + 1]);\n   |                 --------------^^^^^^^^^^^^^^---------------------------\n\
    \   |                 |        |    |\n   |                 |        |    second\
    \ mutable borrow occurs here\n   |                 |        first borrow later\
    \ used by call\n   |                 first mutable borrow occurs here\n   |\n\
    help: try adding a local storing this argument...\n  --> /tmp/tmpe6pbmb26.rs:33:31\n\
    \   |\n33 |                 op_stack.push(op_stack.pop().unwrap() * operand[i\
    \ + 1]);\n   |                               ^^^^^^^^^^^^^^\nhelp: ...and then\
    \ using that local as the argument to this call\n  --> /tmp/tmpe6pbmb26.rs:33:17\n\
    \   |\n33 |                 op_stack.push(op_stack.pop().unwrap() * operand[i\
    \ + 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0499]: cannot borrow `op_stack` as mutable more than once at a time\n\
    \  --> /tmp/tmpe6pbmb26.rs:37:31\n   |\n37 |                 op_stack.push(op_stack.pop().unwrap()\
    \ / operand[i + 1]);\n   |                 --------------^^^^^^^^^^^^^^---------------------------\n\
    \   |                 |        |    |\n   |                 |        |    second\
    \ mutable borrow occurs here\n   |                 |        first borrow later\
    \ used by call\n   |                 first mutable borrow occurs here\n   |\n\
    help: try adding a local storing this argument...\n  --> /tmp/tmpe6pbmb26.rs:37:31\n\
    \   |\n37 |                 op_stack.push(op_stack.pop().unwrap() / operand[i\
    \ + 1]);\n   |                               ^^^^^^^^^^^^^^\nhelp: ...and then\
    \ using that local as the argument to this call\n  --> /tmp/tmpe6pbmb26.rs:37:17\n\
    \   |\n37 |                 op_stack.push(op_stack.pop().unwrap() / operand[i\
    \ + 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0499`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut acc = operand[0];\n    for (idx,\
    \ op) in operator.iter().enumerate() {\n        match op.as_str() {\n        \
    \    \"+\" => acc += operand[idx + 1],\n            \"-\" => acc -= operand[idx\
    \ + 1],\n            \"*\" => acc *= operand[idx + 1],\n            \"//\" =>\
    \ acc /= operand[idx + 1],\n            \"**\" => acc = acc.pow(operand[idx +\
    \ 1] as u32),\n            _ => unreachable!()\n        }\n    }\n    acc\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgtonqx7f.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
