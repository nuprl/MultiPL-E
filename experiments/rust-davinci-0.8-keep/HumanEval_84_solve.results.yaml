name: HumanEval_84_solve
language: rust
results:
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp76c4hpul.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut i = N;\n    let mut binary = \"\".to_string();\n    while i >\
    \ 0 {\n        binary.push_str(&((i % 2).to_string()));\n        i = i / 2;\n\
    \    }\n    let number: i64 = binary.parse().unwrap();\n    number.to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1011111\"`,\n right: `\"1\"`', /tmp/tmpkgc01_t0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut res = vec![];\n    while N > 0 {\n      \
    \  res.push(N & 1);\n        N = N >> 1;\n    }\n    res.iter().rev().fold(String::new(),\
    \ |s, i| s + &i.to_string())\n}\n\nfn main() {\n    let candidate = solve;\n \
    \   assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpp3g870p0.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp_b0sgcj8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        sum += c.to_digit(10).unwrap();\n    }\n    sum.to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmps7wlkm4y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    N.to_string(2)\n        .chars()\n        .map(|x| x.to_digit(10).unwrap())\n\
    \        .sum::<u32>()\n        .to_string()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpu65jszv_.rs:12:7\n     |\n12   |     N.to_string(2)\n     | \
    \      ^^^^^^^^^ - supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut a = 0;\n    let mut b = N;\n    while b > 0 {\n        a += b\
    \ % 2;\n        b /= 2;\n    }\n    a.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpraurfybq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = vec![];\n    let mut N = N;\n    while N > 0 {\n   \
    \     result.push(N % 2);\n        N /= 2;\n    }\n    result.iter().map(|c| format!(\"\
    {}\", c)).collect::<Vec<String>>().join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmp1irqfvax.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp80hm29s3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let digits: Vec<String> = binary_digits(N);\n    let sum: usize = digits.iter().map(|x|\
    \ x.parse::<usize>().unwrap()).sum();\n    format!(\"{}\", sum)\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `binary_digits` in this scope\n  -->\
    \ /tmp/tmpzv_wdhh1.rs:12:31\n   |\n12 |     let digits: Vec<String> = binary_digits(N);\n\
    \   |                               ^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut bin = String::new();\n    let mut remaining = N;\n    while remaining\
    \ > 0 {\n        if remaining % 2 == 0 {\n            bin.push('0');\n       \
    \ } else {\n            bin.push('1');\n        }\n        remaining /= 2;\n \
    \   }\n    bin.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp02p2tdce.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // Write your code here\n    let binary_number: Vec<u8> =  format!(\"\
    {:b}\", N).chars().map(|d| d.to_digit(10).unwrap() as u8).collect();\n    format!(\"\
    {}\", binary_number.iter().sum::<u8>())\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpm8c1u2t0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // Your code here.\n\n    let binary = format!(\"{:b}\", N);\n    let\
    \ sum = binary.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n    format!(\"\
    {:b}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmp8n3wxi7u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmphrtwemaw.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    return format!(\"{:b}\", N)\n        .chars()\n        .map(|d| d.to_digit(10).unwrap())\n\
    \        .sum::<u32>()\n        .to_string();\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp9ijguxrn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut res = String::new();\n    let mut N = N;\n    while N > 0 {\n\
    \        res.push(if N % 2 == 0 { '0' } else { '1' });\n        N /= 2;\n    }\n\
    \    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpbp5oixui.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpnarbycwu.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).into_bytes().iter().map(|&n| (n - b'0') as isize).sum::<isize>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp7_jihrhx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        let remainder = N % 2;\n        result.push_str(&remainder.to_string());\n\
    \        N = N / 2;\n    }\n    // reverse string\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp5noow8vf.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // TODO\n    let mut result = 0;\n    let mut n = N;\n    let mut count\
    \ = 0;\n    let mut b = 0;\n    while n > 0 {\n        b = n % 2;\n        result\
    \ += b;\n        n = n / 2;\n        count += 1;\n    }\n    let mut s = String::new();\n\
    \    while count > 0 {\n        s.push_str(&result.to_string());\n        count\
    \ -= 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6666666666\"`,\n right: `\"1\"`', /tmp/tmpjsr60usv.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut a = N;\n    let mut res = String::new();\n    let mut digits\
    \ = Vec::new();\n    while a != 0 {\n        digits.push(a % 2);\n        a /=\
    \ 2;\n    }\n    for i in 0..digits.len() {\n        res.push_str(&digits[i].to_string());\n\
    \    }\n    return res;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpn3_lfqo_.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpj8jrdna0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |sum, ch| sum + ch.to_digit(10).unwrap()\
    \ as isize)\n        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpb3xgfove.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + (x as isize - 48))\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp7inom96s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = \"\".to_string();\n    let mut N = N;\n    while N >\
    \ 0 {\n        let reminder = N % 2;\n        N = N / 2;\n        result = format!(\"\
    {}{}\", reminder, result);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpzcaqzr0x.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let n = N.to_string(2);\n    n.chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap()).to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp65d3s43q.rs:12:15\n     |\n12   |     let n = N.to_string(2);\n\
    \     |               ^^^^^^^^^ - supplied 1 argument\n     |               |\n\
    \     |               expected 0 arguments\n     |\nnote: associated function\
    \ defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    String::from(format!(\"{:b}\", N).chars().fold(0, |acc, a| {\n      \
    \  match a {\n            '0' => acc,\n            '1' => acc + 1,\n         \
    \   _ => acc\n        }\n    }).to_string())\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpu13voonv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = N;\n    let mut o = String::new();\n    while s > 0 {\n \
    \       o.push_str(&(s % 2).to_string());\n        s /= 2;\n    }\n    o.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmputzfqyai.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpz1qy8u0e.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut answer = 0;\n    let mut n = N;\n    while n > 0 {\n        answer\
    \ += n % 2;\n        n /= 2;\n    }\n    return answer.to_string();\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpr08bd2kw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // write your code here\n    let mut bin = Vec::new();\n    let mut j\
    \ = N;\n    while j > 0 {\n        let k = j % 2;\n        bin.push(k);\n    \
    \    j = j / 2;\n    }\n    bin.reverse();\n    bin.iter().map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpbbx6_pl8.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp7bbdl0n9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut bin: String = format!(\"{:b}\", N);\n    let mut total: isize\
    \ = 0;\n    for digit in bin.chars() {\n        total += digit.to_digit(10).unwrap()\
    \ as isize;\n    }\n    format!(\"{:b}\", total)\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmpyetjzuyx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut res = \"\".to_string();\n    while n > 0\
    \ {\n        let rem = n % 2;\n        res = rem.to_string() + &res;\n       \
    \ n = n / 2;\n    }\n    let mut sum = 0;\n    for c in res.chars() {\n      \
    \  sum += c.to_digit(10).unwrap();\n    }\n    sum.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpz38ngr85.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut rem = N;\n    while rem\
    \ > 0 {\n        let res = rem % 2;\n        result.push_str(&res.to_string());\n\
    \        rem = rem / 2;\n    }\n    let mut sum = 0;\n    for c in result.chars()\
    \ {\n        sum += c.to_digit(10).unwrap();\n    }\n    sum.to_string()\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpvt8l3y1v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = N;\n    let mut r = 0;\n    let mut result = \"\".to_string();\n\
    \    loop {\n        if s == 0 {\n            break;\n        }\n        r = s\
    \ % 2;\n        s = s / 2;\n        result = format!(\"{}{}\", r, result);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0ja9945k.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3fdj3vrq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = \"\".to_string();\n    let mut n = N;\n    while n >\
    \ 0 {\n        let digit = n % 2;\n        result = format!(\"{}{}\", digit, result);\n\
    \        n = n / 2;\n    }\n    let mut sum = 0;\n    for ch in result.chars()\
    \ {\n        sum += ch.to_digit(10).unwrap();\n    }\n    return sum.to_string();\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3gc4_9jh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut number: isize = N;\n    let mut answer: String = String::new();\n\
    \    let mut sum: isize = 0;\n    while number != 0 {\n        answer.push_str(&format!(\"\
    {}\", number % 2));\n        number /= 2;\n    }\n    answer.chars().for_each(|x|\
    \ sum += x.to_digit(10).unwrap() as isize);\n    return format!(\"{}\", sum);\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp7g62ilf1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpogro39z0.rs:12:37\n   |\n\
    12 |     format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n\
    \   |                                     ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                     |\n   |           \
    \                          expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpogro39z0.rs:12:55\n   |\n12 |     format!(\"\
    {:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap())\n   |     \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut counter = N;\n    while\
    \ counter > 0 {\n        if counter % 2 == 0 {\n            result = \"0\".to_string()\
    \ + &result;\n        } else {\n            result = \"1\".to_string() + &result;\n\
    \        }\n        counter /= 2;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpj4kfamqd.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut total: u64 = 0;\n    let mut result = String::new();\n    let\
    \ mut temp = N;\n    while temp > 0 {\n        let remainder = temp % 2;\n   \
    \     if remainder == 1 {\n            total += 1;\n        }\n        result.push_str(&remainder.to_string());\n\
    \        temp /= 2;\n    }\n    result.reverse();\n    format!(\"{}\", total)\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpgru_wnva.rs:23:12\n   |\n23 |     result.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmppb24j_n2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpbkx9o79m.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    loop {\n   \
    \     result.push_str(&format!(\"{}\", N % 2));\n        N /= 2;\n        if N\
    \ == 0 {\n            break;\n        }\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmphclhn_g5.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary = format!(\"{:b}\", N);\n    let sum = binary.chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>();\n    format!(\"{:b}\", sum)\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmps34vf_dx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut res = String::new();\n    let mut n = N;\n    while n != 0 {\n\
    \        res.push(('0' as u8 + (n % 2) as u8) as char);\n        n /= 2;\n   \
    \ }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpg4oannse.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    N.to_string()\n        .chars()\n        .map(|c| {\n            let\
    \ i = c.to_digit(10).unwrap();\n            format!(\"{:b}\", i)\n        })\n\
    \        .collect::<Vec<String>>()\n        .join(\"\")\n}\n\nfn main() {\n  \
    \  let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmphyl3abg1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let string_binary = format!(\"{:b}\", N);\n    let mut sum: u8 = 0;\n\
    \    for c in string_binary.chars() {\n        let bit: u8 = c.to_digit(10).unwrap()\
    \ as u8;\n        sum += bit;\n    }\n    sum.to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp0cox8pas.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut output = String::new();\n    while N > 0\
    \ {\n        let remainder = N % 2;\n        let output_char = match remainder\
    \ {\n            0 => '0',\n            1 => '1',\n            _ => '0',\n   \
    \     };\n        output.push(output_char);\n        N = N / 2;\n    }\n    return\
    \ output;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmptqd2rbfj.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = N.to_string();\n    let mut result = String::new();\n   \
    \ while s.parse::<isize>().unwrap() > 0 {\n        let mut res = String::new();\n\
    \        let mut d = s.parse::<isize>().unwrap();\n        for _ in 0..s.len()\
    \ {\n            res.push_str(&(d % 2).to_string());\n            d /= 2;\n  \
    \      }\n        res = res.chars().rev().collect();\n        let mut c = 0;\n\
    \        for ch in res.chars() {\n            c += ch.to_digit(10).unwrap() as\
    \ isize;\n        }\n        result.push_str(&c.to_string());\n        s = (s.parse::<isize>().unwrap()\
    \ - 1).to_string();\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `
    `,\n right: `\"1\"`', /tmp/tmpxhsn0sgz.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for digit\
    \ in binary.chars() {\n        if digit == '1' {\n            sum += 1;\n    \
    \    }\n    }\n    format!(\"{}\", sum)\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmptvlkruam.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpth5q5im1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut number = N;\n    let mut binary_digits: Vec<i32> = Vec::new();\n\
    \    let mut binary_string = String::new();\n\n    while number > 0 {\n      \
    \  let last_digit = number % 2;\n        number = number / 2;\n        binary_digits.push(last_digit\
    \ as i32);\n    }\n\n    for i in binary_digits.iter().rev() {\n        binary_string.push_str(&i.to_string());\n\
    \    }\n\n    binary_string\n}\n\nfn main() {\n    let candidate = solve;\n  \
    \  assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp343kgw9_.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut res = 0;\n    let mut n = N;\n    while n > 0 {\n        res\
    \ += n % 2;\n        n /= 2;\n    }\n    res.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp8e2xt6la.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut res = String::new();\n    while n != 0 {\n\
    \        let m = n % 2;\n        n = n / 2;\n        res.push_str(&m.to_string());\n\
    \    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp9sv3boxu.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut n = N;\n    while n > 0 {\n \
    \       s.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpwjtl0r6c.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    (N as u32).to_string()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp8u4j1z_9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut bin = format!(\"{:b}\", N);\n    let mut bin = bin.chars().collect::<Vec<char>>();\n\
    \    let mut result = 0;\n    for i in 0..bin.len() {\n        result += bin[i].to_digit(10).unwrap();\n\
    \    }\n    return format!(\"{}\", result);\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpjsmsrbz6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let binary = format!(\"{:b}\", N);\n    for c in\
    \ binary.chars() {\n        if c == '1' {\n            sum += 1;\n        }\n\
    \    }\n    sum.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n  \
    \  assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpu4wvt8nb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut binary = Vec::new();\n    let mut n = N;\n    while n > 0 {\n\
    \        binary.push(n % 2);\n        n /= 2;\n    }\n    binary.reverse();\n\
    \    let mut sum = 0;\n    for i in binary {\n        sum += i;\n    }\n    format!(\"\
    {}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpqavuytvx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut temp = N;\n    let mut nums = vec![];\n    while temp > 0 {\n\
    \        nums.push(temp % 2);\n        temp /= 2;\n    }\n    nums.reverse();\n\
    \    nums.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\")\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpkhyvrjir.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp5xykmz53.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpasmi28mu.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum: isize = 0;\n    let mut bin: String = \"\".to_string();\n\
    \    let mut N: isize = N;\n    while N > 0 {\n        bin.push_str(&format!(\"\
    {}\", N % 2));\n        sum += N % 2;\n        N /= 2;\n    }\n    println!(\"\
    {}\", sum);\n    bin.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: "6\n"
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpp4drmkqt.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut _N = N;\n    let mut binary = String::new();\n\
    \    let mut rem = 0;\n    while _N > 0 {\n        rem = _N % 2;\n        _N =\
    \ _N / 2;\n        binary.push_str(&rem.to_string());\n    }\n    let mut i =\
    \ 0;\n    while i < binary.len() {\n        let num: usize = binary.chars().nth(i).unwrap().to_digit(10).unwrap()\
    \ as usize;\n        sum += num;\n        i += 1;\n    }\n    sum.to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpuwzr0r3q.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, v| acc + v.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp2jl3a7fs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum: usize = 0;\n    let mut num = N;\n    let mut answer = String::new();\n\
    \    let mut is_first_one = true;\n    while num != 0 {\n        let reminder\
    \ = num % 2;\n        if reminder == 1 {\n            sum += 1;\n            if\
    \ is_first_one {\n                answer.push('1');\n                is_first_one\
    \ = false;\n            } else {\n                answer.insert(0, '1');\n   \
    \         }\n        } else {\n            if !is_first_one {\n              \
    \  answer.insert(0, '0');\n            }\n        }\n        num /= 2;\n    }\n\
    \    if answer.is_empty() {\n        answer.push('0');\n    }\n    format!(\"\
    {}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp6sh6nyy1.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut s = String::new();\n    while n > 0 {\n \
    \       s.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp47q4454z.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N != 0\
    \ {\n        result.push_str(&((N % 2).to_string()));\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpre6d2db0.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    if N == 0 {\n        return \"0\".to_string();\n    }\n    let mut sum\
    \ = 0;\n    let mut N = N;\n    while N > 0 {\n        sum += N % 2;\n       \
    \ N /= 2;\n    }\n    return sum.to_string();\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpnnfshntk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        sum += c.to_digit(10).unwrap();\n    }\n    format!(\"\
    {:b}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmp_fca8c0p.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut b = String::new();\n    let mut n = N;\n    while n > 0 {\n \
    \       b.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    b.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpusm9wccn.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp9o8k_t9p.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = 0;\n    let mut res = String::new();\n    let mut input\
    \ = N;\n    while input > 0 {\n        result += input % 2;\n        res.push_str(&(input\
    \ % 2).to_string());\n        input /= 2;\n    }\n    let mut ret = String::new();\n\
    \    for i in res.chars().rev() {\n        ret.push(i);\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmppsu3cmf_.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = \"\".to_string();\n    let mut remain = N;\n    while\
    \ remain > 0 {\n        result = ((remain % 2) as u8).to_string() + &result;\n\
    \        remain /= 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp8s6p7d_h.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpmlcju4i3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let bin_string = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for\
    \ char in bin_string.chars() {\n        sum += char.to_digit(10).unwrap();\n \
    \   }\n    format!(\"{}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmphxngqvfa.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \    .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp4bzvi8le.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + x.to_digit(10).unwrap()\
    \ as isize)\n        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpuafqeh5c.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + (x as isize - '0'\
    \ as isize))\n        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpdfbudoaq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    return format!(\"{:b}\", N)\n        .chars()\n        .filter_map(|x|\
    \ if x == '1' { Some(1) } else { None })\n        .fold(0, |sum, x| sum + x)\n\
    \        .to_string();\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmppf6qyzp5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut bit_string = String::new();\n    while n\
    \ > 0 {\n        let r = n % 2;\n        n = n / 2;\n        bit_string.push_str(&r.to_string());\n\
    \    }\n    bit_string.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpaiu84vxq.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let bin = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for c in bin.chars()\
    \ {\n        if c == '1' {\n            sum += 1;\n        }\n    }\n    format!(\"\
    {}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp4ei684z7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    return format!(\"{:b}\", N)\n        .chars()\n        .map(|digit| digit.to_digit(10).unwrap())\n\
    \        .sum::<u32>()\n        .to_string();\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmps_zzg1cq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).replace(\"0\", \"\").chars().fold(0, |sum, x| sum\
    \ + x.to_digit(10).unwrap() as usize)\n        .to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpvc9117ap.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpztjp9bpi.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp0pvehdv6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, x| acc + (x as isize - 48))\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpr8_m9jh9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    N.to_string(2)\n        .chars()\n        .map(|x| x.to_digit(10).unwrap())\n\
    \        .sum::<u32>()\n        .to_string()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp258n5zgf.rs:12:7\n     |\n12   |     N.to_string(2)\n     | \
    \      ^^^^^^^^^ - supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut N = N;\n    let mut y =\
    \ N % 2;\n    result.push_str(&y.to_string());\n    N = N / 2;\n    while N !=\
    \ 0 {\n        let y = N % 2;\n        result.push_str(&y.to_string());\n    \
    \    N = N / 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp4ob_i7e3.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp5qk3u2p_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpld74br5o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = String::new();\n    for _ in 0..16 {\n        let n = N %\
    \ 2;\n        s.push_str(&n.to_string());\n        N /= 2;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `N`\n  --> /tmp/tmpd579zn8m.rs:16:9\n\
    \   |\n11 | fn solve(N: isize) -> String {\n   |          - help: consider making\
    \ this binding mutable: `mut N`\n...\n16 |         N /= 2;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut bin_str = String::new();\n    let mut num = N;\n    let mut num_list\
    \ = Vec::new();\n    while num > 0 {\n        let num_str = format!(\"{}\", num\
    \ % 2);\n        num_list.push(num_str);\n        num = num / 2;\n    }\n    for\
    \ i in num_list.iter().rev() {\n        bin_str.push_str(i);\n    }\n    return\
    \ bin_str;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpc3vwzrie.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    N.to_string()\n        .chars()\n        .map(|c| {\n            c.to_digit(10)\n\
    \                .unwrap()\n                .to_string()\n                .chars()\n\
    \                .map(|c| {\n                    let result = match c {\n    \
    \                    '1' => \"0001\",\n                        '2' => \"0010\"\
    ,\n                        '3' => \"0011\",\n                        '4' => \"\
    0100\",\n                        '5' => \"0101\",\n                        '6'\
    \ => \"0110\",\n                        '7' => \"0111\",\n                   \
    \     '8' => \"1000\",\n                        '9' => \"1001\",\n           \
    \             _ => \"0000\",\n                    };\n                    result.to_string()\n\
    \                })\n                .collect::<String>()\n        })\n      \
    \  .collect::<String>()\n        .chars()\n        .rev()\n        .filter(|&c|\
    \ c != '0')\n        .collect::<String>()\n        .chars()\n        .rev()\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"111\"`,\n right: `\"110\"`', /tmp/tmpz6cdc1cj.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut power = 0;\n    while (1 << power) <= N {\n\
    \        power += 1;\n    }\n    let mut result = String::new();\n    while power\
    \ > 0 {\n        if (1 << (power - 1)) <= N {\n            result.push('1');\n\
    \            N -= 1 << (power - 1);\n        } else {\n            result.push('0');\n\
    \        }\n        power -= 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpai_n88vt.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, d| acc + d.to_digit(10).unwrap()\
    \ as isize)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz9268gmv.rs:12:37\n   |\n\
    12 |     format!(\"{:b}\", N).chars().fold(0, |acc, d| acc + d.to_digit(10).unwrap()\
    \ as isize)\n   |                                     ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                     |\n   |   \
    \                                  expected struct `String`, found integer\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpz9268gmv.rs:12:55\n   |\n12 |  \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, d| acc + d.to_digit(10).unwrap()\
    \ as isize)\n   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpcz7yrzjz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).replace(\"0\", \"\").len().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmplwvp0its.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut remainder = N;\n    while\
    \ remainder > 0 {\n        let bit = remainder % 2;\n        remainder = remainder\
    \ / 2;\n        result.push_str(&bit.to_string());\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6wjd9ajh.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |a, b| a + b.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpvc1yw0ic.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary_number = format!(\"{:b}\", N);\n    let mut sum = 0;\n   \
    \ for num in binary_number.chars() {\n        sum += num.to_digit(10).unwrap();\n\
    \    }\n    format!(\"{}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpmg56jjl1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpbvvz1aqo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut digits = vec![];\n    while N > 0 {\n   \
    \     digits.push(N % 2);\n        N /= 2;\n    }\n    digits.iter().map(|x| format!(\"\
    {}\", x)).collect::<Vec<String>>().join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpla1luv8p.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpei4i5e_f.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // write your code here\n    let mut s = String::new();\n    let mut\
    \ n = N;\n    while n != 0 {\n        s.push_str(&format!(\"{}\", n % 2));\n \
    \       n /= 2;\n    }\n    s.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpabi2d749.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap()\
    \ as isize)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgie_kvtt.rs:12:37\n   |\n\
    12 |     format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap()\
    \ as isize)\n   |                                     ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                     |\n   |   \
    \                                  expected struct `String`, found integer\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpgie_kvtt.rs:12:55\n   |\n12 |  \
    \   format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap()\
    \ as isize)\n   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary = format!(\"{:b}\", N);\n    binary.chars().fold(0, |sum,\
    \ c| sum + c.to_digit(10).unwrap())\n        .to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpbd6mkn4f.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpksrdbzcl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    N.to_string(2)\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .sum::<u32>()\n        .to_string()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp42ce3igi.rs:12:7\n     |\n12   |     N.to_string(2)\n     | \
    \      ^^^^^^^^^ - supplied 1 argument\n     |       |\n     |       expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut current_number = N;\n    while\
    \ current_number > 0 {\n        s.push_str(&(current_number % 2).to_string());\n\
    \        current_number /= 2;\n    }\n    s.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpjee8c41d.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut ret = String::new();\n    while n > 0 {\n\
    \        ret.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    ret.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpzdxa2qn6.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    N.to_string()\n        .chars()\n        .map(|digit| (digit as isize\
    \ - 48).to_string())\n        .collect::<Vec<String>>()\n        .join(\"\")\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmpb4s9eqid.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    let mut buf = String::new();\n\
    \    while n > 0 {\n        sum += n % 2;\n        buf.push((48 + (n % 2)) as\
    \ char);\n        n /= 2;\n    }\n    buf.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "error[E0604]: only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmpxob5tb0q.rs:17:18\n\
    \   |\n17 |         buf.push((48 + (n % 2)) as char);\n   |                  ^^^^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmpxob5tb0q.rs:17:18\n   |\n17 |         buf.push((48 + (n % 2)) as char);\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0604`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&format!(\"{}\", N % 2));\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpmxyqh5_3.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut binary = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmphoitqtkz.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut binary_vector: Vec<String> = Vec::new();\n    let mut N = N;\n\
    \    while N > 0 {\n        binary_vector.push(format!(\"{}\", N % 2));\n    \
    \    N = N / 2;\n    }\n    let binary_string = binary_vector.iter().rev().fold(String::new(),\
    \ |mut acc, x| {\n        acc.push_str(x);\n        acc\n    });\n    binary_string\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp2unvaizi.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpes9zl3_2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    N.to_string()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap()\
    \ as isize)\n        .map(|x| format!(\"{:b}\", x))\n        .collect::<Vec<String>>()\n\
    \        .join(\"\")\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmptpjkrllf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut r = \"\".to_string();\n    let mut n = N;\n    while n != 0 {\n\
    \        r = format!(\"{}{}\", r, n % 2);\n        n /= 2;\n    }\n    return\
    \ r;\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpghj2qftb.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // Convert to binary and join\n    return format!(\"{:b}\", N).replace(\"\
    0\", \"\").chars().collect::<String>();\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"111111\"`,\n right: `\"1\"`', /tmp/tmpfdq9pno3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    format!(\"{}\", sum)\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp_go1ii88.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut x = N;\n    while x > 0\
    \ {\n        result.push_str(&(x % 2).to_string());\n        x /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpx4u0o4qo.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary_number: String = format!(\"{:b}\", N);\n    let mut sum: isize\
    \ = 0;\n    for character in binary_number.chars() {\n        let mut number:\
    \ isize = character.to_digit(10).unwrap() as isize;\n        sum += number;\n\
    \    }\n    format!(\"{}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpg804g7ol.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut res = String::new();\n    while n > 0 {\n\
    \        res.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    let\
    \ mut res: String = res.chars().rev().collect();\n    res\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpl6ngza2o.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut count = 0;\n    let mut sum = 0;\n    while\
    \ N > 0 {\n        let remainder = N % 2;\n        N = N / 2;\n        sum +=\
    \ remainder;\n        count += 1;\n    }\n    return format!(\"{:0>width$b}\"\
    , sum, width = count);\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0000000110\"`,\n right: `\"1\"`', /tmp/tmpdelr83oi.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut tmp = format!(\"{:b}\", N);\n    let mut sum = 0;\n    while\
    \ tmp.len() > 0 {\n        let c = tmp.pop().unwrap();\n        let c = if c ==\
    \ '1' { 1 } else { 0 };\n        sum += c;\n    }\n    format!(\"{}\", sum)\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpfsz_9z19.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |sum, c| sum + c.to_digit(10).unwrap()\
    \ as isize)\n            .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp267dhdjq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut bin = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for i\
    \ in bin.chars() {\n        let mut s = i.to_string();\n        sum += s.parse::<i32>().unwrap();\n\
    \    }\n    format!(\"{:b}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmpla2ras2y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    String::from(format!(\"{:b}\", N).chars().fold(0, |acc, el| { acc + el.to_digit(10).unwrap()\
    \ }).to_string())\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpr5s50ud6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    //generate the binary\n    let mut bin = format!(\"{:b}\", N);\n    let\
    \ mut count = 0;\n    for i in bin.chars() {\n        count += i.to_digit(10).unwrap();\n\
    \    }\n    count.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpsj7l8p18.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    return N.to_string();\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1000\"`,\n right: `\"1\"`', /tmp/tmp03kselo1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    for b in (0..N.count_ones()).rev()\
    \ {\n        if N & (1 << b) != 0 {\n            digits.push('1');\n        }\
    \ else {\n            digits.push('0');\n        }\n    }\n    digits.iter().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"101000\"`,\n right: `\"1\"`', /tmp/tmpxoeb1v1w.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpy5bsk7i9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|ch| ch.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpbnhed1mk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N: u32 = N as u32;\n    let mut res = String::new();\n    loop\
    \ {\n        if N <= 1 {\n            res.push_str(&format!(\"{}\", N));\n   \
    \         break;\n        }\n        let r = N % 2;\n        res.push_str(&format!(\"\
    {}\", r));\n        N = N / 2;\n    }\n    res.chars().rev().collect()\n}\n\n\
    fn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpc46aon50.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    return format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string();\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpgbju0i3u.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut total = 0;\n    let mut n = N;\n    while n > 0 {\n        total\
    \ += n % 2;\n        n /= 2;\n    }\n    format!(\"{}\", total)\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpjsbarz90.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary = N.to_string(2);\n    binary.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmphk8c_fax.rs:12:20\n     |\n12   |     let binary = N.to_string(2);\n\
    \     |                    ^^^^^^^^^ - supplied 1 argument\n     |           \
    \         |\n     |                    expected 0 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut N = N;\n    while N > 0 {\n        sum\
    \ += N % 2;\n        N /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmphf4qxsvh.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // Convert N to binary\n    let binary = format!(\"{:b}\", N);\n    //\
    \ Create vector of char from the binary string\n    let binary_vec: Vec<char>\
    \ = binary.chars().collect();\n    // Iterate through vector and sum\n    let\
    \ sum: usize = binary_vec.iter().map(|x| x.to_digit(10).unwrap()).sum();\n   \
    \ // Create string of sum in binary\n    let output: String = format!(\"{:b}\"\
    , sum);\n    output\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Sum<u32>` is not satisfied\n    -->\
    \ /tmp/tmpicras7ir.rs:17:73\n     |\n17   |     let sum: usize = binary_vec.iter().map(|x|\
    \ x.to_digit(10).unwrap()).sum();\n     |                                    \
    \                                     ^^^ the trait `Sum<u32>` is not implemented\
    \ for `usize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // Convert N to a binary string\n    let mut bin: String = format!(\"\
    {:b}\", N);\n    // The sum of the binary digits\n    let mut sum: isize = 0;\n\
    \    // Iterate over the string and add each digit to the sum\n    for x in bin.chars()\
    \ {\n        let val: isize = x.to_string().parse().unwrap();\n        sum +=\
    \ val;\n    }\n    // Convert the sum to a binary string and return it\n    return\
    \ format!(\"{:b}\", sum);\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmpx0boyyur.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    return format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string();\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpsomljf87.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut n = N;\n    while n > 0 {\n \
    \       s.push(std::char::from_digit((n & 1) as u32, 2).unwrap());\n        n\
    \ >>= 1;\n    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpdbcd7jsl.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for\
    \ c in result.chars() {\n        if c == '1' {\n            sum += 1;\n      \
    \  }\n    }\n    format!(\"{}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpyx41fzvo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp7gka_92u.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut num: u64 = N as u64;\n    let mut bin: String = String::new();\n\
    \    while num > 0 {\n        bin.push_str(&((num % 2) as u8).to_string());\n\
    \        num /= 2;\n    }\n    bin\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmp2rvu4jeu.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut number = N;\n    let mut result = String::new();\n    while number\
    \ > 0 {\n        result = format!(\"{}{}\", number % 2, result);\n        number\
    \ /= 2;\n    }\n    let mut sum = 0;\n    for b in result.chars() {\n        if\
    \ b == '1' {\n            sum += 1;\n        }\n    }\n    sum.to_string()\n}\n\
    \nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpgo_tj99j.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // convert from base 10 to base 2\n    let mut n = N.to_string(2);\n\
    \    let mut sum = 0;\n    while n.len() > 0 {\n        let end = n.pop().unwrap();\n\
    \        let end_num = end.to_digit(10).unwrap();\n        sum += end_num;\n \
    \   }\n    sum.to_string()\n}\n\nfn main() {\n    let candidate = solve;\n   \
    \ assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpxn1p8vp8.rs:13:19\n     |\n13   |     let mut n = N.to_string(2);\n\
    \     |                   ^^^^^^^^^ - supplied 1 argument\n     |            \
    \       |\n     |                   expected 0 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|s| s.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp9di83_fv.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut digits = Vec::new();\n    while N > 0 {\n\
    \        let digit = N % 2;\n        sum += digit;\n        digits.push(digit);\n\
    \        N /= 2;\n    }\n    digits.reverse();\n    let mut result = String::new();\n\
    \    for d in digits {\n        result.push_str(&d.to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "warning: variable `sum` is assigned to, but never used\n  --> /tmp/tmp1tf7vrn0.rs:12:13\n\
    \   |\n12 |     let mut sum = 0;\n   |             ^^^\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n   = note: consider using `_sum` instead\n\nerror[E0384]: cannot\
    \ assign to immutable argument `N`\n  --> /tmp/tmp1tf7vrn0.rs:18:9\n   |\n11 |\
    \ fn solve(N: isize) -> String {\n   |          - help: consider making this binding\
    \ mutable: `mut N`\n...\n18 |         N /= 2;\n   |         ^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary = format!(\"{:b}\", N);\n    binary.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp0qzk_ovp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut iter: Vec<isize> = vec![];\n    let mut num = N;\n    let mut\
    \ result = String::new();\n    while num != 0 {\n        iter.push(num % 2);\n\
    \        num = num / 2;\n    }\n    for x in iter.iter().rev() {\n        result.push_str(&x.to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpmmtnf3jz.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |a, c| a + c.to_digit(10).unwrap())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulg7pafy.rs:12:37\n   |\n\
    12 |     format!(\"{:b}\", N).chars().fold(0, |a, c| a + c.to_digit(10).unwrap())\n\
    \   |                                     ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                     |\n   |           \
    \                          expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpulg7pafy.rs:12:51\n   |\n12 |     format!(\"\
    {:b}\", N).chars().fold(0, |a, c| a + c.to_digit(10).unwrap())\n   |         \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp7v2ddhs5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpkc2a7eio.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpgr3afaxj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let bin = format!(\"{:b}\", N);\n    bin.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp5qo0muu3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut N = N;\n    let mut sum:\
    \ isize = 0;\n    while N > 0 {\n        sum += N % 2;\n        N /= 2;\n    }\n\
    \    result.push_str(&sum.to_string());\n    result\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpx3phq3lc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    if N == 0 {\n        return \"0\".to_string();\n    }\n    format!(\"\
    {:b}\", N)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp1luyc0kk.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let bin_string = format!(\"{:b}\", N);\n    let mut sum: isize = 0;\n\
    \    for c in bin_string.chars() {\n        if c == '1' {\n            sum +=\
    \ 1;\n        }\n    }\n    return format!(\"{}\", sum);\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp2jm_5ckn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpqshc0l1a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut answer = String::new();\n    while n != 0\
    \ {\n        let s = n % 2;\n        n = n / 2;\n        answer.push_str(&s.to_string());\n\
    \    }\n    answer.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpm91c3v3x.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpunch8ug0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).replace(\"0\", \"\").len().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp4eaipzfp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).replace(\"0\", \"\").chars().collect::<Vec<char>>().len().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpsmqluqn8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3iwv14dl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    if N == 0 {\n        return \"0\".to_string();\n    }\n    let mut result\
    \ = String::new();\n    let mut n = N;\n    while n > 0 {\n        result = if\
    \ n % 2 == 0 {\n            format!(\"{}0\", result)\n        } else {\n     \
    \       format!(\"{}1\", result)\n        };\n        n /= 2;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpwn3fe28_.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = \"\".to_string();\n    let mut div = N;\n    while div\
    \ > 0 {\n        let rest = div % 2;\n        div = div / 2;\n        result =\
    \ format!(\"{}{}\", rest, result);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpjpctxyvp.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpc8dsu9uo.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let bin = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for i in bin.chars()\
    \ {\n        sum += i.to_digit(10).unwrap();\n    }\n    format!(\"{:b}\", sum)\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmpyq1w7wmn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpo3ckbk_s.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmprbq9bnao.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let bs = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for c in bs.chars()\
    \ {\n        let a = c.to_digit(10).unwrap() as isize;\n        sum += a;\n  \
    \  }\n    format!(\"{:b}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmp2n4_j808.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut a = N;\n    let mut result = 0;\n    while a > 0 {\n        result\
    \ += a % 2;\n        a /= 2;\n    }\n    result.to_string()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp6x_pd2ka.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    String::from(format!(\"{:b}\", N).to_uppercase().chars().filter(|c| c\
    \ == &'1').collect::<String>())\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"111111\"`,\n right: `\"1\"`', /tmp/tmpcx31unkv.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |sum, x| sum + x.to_digit(10).unwrap()\
    \ as isize)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa0m6bhll.rs:12:37\n   |\n\
    12 |     format!(\"{:b}\", N).chars().fold(0, |sum, x| sum + x.to_digit(10).unwrap()\
    \ as isize)\n   |                                     ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                     |\n   |   \
    \                                  expected struct `String`, found integer\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpa0m6bhll.rs:12:55\n   |\n12 |  \
    \   format!(\"{:b}\", N).chars().fold(0, |sum, x| sum + x.to_digit(10).unwrap()\
    \ as isize)\n   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut bin_str = \"\".to_string();\n    let mut temp = N;\n    while\
    \ temp > 0 {\n        bin_str = format!(\"{}{}\", bin_str, temp % 2);\n      \
    \  temp /= 2;\n    }\n    bin_str\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0001011111\"`,\n right: `\"1\"`', /tmp/tmpx0miqhi9.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary = format!(\"{:b}\", N);\n    binary.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpx9tmef4l.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for ch\
    \ in binary.chars() {\n        sum += ch.to_digit(10).unwrap();\n    }\n    sum.to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpscym4kwk.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut answer = String::new();\n    while N > 0\
    \ {\n        answer.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    answer.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp9y1kcu66.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for b in\
    \ binary.chars() {\n        sum += b.to_digit(10).unwrap();\n    }\n    format!(\"\
    {:b}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmpvuj8baig.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmprvgpshr5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpnsk_r499.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        let mut bit = N % 2;\n        result.push_str(&bit.to_string());\n\
    \        N = N / 2;\n    }\n    let mut bit_sum = 0;\n    for c in result.chars()\
    \ {\n        bit_sum += c.to_digit(10).unwrap();\n    }\n    bit_sum.to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp23zsf2ii.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut res = 0;\n    let mut num = N;\n    while num > 0 {\n       \
    \ res += num % 2;\n        num /= 2;\n    }\n    format!(\"{}\", res)\n}\n\nfn\
    \ main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpiqgkn4oj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // 2\u9032\u6570\u306B\u5909\u63DB\n    let binary = format!(\"{:b}\"\
    , N);\n    // 2\u9032\u6570\u6587\u5B57\u5217\u3092\u5404\u6841\u6570\u5024\u3078\
    \u5909\u63DB\n    binary\n        .chars()\n        .map(|c| c.to_digit(10).unwrap())\n\
    \        .sum::<u32>()\n        .to_string()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpl8ky2v1r.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let binary_representation = format!(\"{:b}\", N);\n    binary_representation\n\
    \        .chars()\n        .map(|x| x.to_digit(10).unwrap())\n        .sum::<u32>()\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmposb81k3h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpimctya45.rs:12:37\n   |\n\
    12 |     format!(\"{:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \   |                                     ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                     |\n   |           \
    \                          expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpimctya45.rs:12:55\n   |\n12 |     format!(\"\
    {:b}\", N).chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n   |     \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpuwl5we0p.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let s: String = format!(\"{:b}\", N);\n    let mut res: isize = 0;\n\
    \    for x in s.chars() {\n        if x == '1' {\n            res += 1;\n    \
    \    }\n    }\n    format!(\"{}\", res)\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmplq5yp_ax.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpoxyn7f6c.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut ans = String::new();\n    let mut N = N;\n    while N > 0 {\n\
    \        let rem = N % 2;\n        ans.push_str(&rem.to_string());\n        N\
    \ /= 2;\n    }\n    ans.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_hgas8j1.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    format!(\"{}\", sum)\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmptlcyykp1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut binary = String::new();\n    let mut cur = N;\n    while cur\
    \ > 0 {\n        let rem = cur % 2;\n        cur = cur / 2;\n        binary.push_str(&rem.to_string());\n\
    \    }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmplh6xod4d.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut count = 0;\n    let mut i = 0;\n    let mut s = String::new();\n\
    \    while i < N {\n        count += 1;\n        i = i.pow(2);\n    }\n    let\
    \ s = N.to_string();\n    return s;\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum: isize = 0;\n    let mut curr_N = N;\n    while curr_N >\
    \ 0 {\n        sum += curr_N % 2;\n        curr_N /= 2;\n    }\n    sum.to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpd12svqgm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    if N == 0 {\n        return \"0\".to_string();\n    }\n    format!(\"\
    {:b}\", N)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp1fzggg1l.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).split(\"\").fold(0, |acc, x| acc + x.parse::<i32>().unwrap_or(0))\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmptnynvkzv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
