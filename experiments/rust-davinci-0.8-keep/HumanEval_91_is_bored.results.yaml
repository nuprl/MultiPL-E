name: HumanEval_91_is_bored
language: rust
results:
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    words.fold(0,\
    \ |acc, mut word| {\n        let word = word.trim();\n        if word.starts_with(\"\
    I\") {\n            acc + 1\n        } else {\n            acc\n        }\n  \
    \  })\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpteai6m9t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|word| *word == \"I\").count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpukvnbnb7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn8hf4w79.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy32318zd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut b = false;\n    for s in S.chars() {\n        if b &&\
    \ s == ' ' {\n            count += 1;\n            b = false;\n        } else\
    \ if s == 'I' {\n            b = true;\n        } else if s == '.' || s == '?'\
    \ || s == '!' {\n            b = false;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9clll1pz.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut split_iter = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    for sentence in split_iter {\n        if sentence.trim().starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppccjhq9j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // your\
    \ code here\n    let words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    let mut boredoms = 0;\n    for sentence in words {\n        let words = sentence.split_whitespace();\n\
    \        let mut index = 0;\n        for word in words {\n            if index\
    \ == 0 && word == \"I\" {\n                boredoms += 1;\n            }\n   \
    \         index += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let split\
    \ = S.split(|c: char| { c == '.' || c == '?' || c == '!' });\n    let mut count\
    \ = 0;\n    for sentence in split {\n        let words = sentence.split(' ');\n\
    \        if words.count() > 0 && words.nth(0).unwrap() == \"I\" {\n          \
    \  count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `words` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpst0n787c.rs:14:33\n   |\n13 |         let words = sentence.split('\
    \ ');\n   |             ----- help: consider changing this to be mutable: `mut\
    \ words`\n14 |         if words.count() > 0 && words.nth(0).unwrap() == \"I\"\
    \ {\n   |                                 ^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0382]: borrow of moved value: `words`\n   --> /tmp/tmpst0n787c.rs:14:33\n\
    \    |\n13  |         let words = sentence.split(' ');\n    |             -----\
    \ move occurs because `words` has type `std::str::Split<'_, char>`, which does\
    \ not implement the `Copy` trait\n14  |         if words.count() > 0 && words.nth(0).unwrap()\
    \ == \"I\" {\n    |                  -------        ^^^^^^^^^^^^ value borrowed\
    \ here after move\n    |                  |\n    |                  `words` moved\
    \ due to this method call\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `words`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0382, E0596.\nFor more information about\
    \ an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ i = 0;\n    let mut bored = 0;\n    for word in S.split_whitespace() {\n   \
    \     if word == \"I\" {\n            bored += 1;\n        }\n    }\n    bored\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp50w2pav9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut previous_char: char = ' ';\n    for c in S.chars()\
    \ {\n        if previous_char == ' ' && c == 'I' {\n            boredoms += 1;\n\
    \        }\n        if c == '.' || c == '?' || c == '!' {\n            previous_char\
    \ = ' ';\n        } else {\n            previous_char = c;\n        }\n    }\n\
    \    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp56neo3rg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ bored = 0;\n    let v: Vec<&str> = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!').collect();\n    for sentence in v {\n        let mut v: Vec<&str>\
    \ = sentence.split(' ').collect();\n        if !v.is_empty() && v[0] == \"I\"\
    \ {\n            bored += 1;\n        }\n    }\n    bored\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpsp5ln8nf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut i = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut word = String::new();\n    while i < words.len() {\n        word\
    \ = words.next().unwrap().to_string();\n        if word == \"I\" {\n         \
    \   count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpvur179uu.rs:14:21\n   |\n14 |     while\
    \ i < words.len() {\n   |                     ^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl5nqdwvp.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.matches(\"\
    I\").count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmplm0uz0cj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let v:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut cnt = 0;\n    for s in v {\n        if s.starts_with(\"I\") {\n \
    \           cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppf_8wcwh.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let ws\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let mut count =\
    \ 0;\n    for s in ws {\n        let mut words = s.split_whitespace();\n     \
    \   if let Some(w) = words.next() {\n            if w == \"I\" {\n           \
    \     count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  return S.split(|c:\
    \ char| c == '!' || c == '.' || c == '?')\n    .filter(|s| s.starts_with(\"I\"\
    )).count() as isize;\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg89tav05.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ r = 0;\n    let mut word = false;\n    for c in S.chars() {\n        match c\
    \ {\n            '.' | '?' | '!' => {\n                word = false;\n       \
    \     }\n            ' ' => {\n                word = false;\n            }\n\
    \            'I' => {\n                if !word {\n                    r += 1;\n\
    \                }\n                word = true;\n            }\n            _\
    \ => {\n                word = true;\n            }\n        }\n    }\n    r\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvmv5or2j.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj7lhjhdg.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut start = true;\n    for letter in S.chars() {\n  \
    \      if letter == 'I' && start {\n            boredoms += 1;\n        } else\
    \ if letter == '.' || letter == '?' || letter == '!' {\n            start = true;\n\
    \        } else {\n            start = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt3_01ihb.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').map(|s| {\n        s.split_whitespace().next().unwrap()\
    \ == \"I\"\n    }).filter(|&b| b).count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpo8y7ys94.rs:11:37\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj02hg_s0.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    match\
    \ S.chars().nth(0) {\n        Some(c) => {\n            if c == 'I' {\n      \
    \          1\n            } else {\n                0\n            }\n       \
    \ }\n        None => 0,\n    }\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpspxc5cor.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut sentences = S.split(|c: char| match c {\n        '.'\
    \ | '?' | '!' => true,\n        _ => false,\n    });\n    for sentence in sentences\
    \ {\n        let words = sentence.split(' ');\n        if words.nth(0).unwrap()\
    \ == \"I\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp1xhe48bo.rs:11:9\n\
    \   |\n11 |     let mut sentences = S.split(|c: char| match c {\n   |        \
    \ ----^^^^^^^^^\n   |         |\n   |         help: remove this `mut`\n   |\n\
    \   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0596]: cannot borrow\
    \ `words` as mutable, as it is not declared as mutable\n  --> /tmp/tmp1xhe48bo.rs:17:12\n\
    \   |\n16 |         let words = sentence.split(' ');\n   |             ----- help:\
    \ consider changing this to be mutable: `mut words`\n17 |         if words.nth(0).unwrap()\
    \ == \"I\" {\n   |            ^^^^^^^^^^^^ cannot borrow as mutable\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0syo1v05.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     match c {\n            'I' => is_bored = true,\n            '.' | '?' |\
    \ '!' => {\n                if is_bored {\n                    boredoms += 1;\n\
    \                }\n                is_bored = false;\n            }\n       \
    \     _ => {}\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxg6jr40m.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = \"\";\n    let mut sentence_started =\
    \ false;\n    for word in S.split_whitespace() {\n        sentence = format!(\"\
    {} {}\", sentence, word);\n        sentence_started = sentence_started || word.starts_with(\"\
    I\");\n        if sentence.ends_with(\".\") || sentence.ends_with(\"?\") || sentence.ends_with(\"\
    !\") {\n            boredoms += (sentence_started as isize);\n            sentence\
    \ = \"\";\n            sentence_started = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpn7fzpdyr.rs:17:25\n\
    \   |\n17 |             boredoms += (sentence_started as isize);\n   |       \
    \                  ^                         ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n17 -             boredoms\
    \ += (sentence_started as isize);\n17 +             boredoms += sentence_started\
    \ as isize;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7fzpdyr.rs:14:20\n\
    \   |\n14 |         sentence = format!(\"{} {}\", sentence, word);\n   |     \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n   |\n   = note: this error originates in the macro `format` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let v: Vec<&str> = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!').collect();\n    for i in v {\n        let v: Vec<&str> = i.split('\
    \ ').collect();\n        if v[0] == \"I\" {\n            count += 1;\n       \
    \ }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp3nuatm9h.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').map(|s| {\n        if s.trim_left().starts_with(\"\
    I\") {\n            1\n        } else {\n            0\n        }\n    }).sum()\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3yw86rm8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentence_vec:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    sentence_vec.iter().filter(|&s| s.starts_with(\"I\")).count() as isize\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1bwirc62.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ iter = S.split_terminator(|c: char| {\n        c == '.' || c == '?' || c ==\
    \ '!'\n    });\n    let mut count = 0;\n    for line in iter {\n        let trimmed\
    \ = line.trim();\n        if trimmed.is_empty() {\n            continue;\n   \
    \     }\n        if trimmed.starts_with(\"I\") {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkgdlc8uh.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ x = 0;\n    let mut i = 0;\n    let characters: Vec<char> = S.chars().collect();\n\
    \    let m = characters.len();\n    while i < m {\n        if characters[i] ==\
    \ 'I' {\n            x += 1;\n        }\n        i += 1;\n    }\n    x\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprnjqjc4p.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpx4i7kj8_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentence_count\
    \ = S.split(|c: char| {\n        match c {\n            '.' | '?' | '!' => true,\n\
    \            _ => false,\n        }\n    }).count();\n    let words: Vec<&str>\
    \ = S.split(' ').collect();\n    let mut boredoms: isize = 0;\n    for word in\
    \ words {\n        if word == \"I\" {\n            boredoms += 1;\n        }\n\
    \    }\n    if boredoms > 0 {\n        return boredoms;\n    }\n    return boredoms\
    \ - sentence_count as isize;\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `0`', /tmp/tmpx4oiwgfa.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.lines()\n\
    \        .fold(0, |acc, line| {\n            acc + if line.starts_with(\"I\")\
    \ { 1 } else { 0 }\n        })\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp6l93heb.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    if S.starts_with(\"\
    I\") { 1 } else { 0 }\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9tpnvpau.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentences = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    for sentence in sentences {\n        if sentence.trim().starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpb2glwm0f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredom_counter = 0;\n    let punctuation_signs = [',', '.', '!', '?'];\n  \
    \  let mut tmp = String::new();\n    for c in S.chars() {\n        if punctuation_signs.contains(&c)\
    \ {\n            if tmp.to_lowercase() == \"i\" {\n                boredom_counter\
    \ += 1;\n            }\n            tmp.clear();\n        } else {\n         \
    \   tmp.push(c);\n        }\n    }\n    boredom_counter\n}\n\nfn main() {\n  \
    \  let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp5ajrawbw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ res = 0;\n    let split = S.split(\".\");\n    for s in split {\n        if\
    \ s.starts_with(\"I\") {\n            res += 1;\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5ieie3fc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let sentences = S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!');\n    for sentence in sentences {\n        if sentence.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq30w7hep.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // Your\
    \ code here\n    0\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpvcgobuf9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  let mut\
    \ count = 0;\n  let mut sentence = \"\";\n  for (i, c) in S.chars().enumerate()\
    \ {\n    sentence = sentence.to_string() + &c.to_string();\n    if c == '.' ||\
    \ c == '?' || c == '!' {\n      let next_sentence = S.chars().skip(i + 1).take(6).collect::<String>();\n\
    \      if sentence.starts_with(\"I\") {\n        count += 1;\n      }\n      sentence\
    \ = \"\";\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate =\
    \ is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp609ghc1m.rs:13:16\n   |\n\
    11 |   let mut sentence = \"\";\n   |                      -- expected due to\
    \ this value\n12 |   for (i, c) in S.chars().enumerate() {\n13 |     sentence\
    \ = sentence.to_string() + &c.to_string();\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                |\n   |                expected `&str`, found struct `String`\n\
    \   |                help: consider borrowing here: `&(sentence.to_string() +\
    \ &c.to_string())`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.chars();\n\
    \        if let Some(c) = chars.next() {\n            if c == 'I' {\n        \
    \        if chars.all(|c| c == ' ') {\n                    boredoms += 1;\n  \
    \              }\n            }\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdu_n1lcs.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| \"?!.\".contains(c))\n        .map(|s| s.split_whitespace().next().unwrap())\n\
    \        .filter(|s| *s == \"I\")\n        .count() as isize\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpxslr4mg6.rs:11:46\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let phrases = S.split(|c| c == '.' || c == '?' || c == '!');\n\
    \    for phrase in phrases {\n        if phrase.starts_with(\"I\") {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphh964vwp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentences\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    sentences.filter(|&s|\
    \ s.starts_with(\"I\")).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp67_fd2i7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     match c {\n            'I' => is_bored = true,\n            '.' | '?' |\
    \ '!' => {\n                if is_bored {\n                    boredoms += 1;\n\
    \                }\n                is_bored = false;\n            }\n       \
    \     _ => (),\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0ouu7_0h.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ result = 0;\n    let mut first_word_check = true;\n    for c in S.chars() {\n\
    \        if first_word_check {\n            if c == 'I' {\n                result\
    \ += 1;\n            }\n            first_word_check = false;\n        }\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            first_word_check = true;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy6bu9hp0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    if S.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut ret = 0;\n    let split_by = vec!['.',\
    \ '?', '!'];\n    let words: Vec<&str> = S.split(|x| split_by.contains(&x)).collect();\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            ret\
    \ += 1;\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq_lcgxpf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // Your\
    \ code here\n    let mut num_boredoms = 0;\n    let split = S.split(|c| c == '.'\
    \ || c == '?' || c == '!');\n    for sentence in split {\n        let words =\
    \ sentence.split_whitespace();\n        if words.next() == Some(\"I\") {\n   \
    \         num_boredoms += 1;\n        }\n    }\n    num_boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `words` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmp86hkoohs.rs:15:12\n   |\n14 |         let words = sentence.split_whitespace();\n\
    \   |             ----- help: consider changing this to be mutable: `mut words`\n\
    15 |         if words.next() == Some(\"I\") {\n   |            ^^^^^^^^^^^^ cannot\
    \ borrow as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let x = S.split(|c| c == '.' || c == '?' || c == '!');\n\
    \    for i in x {\n        let y = i.split_whitespace();\n        if y.next()\
    \ == Some(\"I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp098vyvgi.rs:14:12\n   |\n13 |         let y = i.split_whitespace();\n\
    \   |             - help: consider changing this to be mutable: `mut y`\n14 |\
    \         if y.next() == Some(\"I\") {\n   |            ^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  let mut\
    \ boredoms = 0;\n  let mut word = String::new();\n  let mut word_first_char =\
    \ false;\n  let mut word_not_first_char = false;\n  let mut word_not_first_char_correct\
    \ = false;\n  let mut should_count_boredoms = false;\n  let mut is_punctuation\
    \ = false;\n  let mut punc_count = 0;\n  let mut punctuation = String::new();\n\
    \  let mut is_ending_punctuation = false;\n  let mut is_starting_punctuation =\
    \ false;\n  let mut is_bored = false;\n  let mut sentence_count = 0;\n  let mut\
    \ sentence_boredoms = 0;\n  let mut sentence_start = 0;\n  let mut word_count\
    \ = 0;\n  let mut word_count_all = 0;\n  let mut word_count_correct = 0;\n  let\
    \ mut word_count_correct_all = 0;\n  let mut only_punctuation = false;\n  let\
    \ mut is_previous_sentence_boredom = false;\n  let mut punctuation_count = 0;\n\
    \  let mut is_bored_all = false;\n  let mut sentence_boredoms_all = 0;\n  let\
    \ mut is_previous_sentence_boredom_all = false;\n  let mut is_starting_punctuation_all\
    \ = false;\n  let mut starting_punctuation_all = String::new();\n  let mut is_first_sentence\
    \ = true;\n  let mut is_punctuation_all = false;\n  let mut is_ending_punctuation_all\
    \ = false;\n  let mut ending_punctuation_all = String::new();\n  let mut word_count_all_correct\
    \ = 0;\n  let mut word_count_correct_all_correct = 0;\n  let mut is_word_all =\
    \ false;\n  let mut word_all = String::new();\n  let mut word_first_char_all =\
    \ false;\n  let mut word_not_first_char_all = false;\n  let mut word_not_first_char_correct_all\
    \ = false;\n  let\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpa1yvgrz9.rs:49:1\n  \
    \ |\n49 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let lst = S.split(|c| c == '.' || c == '?' || c == '!');\n \
    \   for l in lst {\n        if l.trim().starts_with(\"I\") {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmplpx239di.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| \".?!\".contains(c));\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate =\
    \ is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyuxe1sz7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(&['.',\
    \ '?', '!'][..]).filter(|s| s.starts_with(\"I\")).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpezu2epsm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // First\
    \ get the number of sentences\n    let sentences: Vec<&str> = S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!').collect();\n    // Now check if it is a bore\n\
    \    let mut bore_count = 0;\n    for sentence in sentences {\n        if sentence.starts_with(\"\
    I\") {\n            bore_count += 1;\n        }\n    }\n    return bore_count;\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2p_i_h71.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut check_i = false;\n    for ch in S.chars() {\n   \
    \     match ch {\n            'I' => {\n                check_i = true;\n    \
    \        }\n            '.' | '?' | '!' => {\n                if check_i {\n \
    \                   boredoms += 1;\n                }\n                check_i\
    \ = false;\n            }\n            _ => {\n                check_i = false;\n\
    \            }\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpfrwo89ba.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_sentence = false;\n    for word in S.split_whitespace()\
    \ {\n        if word == \"I\" {\n            is_sentence = true;\n        } else\
    \ if is_sentence && &word[word.len() - 1..] == \".\" {\n            boredoms +=\
    \ 1;\n            is_sentence = false;\n        } else if is_sentence && &word[word.len()\
    \ - 1..] == \"?\" {\n            boredoms += 1;\n            is_sentence = false;\n\
    \        } else if is_sentence && &word[word.len() - 1..] == \"!\" {\n       \
    \     boredoms += 1;\n            is_sentence = false;\n        }\n    }\n   \
    \ boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n    for sentence in words {\n        let first_word:\
    \ Vec<&str> = sentence.split_whitespace().collect();\n        if first_word[0]\
    \ == \"I\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp3vjuodbk.rs:14:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpk6yyuspj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8i4a07xw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  let mut\
    \ counter = 0;\n  let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n  for sentence in words {\n    if sentence.split_whitespace().next().unwrap()\
    \ == \"I\" {\n      counter += 1;\n    }\n  }\n  counter\n}\n\nfn main() {\n \
    \   let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp0aqsg5cb.rs:13:43\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| !c.is_alphabetic())\n        .map(|s| if s.starts_with(\"I\") { 1 } else\
    \ { 0 })\n        .sum()\n}\n\nfn main() {\n    let candidate = is_bored;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwg8bpti9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentences = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    for sentence in sentences {\n        let mut words = sentence.split(\"\
    \ \");\n        let first_word = words.next();\n        if first_word == Some(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmptxyvlk2u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| {\n        s.trim().chars().nth(0).unwrap()\
    \ == 'I'\n    }).count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp4addn_3i.rs:11:33\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ S = S;\n    S.push_str(\".\");\n    let mut cnt = 0;\n    let mut i = 0;\n \
    \   while i < S.len() {\n        let idx = S[i..].find(|c| c == '.' || c == '?'\
    \ || c == '!').unwrap();\n        if i + idx >= 1 && S[i..i + idx].chars().next().unwrap()\
    \ == 'I' {\n            cnt += 1;\n        }\n        i += idx + 1;\n    }\n \
    \   cnt\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpjo0yuul0.rs:16:57\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| {\n        c == '.' ||\
    \ c == '?' || c == '!'\n    });\n    while let Some(word) = words.next() {\n \
    \       if word.trim().starts_with(\"I\") {\n            boredoms += 1;\n    \
    \    }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmps32xj3ha.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let sentence: Vec<&str> = S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!').collect();\n    for word in sentence {\n        if word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpos0o1lvi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|&s| s.trim().starts_with(\"\
    I\")).count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpo4z225vl.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let split\
    \ = S.split(&['.', '?', '!'][..]);\n    let mut ret = 0;\n    for sentence in\
    \ split {\n        let words = sentence.split_whitespace();\n        if words.next()\
    \ == Some(\"I\") {\n            ret += 1;\n        }\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `words` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpxd4xqbel.rs:14:12\n   |\n13 |         let words = sentence.split_whitespace();\n\
    \   |             ----- help: consider changing this to be mutable: `mut words`\n\
    14 |         if words.next() == Some(\"I\") {\n   |            ^^^^^^^^^^^^ cannot\
    \ borrow as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.trim().starts_with(\"I\"\
    )).count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptf6b6l1a.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let words:\
    \ Vec<&str> = S.split_whitespace().collect();\n    let mut boredoms = 0;\n   \
    \ for word in words {\n        if word == \"I\" {\n            boredoms += 1;\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqmrn7s3y.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut start = 0;\n    for i in 0..S.len() {\n        if\
    \ S.chars().nth(i).unwrap() == '.' || S.chars().nth(i).unwrap() == '?' || S.chars().nth(i).unwrap()\
    \ == '!' {\n            if S.chars().nth(start).unwrap() == 'I' {\n          \
    \      boredoms += 1;\n            }\n            start = i + 2;\n        }\n\
    \    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsahffyn2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let words:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let boredoms: Vec<&str> = words.iter().filter(|s| s.starts_with(\"I\")).collect();\n\
    \    boredoms.len() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `&&str`\n    --> /tmp/tmpla1epgw5.rs:11:75\n     |\n11\
    \   |     let boredoms: Vec<&str> = words.iter().filter(|s| s.starts_with(\"I\"\
    )).collect();\n     |                                                        \
    \                   ^^^^^^^ value of type `Vec<&str>` cannot be built from `std::iter::Iterator<Item=&&str>`\n\
    \     |\n     = help: the trait `FromIterator<&&str>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!').collect();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvjbqc25p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let S = S.to_lowercase();\n    let sentences = S.split(|c|\
    \ c == '.' || c == '?' || c == '!');\n    for sentence in sentences {\n      \
    \  let words = sentence.split_whitespace();\n        for word in words {\n   \
    \         if word == \"i\" {\n                boredoms += 1;\n               \
    \ break;\n            }\n        }\n    }\n    boredoms\n}\n\nfn main() {\n  \
    \  let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp32zmvm9z.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let B\
    \ = S.split(|x| x == '.' || x == '?' || x == '!').count();\n    let mut c = 0;\n\
    \    for s in S.split(|x| x == '.' || x == '?' || x == '!') {\n        if s.starts_with(\"\
    I\") {\n            c += 1;\n        }\n    }\n    return c;\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmph13w5dv4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut begin = 0;\n    for (i, ch) in S.chars().enumerate()\
    \ {\n        if ch == '.' || ch == '?' || ch == '!' {\n            let substr\
    \ = &S[begin..i];\n            if substr.len() > 0 && substr.starts_with(\"I\"\
    ) {\n                count += 1;\n            }\n            begin = i + 1;\n\
    \        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwup7p7ep.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut s = String::new();\n    for c in S.chars() {\n  \
    \      s.push(c);\n        if c == '.' || c == '?' || c == '!' {\n           \
    \ let words: Vec<&str> = s.split_whitespace().collect();\n            if words.len()\
    \ > 0 && words[0] == \"I\" {\n                boredoms += 1;\n            }\n\
    \            s.clear();\n        }\n    }\n    return boredoms;\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut words = S.split_whitespace();\n    for word in words\
    \ {\n        if word == \"I\" {\n            count += 1;\n        }\n    }\n \
    \   count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpoofxtpee.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut letters = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    for letter in letters {\n        if letter.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdrq1vaw6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ num_boredoms = 0;\n    for sentence in S.split(|c| c == '.' || c == '?' || c\
    \ == '!') {\n        if sentence.starts_with(\"I\") {\n            num_boredoms\
    \ += 1;\n        }\n    }\n    num_boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0qlpd8cz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ v: Vec<&str> = S.split_terminator(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut count = 0;\n    for i in 0..v.len() {\n        let w: Vec<&str> =\
    \ v[i].split_whitespace().collect();\n        if w.len() > 0 && w[0] == \"I\"\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let boring_words\
    \ = vec![\"I\".to_string()];\n    let mut borings = 0;\n    let mut sentences\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    for sentence in\
    \ sentences {\n        let words = sentence.split_whitespace();\n        for word\
    \ in words {\n            if boring_words.contains(&word.to_string()) {\n    \
    \            borings += 1;\n                break;\n            }\n        }\n\
    \    }\n    borings\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4m7pyoii.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S.chars().nth(i).unwrap()\
    \ == 'I' {\n            while S.chars().nth(i).unwrap() != '.' {\n           \
    \     i += 1;\n            }\n            count += 1;\n        }\n        i +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp_5vhahp4.rs:14:36\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentences\
    \ = S.split(|c: char| \"!?.\".contains(c));\n    let mut boredoms = 0;\n    for\
    \ sentence in sentences {\n        let words = sentence.split_whitespace();\n\
    \        if words.count() > 0 && words.next().unwrap() == \"I\" {\n          \
    \  boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `words` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmppv4g1l2d.rs:14:33\n   |\n13 |         let words = sentence.split_whitespace();\n\
    \   |             ----- help: consider changing this to be mutable: `mut words`\n\
    14 |         if words.count() > 0 && words.next().unwrap() == \"I\" {\n   |  \
    \                               ^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]:\
    \ borrow of moved value: `words`\n   --> /tmp/tmppv4g1l2d.rs:14:33\n    |\n13\
    \  |         let words = sentence.split_whitespace();\n    |             -----\
    \ move occurs because `words` has type `SplitWhitespace<'_>`, which does not implement\
    \ the `Copy` trait\n14  |         if words.count() > 0 && words.next().unwrap()\
    \ == \"I\" {\n    |                  -------        ^^^^^^^^^^^^ value borrowed\
    \ here after move\n    |                  |\n    |                  `words` moved\
    \ due to this method call\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `words`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0382, E0596.\nFor more information about\
    \ an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let split_on_terminator = |character| {\n        S.split(character).for_each(|s|\
    \ {\n            if s.starts_with(\"I\") {\n                count += 1;\n    \
    \        }\n        });\n    };\n    split_on_terminator('.');\n    split_on_terminator('?');\n\
    \    split_on_terminator('!');\n    count\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `split_on_terminator` as mutable, as it is\
    \ not declared as mutable\n  --> /tmp/tmpddm6giub.rs:18:5\n   |\n11 |     let\
    \ split_on_terminator = |character| {\n   |         ------------------- help:\
    \ consider changing this to be mutable: `mut split_on_terminator`\n...\n14 | \
    \                count += 1;\n   |                 ----- calling `split_on_terminator`\
    \ requires mutable binding due to mutable borrow of `count`\n...\n18 |     split_on_terminator('.');\n\
    \   |     ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot\
    \ borrow `split_on_terminator` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpddm6giub.rs:19:5\n   |\n11 |     let split_on_terminator = |character|\
    \ {\n   |         ------------------- help: consider changing this to be mutable:\
    \ `mut split_on_terminator`\n...\n14 |                 count += 1;\n   |     \
    \            ----- calling `split_on_terminator` requires mutable binding due\
    \ to mutable borrow of `count`\n...\n19 |     split_on_terminator('?');\n   |\
    \     ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow\
    \ `split_on_terminator` as mutable, as it is not declared as mutable\n  --> /tmp/tmpddm6giub.rs:20:5\n\
    \   |\n11 |     let split_on_terminator = |character| {\n   |         -------------------\
    \ help: consider changing this to be mutable: `mut split_on_terminator`\n...\n\
    14 |                 count += 1;\n   |                 ----- calling `split_on_terminator`\
    \ requires mutable binding due to mutable borrow of `count`\n...\n20 |     split_on_terminator('!');\n\
    \   |     ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // write\
    \ your code here\n    let mut count: isize = 0;\n    let sentence: Vec<&str> =\
    \ S.split(|c| c == '.' || c == '?' || c == '!').collect();\n    for value in sentence\
    \ {\n        let words: Vec<&str> = value.split(\" \").collect();\n        if\
    \ words.len() > 0 && words[0] == \"I\" {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp6cggxp6a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let lines: Vec<&str> = S.split(|c| c == '!' || c == '.' ||\
    \ c == '?').collect();\n    for line in lines {\n        if line.trim().starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm7io7n14.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.lines()\n\
    \        .filter(|s| s.starts_with(\"I\"))\n        .count() as isize\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7_txjq1y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.chars()\n\
    \        .fold((0, 0), |(count, ignore), c| {\n            if c == 'I' && ignore\
    \ == 0 {\n                (count + 1, 0)\n            } else if c == '.' || c\
    \ == '?' || c == '!' {\n                (count, 1)\n            } else {\n   \
    \             (count, ignore)\n            }\n        })\n        .0\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphqvg2i25.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  return 0;\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpk8wi466f.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|ch:\
    \ char| ch == '.' || ch == '?' || ch == '!')\n        .filter(|s| s.starts_with(\"\
    I\"))\n        .count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpz4y2dprc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let v:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut n = 0;\n    for s in v {\n        if s.starts_with(\"I\") {\n   \
    \         n += 1;\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3peoqpzu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ bored_count = 0;\n    for word in S.split(\" \") {\n        if word.starts_with(\"\
    I\") {\n            bored_count += 1;\n        }\n    }\n    bored_count\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmh_7okos.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2_5amgyh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ is_counting = false;\n    let mut boredoms = 0;\n    for c in S.chars() {\n\
    \        if c == 'I' {\n            is_counting = true;\n        } else if c ==\
    \ '.' || c == '?' || c == '!' {\n            if is_counting {\n              \
    \  boredoms += 1;\n            }\n            is_counting = false;\n        }\n\
    \    }\n    return boredoms;\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpw51naf4z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  let split\
    \ = S.split_terminator(|c: char| c == '.' || c == '?' || c == '!');\n  split.fold(0,\
    \ |acc, x| {\n    let words = x.split_whitespace();\n    let y = words.next();\n\
    \    match y {\n      Some(y) => {\n        if y == \"I\" {\n          acc + 1\n\
    \        } else {\n          acc\n        }\n      }\n      None => acc,\n   \
    \ }\n  })\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `words` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpnsrz3ijc.rs:13:13\n   |\n12 |     let words = x.split_whitespace();\n\
    \   |         ----- help: consider changing this to be mutable: `mut words`\n\
    13 |     let y = words.next();\n   |             ^^^^^^^^^^^^ cannot borrow as\
    \ mutable\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // your\
    \ code here\n    let mut split = S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!');\n    let mut boredoms = 0;\n    for s in split {\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeoz4x1b0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|word| word.starts_with(\"I\"\
    )).count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuu8ik9eo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ cnt = 0;\n    let mut start = 0;\n    let mut i = 0;\n    while i < S.len()\
    \ {\n        while i < S.len() && S.chars().nth(i).unwrap() != '.' && S.chars().nth(i).unwrap()\
    \ != '?' && S.chars().nth(i).unwrap() != '!' {\n            i += 1;\n        }\n\
    \        let st = &S[start..i];\n        if st.starts_with(\"I\") && st.trim().len()\
    \ != 0 {\n            cnt += 1;\n        }\n        if i < S.len() {\n       \
    \     i += 1;\n        }\n        start = i;\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3bjtpiii.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.lines()\n\
    \        .fold(0, |acc, x| acc + x.matches(\"I\").count() as isize)\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzjwlcun_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  let mut\
    \ ret = 0;\n  let mut idx = 0;\n  let words: Vec<&str> = S.split(|c: char| c ==\
    \ '.' || c == '?' || c == '!').collect();\n  for word in words {\n    let split_word:\
    \ Vec<&str> = word.split_whitespace().collect();\n    if split_word.len() > 0\
    \ && split_word[0] == \"I\" {\n      ret += 1;\n    }\n  }\n  ret\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ bored = 0;\n    let mut chars = S.chars();\n    while let Some(c) = chars.next()\
    \ {\n        if c == 'I' {\n            match chars.next() {\n               \
    \ Some(c) if c == ' ' => {\n                    bored += 1;\n                }\n\
    \                _ => {}\n            }\n        }\n    }\n    bored\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphx4gtax9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let chars = S.chars().collect::<Vec<char>>();\n    let mut i\
    \ = 0;\n    while i < chars.len() {\n        let (s, e) = get_sentence_range(&chars,\
    \ i);\n        if s < chars.len() {\n            let sentence = get_sentence(&chars,\
    \ s, e);\n            if is_bored_sentence(&sentence) {\n                count\
    \ += 1;\n            }\n            i = e;\n        } else {\n            break;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_sentence_range` in this scope\n\
    \  --> /tmp/tmp9p_qx52m.rs:14:22\n   |\n14 |         let (s, e) = get_sentence_range(&chars,\
    \ i);\n   |                      ^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `get_sentence` in this scope\n  --> /tmp/tmp9p_qx52m.rs:16:28\n\
    \   |\n16 |             let sentence = get_sentence(&chars, s, e);\n   |     \
    \                       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_bored_sentence` in this scope\n  --> /tmp/tmp9p_qx52m.rs:17:16\n\
    \   |\n17 |             if is_bored_sentence(&sentence) {\n   |              \
    \  ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let words:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut bored = 0;\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            bored += 1;\n        }\n    }\n    bored\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqsckxrj6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut prev = false;\n    for word in S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!') {\n        if prev {\n            boredoms\
    \ += 1;\n        }\n        prev = word.starts_with(\"I\");\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpym0ol2xl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|x|\
    \ x == '.' || x == '?' || x == '!').filter(|&s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpekynwnct.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut i = 0;\n    let mut is_first_word = true;\n    for\
    \ x in S.chars() {\n        if x == ' ' || x == '.' || x == '?' || x == '!' {\n\
    \            if is_first_word && i == 1 {\n                boredoms += 1;\n  \
    \          }\n            i = 0;\n            is_first_word = true;\n        }\
    \ else {\n            i += 1;\n            is_first_word = false;\n        }\n\
    \    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdh_minec.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.lines()\n\
    \        .map(|x| x.trim())\n        .filter(|x| !x.is_empty())\n        .map(|line|\
    \ {\n            line.split_terminator(|c| c == '!' || c == '?' || c == '.')\n\
    \                .count()\n        })\n        .sum()\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<usize>` is not satisfied\n  \
    \  --> /tmp/tmpjzvhnes0.rs:17:10\n     |\n17   |         .sum()\n     |      \
    \    ^^^ the trait `Sum<usize>` is not implemented for `isize`\n     |\n     =\
    \ help: the following other types implement trait `Sum<A>`:\n               <f32\
    \ as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut cap = false;\n    for c in S.chars() {\n        if\
    \ c.is_uppercase() {\n            cap = true;\n        } else if c == ' ' && cap\
    \ {\n            cap = false;\n        } else if cap && c == 'I' {\n         \
    \   boredoms += 1;\n            cap = false;\n        } else {\n            cap\
    \ = false;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp64zjfof4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let I:\
    \ &[_] = &['.', '?', '!'];\n    let S: Vec<&str> = S.split(I).collect();\n   \
    \ let mut count = 0;\n    for i in S {\n        if i.starts_with(\"I\") {\n  \
    \          count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnjqzd3ej.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ bored = 0;\n    let words: Vec<&str> = S.split_whitespace().collect();\n   \
    \ for i in words {\n        if i == \"I\" {\n            bored += 1;\n       \
    \ }\n    }\n    bored\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuqpdlqn9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.to_lowercase().starts_with(\"\
    i\")).count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpe2heoy12.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ c = 0;\n    let v: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!').collect();\n    for s in v {\n        let w: Vec<&str> = s.split_whitespace().collect();\n\
    \        if w.len() > 0 && w[0] == \"I\" {\n            c += 1;\n        }\n \
    \   }\n    c\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut i = 0;\n    for c in S.chars() {\n        if c == 'I'\
    \ {\n            count += 1;\n        }\n        i += 1;\n        if i < S.len()\
    \ && (S[i - 1..i + 1] == \".\" || S[i - 1..i + 1] == \"?\" || S[i - 1..i + 1]\
    \ == \"!\") {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmpva4sh0sx.rs:17:44\n\
    \   |\n17 |         if i < S.len() && (S[i - 1..i + 1] == \".\" || S[i - 1..i\
    \ + 1] == \"?\" || S[i - 1..i + 1] == \"!\") {\n   |                         \
    \                   ^^ no implementation for `str == &str`\n   |\n   = help: the\
    \ trait `PartialEq<&str>` is not implemented for `str`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n\
    \             <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: can't compare `str` with `&str`\n  -->\
    \ /tmp/tmpva4sh0sx.rs:17:70\n   |\n17 |         if i < S.len() && (S[i - 1..i\
    \ + 1] == \".\" || S[i - 1..i + 1] == \"?\" || S[i - 1..i + 1] == \"!\") {\n \
    \  |                                                                      ^^ no\
    \ implementation for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>`\
    \ is not implemented for `str`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: can't compare `str` with `&str`\n  -->\
    \ /tmp/tmpva4sh0sx.rs:17:96\n   |\n17 |         if i < S.len() && (S[i - 1..i\
    \ + 1] == \".\" || S[i - 1..i + 1] == \"?\" || S[i - 1..i + 1] == \"!\") {\n \
    \  |                                                                         \
    \                       ^^ no implementation for `str == &str`\n   |\n   = help:\
    \ the trait `PartialEq<&str>` is not implemented for `str`\n   = help: "
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm1vhmrzr.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut begins_with_i = false;\n    for c in S.chars() {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            begins_with_i = false;\n\
    \        } else if c == 'I' {\n            if begins_with_i {\n              \
    \  boredoms += 1;\n            }\n            begins_with_i = true;\n        }\
    \ else {\n            begins_with_i = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp4eefxt64.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // write\
    \ your code here\n    let mut count = 0;\n    let words = S.split(|c: char| c\
    \ == '.' || c == '?' || c == '!');\n    for word in words {\n        let ws: Vec<&str>\
    \ = word.split_whitespace().collect();\n        if ws.len() > 0 && ws[0] == \"\
    I\" {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let count\
    \ = |acc, x| {\n        if x.trim().starts_with(\"I\") {\n            acc + 1\n\
    \        } else {\n            acc\n        }\n    };\n    S.split(|c| c == '.'\
    \ || c == '?' || c == '!').fold(0, count)\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmph_izhsxu.rs:10:23\n\
    \   |\n10 |     let count = |acc, x| {\n   |                       ^ consider\
    \ giving this closure parameter a type\n   |\n   = note: type must be known at\
    \ this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // Your\
    \ code here\n    let mut count = 0;\n    let mut is_bored = false;\n    for c\
    \ in S.chars() {\n        if c == ' ' {\n            is_bored = false;\n     \
    \   }\n        if is_bored && c == 'I' {\n            count += 1;\n        }\n\
    \        if c == 'I' {\n            is_bored = true;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8ev2i84a.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ num_boredoms = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!').collect();\n    for w in words {\n        let w: Vec<&str>\
    \ = w.split_whitespace().collect();\n        if w.len() == 0 {\n            continue;\n\
    \        }\n        if w[0] == \"I\" {\n            num_boredoms += 1;\n     \
    \   }\n    }\n    num_boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut start_word = true;\n    for c in S.chars() {\n  \
    \      if start_word {\n            if c == 'I' {\n                boredoms +=\
    \ 1;\n            }\n            start_word = false;\n        }\n        if c\
    \ == '.' || c == '?' || c == '!' {\n            start_word = true;\n        }\n\
    \    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp05vk27zi.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentence_delimiters\
    \ = vec!['.', '?', '!'];\n    let mut sentence_count = 0;\n    let mut start_index\
    \ = 0;\n    let mut index_vec = Vec::new();\n    for (index, char) in S.chars().enumerate()\
    \ {\n        if sentence_delimiters.contains(&char) {\n            index_vec.push(index);\n\
    \        }\n    }\n    index_vec.push(S.len());\n    for end_index in index_vec\
    \ {\n        let sub_string = &S[start_index..end_index];\n        if sub_string.starts_with(\"\
    I\") {\n            sentence_count += 1;\n        }\n        start_index = end_index\
    \ + 1;\n    }\n    sentence_count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsgy323yn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let sentences = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for sentence in sentences {\n        if sentence.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqimreunw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ bored = 0;\n    let mut started = false;\n    for c in S.chars() {\n       \
    \ if started && (c == '.' || c == '?' || c == '!') {\n            bored += 1;\n\
    \            started = false;\n        }\n        if c == 'I' {\n            started\
    \ = true;\n        }\n    }\n    return bored;\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp15cpddgz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpediu4wbz.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.trim()\n\
    \        .split(|x| x == '!' || x == '.' || x == '?')\n        .filter(|x| x.starts_with(\"\
    I \"))\n        .count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp8z9cgqdn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut sentences = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for sentence in sentences {\n        if sentence.trim_start().starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptrrcsip_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ cnt = 0;\n    let mut is_bored = false;\n    for s in S.split(|c| c == '.' ||\
    \ c == '?' || c == '!') {\n        if s.to_lowercase().starts_with(\"i\") {\n\
    \            cnt += 1;\n            is_bored = true;\n        } else {\n     \
    \       is_bored = false;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppkbd64gv.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ c = 0;\n    let mut buf = String::new();\n    for ch in S.chars() {\n      \
    \  if ch == '.' || ch == '?' || ch == '!' {\n            if buf.trim().starts_with(\"\
    I\") {\n                c += 1;\n            }\n            buf.clear();\n   \
    \     } else {\n            buf.push(ch);\n        }\n    }\n    c\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuw1qcru4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split_terminator(|c:\
    \ char| c == '.' || c == '?' || c == '!')\n        .map(|s| s.trim())\n      \
    \  .filter(|s| s.len() >= 2 && s.to_uppercase().starts_with(\"I \"))\n       \
    \ .count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| !\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".contains(c))\n\
    \     .filter(|s| s.starts_with(\"I\"))\n     .count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdi7dmtsz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let v: Vec<&str> = S.split(|c: char| c == '!' || c == '.' ||\
    \ c == '?').collect();\n    for s in v {\n        let v2: Vec<&str> = s.split_whitespace().collect();\n\
    \        if v2.len() > 0 && v2[0] == \"I\" {\n            count += 1;\n      \
    \  }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ result = 0;\n    let iter = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    for word in iter {\n        if word.trim().starts_with(\"I\") {\n       \
    \     result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmuupusox.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentences\
    \ = S.split(&['.', '?', '!'][..]);\n    sentences.fold(0, |acc, sentence| {\n\
    \        if sentence.starts_with(\"I\") {\n            acc + 1\n        } else\
    \ {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwl7toqxn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let S\
    \ = S.replace(\".\", \"\").replace(\"?\", \"\").replace(\"!\", \"\");\n    let\
    \ x: Vec<&str> = S.split(\" \").collect();\n    let mut count = 0;\n    for i\
    \ in x {\n        if i == \"I\" {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_j16esv4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == ' ' || c == '.' ||\
    \ c == '?' || c == '!');\n    while let Some(word) = words.next() {\n        if\
    \ word == \"I\" {\n            boredoms += 1;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3q5kgtlg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let s_vec:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut count = 0;\n    for s in s_vec {\n        if s.len() > 1 && s.to_uppercase().starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjuwqsf27.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentences\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let mut sum = 0;\n\
    \    for sentence in sentences {\n        if sentence.starts_with(\"I\") {\n \
    \           sum += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpz6pzjoe2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.trim().starts_with(\"I\"\
    )).count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqo9qk2o5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let s: Vec<char> = S.chars().collect();\n    for i in 0..s.len()\
    \ - 1 {\n        let b: String = s[i..i + 2].iter().collect();\n        if b ==\
    \ \"I.\" || b == \"I?\" || b == \"I!\" {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_12wmz3a.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ bored = 0;\n    let mut i = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    for word in i {\n        if word.chars().next().unwrap() == 'I' {\n     \
    \       bored += 1;\n        }\n    }\n    bored\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmph39yma1k.rs:13:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  let mut\
    \ boredoms = 0;\n  let mut sentences = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n  for sentence in sentences {\n    let trimmed = sentence.trim();\n\
    \    if trimmed.len() > 0 {\n      if trimmed.to_lowercase().starts_with(\"i\"\
    ) {\n        boredoms += 1;\n      }\n    }\n  }\n  boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2u2n8d47.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let words:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut count = 0;\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzfzq475i.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ result = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsjzf6t4l.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentences\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let mut count =\
    \ 0;\n    for sentence in sentences {\n        let words = sentence.split(\" \"\
    );\n        if words.clone().take(1).last().unwrap_or(\"\") == \"I\" {\n     \
    \       count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpwpk4vgse.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| {\n        if s.len() ==\
    \ 0 {\n            return false;\n        }\n        let first_word = s.split('\
    \ ').next().unwrap();\n        return first_word == \"I\";\n    }).count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpetf3yil6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut first_word = true;\n    for word in S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!') {\n        for chunk in word.split_whitespace()\
    \ {\n            if first_word && chunk == \"I\" {\n                boredoms +=\
    \ 1;\n            }\n            first_word = false;\n        }\n        first_word\
    \ = true;\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let v:\
    \ Vec<&str> = S.split_terminator(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut cnt = 0;\n    for s in v {\n        if s.starts_with(\"I\") {\n \
    \           cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4jie87ke.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let words:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut sum = 0;\n    for word in words {\n        let mut split_words: Vec<&str>\
    \ = word.split_whitespace().collect();\n        if split_words.len() > 0 && split_words[0]\
    \ == \"I\" {\n            sum += 1;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| !\"aeiou\".contains(c))\n        .filter(|s| s.chars().next().unwrap()\
    \ == 'I')\n        .count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpwdwynycu.rs:11:38\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    if S.len()\
    \ == 0 {\n        return 0;\n    }\n    S.split(|c| { c == '.' || c == '?' ||\
    \ c == '!' })\n        .filter(|s| s.starts_with(\"I\"))\n        .count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphrc9zv55.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredom_count = 0;\n    let mut i = 0;\n    let mut sentence_end = false;\n\
    \    for ch in S.chars() {\n        if sentence_end {\n            if ch == 'I'\
    \ {\n                boredom_count += 1;\n            }\n            sentence_end\
    \ = false;\n        }\n        if ch == '.' || ch == '?' || ch == '!' {\n    \
    \        sentence_end = true;\n        }\n        i += 1;\n    }\n    boredom_count\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcutrg11v.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split_whitespace();\n    for word in words\
    \ {\n        if word == \"I\" {\n            boredoms += 1;\n        }\n    }\n\
    \    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj81r89h9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ res = 0;\n    let v: Vec<&str> = S.split(|c| c == '.' || c == '?' || c == '!').collect();\n\
    \    for s in v {\n        if s.starts_with(\"I\") {\n            res += 1;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbh4a33kf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|x| x.starts_with(\"I\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqfr_w0pm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    if !S.contains(\"\
    I\") {\n        return 0;\n    }\n    let mut count = 0;\n    let sentences =\
    \ S.split(|c| c == '.' || c == '?' || c == '!');\n    for sentence in sentences\
    \ {\n        if sentence.starts_with(\"I\") {\n            count += 1;\n     \
    \   }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n   \
    \ assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxlerglq2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let s\
    \ = S.trim();\n    let mut count = 0;\n    let mut i = 0;\n    let mut start =\
    \ 0;\n    while i < s.len() {\n        if s.chars().nth(i).unwrap() == '.' ||\
    \ s.chars().nth(i).unwrap() == '?' || s.chars().nth(i).unwrap() == '!' {\n   \
    \         if &s[start..i].to_string()[..] == \"I\" {\n                count +=\
    \ 1;\n            }\n            start = i + 1;\n        }\n        i += 1;\n\
    \    }\n    if &s[start..i].to_string()[..] == \"I\" {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpr017xyvh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n    for w in words {\n        let mut v: Vec<&str>\
    \ = w.split_whitespace().collect();\n        if v.len() > 0 && v[0] == \"I\" {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ string = S.clone();\n    let mut count = 0;\n    while string.contains(\".\"\
    ) || string.contains(\"?\") || string.contains(\"!\") {\n        let mut words\
    \ = string.split(|c| c == '.' || c == '?' || c == '!');\n        let first_word\
    \ = words.next().unwrap();\n        if first_word.starts_with(\"I\") {\n     \
    \       count += 1;\n        }\n        string = words.collect::<Vec<&str>>().join(\"\
    \");\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdb35er30.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n    for word in words {\n        if word.chars().nth(0).unwrap()\
    \ == 'I' {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmppmlth6d9.rs:13:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ bored = 0;\n    let mut bored_word = false;\n    for c in S.chars() {\n    \
    \    if bored_word {\n            bored_word = !(c == '.' || c == '?' || c ==\
    \ '!');\n        } else {\n            bored_word = c == 'I';\n        }\n   \
    \     if !bored_word {\n            bored += 1;\n        }\n    }\n    bored\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11`,\n right: `0`', /tmp/tmps77xz855.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ cnt = 0;\n    let mut prev = '\\0';\n    for (i, c) in S.chars().enumerate()\
    \ {\n        if c == '!' || c == '?' || c == '.' {\n            if i > 0 && prev\
    \ == 'I' {\n                cnt += 1;\n            }\n        }\n        prev\
    \ = c;\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpslqwvk_t.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let s\
    \ = S.to_lowercase();\n    let words: Vec<&str> = s.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!').collect();\n    let mut counter = 0;\n    for word in\
    \ words {\n        let words: Vec<&str> = word.split_whitespace().collect();\n\
    \        if words.len() > 0 && words[0] == \"i\" {\n            counter += 1;\n\
    \        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.replace(|c:\
    \ char| !c.is_alphabetic(), \" \")\n        .split_whitespace()\n        .map(|s|\
    \ if s == \"I\" { 1 } else { 0 })\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphgt_urqu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ cnt = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n        if\
    \ is_bored {\n            is_bored = false;\n            if c != 'I' {\n     \
    \           cnt += 1;\n            }\n        }\n        if c == '.' || c == '?'\
    \ || c == '!' {\n            is_bored = true;\n        }\n    }\n    cnt\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxjvq47mk.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ n = 0;\n    let mut word = false;\n    for c in S.chars() {\n        match c\
    \ {\n            'I' => {\n                if word {\n                    n +=\
    \ 1;\n                }\n                word = false;\n            }\n      \
    \      '.' | '?' | '!' => {\n                word = true;\n            }\n   \
    \         _ => {}\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpthttrqlg.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.matches(\"\
    I\").count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvkd7qpvu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let words: Vec<&str> = S.split(|c: char| !c.is_alphabetic()).collect();\n\
    \    for w in words {\n        if w == \"I\" {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9ke3c__9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredom = 0;\n    let char_vec: Vec<char> = S.chars().collect();\n    let mut\
    \ iter = char_vec.iter();\n    loop {\n        match iter.next() {\n         \
    \   Some(&'I') => {\n                if iter.next() == Some(&' ') {\n        \
    \            boredom += 1;\n                }\n            }\n            Some(&'.')\
    \ | Some(&'!') | Some(&'?') => {\n                loop {\n                   \
    \ match iter.next() {\n                        Some(&' ') => break,\n        \
    \                Some(&'I') => {\n                            if iter.next() ==\
    \ Some(&' ') {\n                                boredom += 1;\n              \
    \              }\n                        }\n                        None => break,\n\
    \                        _ => continue,\n                    }\n             \
    \   }\n            }\n            None => break,\n            _ => continue,\n\
    \        }\n    }\n    boredom\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt9hb2n8d.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    if S.starts_with(\"\
    I\") {\n        1\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwh8ggu78.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.chars()\n\
    \        .scan(None, |state, c| {\n            if let Some(s) = state {\n    \
    \            if *s == 0 && c == 'I' {\n                    *state = Some(1);\n\
    \                } else if c == '.' || c == '?' || c == '!' {\n              \
    \      *state = Some(0);\n                }\n            } else {\n          \
    \      *state = Some(0);\n            }\n            Some(c)\n        })\n   \
    \     .filter(|c| *c == 'I')\n        .count() as isize\n}\n\nfn main() {\n  \
    \  let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6p9_0rk1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!');\n    for word in words {\n        let split = word.split(\" \");\n\
    \        let mut found = false;\n        for s in split {\n            if s ==\
    \ \"I\" {\n                found = true;\n            }\n        }\n        if\
    \ found {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqggu7dpw.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut skip = false;\n    for (i, c) in S.chars().enumerate()\
    \ {\n        if skip {\n            skip = false;\n            continue;\n   \
    \     }\n        match c {\n            '.' | '?' | '!' => {\n               \
    \ if i > 0 && S.chars().nth(i - 1).unwrap() == 'I' {\n                    boredoms\
    \ += 1;\n                }\n            }\n            'I' => {\n            \
    \    if i < S.len() - 1 && S.chars().nth(i + 1).unwrap() == ' ' {\n          \
    \          boredoms += 1;\n                }\n            }\n            ' ' =>\
    \ skip = true,\n            _ => {}\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmprq4957q7.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    // Your\
    \ code here\n    let mut result = 0;\n    let mut words = S.split(|c: char| c\
    \ == '.' || c == '?' || c == '!');\n    for sentence in words {\n        let first_word\
    \ = sentence.split_whitespace().next().unwrap();\n        if first_word == \"\
    I\" {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpa9tggabl.rs:14:61\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ num_boredoms = 0;\n    let chars = S.chars().peekable();\n    for c in chars\
    \ {\n        if c == 'I' {\n            num_boredoms += 1;\n        } else if\
    \ c == '.' || c == '?' || c == '!' {\n            continue;\n        } else {\n\
    \            continue;\n        }\n    }\n    num_boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp28gkz2k2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| s.trim().starts_with(\"I\"\
    )).count() as isize\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7dwhn1ln.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut it = S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!');\n    for sentence in it {\n        let mut it2 = sentence.split_whitespace();\n\
    \        if it2.next() == Some(\"I\") {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').map(|s| {\n        s.split_whitespace().nth(0).map_or(0,\
    \ |s| if s == \"I\" { 1 } else { 0 })\n    }).sum()\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|x| x == ' ' || x == '.' || x ==\
    \ '?' || x == '!');\n    loop {\n        match words.next() {\n            Some(word)\
    \ => {\n                if word == \"I\" {\n                    boredoms += 1;\n\
    \                }\n            }\n            None => {\n                break;\n\
    \            }\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmplznm6ucn.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    if !S.is_empty()\
    \ {\n        let mut boredoms = 0;\n        let sentences = S.split(&['.', '?',\
    \ '!'][..]);\n        for sentence in sentences {\n            let words = sentence.split_whitespace();\n\
    \            if let Some(word) = words.next() {\n                if word == \"\
    I\" {\n                    boredoms += 1;\n                }\n            }\n\
    \        }\n        boredoms\n    } else {\n        0\n    }\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `words` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpiox_wrk3.rs:15:33\n   |\n14 |             let words =\
    \ sentence.split_whitespace();\n   |                 ----- help: consider changing\
    \ this to be mutable: `mut words`\n15 |             if let Some(word) = words.next()\
    \ {\n   |                                 ^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut start_sentence = true;\n    for word in S.split_whitespace()\
    \ {\n        let word = word.trim_matches(|c| c == '.' || c == '?' || c == '!');\n\
    \        if start_sentence && word == \"I\" {\n            boredoms += 1;\n  \
    \      }\n        start_sentence = word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpfcqtr1ni.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let re = Regex::new(r\"(\\bI\\b)\").unwrap();\n    let S = S.split_terminator('.').collect::<Vec<&str>>();\n\
    \    for s in S {\n        if re.is_match(s) {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n  -->\
    \ /tmp/tmpoj5xr3m_.rs:11:14\n   |\n11 |     let re = Regex::new(r\"(\\bI\\b)\"\
    ).unwrap();\n   |              ^^^^^ use of undeclared type `Regex`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').map(|x| x.to_lowercase().starts_with(\"\
    i\") as isize).sum()\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpko8v4bve.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let sentences\
    \ = S.split_whitespace();\n    let mut boredoms = 0;\n    for sentence in sentences\
    \ {\n        let mut words = sentence.split_terminator(&['.', '?', '!']);\n  \
    \      if words.next() == Some(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpip5z70cg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ x = 0;\n    let mut i = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    for j in i {\n        if j.starts_with(\"I\") {\n            x += 1;\n  \
    \      }\n    }\n    x\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpebqbl5uq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let v: Vec<_> = S.split(|c| c == '.' || c == '?' || c == '!').collect();\n\
    \    for i in v {\n        if i.starts_with(\"I\") {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6dak4pfm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ result = 0;\n    let mut dot_count = 0;\n    let mut is_prev_space = false;\n\
    \    for letter in S.chars() {\n        match letter {\n            '.' | '?'\
    \ | '!' => {\n                if dot_count == 1 {\n                    result\
    \ += 1;\n                }\n                dot_count = 0;\n                is_prev_space\
    \ = true;\n            }\n            ' ' => {\n                if is_prev_space\
    \ {\n                    dot_count = 0;\n                }\n                is_prev_space\
    \ = true;\n            }\n            'I' => {\n                if is_prev_space\
    \ {\n                    dot_count = 1;\n                }\n                is_prev_space\
    \ = false;\n            }\n            _ => {\n                dot_count = 0;\n\
    \                is_prev_space = false;\n            }\n        }\n    }\n   \
    \ if dot_count == 1 {\n        result += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6uex_v7s.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').filter(|s| {\n        if s.is_empty()\
    \ {\n            false\n        } else {\n            let ws: Vec<&str> = s.split_whitespace().collect();\n\
    \            if ws.is_empty() {\n                false\n            } else {\n\
    \                ws[0] == \"I\"\n            }\n        }\n    }).count() as isize\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    S.split(&['.',\
    \ '?', '!'][..]).filter(|s| s.starts_with(\"I\")).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvu7r26f0.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut start_with_i = false;\n    for c in S.chars() {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            start_with_i = false;\n\
    \        } else if c == 'I' {\n            start_with_i = true;\n        } else\
    \ if start_with_i && c != ' ' {\n            boredoms += 1;\n            start_with_i\
    \ = false;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwqif30z5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n  S.split_whitespace()\n\
    \    .filter(|s| *s == \"I\")\n    .collect::<Vec<&str>>()\n    .len() as isize\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp0lm_hly.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut l = S.len();\n\
    \    let mut k = l - 1;\n    let mut S = S.into_bytes();\n    while j < l {\n\
    \        if S[j] == 'I' as u8 && j == 0 {\n            boredoms += 1;\n      \
    \  } else if S[j] == 'I' as u8 && j == k && S[j - 1] == '.' as u8 {\n        \
    \    boredoms += 1;\n        } else if S[j] == 'I' as u8 && j != 0 && j != k &&\
    \ (S[j - 1] == '.' as u8 || S[j - 1] == '?' as u8 || S[j - 1] == '!' as u8) {\n\
    \            boredoms += 1;\n        }\n        j += 1;\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpu4rgmi6i.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let s\
    \ = S.as_str();\n    let mut cnt = 0;\n    let v: Vec<&str> = s.split(|c| c ==\
    \ '.' || c == '?' || c == '!').collect();\n    for s in v {\n        let v: Vec<&str>\
    \ = s.split_whitespace().collect();\n        if v.len() > 0 && v[0] == \"I\" {\n\
    \            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut found_i = false;\n    for word in S.split(\" \")\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \      found_i = true;\n        } else if found_i && (word.ends_with(\"!\") ||\
    \ word.ends_with(\".\") || word.ends_with(\"?\")) {\n            found_i = false;\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8fq3oh_w.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let is_capital_i\
    \ = |ch: char| {\n        ch == 'I'\n    };\n    let is_uppercase = |ch: char|\
    \ {\n        ch.is_uppercase()\n    };\n    let mut cnt = 0;\n    let mut words\
    \ = S.split(|ch: char| {\n        ch == '.' || ch == '?' || ch == '!'\n    });\n\
    \    while let Some(word) = words.next() {\n        let mut chars = word.trim().chars();\n\
    \        if chars.next().map_or(false, is_capital_i) && chars.next().map_or(true,\
    \ is_uppercase) {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8xas7vfp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boring = 0;\n    let mut i = 0;\n    for word in S.split(|c: char| c == '.'\
    \ || c == '?' || c == '!') {\n        if word.trim().chars().next().unwrap() ==\
    \ 'I' {\n            boring += 1;\n        }\n    }\n    boring\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpz5py4_jm.rs:13:39\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let words:\
    \ Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut counter = 0;\n    for word in words {\n        if word.trim().starts_with(\"\
    I\") {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1_y743sa.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut cnt = 0;\n    let v: Vec<char> = S.chars().collect();\n\
    \    for i in 0..v.len() {\n        if (v[i] == 'I') {\n            cnt += 1;\n\
    \        }\n        if (v[i] == '.' || v[i] == '?' || v[i] == '!') {\n       \
    \     count += cnt;\n            cnt = 0;\n        }\n    }\n    return count;\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm4eprn1r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
