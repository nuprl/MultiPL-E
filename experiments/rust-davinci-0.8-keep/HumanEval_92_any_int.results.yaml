name: HumanEval_92_any_int
language: rust
results:
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() &&\n        (x\
    \ == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpwh2sczle.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |       ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpwh2sczle.rs:10:25\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpwh2sczle.rs:10:43\n   |\n\
    10 |     x.is_integer() && y.is_integer() && z.is_integer() &&\n   |         \
    \                                  ^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    ((x + y) == z || (x + z) == y || (y + z) == x) && (x.is_integer()\
    \ && y.is_integer() && z.is_integer())\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpvrczkb10.rs:10:58\n   |\n10 |     ((x + y) == z\
    \ || (x + z) == y || (y + z) == x) && (x.is_integer() && y.is_integer() && z.is_integer())\n\
    \   |                                                          ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpvrczkb10.rs:10:76\n   |\n10 |    \
    \ ((x + y) == z || (x + z) == y || (y + z) == x) && (x.is_integer() && y.is_integer()\
    \ && z.is_integer())\n   |                                                   \
    \                         ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpvrczkb10.rs:10:94\n   |\n10 |     ((x + y) == z || (x + z) == y || (y\
    \ + z) == x) && (x.is_integer() && y.is_integer() && z.is_integer())\n   |   \
    \                                                                            \
    \               ^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x - y).abs() + (x - z).abs() == y + z && (x - y).abs() == x - y\
    \ && (x - z).abs() == x - z\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjapa917q.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum = x + y + z;\n    if x.round() == sum - y - z {\n      \
    \  return true;\n    } else if y.round() == sum - x - z {\n        return true;\n\
    \    } else if z.round() == sum - x - y {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphku9820z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x == y +\
    \ z || x == y - z || x == z - y)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzdy9kpfl.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x == y + z || x == y - z || x == z -\
    \ y)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpzdy9kpfl.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x == y\
    \ + z || x == y - z || x == z - y)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpzdy9kpfl.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || x == y\
    \ - z || x == z - y)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_finite() && y.is_finite() && z.is_finite() &&\n        (x +\
    \ y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbqyfukcy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    // a `f64` can't be passed to a `u8`\n    (x.round() == y.round()\
    \ + z.round())\n        || (y.round() == x.round() + z.round())\n        || (z.round()\
    \ == x.round() + y.round())\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphmtknbvr.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    // if either of the values are not ints return false\n    if x.fract()\
    \ != 0.0 || y.fract() != 0.0 || z.fract() != 0.0 {\n        return false;\n  \
    \  }\n    // if any two of the values add up to the 3rd return true\n    x + y\
    \ == z || x + z == y || y + z == x\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2mt_gd89.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    ((x + y == z) || (x + z == y) || (y + z == x)) && (x.is_integer()\
    \ && y.is_integer() && z.is_integer())\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmphkchi9s6.rs:10:58\n   |\n10 |     ((x + y == z)\
    \ || (x + z == y) || (y + z == x)) && (x.is_integer() && y.is_integer() && z.is_integer())\n\
    \   |                                                          ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmphkchi9s6.rs:10:76\n   |\n10 |    \
    \ ((x + y == z) || (x + z == y) || (y + z == x)) && (x.is_integer() && y.is_integer()\
    \ && z.is_integer())\n   |                                                   \
    \                         ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmphkchi9s6.rs:10:94\n   |\n10 |     ((x + y == z) || (x + z == y) || (y\
    \ + z == x)) && (x.is_integer() && y.is_integer() && z.is_integer())\n   |   \
    \                                                                            \
    \               ^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_finite() && y.is_finite() && z.is_finite() {\n        return\
    \ (x + y == z) || (x + z == y) || (y + z == x);\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8wmb55gc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum = x + y + z;\n    if x.is_integer() && y.is_integer() &&\
    \ z.is_integer() {\n        x == sum - y - z || y == sum - x - z || z == sum -\
    \ x - y\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmptoq8bzut.rs:11:10\n   |\n11 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmptoq8bzut.rs:11:28\n   |\n11 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmptoq8bzut.rs:11:46\n   |\n\
    11 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x + y == z || x + z == y || y + z == x {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpz_imrqv0.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpz_imrqv0.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpz_imrqv0.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    // check if any of the three numbers are equal to the sum of the\
    \ other two\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpau_w4b1v.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.floor() == x && y.floor() == y && z.floor() == z {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgp8c_bpi.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.floor() == y.floor() + z.floor() || y.floor() == x.floor() + z.floor()\
    \ || z.floor() == x.floor() + y.floor()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_ziis1w0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    return x.floor() == y.floor() + z.floor() || y.floor() == x.floor()\
    \ + z.floor() || z.floor() == x.floor() + y.floor();\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd1e_oun4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x == y +\
    \ z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp_1f391mo.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x == y + z || y == x + z || z == x +\
    \ y)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp_1f391mo.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x == y\
    \ + z || y == x + z || z == x + y)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp_1f391mo.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || y == x\
    \ + z || z == x + y)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 &&\n  \
    \      (x == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6138ggx2.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    fn any_int2(x: i64, y: i64, z: i64) -> bool {\n        (x + y ==\
    \ z) || (x + z == y) || (y + z == x)\n    }\n    match (x.fract(), y.fract(),\
    \ z.fract()) {\n        (0.0, 0.0, 0.0) => any_int2(x as i64, y as i64, z as i64),\n\
    \        _ => false,\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxu526heg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x == (y + z) || y == (x + z) || z == (x + y) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6g_zcfqg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    [x, y, z].iter().any(|&e| e == x + y + z - e && e % 1.0 == 0.0)\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvmn0x0kr.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x = if x.fract() == 0.0 { x as i64 } else { return false };\n\
    \    let y = if y.fract() == 0.0 { y as i64 } else { return false };\n    let\
    \ z = if z.fract() == 0.0 { z as i64 } else { return false };\n    x == y + z\
    \ || y == x + z || z == x + y\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg0aq5prd.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let numbers = vec![x, y, z];\n    numbers\n        .iter()\n   \
    \     .enumerate()\n        .any(|(index, number)| numbers.iter().any(|x| x ==\
    \ &(number + numbers[index]) && x.fract() == 0.0))\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1ilt5uum.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut result = false;\n    if (x - y).abs() as u64 == z as u64\
    \ || (x - z).abs() as u64 == y as u64 {\n        result = true;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz9wam6tw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut number_vec = vec![x, y, z];\n    number_vec.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    number_vec[0] == number_vec[1] - number_vec[2]\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpydjo1432.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x_round = x.round();\n    let y_round = y.round();\n    let\
    \ z_round = z.round();\n    let sum = x_round + y_round;\n    if (x == sum &&\
    \ x == x_round && y == y_round) || (y == sum && y == y_round && x == x_round)\
    \ {\n        return true;\n    }\n    let sum = x_round + z_round;\n    if (x\
    \ == sum && x == x_round && z == z_round) || (z == sum && z == z_round && x ==\
    \ x_round) {\n        return true;\n    }\n    let sum = y_round + z_round;\n\
    \    if (y == sum && y == y_round && z == z_round) || (z == sum && z == z_round\
    \ && y == y_round) {\n        return true;\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw_qqjj2n.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphyla0dkc.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) && (x + y ==\
    \ z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmphjpdgtm2.rs:10:8\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |        ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmphjpdgtm2.rs:10:26\n\
    \   |\n10 |     (x.is_integer() && y.is_integer() && z.is_integer()) && (x + y\
    \ == z || x + z == y || y + z == x)\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmphjpdgtm2.rs:10:44\n   |\n\
    10 |     (x.is_integer() && y.is_integer() && z.is_integer()) && (x + y == z ||\
    \ x + z == y || y + z == x)\n   |                                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  x == y + z || y == x + z || z == x + y\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpggrajymh.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpggrajymh.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpggrajymh.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() &&\n        ((x\
    \ + y == z) || (x + z == y) || (y + z == x))\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpur3u9eti.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |       ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpur3u9eti.rs:10:25\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpur3u9eti.rs:10:43\n   |\n\
    10 |     x.is_integer() && y.is_integer() && z.is_integer() &&\n   |         \
    \                                  ^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x = x.round();\n    let y = y.round();\n    let z = z.round();\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true;\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkrtceldn.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x = x.round();\n    let y = y.round();\n    let z = z.round();\n\
    \    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpef0rqscf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x_is_int = x.fract() == 0.0;\n    let y_is_int = y.fract() ==\
    \ 0.0;\n    let z_is_int = z.fract() == 0.0;\n    let any_is_float = !x_is_int\
    \ || !y_is_int || !z_is_int;\n    let (x, y, z) = (x as i64, y as i64, z as i64);\n\
    \    if x + y == z || x + z == y || y + z == x {\n        return !any_is_float;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl9zif2dg.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n\
    \        return x == y + z || y == x + z || z == x + y;\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr080krsf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    // TODO!\n    let mut result = false;\n    if (x % 1.0 == 0.0) &&\
    \ (y % 1.0 == 0.0) && (z % 1.0 == 0.0) {\n        if (x == y + z) || (y == x +\
    \ z) || (z == x + y) {\n            result = true;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpirrl8nmt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x_int = x.floor() == x;\n    let y_int = y.floor() == y;\n \
    \   let z_int = z.floor() == z;\n    let xy_sum = x + y;\n    let xz_sum = x +\
    \ z;\n    let yz_sum = y + z;\n    (x_int && y_int && z_int) && (x == xy_sum ||\
    \ x == xz_sum || y == xy_sum || y == yz_sum || z == xz_sum || z == yz_sum)\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyljid80k.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut ab = x + y;\n    let mut bc = y + z;\n    let mut ac = x\
    \ + z;\n    if x.trunc() == x && y.trunc() == y && z.trunc() == z {\n        return\
    \ ab.trunc() == z || bc.trunc() == x || ac.trunc() == y;\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpycch_sf1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum = x + y + z;\n    x == sum - x - y || y == sum - x - z ||\
    \ z == sum - x - y\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmgtufab_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprlp90ytr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z) || (y == x + z) || (z == x + y)\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk6lip5nu.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 &&\n  \
    \      (x == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_lp26ltz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && (x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqf5mg2oh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    // let mut result = false;\n    // if (x + y == z) || (x + z ==\
    \ y) || (y + z == x) {\n    //     result = true;\n    // }\n    // result\n \
    \   (x + y == z) || (x + z == y) || (y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4sfeybhu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z || y == x + z || z == x + y) && (x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa8m8atus.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    fn is_int(x: f64) -> bool {\n        x == x.floor()\n    }\n   \
    \ if is_int(x) && is_int(y) && is_int(z) {\n        if x + y == z || x + z ==\
    \ y || y + z == x {\n            return true;\n        }\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphtjipq7a.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_i64() && y.is_i64() && z.is_i64() {\n        return x ==\
    \ y + z || y == x + z || z == x + y;\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_i64` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp4_g7ctny.rs:10:10\n   |\n10 |     if x.is_i64() && y.is_i64()\
    \ && z.is_i64() {\n   |          ^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_i64` found for type `f64` in the current scope\n  --> /tmp/tmp4_g7ctny.rs:10:24\n\
    \   |\n10 |     if x.is_i64() && y.is_i64() && z.is_i64() {\n   |            \
    \            ^^^^^^ method not found in `f64`\n\nerror[E0599]: no method named\
    \ `is_i64` found for type `f64` in the current scope\n  --> /tmp/tmp4_g7ctny.rs:10:38\n\
    \   |\n10 |     if x.is_i64() && y.is_i64() && z.is_i64() {\n   |            \
    \                          ^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x - y).abs() == z || (x - z).abs() == y || (y - z).abs() == x\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9ru58bvl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x + y == z || x + z == y || y + z == x {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp4ag0auyc.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp4ag0auyc.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp4ag0auyc.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) && (x == y\
    \ + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpxxtx2hei.rs:10:8\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) && (x == y + z || y == x + z || z == x\
    \ + y)\n   |        ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpxxtx2hei.rs:10:26\n\
    \   |\n10 |     (x.is_integer() && y.is_integer() && z.is_integer()) && (x ==\
    \ y + z || y == x + z || z == x + y)\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpxxtx2hei.rs:10:44\n   |\n\
    10 |     (x.is_integer() && y.is_integer() && z.is_integer()) && (x == y + z ||\
    \ y == x + z || z == x + y)\n   |                                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum: f64 = x + y + z;\n    let sum: bool = sum.fract() == 0.0;\n\
    \    x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 && sum\n}\n\nfn\
    \ main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0),\
    \ true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjwc9u8d1.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n   \
    \     return false;\n    }\n    if x + y == z || x + z == y || y + z == x {\n\
    \        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp93esjffo.rs:10:11\n   |\n10 |     if !x.is_integer()\
    \ || !y.is_integer() || !z.is_integer() {\n   |           ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp93esjffo.rs:10:30\n   |\n10 |    \
    \ if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n   |           \
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp93esjffo.rs:10:49\n\
    \   |\n10 |     if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n \
    \  |                                                 ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) &&\n      \
    \  (x == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp1sf8ps9l.rs:10:8\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |        ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp1sf8ps9l.rs:10:26\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp1sf8ps9l.rs:10:44\n   |\n\
    10 |     (x.is_integer() && y.is_integer() && z.is_integer()) &&\n   |       \
    \                                     ^^^^^^^^^^ method not found in `f64`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  return x == y + z || y == x + z || z == x + y;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpabxt_owb.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpabxt_owb.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpabxt_owb.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.trunc() == x && y.trunc() == y && z.trunc() == z {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfrov4jkb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 {\n      \
    \  return x == y + z || y == x + z || z == x + y;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq_qqbkt3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmplxasxq20.rs:10:51\n   |\n10 |     (x + y == z ||\
    \ x + z == y || y + z == x) && x.is_integer() && y.is_integer() && z.is_integer()\n\
    \   |                                                   ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmplxasxq20.rs:10:69\n   |\n10 |    \
    \ (x + y == z || x + z == y || y + z == x) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n   |                                                    \
    \                 ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmplxasxq20.rs:10:87\n\
    \   |\n10 |     (x + y == z || x + z == y || y + z == x) && x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n   |                                     \
    \                                                  ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjd5cz21_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp4x09pnpq.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp4x09pnpq.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp4x09pnpq.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  return x == y + z || y == x + z || z == x + y;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpki8szo1s.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpki8szo1s.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpki8szo1s.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  x == y + z || y == x + z || z == x + y\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpsmysy3_t.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpsmysy3_t.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpsmysy3_t.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x == y +\
    \ z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpogxg8xj3.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x == y + z || y == x + z || z == x +\
    \ y)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpogxg8xj3.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x == y\
    \ + z || y == x + z || z == x + y)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpogxg8xj3.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || y == x\
    \ + z || z == x + y)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.floor() == x && y.floor() == y && z.floor() == z {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprbmls3kc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum: f64 = x + y + z;\n    sum == x.floor() + y.floor() + z.floor()\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgkxebc_2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x = x.trunc();\n    let y = y.trunc();\n    let z = z.trunc();\n\
    \    if x == y + z || y == x + z || z == x + y {\n        true\n    } else {\n\
    \        false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx_43t1s6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x - y).abs() < std::f64::EPSILON && x.is_sign_positive()\n    \
    \    || (x - z).abs() < std::f64::EPSILON && x.is_sign_positive()\n        ||\
    \ (y - z).abs() < std::f64::EPSILON && y.is_sign_positive()\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa1nt46ht.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x + y == z || x + z == y || y + z == x {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpbffmi8k7.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpbffmi8k7.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpbffmi8k7.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut result = false;\n    if (x == y + z) && (x.fract() == 0.0)\
    \ && (y.fract() == 0.0) && (z.fract() == 0.0) {\n        result = true;\n    }\
    \ else if (y == x + z) && (x.fract() == 0.0) && (y.fract() == 0.0) && (z.fract()\
    \ == 0.0) {\n        result = true;\n    } else if (z == x + y) && (x.fract()\
    \ == 0.0) && (y.fract() == 0.0) && (z.fract() == 0.0) {\n        result = true;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp88qi3kj7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z) | (x + z == y) | (y + z == x)\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpho7009zx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x == y + z && x.fract() == 0. {\n        return true;\n    }\n\
    \    if y == x + z && y.fract() == 0. {\n        return true;\n    }\n    if z\
    \ == x + y && z.fract() == 0. {\n        return true;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbyxd53rm.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let xi = x.floor() == x;\n    let yi = y.floor() == y;\n    let\
    \ zi = z.floor() == z;\n    let is_int = xi && yi && zi;\n    let xy = x == y\
    \ + z;\n    let xz = x == z + y;\n    let yz = y == x + z;\n    if is_int && (xy\
    \ || xz || yz) {\n        true\n    } else {\n        false\n    }\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_j2g95d9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum = x + y + z;\n    x.trunc() + y.trunc() + z.trunc() == sum\
    \ && (x == sum || y == sum || z == sum)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz8dkdysc.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let ints = [x, y, z];\n    let mut flag = false;\n    for i in 0..3\
    \ {\n        for j in 0..3 {\n            if j != i {\n                for k in\
    \ 0..3 {\n                    if k != i && k != j {\n                        if\
    \ ints[j] + ints[k] == ints[i] {\n                            flag = true;\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxdbzy9c3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if (x.is_sign_positive() || x.is_sign_negative()) && (y.is_sign_positive()\
    \ || y.is_sign_negative()) && (z.is_sign_positive() || z.is_sign_negative()) {\n\
    \        return x + y == z || x + z == y || y + z == x;\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjfy53fj9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  return x == y + z || y == x + z || z == x + y;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpbfrnmi1b.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpbfrnmi1b.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpbfrnmi1b.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z || y == x + z || z == x + y) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp8dqf7tji.rs:10:51\n   |\n10 |     (x == y + z ||\
    \ y == x + z || z == x + y) && x.is_integer() && y.is_integer() && z.is_integer()\n\
    \   |                                                   ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp8dqf7tji.rs:10:69\n   |\n10 |    \
    \ (x == y + z || y == x + z || z == x + y) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n   |                                                    \
    \                 ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp8dqf7tji.rs:10:87\n\
    \   |\n10 |     (x == y + z || y == x + z || z == x + y) && x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n   |                                     \
    \                                                  ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  (x == y + z) || (y == x + z) || (z == x + y)\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpjsunf880.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpjsunf880.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpjsunf880.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.trunc() == y.trunc() + z.trunc()) || (y.trunc() == x.trunc()\
    \ + z.trunc()) || (z.trunc() == x.trunc() + y.trunc())\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc6nuidfp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_finite() && y.is_finite() && z.is_finite() {\n        x\
    \ == y + z || y == x + z || z == x + y\n    } else {\n        false\n    }\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3kbcipsm.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpq_vbbw55.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpq_vbbw55.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpq_vbbw55.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsh3_ise1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() &&\n        (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp6ujlk2kn.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |       ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp6ujlk2kn.rs:10:25\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp6ujlk2kn.rs:10:43\n   |\n\
    10 |     x.is_integer() && y.is_integer() && z.is_integer() &&\n   |         \
    \                                  ^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_finite() && y.is_finite() && z.is_finite() {\n        (x\
    \ == y + z) || (y == x + z) || (z == x + y)\n    } else {\n        false\n   \
    \ }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpksi7b5lz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z || y == x + z || z == x + y) && (x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9irmczt7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum: f64 = x + y + z;\n    if x.trunc() == x && y.trunc() ==\
    \ y && z.trunc() == z {\n        return sum % 2.0 == 0.0;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8mk4k2to.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut res = false;\n    if (x - y - z).abs() < 1e-10 || (y - x\
    \ - z).abs() < 1e-10 || (z - x - y).abs() < 1e-10 {\n        res = true;\n   \
    \ }\n    res\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph9w16kcz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.fract() != 0.0\n        && y.fract() != 0.0\n        && z.fract()\
    \ != 0.0\n        && (x + y == z || x + z == y || y + z == x)\n    {\n       \
    \ true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp77ykb498.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z) || (y == x + z) || (z == x + y)\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3mbm90es.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x = x.round();\n    let y = y.round();\n    let z = z.round();\n\
    \    return x == y + z || y == x + z || z == x + y;\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxdcd6rc5.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut result = false;\n    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        if x == y + z || y == x + z || z == x + y {\n \
    \           result = true;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmprs6lo2ew.rs:11:10\n   |\n11 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmprs6lo2ew.rs:11:28\n   |\n11 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmprs6lo2ew.rs:11:46\n   |\n\
    11 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut largest = x;\n    let mut sum = 0.0;\n    if y > largest\
    \ {\n        largest = y;\n    }\n    if z > largest {\n        largest = z;\n\
    \    }\n    sum = x + y + z - largest;\n    if largest == sum {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp6w_1jv3.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z) || (x + z == y) || (y + z == x)\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfncxqbv6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let array = [x, y, z];\n    let sum = array.iter().sum::<f64>();\n\
    \    array.iter().any(|&x| (sum - x).abs() < std::f64::EPSILON && x.fract() ==\
    \ 0.0)\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm7gcba54.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x_is_int = x.floor() == x;\n    let y_is_int = y.floor() ==\
    \ y;\n    let z_is_int = z.floor() == z;\n    if !x_is_int || !y_is_int || !z_is_int\
    \ {\n        return false;\n    }\n    let sum = x + y + z;\n    let (first, second,\
    \ third) = (x, y, z);\n    first == second + third || second == first + third\
    \ || third == first + second\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi3uyqhea.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_finite() == false || y.is_finite() == false || z.is_finite()\
    \ == false {\n        return false;\n    }\n\n    if x == y + z || y == x + z\
    \ || z == x + y {\n        return true;\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpijxp5nbo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n\
    \        x == y + z || y == x + z || z == x + y\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq7pj_w8j.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut result = false;\n    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        if x == y + z || y == x + z || z == x + y {\n \
    \           result = true;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmptc7aav4d.rs:11:10\n   |\n11 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmptc7aav4d.rs:11:28\n   |\n11 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmptc7aav4d.rs:11:46\n   |\n\
    11 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum: i32 = x.round() as i32 + y.round() as i32 + z.round() as\
    \ i32;\n    let any_int = if x.round() as i32 == sum / 2 {\n        true\n   \
    \ } else if y.round() as i32 == sum / 2 {\n        true\n    } else if z.round()\
    \ as i32 == sum / 2 {\n        true\n    } else {\n        false\n    };\n   \
    \ any_int\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9cgbxx5r.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x == y + z || y == x + z || z == x + y {\n        if x == x.round()\
    \ && y == y.round() && z == z.round() {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfzqs3dbp.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    return x.is_integer() && y.is_integer() && z.is_integer() &&\n \
    \       (x + y == z || x + z == y || y + z == x);\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpuq06ssej.rs:10:14\n   |\n10 |     return x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |              ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpuq06ssej.rs:10:32\n   |\n10 |    \
    \ return x.is_integer() && y.is_integer() && z.is_integer() &&\n   |         \
    \                       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpuq06ssej.rs:10:50\n   |\n10 |     return x.is_integer() && y.is_integer()\
    \ && z.is_integer() &&\n   |                                                 \
    \ ^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum = x + y + z;\n    let is_int = sum.fract() == 0.0;\n   \
    \ let xy = x + y;\n    let xz = x + z;\n    let yz = y + z;\n    let xyz = xy\
    \ + z;\n    let x_is_int = x.fract() == 0.0;\n    let y_is_int = y.fract() ==\
    \ 0.0;\n    let z_is_int = z.fract() == 0.0;\n    let xy_is_int = xy.fract() ==\
    \ 0.0;\n    let xz_is_int = xz.fract() == 0.0;\n    let yz_is_int = yz.fract()\
    \ == 0.0;\n    let xyz_is_int = xyz.fract() == 0.0;\n    if is_int {\n       \
    \ if x_is_int && y_is_int && z_is_int {\n            return true;\n        }\n\
    \        if x_is_int && yz_is_int && z_is_int {\n            return true;\n  \
    \      }\n        if x_is_int && y_is_int && xz_is_int {\n            return true;\n\
    \        }\n        if x_is_int && yz_is_int && xyz_is_int {\n            return\
    \ true;\n        }\n        if xy_is_int && y_is_int && z_is_int {\n         \
    \   return true;\n        }\n        if xy_is_int && y_is_int && xz_is_int {\n\
    \            return true;\n        }\n        if xy_is_int && yz_is_int && xz_is_int\
    \ {\n            return true;\n        }\n        if xyz_is_int && y_is_int &&\
    \ z_is_int {\n            return true;\n        }\n        if xyz_is_int && y_is_int\
    \ && xz_is_int {\n            return true;\n        }\n        if xyz_is_int &&\
    \ yz_is_int && xz_is\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_gps9jc1.rs:66:3\n\
    \   |\n9  | fn any_int(x: f64, y: f64, z: f64) -> bool {\n   |               \
    \                             - unclosed delimiter\n...\n23 |     if is_int {\n\
    \   |               - this delimiter might not be properly closed...\n...\n52\
    \ | }\n   | - ...as it matches this but it has different indentation\n...\n66\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp_gps9jc1.rs:52:1\n\
    \   |\n51 |         if xyz_is_int && yz_is_int && xz_is\n   |         -- this\
    \ `if` expression has a condition, but no block\n52 | }\n   | ^ expected `{`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp_gps9jc1.rs:9:39\n  |\n9 | fn any_int(x:\
    \ f64, y: f64, z: f64) -> bool {\n  |    -------                            ^^^^\
    \ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4d23f724.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  return x == y + z || y == x + z || z == x + y;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpm8_q63db.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpm8_q63db.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpm8_q63db.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  return x == y + z || y == x + z || z == x + y;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp4k2fcbiu.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp4k2fcbiu.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp4k2fcbiu.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    // your code here\n    true\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy0bwgcad.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n\
    \        x == y + z || y == x + z || z == x + y\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxi0x33n1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_finite() && y.is_finite() && z.is_finite() {\n        if\
    \ x == y + z || y == x + z || z == x + y {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_ewx475a.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut arr = [x, y, z];\n    arr.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    let [a, b, c] = arr;\n    a == b + c\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn94nc2yf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp3r70290v.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp3r70290v.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp3r70290v.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x == y + z || y == x + z || z == x + y\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5vr_z1ef.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x = x.trunc();\n    let y = y.trunc();\n    let z = z.trunc();\n\
    \    let sum = x + y + z;\n    let mut count = 0;\n    if x == sum - y - z {\n\
    \        count += 1;\n    }\n    if y == sum - x - z {\n        count += 1;\n\
    \    }\n    if z == sum - x - y {\n        count += 1;\n    }\n    return count\
    \ == 1;\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1r9g8foy.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.floor() == x && y.floor() == y && z.floor() == z {\n      \
    \  if x + y == z || x + z == y || y + z == x {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8wavy0bj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp7ozsfjs_.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp7ozsfjs_.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp7ozsfjs_.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmplgqr4vvn.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmplgqr4vvn.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmplgqr4vvn.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && (x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprj6brfu6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_sign_positive() && y.is_sign_positive() && z.is_sign_positive()\
    \ {\n        (x + y == z) || (x + z == y) || (y + z == x)\n    } else {\n    \
    \    false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbn2t2_y3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    ((x - y).abs() == z) || ((x - z).abs() == y) || ((y - z).abs() ==\
    \ x)\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn5mpeh24.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n   \
    \     return false;\n    }\n    if x + y == z || x + z == y || y + z == x {\n\
    \        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmptgrt1dwd.rs:10:11\n   |\n10 |     if !x.is_integer()\
    \ || !y.is_integer() || !z.is_integer() {\n   |           ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmptgrt1dwd.rs:10:30\n   |\n10 |    \
    \ if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n   |           \
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmptgrt1dwd.rs:10:49\n\
    \   |\n10 |     if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n \
    \  |                                                 ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.trunc() == y.trunc() + z.trunc() || y.trunc() == x.trunc() + z.trunc()\
    \ || z.trunc() == x.trunc() + y.trunc()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyhbqs00h.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_sign_positive() && y.is_sign_positive() && z.is_sign_positive()\
    \ {\n        let sum = (x + y + z) as i64;\n        println!(\"any_int: {}\",\
    \ sum);\n        if sum == x as i64 || sum == y as i64 || sum == z as i64 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: "any_int: 6\n"
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnazrrkvx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let (sum, num) = if x.floor() == x && y.floor() == y && z.floor()\
    \ == z {\n        (x + y, z)\n    } else if x.floor() == x && y.floor() == y {\n\
    \        (x + z, y)\n    } else if x.floor() == x && z.floor() == z {\n      \
    \  (y + z, x)\n    } else if y.floor() == y && z.floor() == z {\n        (x +\
    \ y, z)\n    } else {\n        (0.0, 0.0)\n    };\n    (sum.floor() == sum &&\
    \ num.floor() == num) && sum == num\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdu7_qqtl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.fract() != 0. && y.fract() != 0. && z.fract() != 0. {\n   \
    \     return false;\n    }\n    let sum: f64 = x + y + z;\n    let mut numbers:\
    \ Vec<f64> = vec![x, y, z];\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    if numbers[0] + numbers[1] == numbers[2] {\n        return true;\n    }\n\
    \    if numbers[0] + numbers[2] == numbers[1] {\n        return true;\n    }\n\
    \    if numbers[1] + numbers[2] == numbers[0] {\n        return true;\n    }\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsm7p81e_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpmhv1ire5.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpmhv1ire5.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpmhv1ire5.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z || y == x + z || z == x + y) && (x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi6k0hkqs.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum: f64 = x + y + z;\n    if sum.round() == sum {\n       \
    \ return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmkwpiees.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.trunc() + y.trunc() == z.trunc())\n        || (x.trunc() + z.trunc()\
    \ == y.trunc())\n        || (y.trunc() + z.trunc() == x.trunc())\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprbibd1zi.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum: f64 = x + y + z;\n    if !x.is_integer() || !y.is_integer()\
    \ || !z.is_integer() {\n        return false;\n    }\n    if x == sum / 2.0 ||\
    \ y == sum / 2.0 || z == sum / 2.0 {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmplyltxhdh.rs:11:11\n   |\n11 |     if !x.is_integer()\
    \ || !y.is_integer() || !z.is_integer() {\n   |           ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmplyltxhdh.rs:11:30\n   |\n11 |    \
    \ if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n   |           \
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmplyltxhdh.rs:11:49\n\
    \   |\n11 |     if !x.is_integer() || !y.is_integer() || !z.is_integer() {\n \
    \  |                                                 ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut temp = [x, y, z];\n    temp.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    let new = (temp[0] + temp[1]) as i64;\n    let new2 = temp[2] as i64;\n \
    \   new == new2\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbvkpw4ti.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let vec = vec![x, y, z];\n    if vec.iter().filter(|&v| v.fract()\
    \ != 0.0).count() > 0 {\n        return false;\n    }\n    for (i, _v) in vec.iter().enumerate()\
    \ {\n        for (j, _v) in vec.iter().enumerate() {\n            for (k, _v)\
    \ in vec.iter().enumerate() {\n                if i != j && i != k && j != k {\n\
    \                    if vec[i] == vec[j] + vec[k] {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzrze4fmf.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if !(x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0) {\n\
    \        return false;\n    }\n    (x + y == z) || (x + z == y) || (y + z == x)\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6hm546jx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    // Your code goes here\n    unimplemented!()\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz4qtcpjv.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    //(x.is_integer() && y.is_integer() && z.is_integer()) &&\n    //(x\
    \ == y + z || y == x + z || z == x + y)\n    [x, y, z].iter().any(|n| {\n    \
    \    let xyz = [x, y, z].iter().fold(0f64, |acc, n| acc + n);\n        n.is_integer()\
    \ && xyz - n == n\n    })\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmpxkl0j9lh.rs:14:11\n   |\n14 |         n.is_integer()\
    \ && xyz - n == n\n   |           ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxkl0j9lh.rs:14:38\n   |\n14 |         n.is_integer()\
    \ && xyz - n == n\n   |                                      ^ expected `f64`,\
    \ found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |    \
    \     n.is_integer() && xyz - n == *n\n   |                                  \
    \    +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x_int = x.trunc() == x;\n    let y_int = y.trunc() == y;\n \
    \   let z_int = z.trunc() == z;\n    if x_int && y_int && z_int {\n        if\
    \ x + y == z || x + z == y || y + z == x {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4z2g_tam.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let (x, y, z) = (x.floor(), y.floor(), z.floor());\n    x == y +\
    \ z || y == x + z || z == x + y\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbx_ljjgp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    [x, y, z].iter().filter(|&f| f.trunc() == *f).count() == 3 &&\n\
    \        [x, y, z].iter().filter(|&f| {\n            let mut other = [x, y, z].iter().filter(|&f2|\
    \ f2 != f).collect::<Vec<_>>();\n            let sum = other[0] + other[1];\n\
    \            sum == *f\n        }).count() >= 1\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpi9ftqs0t.rs:12:17\n\
    \   |\n12 |             let mut other = [x, y, z].iter().filter(|&f2| f2 != f).collect::<Vec<_>>();\n\
    \   |                 ----^^^^^\n   |                 |\n   |                \
    \ help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0716]: temporary value dropped while borrowed\n  --> /tmp/tmpi9ftqs0t.rs:12:29\n\
    \   |\n12 |             let mut other = [x, y, z].iter().filter(|&f2| f2 != f).collect::<Vec<_>>();\n\
    \   |                             ^^^^^^^^^                                  \
    \               - temporary value is freed at the end of this statement\n   |\
    \                             |\n   |                             creates a temporary\
    \ which is freed while still in use\n13 |             let sum = other[0] + other[1];\n\
    \   |                       ----- borrow later used here\n   |\n   = note: consider\
    \ using a `let` binding to create a longer lived value\n\nerror: aborting due\
    \ to previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0716`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) && ((x == y\
    \ + z) || (y == x + z) || (z == x + y))\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpuj2shk8c.rs:10:8\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) && ((x == y + z) || (y == x + z) || (z\
    \ == x + y))\n   |        ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpuj2shk8c.rs:10:26\n   |\n10 |     (x.is_integer() && y.is_integer()\
    \ && z.is_integer()) && ((x == y + z) || (y == x + z) || (z == x + y))\n   | \
    \                         ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpuj2shk8c.rs:10:44\n   |\n10 |     (x.is_integer() && y.is_integer()\
    \ && z.is_integer()) && ((x == y + z) || (y == x + z) || (z == x + y))\n   | \
    \                                           ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_finite() && y.is_finite() && z.is_finite() {\n        if\
    \ (x + y == z) || (x + z == y) || (y + z == x) {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqws3chb9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum: f64 = x + y + z;\n    x == sum || y == sum || z == sum\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8237rfpj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x == y +\
    \ z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpdlbse9y7.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x == y + z || y == x + z || z == x +\
    \ y)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpdlbse9y7.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x == y\
    \ + z || y == x + z || z == x + y)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpdlbse9y7.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || y == x\
    \ + z || z == x + y)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x == (y + z) && y == (x + z) && z == (x + y) && x == x.round()\
    \ && y == y.round() && z == z.round() {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzczju9n6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.round() + y.round() == z.round() || x.round() + z.round() == y.round()\
    \ || y.round() + z.round() == x.round()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0oupu_ip.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x + y == z || x + z == y || y + z == x\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptagkhfx1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0) && (x\
    \ + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsduiu8tu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.floor() == y.floor() + z.floor() || y.floor() == x.floor() + z.floor()\
    \ || z.floor() == x.floor() + y.floor()\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpodqn7v7o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) && (x == y\
    \ + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpiq7jugbs.rs:10:8\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) && (x == y + z || y == x + z || z == x\
    \ + y)\n   |        ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpiq7jugbs.rs:10:26\n\
    \   |\n10 |     (x.is_integer() && y.is_integer() && z.is_integer()) && (x ==\
    \ y + z || y == x + z || z == x + y)\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpiq7jugbs.rs:10:44\n   |\n\
    10 |     (x.is_integer() && y.is_integer() && z.is_integer()) && (x == y + z ||\
    \ y == x + z || z == x + y)\n   |                                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut result = false;\n    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        result = x == y + z || y == x + z || z == x + y;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp65_f3qny.rs:11:10\n   |\n11 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp65_f3qny.rs:11:28\n   |\n11 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp65_f3qny.rs:11:46\n   |\n\
    11 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.floor() == x && y.floor() == y && z.floor() == z) &&\n      \
    \  (x + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1wrfsugv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if !x.is_finite() || !y.is_finite() || !z.is_finite() {\n      \
    \  return false;\n    }\n    let v = vec![x, y, z];\n    let mut sum = 0.0;\n\
    \    for i in v.iter() {\n        sum += i;\n    }\n    if sum.is_finite() {\n\
    \        for i in v.iter() {\n            if sum - i == i {\n                return\
    \ true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprs6z4szh.rs:20:27\n   |\n\
    20 |             if sum - i == i {\n   |                           ^ expected\
    \ `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n20\
    \ |             if sum - i == *i {\n   |                           +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && (x == x.trunc() && y\
    \ == y.trunc() && z == z.trunc())\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpap8tpcu1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  x == y + z || y == x + z || z == x + y\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpfky9hhvy.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpfky9hhvy.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpfky9hhvy.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let sum: f64 = x + y + z;\n    (sum % 2.0 == 0.0) && (sum % 3.0\
    \ == 0.0)\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpva8j8oje.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp_xr0vi3c.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp_xr0vi3c.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp_xr0vi3c.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0) &&\n\
    \        (x == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzqccgkxr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x = x.round();\n    let y = y.round();\n    let z = z.round();\n\
    \    if x == y + z || x + y == z || x + z == y {\n        true\n    } else {\n\
    \        false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj13cc7yt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let a = x.floor() == x;\n    let b = y.floor() == y;\n    let c\
    \ = z.floor() == z;\n    if a && b && c {\n        x + y == z || x + z == y ||\
    \ y + z == x\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuif1p9ev.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    return (x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0) && (x\
    \ == y + z || y == x + z || z == x + y);\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkejd2yb7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_finite() && y.is_finite() && z.is_finite() {\n        x\
    \ == y + z || y == x + z || z == x + y\n    } else {\n        false\n    }\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc_w2powk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() &&\n        ((x\
    \ == y + z) || (y == x + z) || (z == x + y))\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpxzlt0q8l.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |       ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpxzlt0q8l.rs:10:25\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpxzlt0q8l.rs:10:43\n   |\n\
    10 |     x.is_integer() && y.is_integer() && z.is_integer() &&\n   |         \
    \                                  ^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp8nyvn4fm.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp8nyvn4fm.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp8nyvn4fm.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_sign_positive() && y.is_sign_positive() && z.is_sign_positive()\
    \ {\n        if x.is_integer() && y.is_integer() && z.is_integer() {\n       \
    \     if x == y + z || y == x + z || z == x + y {\n                return true;\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpi8pom7z3.rs:11:14\n   |\n11 |         if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |              ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpi8pom7z3.rs:11:32\n   |\n11 |    \
    \     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |          \
    \                      ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpi8pom7z3.rs:11:50\n\
    \   |\n11 |         if x.is_integer() && y.is_integer() && z.is_integer() {\n\
    \   |                                                  ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) && (x + y ==\
    \ z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpowk9ivx_.rs:10:8\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |        ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpowk9ivx_.rs:10:26\n\
    \   |\n10 |     (x.is_integer() && y.is_integer() && z.is_integer()) && (x + y\
    \ == z || x + z == y || y + z == x)\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpowk9ivx_.rs:10:44\n   |\n\
    10 |     (x.is_integer() && y.is_integer() && z.is_integer()) && (x + y == z ||\
    \ x + z == y || y + z == x)\n   |                                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x - y).abs() == z || (x - z).abs() == y || (y - z).abs() == x\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpndrlmiom.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpoaurtgze.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z ==\
    \ x)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpoaurtgze.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x + y ==\
    \ z || x + z == y || y + z == x)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpoaurtgze.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x + y == z || x + z ==\
    \ y || y + z == x)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.round() == y.round() + z.round() || y.round() == x.round()\
    \ + z.round() || z.round() == x.round() + y.round() {\n        true\n    } else\
    \ {\n        false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt6h0exdf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_finite() && y.is_finite() && z.is_finite() {\n        let\
    \ sum = x + y;\n        x == sum - z || y == sum - z || z == sum - x\n    } else\
    \ {\n        false\n    }\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_8xwule9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp1r7k0uk0.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp1r7k0uk0.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp1r7k0uk0.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && ((x + y ==\
    \ z) || (x + z == y) || (y + z == x))\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmphg3b6qmb.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && ((x + y == z) || (x + z == y) || (y +\
    \ z == x))\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmphg3b6qmb.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && ((x + y\
    \ == z) || (x + z == y) || (y + z == x))\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmphg3b6qmb.rs:10:43\n   |\n\
    10 |     x.is_integer() && y.is_integer() && z.is_integer() && ((x + y == z) ||\
    \ (x + z == y) || (y + z == x))\n   |                                        \
    \   ^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut output = false;\n    let mut total = 0.0;\n    let mut not_sum\
    \ = vec![];\n    let mut sum_vec = vec![];\n    let mut sum = 0.0;\n    let mut\
    \ num = 0.0;\n    let mut sum_bool = false;\n    let mut num_bool = false;\n \
    \   let mut vec = vec![x, y, z];\n    for i in vec.iter() {\n        if i % 1.0\
    \ == 0.0 {\n            not_sum.push(i);\n        } else {\n            sum_vec.push(i);\n\
    \        }\n    }\n    if sum_vec.len() > 1 {\n        return false;\n    }\n\
    \    for i in not_sum.iter() {\n        total += i;\n    }\n    for i in sum_vec.iter()\
    \ {\n        if i % 1.0 == 0.0 {\n            sum_bool = true;\n        } else\
    \ {\n            num_bool = true;\n        }\n        sum += i;\n        num +=\
    \ i;\n    }\n    if sum_bool == true && num_bool == false {\n        if total\
    \ - num == num {\n            output = true;\n        }\n    }\n    output\n}\n\
    \nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0,\
    \ 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&&f64` to `{float}`\n  --> /tmp/tmpd2_7j0_l.rs:30:15\n\
    \   |\n30 |         total += i;\n   |               ^^ no implementation for `{float}\
    \ += &&f64`\n   |\n   = help: the trait `AddAssign<&&f64>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0369]: cannot mod `&&f64` by `{float}`\n  --> /tmp/tmpd2_7j0_l.rs:33:14\n\
    \   |\n33 |         if i % 1.0 == 0.0 {\n   |            - ^ --- {float}\n   |\
    \            |\n   |            &&f64\n   |\nhelp: `%` can be used on `f64`, you\
    \ can dereference `i`\n   |\n33 |         if *i % 1.0 == 0.0 {\n   |         \
    \   +\n\nerror[E0277]: cannot add-assign `&&f64` to `{float}`\n  --> /tmp/tmpd2_7j0_l.rs:38:13\n\
    \   |\n38 |         sum += i;\n   |             ^^ no implementation for `{float}\
    \ += &&f64`\n   |\n   = help: the trait `AddAssign<&&f64>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `&&f64` to `{float}`\n  --> /tmp/tmpd2_7j0_l.rs:39:13\n\
    \   |\n39 |         num += i;\n   |             ^^ no implementation for `{float}\
    \ += &&f64`\n   |\n   = help: the trait `AddAssign<&&f64>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut vec = vec![x, y, z];\n    vec.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    let [a, b, c] = vec;\n    a.is_integer() && b.is_integer() && c.is_integer()\
    \ && a + b == c\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0529]: expected an array or slice, found `Vec<f64>`\n  --> /tmp/tmp4vqwwm_b.rs:12:9\n\
    \   |\n12 |     let [a, b, c] = vec;\n   |         ^^^^^^^^^   --- help: consider\
    \ slicing here: `vec[..]`\n   |         |\n   |         pattern cannot match with\
    \ input type `Vec<f64>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0529`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpy7qz7wd_.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpy7qz7wd_.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpy7qz7wd_.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z) || (x + z == y) || (y + z == x)\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7sf43ap9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && (x.is_integer() && y.is_integer()\
    \ && z.is_integer())\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp61rrw7i1.rs:10:52\n   |\n10 |     (x + y == z ||\
    \ x + z == y || y + z == x) && (x.is_integer() && y.is_integer() && z.is_integer())\n\
    \   |                                                    ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp61rrw7i1.rs:10:70\n   |\n10 |    \
    \ (x + y == z || x + z == y || y + z == x) && (x.is_integer() && y.is_integer()\
    \ && z.is_integer())\n   |                                                   \
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp61rrw7i1.rs:10:88\n\
    \   |\n10 |     (x + y == z || x + z == y || y + z == x) && (x.is_integer() &&\
    \ y.is_integer() && z.is_integer())\n   |                                    \
    \                                                    ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.floor() == x) && (y.floor() == y) && (z.floor() == z) && (x +\
    \ y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpongrp_s9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnk9xuv52.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x_int = x.is_integer();\n    let y_int = y.is_integer();\n \
    \   let z_int = z.is_integer();\n    let sum = x + y + z;\n    if x_int && y_int\
    \ && z_int {\n        if x == sum / 2.0 {\n            return true;\n        }\
    \ else if y == sum / 2.0 {\n            return true;\n        } else if z == sum\
    \ / 2.0 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpupxt7syi.rs:10:19\n   |\n10 |     let x_int = x.is_integer();\n\
    \   |                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpupxt7syi.rs:11:19\n   |\n11 |     let y_int = y.is_integer();\n   |\
    \                   ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpupxt7syi.rs:12:19\n\
    \   |\n12 |     let z_int = z.is_integer();\n   |                   ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x.is_integer() && y.is_integer() && z.is_integer()) &&\n      \
    \  (x + y == z || x + z == y || y + z == x)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpx4qjk422.rs:10:8\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |        ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpx4qjk422.rs:10:26\n   |\n10 |     (x.is_integer()\
    \ && y.is_integer() && z.is_integer()) &&\n   |                          ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpx4qjk422.rs:10:44\n   |\n\
    10 |     (x.is_integer() && y.is_integer() && z.is_integer()) &&\n   |       \
    \                                     ^^^^^^^^^^ method not found in `f64`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z || y == x + z || z == x + y) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp2s8dbu9z.rs:10:51\n   |\n10 |     (x == y + z ||\
    \ y == x + z || z == x + y) && x.is_integer() && y.is_integer() && z.is_integer()\n\
    \   |                                                   ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp2s8dbu9z.rs:10:69\n   |\n10 |    \
    \ (x == y + z || y == x + z || z == x + y) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n   |                                                    \
    \                 ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp2s8dbu9z.rs:10:87\n\
    \   |\n10 |     (x == y + z || y == x + z || z == x + y) && x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n   |                                     \
    \                                                  ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let numbers = vec![x, y, z];\n    let mut sum = 0.0;\n    for number\
    \ in numbers.iter() {\n        if (*number % 1.0) != 0.0 {\n            return\
    \ false;\n        }\n        sum += number;\n    }\n    let third_number = sum\
    \ - x - y;\n    let mut contains_sum = false;\n    for number in numbers.iter()\
    \ {\n        if *number == third_number {\n            contains_sum = true;\n\
    \        }\n    }\n    contains_sum\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_tniniic.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x == y +\
    \ z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpx57znbdf.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x == y + z || y == x + z || z == x +\
    \ y)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpx57znbdf.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x == y\
    \ + z || y == x + z || z == x + y)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpx57znbdf.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || y == x\
    \ + z || z == x + y)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x_i = x.round() as i64;\n    let y_i = y.round() as i64;\n \
    \   let z_i = z.round() as i64;\n    let x_f = x.floor() as i64;\n    let y_f\
    \ = y.floor() as i64;\n    let z_f = z.floor() as i64;\n    (x_i == y_f + z_f)\
    \ || (y_i == x_f + z_f) || (z_i == x_f + y_f)\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp60v_t82u.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.trunc() == x && y.trunc() == y && z.trunc() == z {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphvel7vud.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  (x == y + z) || (y == x + z) || (z == x + y)\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpwqdvcl88.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpwqdvcl88.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpwqdvcl88.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && (x == y +\
    \ z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpzvyod9em.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && (x == y + z || y == x + z || z == x +\
    \ y)\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpzvyod9em.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && (x == y\
    \ + z || y == x + z || z == x + y)\n   |                         ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpzvyod9em.rs:10:43\n   |\n10 |    \
    \ x.is_integer() && y.is_integer() && z.is_integer() && (x == y + z || y == x\
    \ + z || z == x + y)\n   |                                           ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    // Write code here\n    unimplemented!();\n}\n\nfn main() {\n  \
    \  let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphs2dunk8.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut is_int = false;\n    if x % 1.0 == 0.0 && y % 1.0 == 0.0\
    \ && z % 1.0 == 0.0 {\n        is_int = true;\n    }\n    return is_int && (x\
    \ == y + z || x == y - z || x == z - y);\n}\n\nfn main() {\n    let candidate\
    \ = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_bg73uce.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5o880bm9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z || y == x + z || z == x + y) && (x.is_sign_positive()\
    \ && y.is_sign_positive() && z.is_sign_positive())\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1vuzjktk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() &&\n        (x\
    \ == y + z || y == x + z || z == x + y)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpw_iq1hzs.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |       ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpw_iq1hzs.rs:10:25\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpw_iq1hzs.rs:10:43\n   |\n\
    10 |     x.is_integer() && y.is_integer() && z.is_integer() &&\n   |         \
    \                                  ^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && (x.fract() == 0.0 &&\
    \ y.fract() == 0.0 && z.fract() == 0.0)\n}\n\nfn main() {\n    let candidate =\
    \ any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe7h1ttx0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  return x + y == z || x + z == y || y + z == x;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp8jxvwz55.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp8jxvwz55.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp8jxvwz55.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let x_y_sum = x + y;\n    let y_z_sum = y + z;\n    let x_z_sum\
    \ = x + z;\n    if x_y_sum == z || y_z_sum == x || x_z_sum == y {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps89rbpsh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  x == y + z || y == x + z || z == x + y\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp_tued243.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp_tued243.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp_tued243.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let is_int = |x: f64| x.floor() == x;\n    is_int(x) && is_int(y)\
    \ && is_int(z) &&\n        (x + y == z || x + z == y || y + z == x)\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0vrdo58o.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x == 0.0 && y == 0.0 && z == 0.0 {\n        false\n    } else\
    \ if x % 1.0 == 0.0 && y % 1.0 == 0.0 && z % 1.0 == 0.0 {\n        x == y + z\
    \ || y == x + z || z == x + y\n    } else {\n        false\n    }\n}\n\nfn main()\
    \ {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4wdg_1ie.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x + y == z || x + z == y || y + z == x) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp5rbaxv0d.rs:10:51\n   |\n10 |     (x + y == z ||\
    \ x + z == y || y + z == x) && x.is_integer() && y.is_integer() && z.is_integer()\n\
    \   |                                                   ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp5rbaxv0d.rs:10:69\n   |\n10 |    \
    \ (x + y == z || x + z == y || y + z == x) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n   |                                                    \
    \                 ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp5rbaxv0d.rs:10:87\n\
    \   |\n10 |     (x + y == z || x + z == y || y + z == x) && x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n   |                                     \
    \                                                  ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut v = vec![x, y, z];\n    v.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    v[0] + v[1] == v[2] && x.floor() == x && y.floor() == y && z.floor() == z\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpds1k7_nl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut sum = x + y + z;\n    let mut int = x.round() + y.round()\
    \ + z.round();\n    if int == sum {\n        return true;\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjcpy3bgi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    let mut list = vec![x, y, z];\n    list.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \    if list[0].is_sign_positive() && list[1].is_sign_positive() && list[2].is_sign_positive()\n\
    \        && list[0].trunc() == list[0] && list[1].trunc() == list[1] && list[2].trunc()\
    \ == list[2]\n    {\n        return true;\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n\
    \    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp539jerzv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    x.is_integer() && y.is_integer() && z.is_integer() && ((x + y ==\
    \ z) || (x + z == y) || (y + z == x))\n}\n\nfn main() {\n    let candidate = any_int;\n\
    \    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpz0suqx9d.rs:10:7\n   |\n10 |     x.is_integer()\
    \ && y.is_integer() && z.is_integer() && ((x + y == z) || (x + z == y) || (y +\
    \ z == x))\n   |       ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpz0suqx9d.rs:10:25\n\
    \   |\n10 |     x.is_integer() && y.is_integer() && z.is_integer() && ((x + y\
    \ == z) || (x + z == y) || (y + z == x))\n   |                         ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpz0suqx9d.rs:10:43\n   |\n\
    10 |     x.is_integer() && y.is_integer() && z.is_integer() && ((x + y == z) ||\
    \ (x + z == y) || (y + z == x))\n   |                                        \
    \   ^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n      \
    \  if x == y + z || y == x + z || z == x + y {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = any_int;\n  \
    \  assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5,\
    \ 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0,\
    \ 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2,\
    \ 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0,\
    \ 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpkkz4mi7r.rs:10:10\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |          ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpkkz4mi7r.rs:10:28\n   |\n10 |     if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n   |                            ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0599]: no method named `is_integer` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpkkz4mi7r.rs:10:46\n   |\n\
    10 |     if x.is_integer() && y.is_integer() && z.is_integer() {\n   |       \
    \                                       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that takes 3 numbers.\n/// Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
    \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n\
    /// any_int(3.6, -2.2, 2) \u279E False\nfn any_int(x: f64, y: f64, z: f64) ->\
    \ bool {\n    (x == y + z || y == x + z || z == x + y) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
    \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
    \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
    \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
    \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
    \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp2ax6pxzm.rs:10:51\n   |\n10 |     (x == y + z ||\
    \ y == x + z || z == x + y) && x.is_integer() && y.is_integer() && z.is_integer()\n\
    \   |                                                   ^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0599]: no method named `is_integer` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp2ax6pxzm.rs:10:69\n   |\n10 |    \
    \ (x == y + z || y == x + z || z == x + y) && x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n   |                                                    \
    \                 ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp2ax6pxzm.rs:10:87\n\
    \   |\n10 |     (x == y + z || y == x + z || z == x + y) && x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n   |                                     \
    \                                                  ^^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
