name: HumanEval_8_sum_product
language: rust
prompt: "/// For a given list of integers, return a tuple consisting of a sum and\
  \ a product of all the integers in a list.\n/// Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0, 1)\n///\
  \ >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>)\
  \ -> (isize, isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
  \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
  \ (10, 10));\n}\n"
completions: ['    unimplemented!()', "    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)", "    if numbers.is_empty() {\n        return (0,\
    \ 1);\n    }\n\n    let mut sum = 0;\n    let mut product = 1;\n\n    for number\
    \ in numbers {\n        sum += number;\n        product *= number;\n    }\n\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n      \
    \  sum += i;\n        product *= i;\n    }\n    (sum, product)", "    let sum\
    \ = numbers.iter().fold(0, |acc, x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, x| acc * x);\n    (sum, product)", "    let mut product = 1;\n    let\
    \ mut sum = 0;\n    for number in numbers {\n        product *= number;\n    \
    \    sum += number;\n    }\n    (sum, product)", "    (\n        numbers.iter().sum(),\n\
    \        numbers.iter().product()\n    )", "    let (mut sum, mut product) = (0,\
    \ 1);\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)", "    // YOUR CODE HERE\n    (0, 0)", "    let sum = numbers.iter().fold(0,\
    \ |acc, n| acc + n);\n    let product = numbers.iter().fold(1, |acc, n| acc *\
    \ n);\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n   \
    \ (sum, product)", "    let sum = numbers.iter().fold(0, |acc, x| acc + x);\n\
    \    let product = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  '    (0, 1)', "    let mut sum = 0;\n    let mut product = 1;\n    for number in\
    \ numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers\
    \ {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n\
    \        sum += number;\n        product *= number;\n    }\n    (sum, product)",
  '    unimplemented!()', "    let zero = (0, 1);\n    if numbers.len() == 0 {\n \
    \       return zero;\n    }\n    numbers.iter().fold(zero, |tuple, num| {\n  \
    \      (tuple.0 + num, tuple.1 * num)\n    })", "    let mut sum = 0;\n    let\
    \ mut product = 1;\n    for i in numbers {\n        sum += i;\n        product\
    \ *= i;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", '    unimplemented!()', "    let mut total_sum = 0;\n\
    \    let mut total_product = 1;\n    for number in numbers {\n        total_sum\
    \ += number;\n        total_product *= number;\n    }\n    (total_sum, total_product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let sum\
    \ = numbers.iter().fold(0, |acc, &x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, &x| acc * x);\n    (sum, product)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for n in numbers {\n        sum += n;\n        product *=\
    \ n;\n    }\n    (sum, product)", "    let mut s = 0;\n    let mut p = 1;\n  \
    \  for i in numbers {\n        s += i;\n        p *= i;\n    }\n    (s, p)", '    unimplemented!()',
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  '    (numbers.iter().sum(), numbers.iter().product())', '    (numbers.iter().sum(),
    numbers.iter().product())', '    (numbers.iter().sum(), numbers.iter().product())',
  "    (\n        numbers.iter().sum(),\n        numbers.iter().product()\n    )",
  "    (\n        numbers.iter().sum(),\n        numbers.iter().product(),\n    )",
  "    let mut prod = 1;\n    let mut sum = 0;\n    for i in numbers {\n        prod\
    \ *= i;\n        sum += i;\n    }\n    (sum, prod)", '    (0, 1)', "    let mut\
    \ s = 0;\n    let mut p = 1;\n    for i in numbers {\n        s += i;\n      \
    \  p *= i;\n    }\n    (s, p)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    let mut the_sum = 0;\n    let mut the_product = 1;\n \
    \   for number in numbers {\n        the_sum += number;\n        the_product *=\
    \ number;\n    }\n    (the_sum, the_product)", "    let sum = numbers.iter().fold(0,\
    \ |acc, &x| acc + x);\n    let product = numbers.iter().fold(1, |acc, &x| acc\
    \ * x);\n    (sum, product)", '    unimplemented!();', '    (numbers.iter().sum(),
    numbers.iter().product())', '    unimplemented!()', "    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for number in numbers {\n        sum += number;\n\
    \        product *= number;\n    }\n    (sum, product)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for n in numbers {\n        sum += n;\n       \
    \ product *= n;\n    }\n    (sum, product)", "    (numbers.iter().sum(),\n   \
    \  numbers.iter().fold(1, |p, &n| p * n))", '    (numbers.iter().fold(0, |a, b|
    a + b), numbers.iter().fold(1, |a, b| a * b))', "    let mut sum = 0;\n    let\
    \ mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", '    (numbers.iter().fold(0, |acc, item|
    acc + item), numbers.iter().fold(1, |acc, item| acc * item))', "    let mut sum\
    \ = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum +=\
    \ number;\n        product *= number;\n    }\n    (sum, product)", "    let mut\
    \ s: isize = 0;\n    let mut p: isize = 1;\n    for n in numbers {\n        s\
    \ += n;\n        p *= n;\n    }\n    (s, p)", '    (0, 1)', "    let mut sum =\
    \ 0;\n    let mut product = 1;\n    for num in numbers {\n        sum += num;\n\
    \        product *= num;\n    }\n    (sum, product)", '    (numbers.iter().sum(),
    numbers.iter().product())', "    let sum = numbers.iter().fold(0, |acc, x| acc\
    \ + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for number in\
    \ numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum,\
    \ product)", "    let sum = numbers.iter().fold(0, |acc, x| acc + x);\n    let\
    \ product = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum, product)", '    (numbers.iter().sum(),
    numbers.iter().product())', "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for number in numbers {\n        sum += number;\n        product *= number;\n\
    \    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    let product = numbers.iter().fold(1, |product, &num| product\
    \ * num);\n    let sum = numbers.iter().fold(0, |sum, &num| sum + num);\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers\
    \ {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)", " \
    \   if numbers.is_empty() {\n        return (0, 1);\n    }\n    let sum = numbers.iter().fold(0,\
    \ |acc, x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc *\
    \ x);\n    (sum, product)", "    let sum = numbers.iter().fold(0, |a, b| a + b);\n\
    \    let product = numbers.iter().fold(1, |a, b| a * b);\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n      \
    \  sum += i;\n        product *= i;\n    }\n    (sum, product)", "    let sum\
    \ = numbers.iter().fold(0, |sum, x| sum + x);\n    let product = numbers.iter().fold(1,\
    \ |prod, x| prod * x);\n    (sum, product)", '    unimplemented!()', "    // Sum\n\
    \    let sum: isize = numbers.iter().sum();\n    // Product\n    let product:\
    \ isize = numbers.iter().product();\n    // Return tuple\n    (sum, product)",
  '    numbers.iter().fold((0, 1), |acc, x| (acc.0 + x, acc.1 * x))', "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n   \
    \ }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n  \
    \  for n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    // should be implemented\n    unimplemented!()", "    let sum\
    \ = numbers.iter().fold(0, |sum, x| sum + x);\n    let product = numbers.iter().fold(1,\
    \ |product, x| product * x);\n    (sum, product)", "    let mut sum = 0;\n   \
    \ let mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n   \
    \ }\n    (sum, product)", "    let sum = numbers.iter().fold(0, |acc, x| acc +\
    \ x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum,\
    \ product)", '    unimplemented!();', '    unimplemented!()', '    (0, 1)', '    (numbers.iter().fold(0,
    |acc, &x| acc + x), numbers.iter().fold(1, |acc, &x| acc * x))', "    let sum\
    \ = numbers.iter().fold(0, |acc, &x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, &x| acc * x);\n    (sum, product)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for i in &numbers {\n        sum += i;\n        product *=\
    \ i;\n    }\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  "    // TODO: implement sum_product\n    (0, 1)", "    (\n        numbers.iter().sum(),\n\
    \        numbers.iter().product(),\n    )", "    let sum = numbers.iter().fold(0,\
    \ |sum, x| sum + x);\n    let product = numbers.iter().fold(1, |product, x| product\
    \ * x);\n    (sum, product)", "    let sum = numbers.iter().fold(0, |acc, x| acc\
    \ + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum,\
    \ product)", "    // YOUR CODE HERE!\n    let mut product = 1;\n    let mut sum\
    \ = 0;\n    for i in numbers {\n        product *= i;\n        sum += i;\n   \
    \ }\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  '    unimplemented!();', "    (\n        numbers.iter().sum(),\n        numbers.iter().product()\n\
    \    )", '    (0, 1)', "    let product = numbers.iter().fold(1, |acc, &x| acc\
    \ * x);\n    let sum = numbers.iter().fold(0, |acc, &x| acc + x);\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for x in numbers {\n      \
    \  sum += x;\n        product *= x;\n    }\n    (sum, product)", '    (sum(numbers),
    product(numbers))', "    let mut sum = 0;\n    let mut product = 1;\n    for number\
    \ in numbers {\n        sum += number;\n        product *= number;\n    }\n  \
    \  (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for n\
    \ in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n      \
    \  sum += i;\n        product *= i;\n    }\n    (sum, product)", '    (sum(numbers),
    product(numbers))', '    (numbers.iter().sum(), numbers.iter().product())', '    (sum(numbers),
    product(numbers))', "    let mut sum = 0;\n    let mut product = 1;\n    for i\
    \ in numbers {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)",
  '    (numbers.iter().sum(), numbers.iter().product())', "    // TODO\n    (0, 1)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for num in numbers {\n    \
    \    sum += num;\n        product *= num;\n    }\n    (sum, product)", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for x in numbers {\n        sum\
    \ += x;\n        product *= x;\n    }\n    (sum, product)", "    let mut res =\
    \ (0, 1);\n    for i in numbers {\n        res.0 += i;\n        res.1 *= i;\n\
    \    }\n    res", "    let mut product = 1;\n    let mut sum = 0;\n    for number\
    \ in numbers {\n        product *= number;\n        sum += number;\n    }\n  \
    \  (sum, product)", '    numbers.iter().fold((0, 1), |acc, x| (acc.0 + x, acc.1
    * x))', '    (0, 1)', "    let sum = numbers.iter().fold(0, |acc, &x| acc + x);\n\
    \    let product = numbers.iter().fold(1, |acc, &x| acc * x);\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum\
    \ += number;\n        product *= number;\n    }\n    (sum, product)", '    unimplemented!();',
  '    unimplemented!()', "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ x in numbers {\n        sum += x;\n        product *= x;\n    }\n    (sum, product)",
  '    numbers.iter().fold((0, 1), |acc, &x| (acc.0 + x, acc.1 * x))', "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for num in numbers {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    (sum, product)", "    let sum = numbers.iter().fold(0,\
    \ |acc, num| acc + num);\n    let product = numbers.iter().fold(1, |acc, num|\
    \ acc * num);\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  '    (0, 1)', '    numbers.iter().fold((0, 1), |acc, num| (acc.0 + num, acc.1 *
    num))', "    // your code here\n    let mut sum = 0;\n    let mut product = 1;\n\
    \    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n   \
    \ (sum, product)", '    unimplemented!()', "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for i in numbers {\n        sum += i;\n        product *=\
    \ i;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", '    (sum(numbers), product(numbers))',
  '    unimplemented!();', '    return numbers.iter().fold((0, 1), |acc, x| (acc.0
    + x, acc.1 * x));', "    let sum = numbers.iter().fold(0, |acc, &x| acc + x);\n\
    \    let product = numbers.iter().fold(1, |acc, &x| acc * x);\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for num in numbers {\n        sum += num;\n     \
    \   product *= num;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let\
    \ mut product = 1;\n    for number in numbers {\n        sum += number;\n    \
    \    product *= number;\n    }\n    (sum, product)", "    let mut sum = 0;\n \
    \   let mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut res = (0, 1);\n    for i in\
    \ numbers {\n        res.0 += i;\n        res.1 *= i;\n    }\n    res", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum\
    \ += n;\n        product *= n;\n    }\n    (sum, product)", "    let sum = numbers.iter().fold(0,\
    \ |sum, val| sum + val);\n    let product = numbers.iter().fold(1, |prod, val|\
    \ prod * val);\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n   \
    \ }\n    (sum, product)", '    (sum(numbers), product(numbers))', "    (\n   \
    \     numbers.iter().sum(),\n        numbers.iter().product()\n    )", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n        sum\
    \ += i;\n        product *= i;\n    }\n    (sum, product)", "    let mut sum =\
    \ 0;\n    let mut product = 1;\n    for num in numbers {\n        sum += num;\n\
    \        product *= num;\n    }\n    (sum, product)", '    unimplemented!()',
  '    numbers.iter().fold((0, 1), |acc, val| (acc.0 + val, acc.1 * val))', "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for i in &numbers {\n        sum\
    \ += i;\n        product *= i;\n    }\n    (sum, product)", "    let sum = numbers.iter().fold(0,\
    \ |acc, x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc *\
    \ x);\n    (sum, product)", '    return (numbers.iter().sum(), numbers.iter().product());',
  '    unimplemented!()', "    (\n        numbers.iter().sum(),\n        numbers.iter().product(),\n\
    \    )", "    let sum = numbers.iter().fold(0, |acc, x| acc + x);\n    let product\
    \ = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let sum = numbers.iter().fold(0, |acc,\
    \ &item| acc + item);\n    let product = numbers.iter().fold(1, |acc, &item| acc\
    \ * item);\n    (sum, product)", "    let sum = numbers.iter().fold(0, |acc, x|\
    \ acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc * x);\n   \
    \ (sum, product)", '    numbers.iter().fold((0, 1), |(sum, prod), x| (sum + x,
    prod * x))', "    let sum = numbers.iter().fold(0, |acc, x| acc + x);\n    let\
    \ product = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum, product)", '    (0,
    1)', "    (\n        numbers.iter().fold(0, |acc, num| acc + num),\n        numbers.iter().fold(1,\
    \ |acc, num| acc * num),\n    )", '    (numbers.iter().sum(), numbers.iter().product())',
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ res = (0, 1);\n    for num in numbers {\n        res.0 += num;\n        res.1\
    \ *= num;\n    }\n    res", "    let sum = numbers.iter().fold(0, |a, &b| a +\
    \ b);\n    let product = numbers.iter().fold(1, |a, &b| a * b);\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    (\n        numbers.iter().sum(),\n        numbers.iter().product()\n    )",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  '    numbers.iter().fold((0, 1), |(sum, product), &x| (sum + x, product * x))',
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    let sum = numbers.iter().fold(0, |sum, number| sum + number);\n    let product\
    \ = numbers.iter().fold(1, |product, number| product * number);\n    (sum, product)",
  "    let mut acc = (0, 1);\n    for n in numbers {\n        acc.0 += n;\n      \
    \  acc.1 *= n;\n    }\n    acc", "    // TODO\n    unimplemented!()", "    let\
    \ sum = numbers.iter().fold(0, |sum, &x| sum + x);\n    let product = numbers.iter().fold(1,\
    \ |product, &x| product * x);\n    (sum, product)", '    unimplemented!()', " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for x in numbers {\n     \
    \   sum += x;\n        product *= x;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    (\n        numbers.iter().fold(0,\
    \ |sum, i| sum + i),\n        numbers.iter().fold(1, |product, i| product * i),\n\
    \    )", "    let product = numbers.iter().fold(1, |acc, x| acc * x);\n    let\
    \ sum = numbers.iter().fold(0, |acc, x| acc + x);\n    (sum, product)", "    if\
    \ numbers.is_empty() {\n        return (0, 1);\n    }\n    let sum = numbers.iter().fold(0,\
    \ |sum, x| sum + x);\n    let product = numbers.iter().fold(1, |product, x| product\
    \ * x);\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for num in numbers {\n        sum += num;\n        product *= num;\n    }\n\
    \    (sum, product)", "    (numbers.iter().fold(0, |sum, &x| sum + x),\n     numbers.iter().fold(1,\
    \ |prod, &x| prod * x))", "    // TODO\n    (0, 0)", "    let mut result = (0,\
    \ 1);\n    for n in numbers {\n        result.0 += n;\n        result.1 *= n;\n\
    \    }\n    result", '    unimplemented!()', "    if numbers.is_empty() {\n  \
    \      return (0, 1);\n    }\n    let mut sum = 0;\n    let mut product = 1;\n\
    \    for &x in numbers.iter() {\n        sum += x;\n        product *= x;\n  \
    \  }\n    (sum, product)", "    let (mut sum, mut product) = (0, 1);\n    for\
    \ i in numbers {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)",
  "    let sum = numbers.iter().fold(0, |acc, x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, x| acc * x);\n    (sum, product)", '    (0, 1)', "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for number in numbers {\n        sum += number;\n\
    \        product *= number;\n    }\n    (sum, product)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for num in numbers {\n        sum += num;\n   \
    \     product *= num;\n    }\n    (sum, product)", '    (0, 1)', "    let sum\
    \ = numbers.iter().fold(0, |acc, x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, x| acc * x);\n    (sum, product)", "    let sum = numbers.iter().fold(0,\
    \ |acc, &x| acc + x);\n    let product = numbers.iter().fold(1, |acc, &x| acc\
    \ * x);\n    (sum, product)", "    let sum = numbers.iter().fold(0, |acc, i| acc\
    \ + i);\n    let product = numbers.iter().fold(1, |acc, i| acc * i);\n    (sum,\
    \ product)", "    let mut product = 1;\n    let mut sum = 0;\n    for num in numbers\
    \ {\n        product *= num;\n        sum += num;\n    }\n    (sum, product)",
  "    let sum = numbers.iter().fold(0, |sum, value| sum + value);\n    let product\
    \ = numbers.iter().fold(1, |product, value| product * value);\n    (sum, product)",
  '    (numbers.iter().sum(), numbers.iter().product())', "    let sum = numbers.iter().fold(0,\
    \ |acc, x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc *\
    \ x);\n    (sum, product)"]
stop_tokens:
- "\n}"
