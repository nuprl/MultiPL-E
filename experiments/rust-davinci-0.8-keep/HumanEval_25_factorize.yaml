name: HumanEval_25_factorize
language: rust
prompt: "/// Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n/// Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n/// Input number should be equal\
  \ to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n/// >>> factorize(25)\n\
  /// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n: isize) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
  \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
  \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
  \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
  \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
  \ vec![2, 3, 3]);\n}\n"
completions: ["    let mut n = n;\n    let mut result = Vec::new();\n    for f in\
    \ (2..n + 1).step_by(2) {\n        if n % f == 0 {\n            result.push(f);\n\
    \            n /= f;\n        }\n    }\n    if result.is_empty() {\n        vec![n]\n\
    \    } else {\n        result\n    }", "    let mut factorized = Vec::new();\n\
    \    let mut i = 2;\n    let mut remainder = n;\n    while remainder != 1 {\n\
    \        if remainder % i == 0 {\n            factorized.push(i);\n          \
    \  remainder /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factorized", "    let mut n = n;\n    let mut result = Vec::new();\n    for\
    \ i in 2..=n / 2 {\n        while n % i == 0 {\n            result.push(i);\n\
    \            n /= i;\n        }\n    }\n    if n > 1 {\n        result.push(n);\n\
    \    }\n    result", '    unimplemented!();', '    unimplemented!();', "    let\
    \ mut v = Vec::new();\n    let mut n = n;\n    let mut div = 2;\n    while n >\
    \ 1 {\n        while n % div == 0 {\n            v.push(div);\n            n /=\
    \ div;\n        }\n        div += 1;\n    }\n    v", "    let mut factors = Vec::new();\n\
    \    if n == 1 {\n        return factors;\n    }\n    let mut num = n;\n    for\
    \ div in 2..num {\n        if num % div == 0 {\n            factors.push(div);\n\
    \            num /= div;\n            if num == 1 {\n                break;\n\
    \            }\n        }\n    }\n    factors", "    let mut n = n;\n    let mut\
    \ vec = Vec::new();\n    let mut curr_divisor = 2;\n    while n > 1 {\n      \
    \  while n % curr_divisor == 0 {\n            vec.push(curr_divisor);\n      \
    \      n /= curr_divisor;\n        }\n        curr_divisor += 1;\n    }\n    vec",
  "    assert!(n > 0);\n    let mut n = n;\n    let mut result = Vec::new();\n   \
    \ while n % 2 == 0 {\n        result.push(2);\n        n /= 2;\n    }\n    let\
    \ mut f = 3;\n    while f * f <= n {\n        if n % f == 0 {\n            result.push(f);\n\
    \            n /= f;\n        } else {\n            f += 2;\n        }\n    }\n\
    \    if n > 1 {\n        result.push(n);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut remainder = n;\n    let mut factor = 2;\n    while\
    \ remainder > 1 {\n        while remainder % factor == 0 {\n            result.push(factor);\n\
    \            remainder /= factor;\n        }\n        factor += 1;\n    }\n  \
    \  result", "    let mut n = n;\n    let mut v = Vec::new();\n    let mut d =\
    \ 2;\n    while n > 1 {\n        while n % d == 0 {\n            v.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    v", "    if n ==\
    \ 1 {\n        return vec![];\n    }\n    for i in 2..=n {\n        if n % i ==\
    \ 0 {\n            let mut factors = factorize(n / i);\n            factors.push(i);\n\
    \            return factors;\n        }\n    }\n    unreachable!();", '    unimplemented!()',
  "    let mut factors = Vec::new();\n    let mut prime = 2;\n    let mut target =\
    \ n;\n    while target > 1 {\n        if target % prime == 0 {\n            factors.push(prime);\n\
    \            target /= prime;\n        } else {\n            prime += 1;\n   \
    \     }\n    }\n    factors", "    let prime_factorization = prime_factorization(n);\n\
    \    let mut result: Vec<isize> = Vec::new();\n    for (factor, number) in prime_factorization\
    \ {\n        for _ in 0..number {\n            result.push(factor);\n        }\n\
    \    }\n    result", "    let mut n = n;\n    let mut i = 2;\n    let mut factors\
    \ = Vec::new();\n    while i * i <= n {\n        while n % i == 0 {\n        \
    \    factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors", "    let mut n\
    \ = n;\n    let mut result = Vec::new();\n    let mut d = 2;\n    while n > 1\
    \ {\n        while n % d == 0 {\n            result.push(d);\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    result", "    // TODO: Implement\
    \ me!\n    vec![]", "    let mut tmp = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while tmp > 1 {\n        while tmp % i == 0 {\n     \
    \       factors.push(i);\n            tmp /= i;\n        }\n        i += 1;\n\
    \    }\n    factors", '    unimplemented!()', "    let mut numbers = vec![];\n\
    \    let mut num = n;\n    while num % 2 == 0 {\n        numbers.push(2);\n  \
    \      num /= 2;\n    }\n    let mut i = 3;\n    while i <= (num as f64).sqrt()\
    \ as isize {\n        while num % i == 0 {\n            numbers.push(i);\n   \
    \         num /= i;\n        }\n        i += 2;\n    }\n    if num > 2 {\n   \
    \     numbers.push(num);\n    }\n    numbers", "    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    while n % 2 == 0 {\n        result.push(2);\n    \
    \    n /= 2;\n    }\n    let mut i = 3;\n    while i <= n {\n        while n %\
    \ i == 0 {\n            result.push(i);\n            n /= i;\n        }\n    \
    \    i += 2;\n    }\n    result", "    let mut result = Vec::new();\n    let mut\
    \ n = n;\n    while n % 2 == 0 {\n        result.push(2);\n        n /= 2;\n \
    \   }\n    let mut i = 3;\n    while i * i <= n {\n        while n % i == 0 {\n\
    \            result.push(i);\n            n /= i;\n        }\n        i += 2;\n\
    \    }\n    if n > 2 {\n        result.push(n);\n    }\n    result", "    let\
    \ mut prime_factors = Vec::new();\n    let mut curr_num = n;\n    while curr_num\
    \ > 1 {\n        let divisor = next_prime_divisor(curr_num);\n        curr_num\
    \ /= divisor;\n        prime_factors.push(divisor);\n    }\n    prime_factors",
  '    unimplemented!();', "    let mut v = Vec::new();\n    let mut i = 2;\n    let\
    \ mut j = n;\n    while i <= j {\n        if j % i == 0 {\n            v.push(i);\n\
    \            j /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    v", "    let mut n: isize = n;\n    let mut factors: Vec<isize> = Vec::new();\n\
    \    let mut i: isize = 2;\n    while n > 1 {\n        while n % i == 0 {\n  \
    \          factors.push(i);\n            n /= i;\n        }\n        i += 1;\n\
    \    }\n    factors", "    if n == 0 {\n        return vec![];\n    }\n\n    let\
    \ mut n = n;\n    let mut ret = vec![];\n    let mut p = 2;\n    while n > 1 {\n\
    \        if n % p == 0 {\n            ret.push(p);\n            n /= p;\n    \
    \    } else {\n            p += 1;\n        }\n    }\n    ret", "    // Fill the\
    \ array with all multiples of each possible primes,\n    // so that array[i] ==\
    \ true means that `i` is a prime number.\n    let mut is_prime = [true; (n as\
    \ usize) + 1];\n    is_prime[0] = false;\n    is_prime[1] = false;\n    let mut\
    \ factors = Vec::new();\n    let mut remain = n;\n    for i in 2..is_prime.len()\
    \ {\n        // If i is a prime, mark all its multiples as non-prime.\n      \
    \  if is_prime[i] {\n            for j in (i * i..is_prime.len()).step_by(i) {\n\
    \                is_prime[j] = false;\n            }\n        }\n        // Push\
    \ all prime factors of the given number to the vector.\n        while remain %\
    \ i == 0 {\n            factors.push(i as isize);\n            remain /= i;\n\
    \        }\n    }\n    factors", '    unimplemented!();', '    unimplemented!();',
  "    let mut out = Vec::new();\n    let mut i = 2;\n    let mut n_mut = n;\n   \
    \ while i <= n_mut {\n        if n_mut % i == 0 {\n            out.push(i);\n\
    \            n_mut /= i;\n        } else {\n            i += 1;\n        }\n \
    \   }\n    out", "    let mut divisor = 2;\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    while num != 1 {\n        while num % divisor == 0\
    \ {\n            factors.push(divisor);\n            num /= divisor;\n       \
    \ }\n        divisor += 1;\n    }\n    factors", "    let mut num = n;\n    let\
    \ mut ret: Vec<isize> = Vec::new();\n    let mut curr = 2;\n    while num > 1\
    \ {\n        while num % curr == 0 {\n            ret.push(curr);\n          \
    \  num /= curr;\n        }\n        curr += 1;\n    }\n    ret", "    if n ==\
    \ 0 {\n        return vec![];\n    }\n    let mut result = vec![];\n    let mut\
    \ n = n;\n    for i in 2..=n {\n        while n % i == 0 {\n            result.push(i);\n\
    \            n /= i;\n        }\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut tmp = n;\n    for i in 2..n {\n        while tmp % i == 0 {\n   \
    \         result.push(i);\n            tmp /= i;\n        }\n    }\n    result",
  "    let mut res = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            res.push(i);\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    res", "   \
    \ assert!(n > 0);\n    let mut num = n;\n    let mut v: Vec<isize> = Vec::new();\n\
    \    for i in 2..n {\n        while num % i == 0 {\n            v.push(i);\n \
    \           num /= i;\n        }\n    }\n    v", "    let mut out = Vec::new();\n\
    \    if n < 2 {\n        return out;\n    }\n    if n == 2 {\n        out.push(2);\n\
    \        return out;\n    }\n    let mut n = n;\n    while n % 2 == 0 {\n    \
    \    out.push(2);\n        n /= 2;\n    }\n    let mut i = 3;\n    while i <=\
    \ n {\n        if n % i == 0 {\n            out.push(i);\n            n /= i;\n\
    \        } else {\n            i += 2;\n        }\n    }\n    out", "    let mut\
    \ prime_factors = Vec::new();\n    let mut n = n;\n    for i in 2..n+1 {\n   \
    \     while n % i == 0 {\n            prime_factors.push(i);\n            n /=\
    \ i;\n        }\n    }\n    prime_factors", "    let mut n = n;\n    let mut primes\
    \ = vec![];\n    let mut ret = vec![];\n    for i in 2..n+1 {\n        let mut\
    \ pow = 0;\n        while n % i == 0 {\n            n /= i;\n            pow +=\
    \ 1;\n        }\n        if pow > 0 {\n            primes.push(i);\n         \
    \   ret.push(i);\n        }\n    }\n    ret", "    let mut n = n;\n    let mut\
    \ prime_factors = Vec::new();\n    let mut divider = 2;\n    loop {\n        if\
    \ n % divider == 0 {\n            prime_factors.push(divider);\n            n\
    \ /= divider;\n        } else {\n            divider += 1;\n        }\n      \
    \  if n == 1 {\n            break;\n        }\n    }\n    prime_factors", "  \
    \  let mut n = n;\n    let mut result = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            result.push(i);\n           \
    \ n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    result",
  "    let mut list: Vec<isize> = Vec::new();\n    let mut temp = n;\n    let mut\
    \ i = 2;\n    while temp != 1 {\n        if temp % i == 0 {\n            list.push(i);\n\
    \            temp /= i;\n        } else {\n            i += 1;\n        }\n  \
    \  }\n    list", "    let mut factors = Vec::new();\n    let mut num = n;\n  \
    \  let mut d = 2;\n    while num > 1 {\n        while num % d == 0 {\n       \
    \     factors.push(d);\n            num /= d;\n        }\n        d += 1;\n  \
    \  }\n    factors", "    let mut result = Vec::new();\n    let mut v = n;\n  \
    \  let mut d = 2;\n    while v > 1 {\n        while v % d == 0 {\n           \
    \ result.push(d);\n            v /= d;\n        }\n        d += 1;\n    }\n  \
    \  result", "    let mut res = Vec::new();\n    let mut m = n;\n    for i in 2..\
    \ {\n        if i * i > m {\n            break;\n        }\n        while m %\
    \ i == 0 {\n            res.push(i);\n            m /= i;\n        }\n    }\n\
    \    if m > 1 {\n        res.push(m);\n    }\n    res", "    let mut n = n;\n\
    \    let mut result = Vec::new();\n    for i in 2..n {\n        if n % i == 0\
    \ {\n            result.push(i);\n            n /= i;\n        }\n    }\n    if\
    \ n != 1 {\n        result.push(n);\n    }\n    result", "    let mut n = n;\n\
    \    let mut factors = Vec::new();\n    for i in 2..=n {\n        while n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        }\n    }\n\
    \    factors", "    let mut res = Vec::new();\n    let mut num = n;\n    for p\
    \ in 2..(num+1) {\n        while num % p == 0 {\n            res.push(p);\n  \
    \          num /= p;\n        }\n    }\n    res", "    let mut n = n;\n    let\
    \ mut i = 2;\n    let mut factors = Vec::new();\n    while i <= n {\n        if\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    factors", "    let mut output\
    \ = Vec::new();\n    let mut num = n;\n    let mut i = 2;\n    while num > 1 {\n\
    \        if num % i == 0 {\n            output.push(i);\n            num /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    output", "    let\
    \ mut n = n;\n    let mut v = Vec::new();\n    while n > 1 {\n        let prime\
    \ = find_divisor(n);\n        n /= prime;\n        v.push(prime);\n    }\n   \
    \ v", "    let mut num = n;\n    let mut prime_factors = Vec::new();\n    let\
    \ mut i = 2;\n    while i <= num {\n        if num % i == 0 {\n            prime_factors.push(i);\n\
    \            num /= i;\n        } else {\n            i += 1;\n        }\n   \
    \ }\n    prime_factors", "    if n == 1 {\n        return vec![];\n    }\n   \
    \ let mut result = Vec::new();\n    let mut m = n;\n    let mut d = 2;\n    while\
    \ m > 1 {\n        while m % d == 0 {\n            result.push(d);\n         \
    \   m /= d;\n        }\n        d += 1;\n    }\n    result", '    unimplemented!()',
  "    let mut num = n;\n    let mut factors = Vec::new();\n    let mut d = 2;\n \
    \   while num > 1 {\n        while num % d == 0 {\n            factors.push(d);\n\
    \            num /= d;\n        }\n        d += 1;\n    }\n    factors", "   \
    \ let mut prime_factors = Vec::new();\n    let mut factor = 2;\n    let mut n\
    \ = n;\n    while n > 1 {\n        while n % factor == 0 {\n            prime_factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor += 1;\n    }\n    prime_factors",
  "    let mut prime_factors = Vec::new();\n    let mut start = 2;\n    let mut number\
    \ = n;\n    while number > 1 {\n        if number % start == 0 {\n           \
    \ prime_factors.push(start);\n            number /= start;\n        } else {\n\
    \            start += 1;\n        }\n    }\n    prime_factors", "  if n <= 1 {\n\
    \    return vec![];\n  }\n  let mut res = vec![];\n  let mut num = n;\n  let mut\
    \ i = 2;\n  while i <= num {\n    if num % i == 0 {\n      res.push(i);\n    \
    \  num /= i;\n    } else {\n      i += 1;\n    }\n  }\n  res", "    let mut number\
    \ = n;\n    let mut result = Vec::new();\n    let mut divisor = 2;\n    while\
    \ number > 1 {\n        while number % divisor == 0 {\n            result.push(divisor);\n\
    \            number /= divisor;\n        }\n        divisor += 1;\n    }\n   \
    \ result", '    unimplemented!()', "    if n <= 1 {\n        return vec![];\n\
    \    }\n    let mut n = n;\n    let mut res = vec![];\n    let mut div = 2;\n\
    \    while n > 1 {\n        while n % div == 0 {\n            res.push(div);\n\
    \            n /= div;\n        }\n        div += 1;\n    }\n    res", "    let\
    \ mut number = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n   \
    \ while number > 1 {\n        while number % i == 0 {\n            factors.push(i);\n\
    \            number /= i;\n        }\n        i += 1;\n    }\n    factors", '    unimplemented!()',
  '    unimplemented!()', "    let mut v = Vec::new();\n    let mut n = n;\n    for\
    \ i in 2..=n {\n        while n % i == 0 {\n            v.push(i);\n         \
    \   n /= i;\n        }\n    }\n    v", "    let mut result = Vec::new();\n   \
    \ let mut number = n;\n    let mut divisor = 2;\n    while number > 1 {\n    \
    \    while number % divisor == 0 {\n            result.push(divisor);\n      \
    \      number /= divisor;\n        }\n        divisor += 1;\n    }\n    result",
  '    unimplemented!();', "    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            result.push(divisor);\n            n /= divisor;\n        }\n   \
    \     divisor += 1;\n    }\n    result", "    let mut result = Vec::new();\n \
    \   if n == 0 {\n        return result;\n    }\n    if n == 1 {\n        result.push(1);\n\
    \        return result;\n    }\n    let mut m = n;\n    let mut d = 2;\n    while\
    \ m != 1 {\n        while m % d == 0 {\n            result.push(d);\n        \
    \    m /= d;\n        }\n        d += 1;\n    }\n    result", "    let mut res\
    \ = Vec::new();\n    let mut num = n;\n    let mut d = 2;\n    while num > 1 {\n\
    \        while num % d == 0 {\n            res.push(d);\n            num /= d;\n\
    \        }\n        d += 1;\n    }\n    res", "    let mut result = Vec::new();\n\
    \    let mut n = n;\n    while n > 1 {\n        let mut found = false;\n     \
    \   for i in 2..n + 1 {\n            if n % i == 0 {\n                result.push(i);\n\
    \                n /= i;\n                found = true;\n                break;\n\
    \            }\n        }\n        if !found {\n            break;\n        }\n\
    \    }\n    result", '    unimplemented!()', "    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    for i in 2..n+1 {\n        if n % i == 0 {\n     \
    \       result.push(i);\n            n /= i;\n        }\n    }\n    result", '    unimplemented!()',
  "    let mut factors = Vec::new();\n    let mut n = n;\n    for divisor in 2..=n\
    \ {\n        while n % divisor == 0 {\n            factors.push(divisor);\n  \
    \          n /= divisor;\n        }\n    }\n    factors", "    let mut prime_factors\
    \ = Vec::new();\n    let mut remaining = n;\n    let mut factor = 2;\n    while\
    \ remaining > 1 {\n        while remaining % factor == 0 {\n            prime_factors.push(factor);\n\
    \            remaining /= factor;\n        }\n        factor += 1;\n    }\n  \
    \  prime_factors", "    let mut input = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while input != 1 {\n        if input % divisor\
    \ == 0 {\n            factors.push(divisor);\n            input /= divisor;\n\
    \        } else {\n            divisor += 1;\n        }\n    }\n    factors",
  "    let mut divisor = 2;\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    while n > 1 {\n        while n % divisor == 0 {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor += 1;\n    }\n    factors",
  "    let mut res = Vec::new();\n    let mut divisor = 2;\n    let mut number = n;\n\
    \    while number > 1 {\n        while number % divisor == 0 {\n            res.push(divisor);\n\
    \            number /= divisor;\n        }\n        divisor += 1;\n    }\n   \
    \ res", "    let mut num = n;\n    let mut factors = Vec::new();\n    let mut\
    \ d = 2;\n    while num > 1 {\n        while num % d == 0 {\n            factors.push(d);\n\
    \            num /= d;\n        }\n        d += 1;\n    }\n    factors", "   \
    \ // TODO\n    let mut n = n;\n    let mut factors = Vec::new();\n    let mut\
    \ divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n        \
    \    factors.push(divisor);\n            n /= divisor;\n        }\n        divisor\
    \ += 1;\n    }\n    factors", "    if n <= 1 {\n        return vec![];\n    }\n\
    \    let mut factors = vec![];\n    let mut i = 2;\n    let mut remainder = n;\n\
    \    while i * i <= remainder {\n        while remainder % i == 0 {\n        \
    \    factors.push(i);\n            remainder /= i;\n        }\n        i += 1;\n\
    \    }\n    if remainder > 1 {\n        factors.push(remainder);\n    }\n    factors",
  "    let mut result = Vec::new();\n    let mut n = n;\n    let mut divisor = 2;\n\
    \    while n != 1 {\n        if n % divisor == 0 {\n            result.push(divisor);\n\
    \            n /= divisor;\n        } else {\n            divisor += 1;\n    \
    \    }\n    }\n    result", "    let mut factors = Vec::new();\n    let mut i\
    \ = 2;\n    let mut n = n;\n    while i <= n {\n        if n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    factors", "    if n <= 1 {\n        panic!(\"\
    wrong input number\");\n    }\n    let mut copy_n = n;\n    let mut factors =\
    \ Vec::new();\n    let mut i = 2;\n    while i <= copy_n {\n        if copy_n\
    \ % i == 0 {\n            factors.push(i);\n            copy_n /= i;\n       \
    \ } else {\n            i += 1;\n        }\n    }\n    factors", "    if n ==\
    \ 1 {\n        return vec![];\n    }\n    let mut result = vec![];\n    let mut\
    \ left = n;\n    while left % 2 == 0 {\n        result.push(2);\n        left\
    \ /= 2;\n    }\n    let mut i = 3;\n    while i <= (left as f64).sqrt() as isize\
    \ {\n        while left % i == 0 {\n            result.push(i);\n            left\
    \ /= i;\n        }\n        i += 2;\n    }\n    if left > 2 {\n        result.push(left);\n\
    \    }\n    result", "    let mut n = n;\n    let mut prime_factors = Vec::new();\n\
    \    let mut prime = 2;\n    while n > 1 {\n        if n % prime == 0 {\n    \
    \        prime_factors.push(prime);\n            n /= prime;\n        } else {\n\
    \            prime += 1;\n        }\n    }\n    prime_factors", "    let mut factors\
    \ = Vec::new();\n    let mut num = n;\n    for i in 2..num + 1 {\n        while\
    \ num % i == 0 {\n            factors.push(i);\n            num /= i;\n      \
    \  }\n    }\n    factors", "    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut candidate = 2;\n    while n > 1 {\n        while n % candidate ==\
    \ 0 {\n            result.push(candidate);\n            n /= candidate;\n    \
    \    }\n        candidate += 1;\n    }\n    result", "    let mut n = n;\n   \
    \ let mut factors = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n   \
    \     factors.push(n);\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut factor = 2;\n    let mut number = n;\n    while number != 1 {\n \
    \       if number % factor == 0 {\n            factors.push(factor);\n       \
    \     number /= factor;\n        } else {\n            factor += 1;\n        }\n\
    \    }\n    factors", "    let mut result = Vec::new();\n    let mut remainder\
    \ = n;\n    let mut index = 2;\n    while remainder != 1 {\n        while remainder\
    \ % index == 0 {\n            result.push(index);\n            remainder /= index;\n\
    \        }\n        index += 1;\n    }\n    result", "    let mut n = n;\n   \
    \ let mut factors = Vec::new();\n    while n > 1 {\n        let factor = (2..n\
    \ + 1).find(|x| n % x == 0).unwrap();\n        factors.push(factor);\n       \
    \ n /= factor;\n    }\n    factors", "    let primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut factors = Vec::new();\n    let mut tmp_n = n;\n    for &p in primes.iter()\
    \ {\n        while tmp_n % p == 0 {\n            factors.push(p);\n          \
    \  tmp_n /= p;\n        }\n    }\n    factors", "    let mut result = Vec::new();\n\
    \    let mut n = n;\n    for p in &PRIMES {\n        while n % p == 0 {\n    \
    \        result.push(*p);\n            n /= p;\n        }\n    }\n    result",
  "    let mut factors = Vec::new();\n    let mut number = n;\n    let mut divisor\
    \ = 2;\n    while number != 1 {\n        while number % divisor == 0 {\n     \
    \       factors.push(divisor);\n            number /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors", "    let mut acc = vec![];\n    let\
    \ mut num = n;\n    for i in 2..=n {\n        if num % i == 0 {\n            acc.push(i);\n\
    \            num /= i;\n        }\n    }\n    acc", "    let mut n = n;\n    let\
    \ mut factors = Vec::new();\n    let mut factor = 2;\n    while n > 1 {\n    \
    \    while n % factor == 0 {\n            factors.push(factor);\n            n\
    \ /= factor;\n        }\n        factor += 1;\n    }\n    factors", "    let mut\
    \ n = n;\n    let mut v = Vec::new();\n    while n % 2 == 0 {\n        v.push(2);\n\
    \        n /= 2;\n    }\n    let mut m = 3;\n    while n > 1 {\n        if n %\
    \ m == 0 {\n            v.push(m);\n            n /= m;\n        } else {\n  \
    \          m += 2;\n        }\n    }\n    v", "    if n <= 1 {\n        return\
    \ vec![];\n    }\n    let mut result = vec![];\n    let mut factor = 2;\n    let\
    \ mut num = n;\n    while num > 1 {\n        while num % factor == 0 {\n     \
    \       result.push(factor);\n            num /= factor;\n        }\n        factor\
    \ += 1;\n    }\n    result", "    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors", "    let mut n = n;\n    let mut result = Vec::new();\n\
    \    while n % 2 == 0 {\n        result.push(2);\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i * i <= n {\n        while n % i == 0 {\n       \
    \     result.push(i);\n            n /= i;\n        }\n        i += 2;\n    }\n\
    \    if n > 2 {\n        result.push(n);\n    }\n    result", "    let mut factors\
    \ = Vec::new();\n    let mut n = n;\n    for f in 2..=n {\n        while n % f\
    \ == 0 {\n            factors.push(f);\n            n /= f;\n        }\n    }\n\
    \    factors", "    let mut rem = n;\n    let mut result = Vec::new();\n    while\
    \ rem > 1 {\n        let prime = find_next_prime(rem);\n        while rem % prime\
    \ == 0 {\n            result.push(prime);\n            rem /= prime;\n       \
    \ }\n    }\n    result", "    let mut res = Vec::new();\n    let mut tmp = n;\n\
    \    while tmp % 2 == 0 {\n        res.push(2);\n        tmp /= 2;\n    }\n  \
    \  for i in (3..tmp).step_by(2) {\n        while tmp % i == 0 {\n            res.push(i);\n\
    \            tmp /= i;\n        }\n    }\n    if tmp > 2 {\n        res.push(tmp);\n\
    \    }\n    res", "    let mut res = Vec::new();\n    let mut num = n;\n    for\
    \ i in 2..=num {\n        while num % i == 0 {\n            res.push(i);\n   \
    \         num /= i;\n        }\n    }\n    res", "    let mut factors = Vec::new();\n\
    \    let mut value = n;\n    let mut d = 2;\n    while value > 1 {\n        while\
    \ value % d == 0 {\n            factors.push(d);\n            value /= d;\n  \
    \      }\n        d += 1;\n    }\n    factors", "    let mut n = n;\n    let mut\
    \ result = Vec::new();\n    let mut divider = 2;\n    while n > 1 {\n        if\
    \ n % divider == 0 {\n            result.push(divider);\n            n /= divider;\n\
    \        } else {\n            divider += 1;\n        }\n    }\n    result", " \
    \   let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let mut\
    \ result = vec![];\n    while i < primes.len() {\n        let p = primes[i];\n\
    \        if n % p == 0 {\n            result.push(p);\n            n /= p;\n \
    \       } else {\n            i += 1;\n        }\n    }\n    result", "    let\
    \ mut n = n;\n    let mut output = Vec::new();\n    let mut i = 2;\n    while\
    \ n > 1 {\n        while n % i == 0 {\n            output.push(i);\n         \
    \   n /= i;\n        }\n        i += 1;\n    }\n    output", "    let mut res\
    \ = Vec::new();\n    let mut num = n;\n    let mut prime_num = 2;\n    while num\
    \ > 1 {\n        while num % prime_num == 0 {\n            res.push(prime_num);\n\
    \            num /= prime_num;\n        }\n        prime_num += 1;\n    }\n  \
    \  res", "    let mut factors = Vec::new();\n    let mut n = n;\n    let mut i\
    \ = 2;\n    while n > 1 {\n        while n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut divide_by = 2;\n    let mut number =\
    \ n;\n    while number != 1 {\n        while number % divide_by == 0 {\n     \
    \       factors.push(divide_by);\n            number /= divide_by;\n        }\n\
    \        divide_by += 1;\n    }\n    factors", "    let mut n = n;\n    let mut\
    \ v = Vec::new();\n    let mut i = 2;\n    while n > 1 {\n        while n % i\
    \ == 0 {\n            v.push(i);\n            n /= i;\n        }\n        i +=\
    \ 1;\n    }\n    v", "    let mut n = n;\n    let mut res = Vec::new();\n    while\
    \ n % 2 == 0 {\n        res.push(2);\n        n /= 2;\n    }\n    let mut i =\
    \ 3;\n    while i <= (n as f64).sqrt() as isize {\n        while n % i == 0 {\n\
    \            res.push(i);\n            n /= i;\n        }\n        i += 2;\n \
    \   }\n    if n > 2 {\n        res.push(n);\n    }\n    res", "    let mut v:\
    \ Vec<isize> = Vec::new();\n    let mut x = n;\n    let mut i = 2;\n    while\
    \ x > 1 {\n        while x % i == 0 {\n            v.push(i);\n            x /=\
    \ i;\n        }\n        i += 1;\n    }\n    v", "    let mut number = n;\n  \
    \  let mut result = Vec::new();\n    for i in 2..number + 1 {\n        while number\
    \ % i == 0 {\n            result.push(i);\n            number /= i;\n        }\n\
    \    }\n    result", '    unimplemented!();', "    let mut result = Vec::new();\n\
    \    let mut m = n;\n    for i in 2..=n {\n        if n % i == 0 {\n         \
    \   result.push(i);\n            m /= i;\n            if m == 1 {\n          \
    \      break;\n            }\n        }\n    }\n    result", "    let mut m =\
    \ n;\n    let mut divisor = 2;\n    let mut factors = Vec::new();\n    while m\
    \ > 1 {\n        if m % divisor == 0 {\n            factors.push(divisor);\n \
    \           m /= divisor;\n        } else {\n            divisor += 1;\n     \
    \   }\n    }\n    factors", '    unimplemented!()', "    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    for i in 2..=n {\n        while num % i == 0 {\n  \
    \          factors.push(i);\n            num /= i;\n        }\n    }\n    factors",
  "    let mut res = Vec::new();\n    let mut x = n;\n    for i in 2..x {\n      \
    \  while x % i == 0 {\n            res.push(i);\n            x /= i;\n       \
    \ }\n    }\n    res", "    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut cur_prime = 2;\n    while n > 1 {\n        if n % cur_prime == 0\
    \ {\n            result.push(cur_prime);\n            n /= cur_prime;\n      \
    \  } else {\n            cur_prime += 1;\n        }\n    }\n    result", "   \
    \ let mut to_factorize = n;\n    let mut current_divider = 2;\n    let mut answer\
    \ = Vec::new();\n    while to_factorize != 1 {\n        if to_factorize % current_divider\
    \ == 0 {\n            answer.push(current_divider);\n            to_factorize\
    \ /= current_divider;\n        } else {\n            current_divider += 1;\n \
    \       }\n    }\n    answer", "    let mut res = Vec::new();\n    let mut tn\
    \ = n;\n    let mut i = 2;\n    while i <= tn {\n        if tn % i == 0 {\n  \
    \          res.push(i);\n            tn /= i;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    res", "    let mut n = n;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if n % i == 0\
    \ {\n            prime_factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    prime_factors", "    let mut n = n;\n\
    \    let mut factors = Vec::new();\n    let mut factor = 2;\n    while n > 1 {\n\
    \        while n % factor == 0 {\n            factors.push(factor);\n        \
    \    n /= factor;\n        }\n        factor += 1;\n    }\n    factors", "  let\
    \ mut v = Vec::new();\n  let mut n = n;\n  let mut i = 2;\n  while n != 1 {\n\
    \    if n % i == 0 {\n      v.push(i);\n      n /= i;\n    } else {\n      i +=\
    \ 1;\n    }\n  }\n  v", '    unimplemented!();', "    let mut n = n;\n    let\
    \ mut factors = Vec::new();\n    let mut candidate = 2;\n    while n > 1 {\n \
    \       while n % candidate == 0 {\n            factors.push(candidate);\n   \
    \         n /= candidate;\n        }\n        candidate += 1;\n    }\n    factors",
  "    let mut n = n;\n    let mut a = vec![];\n    let mut x = 2;\n    while n >\
    \ 1 {\n        while n % x == 0 {\n            a.push(x);\n            n /= x;\n\
    \        }\n        x += 1;\n    }\n    a", '    unimplemented!();', "    // TODO\n\
    \    unimplemented!();", "    if n == 1 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    let mut cur = n;\n    while cur != 1 {\n     \
    \   let mut factor = 2;\n        while cur % factor != 0 {\n            factor\
    \ += 1;\n        }\n        result.push(factor);\n        cur /= factor;\n   \
    \ }\n    result", "    let mut n = n;\n    let mut result = Vec::new();\n    let\
    \ mut current_factor = 2;\n    while n != 1 {\n        if n % current_factor ==\
    \ 0 {\n            result.push(current_factor);\n            n /= current_factor;\n\
    \        } else {\n            current_factor += 1;\n        }\n    }\n    result",
  "    let mut factors = Vec::new();\n    let mut x = n;\n    let mut i = 2;\n   \
    \ while x > 1 {\n        while x % i == 0 {\n            factors.push(i);\n  \
    \          x /= i;\n        }\n        i += 1;\n    }\n    factors", "    if n\
    \ == 1 {\n        return vec![];\n    }\n    let mut n = n;\n    let mut factor\
    \ = 2;\n    let mut factors = vec![];\n    while n > 1 {\n        if n % factor\
    \ == 0 {\n            factors.push(factor);\n            n /= factor;\n      \
    \  } else {\n            factor += 1;\n        }\n    }\n    factors", "    let\
    \ mut result = Vec::new();\n    let mut index = 2;\n    let mut input = n;\n \
    \   while input != 1 {\n        if input % index == 0 {\n            result.push(index);\n\
    \            input /= index;\n        } else {\n            index += 1;\n    \
    \    }\n    }\n    result", "    let mut result = Vec::new();\n    let mut remain\
    \ = n;\n    for i in 2..n + 1 {\n        if is_prime(i) {\n            while remain\
    \ % i == 0 {\n                result.push(i);\n                remain /= i;\n\
    \            }\n        }\n    }\n    result", "    if n == 0 {\n        return\
    \ vec![];\n    }\n\n    let mut res = vec![];\n    let mut num = n;\n    for i\
    \ in 2.. {\n        if num % i == 0 {\n            res.push(i);\n            num\
    \ /= i;\n        }\n        if num == 1 {\n            break;\n        }\n   \
    \ }\n    res", '    unimplemented!();', "    let mut factors = Vec::new();\n \
    \   let mut n_ = n;\n    for i in 2..n_ + 1 {\n        while n_ % i == 0 {\n \
    \           factors.push(i);\n            n_ /= i;\n        }\n    }\n    factors",
  '    unimplemented!();', "    let mut number = n;\n    let mut divisor = 2;\n  \
    \  let mut factors = Vec::new();\n    while number > 1 {\n        while number\
    \ % divisor == 0 {\n            factors.push(divisor);\n            number /=\
    \ divisor;\n        }\n        divisor += 1;\n    }\n    factors", "    let mut\
    \ n = n;\n    let mut res = Vec::new();\n    for i in 2..(n + 1) {\n        while\
    \ n % i == 0 {\n            res.push(i);\n            n /= i;\n        }\n   \
    \ }\n    res", "    let mut n = n;\n    let mut result = Vec::new();\n    let\
    \ mut d = 2;\n    while n > 1 {\n        while n % d == 0 {\n            result.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    result", "    let\
    \ mut factors = Vec::new();\n    let mut quotient = n;\n    let mut i = 2;\n \
    \   while quotient > 1 {\n        while quotient % i == 0 {\n            factors.push(i);\n\
    \            quotient /= i;\n        }\n        i += 1;\n    }\n    factors",
  "    let mut factors = Vec::new();\n    let mut number = n;\n    while number %\
    \ 2 == 0 {\n        factors.push(2);\n        number /= 2;\n    }\n    let mut\
    \ f = 3;\n    while f*f <= number {\n        if number % f == 0 {\n          \
    \  factors.push(f);\n            number /= f;\n        } else {\n            f\
    \ += 2;\n        }\n    }\n    if number > 1 {\n        factors.push(number);\n\
    \    }\n    factors", "    let mut cur = n;\n    let mut factors = Vec::new();\n\
    \    let mut p = 2;\n    while cur > 1 {\n        while cur % p == 0 {\n     \
    \       factors.push(p);\n            cur /= p;\n        }\n        p += 1;\n\
    \    }\n    factors", "    let mut factors = Vec::new();\n    let mut number =\
    \ n;\n    let mut i = 2;\n    while number > 1 {\n        while number % i ==\
    \ 0 {\n            factors.push(i);\n            number /= i;\n        }\n   \
    \     i += 1;\n    }\n    factors", "    let mut result = Vec::new();\n    let\
    \ mut number = n;\n    let mut i = 2;\n    while number > 1 {\n        while number\
    \ % i == 0 {\n            result.push(i);\n            number /= i;\n        }\n\
    \        i += 1;\n    }\n    result", "    let mut n = n;\n    let mut factors\
    \ = Vec::new();\n    while n > 1 {\n        let (factor, new_n) = next_factor(n);\n\
    \        factors.push(factor);\n        n = new_n;\n    }\n    factors", "   \
    \ let mut n = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            factors.push(i);\n          \
    \  n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors",
  "    let mut n = n;\n    let mut v = Vec::new();\n    let mut d = 2;\n    while\
    \ n > 1 {\n        while n % d == 0 {\n            v.push(d);\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    v", "    let mut result = Vec::new();\n\
    \    let mut n = n;\n    while n % 2 == 0 {\n        result.push(2);\n       \
    \ n /= 2;\n    }\n    let mut d = 3;\n    while d * d <= n {\n        while n\
    \ % d == 0 {\n            result.push(d);\n            n /= d;\n        }\n  \
    \      d += 2;\n    }\n    if n > 1 {\n        result.push(n);\n    }\n    result",
  "    let mut factors = Vec::new();\n    let mut num = n;\n    for i in 2..n {\n\
    \        if num % i == 0 {\n            factors.push(i);\n            num /= i;\n\
    \        }\n    }\n    factors", "    let mut n = n;\n    let mut list = Vec::new();\n\
    \    for i in 2..n+1 {\n        if n % i == 0 {\n            list.push(i);\n \
    \           n = n / i;\n            if n == 1 { break; }\n        }\n    }\n \
    \   list", "    let mut primes: Vec<isize> = Vec::new();\n    let mut factor =\
    \ n;\n    let mut prime_divisor = 2;\n    while factor > 1 {\n        while factor\
    \ % prime_divisor == 0 {\n            primes.push(prime_divisor);\n          \
    \  factor /= prime_divisor;\n        }\n        prime_divisor += 1;\n    }\n \
    \   primes", "    let mut n = n;\n    let mut result = Vec::new();\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            result.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        result.push(n);\n    }\n    result", "    if n == 1 {\n\
    \        return vec![];\n    }\n    let mut prime_factors = vec![];\n    let mut\
    \ temp = n;\n    for i in 2..n {\n        if is_prime(i) {\n            if temp\
    \ % i == 0 {\n                prime_factors.push(i);\n                temp = temp\
    \ / i;\n                i = 1;\n            }\n        }\n    }\n    prime_factors",
  "    let mut factors = Vec::new();\n    let mut number = n;\n    for i in 2..=n\
    \ {\n        while number % i == 0 {\n            factors.push(i);\n         \
    \   number /= i;\n        }\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 2;\n    while n > 1 {\n        while n %\
    \ i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n   \
    \     i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut prime = 2;\n    let mut n = n;\n    while n > 1 {\n        if n % prime\
    \ == 0 {\n            factors.push(prime);\n            n /= prime;\n        }\
    \ else {\n            prime += 1;\n        }\n    }\n    factors", "    let mut\
    \ res = Vec::new();\n    let mut current = n;\n    for i in 2..current {\n   \
    \     if current % i == 0 {\n            res.push(i);\n            current /=\
    \ i;\n            if current == 1 {\n                break;\n            }\n \
    \       }\n    }\n    res", "    let mut factors = Vec::new();\n    let mut num\
    \ = n;\n    let mut prime = 2;\n    while num > 1 {\n        while num % prime\
    \ == 0 {\n            factors.push(prime);\n            num /= prime;\n      \
    \  }\n        prime += 1;\n    }\n    factors", "    let mut number = n;\n   \
    \ let mut res = Vec::new();\n    for i in 2..(number + 1) {\n        while number\
    \ % i == 0 {\n            res.push(i);\n            number /= i;\n        }\n\
    \    }\n    res", "    let mut remaining = n;\n    let mut result = Vec::new();\n\
    \    let mut curr_factor = 2;\n    while remaining != 1 {\n        if remaining\
    \ % curr_factor == 0 {\n            result.push(curr_factor);\n            remaining\
    \ /= curr_factor;\n        } else {\n            curr_factor += 1;\n        }\n\
    \    }\n    result", '    unimplemented!();', "    if n <= 1 {\n        return\
    \ vec![];\n    }\n    let mut factors = vec![];\n    let mut num = n;\n    let\
    \ mut factor = 2;\n    while num > 1 {\n        while num % factor == 0 {\n  \
    \          factors.push(factor);\n            num /= factor;\n        }\n    \
    \    factor += 1;\n    }\n    factors", "    let mut n = n;\n    let mut result\
    \ = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        while n %\
    \ i == 0 {\n            result.push(i);\n            n /= i;\n        }\n    \
    \    i += 1;\n    }\n    if n > 1 {\n        result.push(n);\n    }\n    result",
  "    let mut res = Vec::new();\n    let mut n = n;\n    for i in 2..n {\n      \
    \  if n % i == 0 {\n            let mut times = 0;\n            while n % i ==\
    \ 0 {\n                n /= i;\n                times += 1;\n            }\n \
    \           for _ in 0..times {\n                res.push(i);\n            }\n\
    \        }\n    }\n    res", "    let mut n = n;\n    let mut res = Vec::new();\n\
    \    let mut p = 2;\n    while n > 1 {\n        if n % p == 0 {\n            res.push(p);\n\
    \            n /= p;\n        } else {\n            p += 1;\n        }\n    }\n\
    \    res", "  // factorize(8) -> [2, 2, 2]\n  // factorize(25) -> [5, 5]\n  //\
    \ factorize(70) -> [2, 5, 7]\n  let mut result: Vec<isize> = Vec::new();\n  let\
    \ mut i = 2;\n  let mut m = n;\n  while i <= m {\n    if m % i == 0 {\n      result.push(i);\n\
    \      m /= i;\n    } else {\n      i += 1;\n    }\n  }\n  result", "    let primes\
    \ = (2..).filter(|x| is_prime(*x as u32));\n    let mut factors = Vec::new();\n\
    \    let mut num = n;\n    for prime in primes {\n        while num % prime ==\
    \ 0 {\n            factors.push(prime);\n            num /= prime;\n        }\n\
    \        if num == 1 {\n            break;\n        }\n    }\n    factors", " \
    \   let mut n = n;\n    let mut v = Vec::new();\n    let mut d = 2;\n    while\
    \ n > 1 {\n        while n % d == 0 {\n            v.push(d);\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    v", "    let mut i = 2;\n    let\
    \ mut n = n;\n    let mut res = Vec::new();\n    while i <= n {\n        while\
    \ n % i == 0 {\n            res.push(i);\n            n /= i;\n        }\n   \
    \     i += 1;\n    }\n    res", "    let mut factors = Vec::new();\n    let mut\
    \ prime_factor = 2;\n    let mut n_copy = n;\n    while n_copy > 1 {\n       \
    \ while n_copy % prime_factor == 0 {\n            factors.push(prime_factor);\n\
    \            n_copy /= prime_factor;\n        }\n        prime_factor += 1;\n\
    \    }\n    factors", "    let mut prime_factors = Vec::new();\n    let mut temp_n\
    \ = n;\n    while temp_n % 2 == 0 {\n        prime_factors.push(2);\n        temp_n\
    \ /= 2;\n    }\n    let mut factor = 3;\n    while temp_n > 1 {\n        while\
    \ temp_n % factor == 0 {\n            prime_factors.push(factor);\n          \
    \  temp_n /= factor;\n        }\n        factor += 2;\n    }\n    prime_factors",
  "    let mut res = Vec::new();\n    let mut n = n;\n    for i in 2..n+1 {\n    \
    \    if n % i == 0 {\n            res.push(i);\n            n /= i;\n        }\n\
    \    }\n    res", "    if n == 1 {\n        return vec![];\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            let mut v = factorize(i);\n   \
    \         v.append(&mut factorize(n / i));\n            return v;\n        }\n\
    \    }\n    vec![n]", '    unimplemented!();', "    let mut d = 2;\n    let mut\
    \ res = Vec::new();\n    while n > 1 {\n        while n % d == 0 {\n         \
    \   res.push(d);\n            n /= d;\n        }\n        d += 1;\n    }\n   \
    \ res", "    let mut prime_factors = Vec::new();\n    let mut value = n;\n   \
    \ for i in 2..(n as f64).sqrt() as isize + 1 {\n        if value % i == 0 {\n\
    \            prime_factors.push(i);\n            value /= i;\n        }\n    }\n\
    \    prime_factors", "    // TODO: implement factorize function here\n    let\
    \ mut vec = Vec::new();\n    let mut num = n;\n    let mut i = 2;\n    while num\
    \ > 1 {\n        if num % i == 0 {\n            vec.push(i);\n            num\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    vec", '    unimplemented!()',
  "    let mut n = n;\n    let mut factors = Vec::new();\n    for i in 2.. {\n   \
    \     if i * i > n {\n            if n > 1 {\n                factors.push(n);\n\
    \            }\n            break;\n        }\n        while n % i == 0 {\n  \
    \          factors.push(i);\n            n /= i;\n        }\n    }\n    factors",
  "    let mut result = Vec::new();\n    let mut tmp = n;\n    let mut i = 2;\n  \
    \  while tmp > 1 {\n        if tmp % i == 0 {\n            result.push(i);\n \
    \           tmp /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result", "    let mut list = Vec::new();\n    let mut divisor = 2;\n    let\
    \ mut num = n;\n    while num != 1 {\n        if num % divisor == 0 {\n      \
    \      list.push(divisor);\n            num /= divisor;\n        } else {\n  \
    \          divisor += 1;\n        }\n    }\n    list", "    //TODO: implement\
    \ your solution here\n    unimplemented!()", "    let mut res = Vec::new();\n\
    \    if n == 1 {\n        return res;\n    }\n    let mut tmp = n;\n    let mut\
    \ i = 2;\n    while i * i <= tmp {\n        if tmp % i == 0 {\n            res.push(i);\n\
    \            tmp /= i;\n        } else {\n            i += 1;\n        }\n   \
    \ }\n    res.push(tmp);\n    res", '    unimplemented!()', "    let mut a = n;\n\
    \    let mut b = 2;\n    let mut res = Vec::new();\n    while a > 1 {\n      \
    \  if a % b == 0 {\n            res.push(b);\n            a /= b;\n        } else\
    \ {\n            b += 1;\n        }\n    }\n    res", "    let mut v = Vec::new();\n\
    \    let mut i = 2;\n    let mut num = n;\n    while i * i <= num {\n        while\
    \ num % i == 0 {\n            v.push(i);\n            num /= i;\n        }\n \
    \       i += 1;\n    }\n    if num > 1 {\n        v.push(num);\n    }\n    v",
  "    let mut n = n;\n    let mut result = Vec::new();\n    let mut divisor = 2;\n\
    \    while n > 1 {\n        while n % divisor == 0 {\n            result.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor += 1;\n    }\n    result",
  "    let mut factors = Vec::new();\n    let mut num = n;\n    let mut c = 2;\n \
    \   while num > 1 {\n        while num % c == 0 {\n            factors.push(c);\n\
    \            num /= c;\n        }\n        c += 1;\n    }\n    factors", "   \
    \ let mut result = Vec::new();\n    let mut value = n;\n    for i in 2..=n {\n\
    \        if value % i == 0 {\n            result.push(i);\n            value /=\
    \ i;\n        }\n        if value == 1 {\n            break;\n        }\n    }\n\
    \    result", "    let mut current = n;\n    let mut res = Vec::new();\n    for\
    \ i in 2..current+1 {\n        while current % i == 0 {\n            res.push(i);\n\
    \            current /= i;\n        }\n    }\n    res"]
stop_tokens:
- "\n}"
