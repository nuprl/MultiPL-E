name: HumanEval_86_anti_shuffle
language: rust
results:
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words: Vec<Vec<char>> = Vec::new();\n    let mut buffer: Vec<char>\
    \ = Vec::new();\n    for character in s.chars() {\n        if character == ' '\
    \ {\n            words.push(buffer);\n            buffer = Vec::new();\n     \
    \   } else {\n            buffer.push(character);\n        }\n    }\n    words.push(buffer);\n\
    \    let mut anti_shuffled_s: String = String::new();\n    for word in words {\n\
    \        let mut word: Vec<char> = word;\n        word.sort();\n        for character\
    \ in word {\n            anti_shuffled_s.push(character);\n        }\n       \
    \ anti_shuffled_s.push(' ');\n    }\n    let len = anti_shuffled_s.len();\n  \
    \  anti_shuffled_s.remove(len - 1);\n    anti_shuffled_s\n}\n\nfn main() {\n \
    \   let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    if s.is_empty() {\n        return s;\n    }\n    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    let mut word = words.next().unwrap();\n\
    \    let mut word_chars: Vec<char> = word.chars().collect();\n    word_chars.sort();\n\
    \    result += &word_chars.iter().collect::<String>();\n    for word in words\
    \ {\n        result += \" \";\n        let mut word_chars: Vec<char> = word.chars().collect();\n\
    \        word_chars.sort();\n        result += &word_chars.iter().collect::<String>();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO\n    s\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n   \
    \ assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello\"`,\n right: `\"ehllo\"`', /tmp/tmp34y1c094.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut strings = s.split(\" \");\n    let mut words = Vec::new();\n    for\
    \ string in strings {\n        words.push(string.chars().sorted().collect::<String>());\n\
    \    }\n    words.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmp4zpexpi5.rs:14:35\n   |\n14 |         words.push(string.chars().sorted().collect::<String>());\n\
    \   |                                   ^^^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    if s.len() <= 1 {\n        return s;\n    }\n    s.split_whitespace()\n \
    \       .map(|word| {\n            let mut chars: Vec<char> = word.chars().collect();\n\
    \            chars.sort();\n            chars.into_iter().collect()\n        })\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut out: Vec<String> = Vec::new();\n    let mut work: Vec<char> = Vec::new();\n\
    \    for c in s.chars() {\n        if c.is_whitespace() {\n            if !work.is_empty()\
    \ {\n                work.sort();\n                out.push(work.iter().collect());\n\
    \                work.clear();\n            }\n            out.push(c.to_string());\n\
    \        } else {\n            work.push(c);\n        }\n    }\n    if !work.is_empty()\
    \ {\n        work.sort();\n        out.push(work.iter().collect());\n    }\n \
    \   out.iter().collect()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp2808njkn.rs:29:16\n     |\n\
    29   |     out.iter().collect()\n     |                ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `String`\n     = help:\
    \ the following other types implement trait `FromIterator<A>`:\n             \
    \  <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO: Implement this function\n    unimplemented!()\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppju39yd9.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // ignore white spaces and punctuation marks\n    let mut ans = String::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_whitespace()\
    \ || c.is_ascii_punctuation() {\n            if !word.is_empty() {\n         \
    \       ans.push_str(&word.chars().collect::<Vec<char>>().sort().iter().collect::<String>());\n\
    \                word.clear();\n            }\n            ans.push(c);\n    \
    \    } else {\n            word.push(c);\n        }\n    }\n    if !word.is_empty()\
    \ {\n        ans.push_str(&word.chars().collect::<Vec<char>>().sort().iter().collect::<String>());\n\
    \    }\n    ans\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpupjywlju.rs:17:74\n   |\n17 |                 ans.push_str(&word.chars().collect::<Vec<char>>().sort().iter().collect::<String>());\n\
    \   |                                                                        \
    \  ^^^^ method not found in `()`\n\nerror[E0599]: no method named `iter` found\
    \ for unit type `()` in the current scope\n  --> /tmp/tmpupjywlju.rs:26:66\n \
    \  |\n26 |         ans.push_str(&word.chars().collect::<Vec<char>>().sort().iter().collect::<String>());\n\
    \   |                                                                  ^^^^ method\
    \ not found in `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| word.chars().sorted().collect::<String>())\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpah39rgts.rs:12:34\n   |\n12 |         .map(|word|\
    \ word.chars().sorted().collect::<String>())\n   |                           \
    \       ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|w| {\n            let mut chars: Vec<char>\
    \ = w.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut new_s = s.clone();\n    let mut index = 0;\n    while index < new_s.len()\
    \ {\n        let mut word = String::new();\n        while !new_s.is_char_boundary(index)\
    \ {\n            word.push(new_s.chars().nth(index).unwrap());\n            index\
    \ += 1;\n        }\n        word.push(new_s.chars().nth(index).unwrap());\n  \
    \      index += 1;\n        let sorted = word.chars().into_iter().collect::<Vec<char>>();\n\
    \        let mut sorted = sorted.clone();\n        sorted.sort();\n        let\
    \ sorted = sorted.into_iter().collect::<String>();\n        new_s = new_s.replace(&word,\
    \ &sorted);\n    }\n    new_s\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello\"`,\n right: `\"ehllo\"`', /tmp/tmpt8rgmt8f.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|s| {\n            let mut s: Vec<char>\
    \ = s.chars().collect();\n            s.sort();\n            s.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!(\"implement function anti_shuffle(s: String) that returns\
    \ an ordered version of s: String\");\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: implement function anti_shuffle(s:\
    \ String) that returns an ordered version of s: String', /tmp/tmp6gsi93oa.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    return s;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello\"`,\n right: `\"ehllo\"`', /tmp/tmpa59kuuaq.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi25cn8yv.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split_whitespace() {\n  \
    \      let mut word_vec: Vec<char> = word.chars().collect();\n        word_vec.sort();\n\
    \        res.push_str(&word_vec.into_iter().collect::<String>());\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut new = s.clone();\n    let mut len = new.len();\n    let mut i = 0;\n\
    \    while i < len {\n        while i < len && new.chars().nth(i).unwrap().is_whitespace()\
    \ {\n            i += 1;\n        }\n        let mut last = i;\n        while\
    \ i < len && !new.chars().nth(i).unwrap().is_whitespace() {\n            i +=\
    \ 1;\n        }\n        let word = &mut new[last..i];\n        word.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    new\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for mutable reference `&mut\
    \ str` in the current scope\n  --> /tmp/tmpma2wfdev.rs:23:14\n   |\n23 |     \
    \    word.sort_by(|a, b| a.cmp(b));\n   |              ^^^^^^^ method not found\
    \ in `&mut str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|s| {\n            let mut chars: Vec<char>\
    \ = s.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO: Implement your solution here\n    return s.to_string();\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello\"`,\n right: `\"ehllo\"`', /tmp/tmp9toi3mtb.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|v| {\n            let mut v = v.chars().collect::<Vec<char>>();\n\
    \            v.sort();\n            v.into_iter().collect::<String>()\n      \
    \  })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    let mut prev_word = words.next();\n    loop {\n        let word = words.next();\n\
    \        if word.is_none() {\n            break;\n        }\n        let word\
    \ = word.unwrap();\n        if prev_word.is_some() {\n            result.push_str(prev_word.unwrap());\n\
    \            result.push(' ');\n        }\n        result.push_str(\n        \
    \    word.chars()\n                .collect::<Vec<char>>()\n                .sort_by(|a,\
    \ b| a.cmp(b))\n                .iter()\n                .collect::<String>()\n\
    \                .as_str(),\n        );\n        prev_word = Some(word);\n   \
    \ }\n    if prev_word.is_some() {\n        result.push_str(prev_word.unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpgeswz5sb.rs:28:18\n   |\n28 |                 .iter()\n\
    \   |                  ^^^^ method not found in `()`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words: Vec<String> = Vec::new();\n    let mut counter = 0;\n    for\
    \ c in s.chars() {\n        if c == ' ' {\n            counter += 1;\n       \
    \     words.push(String::new());\n        } else {\n            let len = words.len();\n\
    \            words[len - 1 - counter].push(c);\n        }\n    }\n    let mut\
    \ result = String::new();\n    for mut word in words {\n        word.make_ascii_lowercase();\n\
    \        word.chars().collect::<Vec<char>>().sort();\n        result.push_str(&word);\n\
    \        result.push(' ');\n    }\n    result.trim().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp3ero4uvl.rs:19:19\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut buffer = String::new();\n    for word in s.split_whitespace() {\n\
    \        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        buffer.push_str(&chars.iter().collect::<String>());\n        buffer.push('\
    \ ');\n    }\n    buffer.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|x| {\n            let mut chars: Vec<char>\
    \ = x.chars().collect();\n            chars.sort();\n            chars.into_iter().collect::<String>()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO\n    let mut new_s = String::new();\n    let mut new_word = String::new();\n\
    \    for ch in s.chars() {\n        if ch == ' ' {\n            new_s.push_str(&new_word);\n\
    \            new_s.push(' ');\n            new_word = String::new();\n       \
    \ } else {\n            new_word.push(ch);\n        }\n    }\n    new_s.push_str(&new_word);\n\
    \    new_s\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello\"`,\n right: `\"ehllo\"`', /tmp/tmpmyyntq7x.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split_whitespace() {\n  \
    \      let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        res.push_str(&chars.iter().collect::<String>());\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut v: Vec<&str> = s.split_whitespace().collect();\n    for word in &mut\
    \ v {\n        *word = word.chars().sorted().collect::<String>().as_str();\n \
    \   }\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmp1j5lidwu.rs:13:30\n   |\n13 |         *word = word.chars().sorted().collect::<String>().as_str();\n\
    \   |                              ^^^^^^ method not found in `Chars<'_>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut word: Vec<_>\
    \ = word.chars().collect();\n            word.sort();\n            word.into_iter().collect()\n\
    \        })\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpqv0o5_8u.rs:12:10\n\
    \   |\n12 |         .map(|word| {\n   |          ^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `map`\n   |\nhelp: consider\
    \ specifying the type argument in the method call\n   |\n15 |             word.into_iter().collect::<B>()\n\
    \   |                                     +++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split_whitespace() {\n  \
    \      let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        res.push_str(&chars.iter().collect::<String>());\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = s.split(\" \");\n    let mut result = String::new();\n  \
    \  for word in words {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        for char in chars {\n            result.push(char);\n\
    \        }\n        result.push(' ');\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split(' ') {\n        let\
    \ mut w = word.chars().collect::<Vec<char>>();\n        w.sort();\n        res.push_str(&w.iter().collect::<String>());\n\
    \        res.push(' ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n  \
    \  let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut chars: Vec<char> = s.chars().collect();\n    let mut length = chars.len();\n\
    \    for i in 0..length {\n        for j in i..length {\n            if chars[i]\
    \ > chars[j] {\n                let tmp = chars[i];\n                chars[i]\
    \ = chars[j];\n                chars[j] = tmp;\n            }\n        }\n   \
    \ }\n    let mut s: String = String::new();\n    for c in chars {\n        s.push(c);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" !!!HWdellloor\"`,\n right: `\"Hello !!!Wdlor\"`', /tmp/tmpsbq9hfxq.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut w: Vec<String> = Vec::new();\n    let mut result: String = String::new();\n\
    \    let mut prev_i: usize = 0;\n    for (i, c) in s.chars().enumerate() {\n \
    \       if c == ' ' {\n            w.push(s[prev_i..i].to_string());\n       \
    \     result.push(' ');\n            prev_i = i + 1;\n        }\n    }\n    w.push(s[prev_i..].to_string());\n\
    \    for c in w {\n        let mut c_chars: Vec<char> = c.chars().collect();\n\
    \        c_chars.sort();\n        for cc in c_chars {\n            result.push(cc);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" Hello!!!Wdlor\"`,\n right: `\"Hello !!!Wdlor\"`', /tmp/tmptkjx83lm.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut ret: Vec<char> = Vec::new();\n    let mut chars: Vec<_> = s.chars().collect();\n\
    \    let mut word: Vec<char> = Vec::new();\n    for i in 0..chars.len() {\n  \
    \      if chars[i] == ' ' {\n            if word.len() > 0 {\n               \
    \ word.sort();\n                ret.append(&mut word);\n                word =\
    \ Vec::new();\n            }\n            ret.push(' ');\n        } else {\n \
    \           word.push(chars[i]);\n        }\n    }\n    if word.len() > 0 {\n\
    \        word.sort();\n        ret.append(&mut word);\n    }\n    ret.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO\n    \"\".to_string()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"Hi\"`', /tmp/tmptep8jxe_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let words: Vec<&str> = s.split_whitespace().collect();\n\
    \    for word in words {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let words: Vec<&str> = s.split_whitespace().collect();\n    let mut new_words:\
    \ Vec<String> = Vec::new();\n    for word in words {\n        let mut chars: Vec<char>\
    \ = word.chars().collect();\n        chars.sort();\n        new_words.push(chars.into_iter().collect());\n\
    \    }\n    new_words.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    if s.len() <= 1 {\n        return s;\n    }\n    let mut result = String::new();\n\
    \    let mut temp = String::new();\n    for c in s.chars() {\n        if c ==\
    \ ' ' {\n            if temp.len() > 0 {\n                temp = temp.chars().sorted().collect();\n\
    \                result.push_str(&temp);\n                temp.clear();\n    \
    \        }\n            result.push(' ');\n        } else {\n            temp.push(c);\n\
    \        }\n    }\n    if temp.len() > 0 {\n        temp = temp.chars().sorted().collect();\n\
    \        result.push_str(&temp);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpp2x28ck5.rs:19:37\n   |\n19 |                 temp\
    \ = temp.chars().sorted().collect();\n   |                                   \
    \  ^^^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `sorted`\
    \ found for struct `Chars` in the current scope\n  --> /tmp/tmpp2x28ck5.rs:29:29\n\
    \   |\n29 |         temp = temp.chars().sorted().collect();\n   |            \
    \                 ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split_whitespace() {\n\
    \        let mut new_word = String::new();\n        let mut temp_str = String::from(word);\n\
    \        for _ in 0..word.len() {\n            let mut min_char = '~';\n     \
    \       let mut min_index = word.len();\n            for (index, char) in temp_str.chars().enumerate()\
    \ {\n                if char < min_char {\n                    min_char = char;\n\
    \                    min_index = index;\n                }\n            }\n  \
    \          new_word.push(min_char);\n            temp_str.remove(min_index);\n\
    \        }\n        result.push_str(&new_word);\n        result.push(' ');\n \
    \   }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt1xkgip6.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = s.split_whitespace();\n    let mut result = String::new();\n\
    \    loop {\n        match words.next() {\n            Some(w) => {\n        \
    \        let mut chars: Vec<char> = w.chars().collect();\n                chars.sort();\n\
    \                for c in chars {\n                    result.push(c);\n     \
    \           }\n                result.push(' ');\n            }\n            None\
    \ => break,\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for w in s.split_whitespace() {\n  \
    \      result.push_str(&w.chars().sorted().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmp0gi0jpwa.rs:13:36\n   |\n13 |         result.push_str(&w.chars().sorted().collect::<String>());\n\
    \   |                                    ^^^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpabr0vz19.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|w| {\n            let mut chars: Vec<char>\
    \ = w.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split(' ') {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    res.push_str(&chars.into_iter().collect::<String>());\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split_whitespace() {\n  \
    \      let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        for c in chars {\n            res.push(c);\n        }\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = s.split_whitespace();\n    let mut chars = words.next().unwrap().chars();\n\
    \    let mut result = String::new();\n    result.push(chars.next().unwrap());\n\
    \    for c in chars {\n        if c.is_whitespace() {\n            result.push(c);\n\
    \            continue;\n        }\n        let pos = result.char_indices().find(|(_,\
    \ c)| *c == c).unwrap().0;\n        result.insert(pos, c);\n    }\n    for w in\
    \ words {\n        result.push(' ');\n        let mut chars = w.chars();\n   \
    \     result.push(chars.next().unwrap());\n        for c in chars {\n        \
    \    if c.is_whitespace() {\n                result.push(c);\n               \
    \ continue;\n            }\n            let pos = result.char_indices().find(|(_,\
    \ c)| *c == c).unwrap().0;\n            result.insert(pos, c);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmwuirrkb.rs:20:61\n   |\n\
    20 |         let pos = result.char_indices().find(|(_, c)| *c == c).unwrap().0;\n\
    \   |                                                             ^ expected `char`,\
    \ found `&char`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |   \
    \      let pos = result.char_indices().find(|(_, c)| *c == *c).unwrap().0;\n \
    \  |                                                             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmwuirrkb.rs:32:65\n   |\n32 |             let\
    \ pos = result.char_indices().find(|(_, c)| *c == c).unwrap().0;\n   |       \
    \                                                          ^ expected `char`,\
    \ found `&char`\n   |\nhelp: consider dereferencing the borrow\n   |\n32 |   \
    \          let pos = result.char_indices().find(|(_, c)| *c == *c).unwrap().0;\n\
    \   |                                                                 +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut new_string = s.clone();\n    let mut previous_is_space = false;\n\
    \    let mut offset = 0;\n    let mut offset_increment = 0;\n    for (i, c) in\
    \ s.chars().enumerate() {\n        if c == ' ' {\n            previous_is_space\
    \ = true;\n            new_string.replace_range(i + offset..i + offset + 1, \"\
    \ \");\n            offset_increment = 1;\n        } else {\n            if previous_is_space\
    \ {\n                previous_is_space = false;\n                offset_increment\
    \ = 0;\n            }\n            let a = new_string.chars().skip(i + offset\
    \ + offset_increment).take(i - offset + 1);\n            let b = a.collect::<Vec<char>>();\n\
    \            let new_word = b.iter().sorted().collect::<String>();\n         \
    \   new_string.replace_range(i + offset..i + offset + 1, &new_word);\n       \
    \     offset += new_word.len() - 1;\n        }\n    }\n    new_string\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpqo7r39qy.rs:27:37\n   |\n27 |          \
    \   let new_word = b.iter().sorted().collect::<String>();\n   |              \
    \                       ^^^^^^ method not found in `std::slice::Iter<'_, char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split_whitespace() {\n  \
    \      res.push_str(&word.chars().collect::<Vec<char>>().sort().into_iter().collect::<String>());\n\
    \        res.push(' ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n  \
    \  let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmptxj80hif.rs:13:66\n\
    \   |\n13 |         res.push_str(&word.chars().collect::<Vec<char>>().sort().into_iter().collect::<String>());\n\
    \   |                                                                  ^^^^^^^^^\
    \ `()` is not an iterator\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `(): Iterator`\n           which is required by `():\
    \ IntoIterator`\n           `&(): Iterator`\n           which is required by `&():\
    \ IntoIterator`\n           `&mut (): Iterator`\n           which is required\
    \ by `&mut (): IntoIterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split_whitespace() {\n  \
    \      let mut v = word.chars().collect::<Vec<char>>();\n        v.sort();\n \
    \       res += &v.into_iter().collect::<String>();\n        res += \" \";\n  \
    \  }\n    res.trim().to_string()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|s| {\n            let mut s = s.chars().collect::<Vec<_>>();\n\
    \            s.sort();\n            s.into_iter().collect::<String>()\n      \
    \  })\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|x| {\n            let mut s: Vec<char> = x.chars().collect();\n\
    \            s.sort();\n            s.into_iter().collect::<String>()\n      \
    \  })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|x| {\n            let mut chars: Vec<char>\
    \ = x.chars().collect();\n            chars.sort();\n            chars.into_iter().collect::<String>()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|s| {\n            let mut s: Vec<char> = s.chars().collect();\n\
    \            s.sort();\n            s.into_iter().collect::<String>()\n      \
    \  })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|s| {\n            let mut l: Vec<char>\
    \ = s.chars().collect();\n            l.sort();\n            l.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzkbqqe_y.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!(\"Function which returns an ordered version of {}, \\\n  \
    \  i.e. if input string is 'Hello World!!!' it should return 'Hello !!!Wdlor'\"\
    , s);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Function which returns an ordered\
    \ version of Hi, i.e. if input string is 'Hello World!!!' it should return 'Hello\
    \ !!!Wdlor'', /tmp/tmptjd9364p.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let words: Vec<&str> = s.split_whitespace().collect();\n\
    \    for word in words {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        result.push_str(&String::from_iter(chars));\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpex3vyeun.rs:16:34\n   |\n\
    16 |         result.push_str(&String::from_iter(chars));\n   |               \
    \                   ^^^^^^^^^ function or associated item not found in `String`\n\
    \   |\n   = help: items from traits can only be used if the trait is in scope\n\
    help: the following trait is implemented but not in scope; perhaps add a `use`\
    \ for it:\n   |\n1  | use std::iter::FromIterator;\n   |\nhelp: there is an associated\
    \ function with a similar name\n   |\n16 |         result.push_str(&String::from_utf8(chars));\n\
    \   |                                  ~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|w| {\n            let mut chars: Vec<char>\
    \ = w.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for w in s.split_whitespace() {\n     \
    \   let mut chars: Vec<char> = w.chars().collect();\n        chars.sort();\n \
    \       res.push_str(&chars.iter().collect::<String>());\n        res.push(' ');\n\
    \    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut buffer = String::new();\n  \
    \  for ch in s.chars() {\n        if ch == ' ' {\n            result.push_str(&buffer);\n\
    \            result.push(' ');\n            buffer.clear();\n        } else {\n\
    \            buffer.push(ch);\n        }\n    }\n    result.push_str(&buffer);\n\
    \    let mut result_vec: Vec<String> = result.split(' ').map(|word| {\n      \
    \  let mut word_vec: Vec<char> = word.chars().collect();\n        word_vec.sort();\n\
    \        word_vec.into_iter().collect()\n    }).collect();\n    result_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split(\" \") {\n     \
    \   let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        for c in chars {\n            result.push(c);\n        }\n        result.push('\
    \ ');\n    }\n    let _ = result.pop();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = s.split_whitespace();\n    let first_word = words.next().unwrap();\n\
    \    let mut res = first_word.chars().sorted().collect::<String>();\n    for word\
    \ in words {\n        res.push(' ');\n        let mut sorted_word = word.chars().sorted().collect::<String>();\n\
    \        res.push_str(&sorted_word);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmp7wn14706.rs:13:38\n   |\n13 |     let mut res =\
    \ first_word.chars().sorted().collect::<String>();\n   |                     \
    \                 ^^^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method\
    \ named `sorted` found for struct `Chars` in the current scope\n  --> /tmp/tmp7wn14706.rs:16:44\n\
    \   |\n16 |         let mut sorted_word = word.chars().sorted().collect::<String>();\n\
    \   |                                            ^^^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp91zet15l.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdmnwrc7p.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // unimplemented!(\"{}\", s)\n    let mut result = String::new();\n    let\
    \ mut temp = String::new();\n    for ch in s.chars() {\n        if ch == ' ' {\n\
    \            let mut temp_chars: Vec<char> = temp.chars().collect();\n       \
    \     temp_chars.sort();\n            for ch in temp_chars {\n               \
    \ result.push(ch);\n            }\n            result.push(' ');\n           \
    \ temp.clear();\n        } else {\n            temp.push(ch);\n        }\n   \
    \ }\n    let mut temp_chars: Vec<char> = temp.chars().collect();\n    temp_chars.sort();\n\
    \    for ch in temp_chars {\n        result.push(ch);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let ws = s.split_whitespace();\n    let mut v = Vec::new();\n    for word\
    \ in ws {\n        let mut word = word.chars().collect::<Vec<char>>();\n     \
    \   word.sort();\n        v.push(word.into_iter().collect::<String>());\n    }\n\
    \    v.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut word: Vec<char>\
    \ = word.chars().collect();\n            word.sort();\n            word.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let words: Vec<_> = s.split_whitespace().collect();\n\
    \    for word in words {\n        let mut chars: Vec<_> = word.chars().collect();\n\
    \        chars.sort();\n        for c in chars {\n            result.push(c);\n\
    \        }\n        result.push(' ');\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut ret = String::new();\n    for word in s.split_whitespace() {\n  \
    \      for c in word.chars().collect::<Vec<char>>().iter().sort() {\n        \
    \    ret.push(*c);\n        }\n        ret.push(' ');\n    }\n    return ret;\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpwifipi5h.rs:13:61\n   |\n13 |         for\
    \ c in word.chars().collect::<Vec<char>>().iter().sort() {\n   |             \
    \                                                ^^^^ method not found in `std::slice::Iter<'_,\
    \ char>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = s.split(\" \");\n    let mut result = String::new();\n  \
    \  for word in words {\n        let mut chars: Vec<char> = word.chars().collect();\n\
    \        chars.sort();\n        for char in chars {\n            result.push(char);\n\
    \        }\n        result.push(' ');\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|w| {\n            let mut chars: Vec<char>\
    \ = w.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt8czr7ej.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|x| x.chars().collect::<Vec<_>>())\n \
    \       .map(|x| x.sort_by(|a, b| a.cmp(b)))\n        .map(|x| x.into_iter().collect::<String>())\n\
    \        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmpr8dm5cgh.rs:14:20\n\
    \   |\n14 |         .map(|x| x.into_iter().collect::<String>())\n   |        \
    \            ^^^^^^^^^ `()` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `(): Iterator`\n           which\
    \ is required by `(): IntoIterator`\n           `&(): Iterator`\n           which\
    \ is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n       \
    \    which is required by `&mut (): IntoIterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split_whitespace() {\n\
    \        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        result.push_str(&chars.iter().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz4b328ma.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO: implement anti_shuffle\n    unimplemented!()\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2qb6dpgr.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut re = String::new();\n    let mut v = Vec::new();\n    let mut space\
    \ = 0;\n    let mut split = s.split(\" \");\n    for i in split {\n        v.push(i.chars().collect::<Vec<char>>());\n\
    \    }\n    for i in v {\n        for j in i.iter() {\n            for k in 0..i.len()\
    \ - 1 {\n                if *j < i[k] {\n                    let temp = *j;\n\
    \                    *j = i[k];\n                    i[k] = temp;\n          \
    \      }\n            }\n        }\n        for j in i {\n            re.push(j);\n\
    \        }\n        if space < v.len() - 1 {\n            re.push(' ');\n    \
    \        space += 1;\n        }\n    }\n    re\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp4ljd_1v6.rs:14:9\n\
    \   |\n14 |     let mut split = s.split(\" \");\n   |         ----^^^^^\n   |\
    \         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0594]: cannot assign to `*j`, which is behind a `&`\
    \ reference\n  --> /tmp/tmp4ljd_1v6.rs:23:21\n   |\n19 |         for j in i.iter()\
    \ {\n   |                  -------- this iterator yields `&` references\n...\n\
    23 |                     *j = i[k];\n   |                     ^^^^^^^^^ `j` is\
    \ a `&` reference, so the data it refers to cannot be written\n\nerror[E0596]:\
    \ cannot borrow `i` as mutable, as it is not declared as mutable\n  --> /tmp/tmp4ljd_1v6.rs:24:21\n\
    \   |\n18 |     for i in v {\n   |         - help: consider changing this to be\
    \ mutable: `mut i`\n...\n24 |                     i[k] = temp;\n   |         \
    \            ^ cannot borrow as mutable\n\nerror[E0502]: cannot borrow `i` as\
    \ mutable because it is also borrowed as immutable\n  --> /tmp/tmp4ljd_1v6.rs:24:21\n\
    \   |\n19 |         for j in i.iter() {\n   |                  --------\n   |\
    \                  |\n   |                  immutable borrow occurs here\n   |\
    \                  immutable borrow later used here\n...\n24 |               \
    \      i[k] = temp;\n   |                     ^ mutable borrow occurs here\n\n\
    error[E0382]: borrow of moved value: `v`\n   --> /tmp/tmp4ljd_1v6.rs:31:20\n \
    \   |\n12  |     let mut v = Vec::new();\n    |         ----- move occurs because\
    \ `v` has type `Vec<Vec<char>>`, which does not implement the `Copy` trait\n...\n\
    18  |     for i in v {\n    |              - `v` moved due to this implicit call\
    \ to `.into_iter()`\n...\n31  |         if space < v.len() - 1 {\n    |      \
    \              ^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `v`\nhelp: consider iterating\
    \ over a slice of the `Vec<Vec<char>>`'s content to avoid moving into the `for`\
    \ loop\n    |\n18  |     for i in &v {\n    |              +\n\nerror: aborting\
    \ due to 4 previous errors; 1 warning emitted\n\nS"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|word| {\n            word.chars()\n       \
    \         .collect::<Vec<char>>()\n                .sort_by(|a, b| a.cmp(b))\n\
    \                .iter()\n                .collect::<String>()\n        })\n \
    \       .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n  \
    \  let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmptiff2wcg.rs:16:18\n   |\n16 |                 .iter()\n\
    \   |                  ^^^^ method not found in `()`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut ret = String::new();\n    for word in s.split(' ') {\n        if\
    \ ret.len() > 0 {\n            ret.push(' ');\n        }\n        let mut chars:\
    \ Vec<char> = word.chars().collect();\n        chars.sort();\n        for c in\
    \ chars {\n            ret.push(c);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|x| {\n            let mut s: Vec<char> = x.chars().collect();\n\
    \            s.sort();\n            s.into_iter().collect::<String>()\n      \
    \  })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for w in s.split_whitespace() {\n     \
    \   let mut chars: Vec<char> = w.chars().collect();\n        chars.sort();\n \
    \       res.push_str(&chars.iter().collect::<String>());\n        res.push(' ');\n\
    \    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut list = Vec::new();\n    for x in s.split(\" \") {\n        list.push(x.chars().collect::<Vec<char>>());\n\
    \    }\n    for i in list.iter_mut() {\n        i.sort();\n    }\n    let mut\
    \ res = String::new();\n    for i in 0..list.len() {\n        if i < list.len()\
    \ - 1 {\n            res.push_str(&list[i].iter().collect::<String>());\n    \
    \        res.push(' ');\n        } else {\n            res.push_str(&list[i].iter().collect::<String>());\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpttdiu16w.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words: Vec<_> = s.split_whitespace().collect();\n    for i in 0..words.len()\
    \ {\n        let mut word: Vec<_> = words[i].chars().collect();\n        word.sort();\n\
    \        words[i] = word.into_iter().collect();\n    }\n    words.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `&str` cannot be built from an iterator over\
    \ elements of type `char`\n    --> /tmp/tmp_jcxdgt9.rs:15:37\n     |\n15   | \
    \        words[i] = word.into_iter().collect();\n     |                      \
    \               ^^^^^^^ value of type `&str` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `&str`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut chars = s.chars().into_iter().peekable();\n    let mut out = String::new();\n\
    \    while let Some(ch) = chars.next() {\n        if ch.is_alphabetic() {\n  \
    \          let mut word: Vec<char> = vec![ch];\n            while let Some(ch)\
    \ = chars.peek() {\n                if ch.is_alphabetic() {\n                \
    \    chars.next();\n                    word.push(*ch);\n                } else\
    \ {\n                    break;\n                }\n            }\n          \
    \  word.sort();\n            for c in word {\n                out.push(c);\n \
    \           }\n        } else {\n            out.push(ch);\n        }\n    }\n\
    \    out\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `chars` as mutable more than once at a time\n\
    \  --> /tmp/tmpcm0fg8yx.rs:18:21\n   |\n16 |             while let Some(ch) =\
    \ chars.peek() {\n   |                                  ------------ first mutable\
    \ borrow occurs here\n17 |                 if ch.is_alphabetic() {\n18 |     \
    \                chars.next();\n   |                     ^^^^^^^^^^^^ second mutable\
    \ borrow occurs here\n19 |                     word.push(*ch);\n   |         \
    \                      --- first borrow later used here\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0499`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let words: Vec<&str> = s.split_whitespace().collect();\n    let mut result\
    \ = String::new();\n    for word in words {\n        let mut chars: Vec<char>\
    \ = word.chars().collect();\n        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        result.push(' ');\n    }\n    result.trim().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let result: Vec<String> = s.split(\" \").map(|x| {\n        let mut chars:\
    \ Vec<char> = x.chars().collect();\n        chars.sort();\n        chars.into_iter().collect()\n\
    \    }).collect();\n    result.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split(' ') {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    for c in chars {\n            res.push(c);\n        }\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut answer = String::new();\n    let mut counter = 0;\n    let words:\
    \ Vec<&str> = s.split(\" \").collect();\n    let mut length = words.len();\n \
    \   for i in words {\n        let mut chars: Vec<char> = i.chars().collect();\n\
    \        chars.sort();\n        for j in chars {\n            answer.push(j);\n\
    \        }\n        if counter + 1 != length {\n            answer.push(' ');\n\
    \        }\n        counter += 1;\n    }\n    answer\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut s_clone = s.clone();\n    let mut s_copy = s.clone();\n    let mut\
    \ length_of_word = 0;\n    let mut i = 0;\n    let mut count = 0;\n    let mut\
    \ word = String::new();\n    let mut word_vector = Vec::new();\n    let mut word_with_space\
    \ = String::new();\n    let mut word_with_space_vector = Vec::new();\n    while\
    \ i < s.len() {\n        if s_copy.chars().nth(i).unwrap() == ' ' {\n        \
    \    let length_of_word = length_of_word;\n            length_of_word = 0;\n \
    \           word_with_space_vector.push(word_with_space);\n            word_with_space\
    \ = String::new();\n            word_vector.push(word);\n            word = String::new();\n\
    \            i += 1;\n        } else {\n            word.push(s_copy.chars().nth(i).unwrap());\n\
    \            word_with_space.push(s_copy.chars().nth(i).unwrap());\n         \
    \   i += 1;\n            length_of_word += 1;\n        }\n    }\n    word_vector.push(word);\n\
    \    let mut i = 0;\n    for i in 0..word_vector.len() {\n        let mut characters\
    \ = word_vector[i].chars().collect::<Vec<char>>();\n        characters.sort();\n\
    \        let mut j = 0;\n        while j < characters.len() {\n            word_with_space_vector[i].replace_range(j..j\
    \ + 1, &characters[j].to_string());\n            j += 1;\n        }\n    }\n \
    \   while count < word_with_space_vector.len() {\n        let mut position = s_clone.find(&word_with_space_vector[count]).unwrap();\n\
    \        s_clone.replace_range(position..position + word_with_space_vector[count].len(),\
    \ &word_vector[count]);\n        count += 1;\n    }\n    s_clone\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "warning: variable `length_of_word` is assigned to, but never used\n  -->\
    \ /tmp/tmpwifsfb_r.rs:22:17\n   |\n22 |             let length_of_word = length_of_word;\n\
    \   |                 ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n   = note: consider using `_length_of_word` instead\n\nwarning:\
    \ value assigned to `length_of_word` is never read\n  --> /tmp/tmpwifsfb_r.rs:23:13\n\
    \   |\n23 |             length_of_word = 0;\n   |             ^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe\
    \ it is overwritten before being read?\n\nwarning: unused variable: `i`\n  -->\
    \ /tmp/tmpwifsfb_r.rs:37:13\n   |\n37 |     let mut i = 0;\n   |             ^\
    \ help: if this is intentional, prefix it with an underscore: `_i`\n\nwarning:\
    \ variable does not need to be mutable\n  --> /tmp/tmpwifsfb_r.rs:12:9\n   |\n\
    12 |     let mut s_copy = s.clone();\n   |         ----^^^^^^\n   |         |\n\
    \   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpwifsfb_r.rs:37:9\n\
    \   |\n37 |     let mut i = 0;\n   |         ----^\n   |         |\n   |     \
    \    help: remove this `mut`\n\nwarning: variable does not need to be mutable\n\
    \  --> /tmp/tmpwifsfb_r.rs:48:13\n   |\n48 |         let mut position = s_clone.find(&word_with_space_vector[count]).unwrap();\n\
    \   |             ----^^^^^^^^\n   |             |\n   |             help: remove\
    \ this `mut`\n\nerror[E0384]: cannot assign twice to immutable variable `length_of_word`\n\
    \  --> /tmp/tmpwifsfb_r.rs:23:13\n   |\n22 |             let length_of_word =\
    \ length_of_word;\n   |                 --------------\n   |                 |\n\
    \   |                 first assignment to `length_of_word`\n   |             \
    \    help: consider making this binding mutable: `mut length_of_word`\n23 |  \
    \           length_of_word = 0;\n   |             ^^^^^^^^^^^^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to previous error; 6 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain "
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO: Implement this.\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxpyufy0l.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppv4gg496.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut v: Vec<String> = Vec::new();\n    let mut result = String::new();\n\
    \    for c in s.split(\" \") {\n        v.push(c.chars().collect::<Vec<char>>().sort().iter().collect());\n\
    \    }\n    for (i, word) in v.iter().enumerate() {\n        if i != 0 {\n   \
    \         result.push(' ');\n        }\n        result.push_str(word);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmp0nilzt9y.rs:14:56\n   |\n14 |         v.push(c.chars().collect::<Vec<char>>().sort().iter().collect());\n\
    \   |                                                        ^^^^ method not found\
    \ in `()`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| word.chars().sorted().collect::<String>())\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmppcn5wjje.rs:12:34\n   |\n12 |         .map(|word|\
    \ word.chars().sorted().collect::<String>())\n   |                           \
    \       ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut out = String::new();\n    for word in s.split(' ') {\n        if\
    \ word.is_empty() {\n            out.push(' ');\n        } else {\n          \
    \  out.push_str(&word.chars().collect::<Vec<char>>().sort().iter().collect::<String>());\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpeo764x8o.rs:16:70\n   |\n16 |             out.push_str(&word.chars().collect::<Vec<char>>().sort().iter().collect::<String>());\n\
    \   |                                                                      ^^^^\
    \ method not found in `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::from(\"\");\n    let str = s.trim().to_string();\n\
    \    let result_vec: Vec<&str> = str.split_whitespace().collect();\n    for x\
    \ in result_vec {\n        let mut v = x.chars().collect::<Vec<char>>();\n   \
    \     v.sort();\n        for ch in v {\n            result.push(ch);\n       \
    \ }\n        result.push(' ');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hi \"`,\n right: `\"Hi\"`', /tmp/tmp1is36fcs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = vec![];\n    let mut ascii = vec![];\n    let mut cs = s.chars();\n\
    \    let mut cs_next = s.chars();\n    cs_next.next();\n    while let Some(c)\
    \ = cs.next() {\n        if let Some(c_next) = cs_next.next() {\n            ascii.push(c);\n\
    \            if c_next == ' ' {\n                words.push(ascii);\n        \
    \        ascii = vec![];\n            }\n        } else {\n            ascii.push(c);\n\
    \            words.push(ascii);\n        }\n    }\n    words.iter()\n        .map(|v|\
    \ {\n            let mut vc = v.clone();\n            vc.sort();\n           \
    \ vc\n        })\n        .flat_map(|v| v)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `ascii`\n  --> /tmp/tmp3c4f_a5o.rs:24:13\n\
    \   |\n12 |     let mut ascii = vec![];\n   |         --------- move occurs because\
    \ `ascii` has type `Vec<char>`, which does not implement the `Copy` trait\n...\n\
    21 |                 ascii = vec![];\n   |                 ----- this reinitialization\
    \ might get skipped\n...\n24 |             ascii.push(c);\n   |             ^^^^^^^^^^^^^\
    \ value borrowed here after move\n25 |             words.push(ascii);\n   |  \
    \                      ----- value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut vec: Vec<String> = Vec::new();\n    for word in s.split(\" \") {\n\
    \        let mut w = word.chars().collect::<Vec<char>>();\n        w.sort();\n\
    \        vec.push(w.into_iter().collect::<String>());\n    }\n    vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for mut word in s.split_whitespace() {\n\
    \        word = word.chars().sorted().collect::<String>().as_str();\n        res.push_str(word);\n\
    \        res.push(' ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n  \
    \  let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpwliod3d3.rs:13:29\n   |\n13 |         word = word.chars().sorted().collect::<String>().as_str();\n\
    \   |                             ^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|s| {\n            let mut chars: Vec<char>\
    \ = s.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!(\"anti_shuffle(\\\"{}\\\")\", s)\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: anti_shuffle(\"Hi\")', /tmp/tmp_7af8u58.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|w| {\n            let mut sorted_chars:\
    \ Vec<char> = w.chars().collect();\n            sorted_chars.sort();\n       \
    \     sorted_chars.into_iter().collect()\n        })\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut chars: Vec<_> = s.chars().collect();\n    for i in 0..chars.len()\
    \ {\n        let mut j = 0;\n        while j < chars.len() {\n            let\
    \ (x, y) = (chars[j], chars[j + 1]);\n            if x.is_alphabetic() && y.is_alphabetic()\
    \ {\n                if x > y {\n                    chars.swap(j, j + 1);\n \
    \               }\n            }\n            j += 1;\n        }\n    }\n    chars.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 2 but the index\
    \ is 2', /tmp/tmptm98awik.rs:15:37\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp72pgzguo.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut new_s = String::new();\n    for word in s.split_whitespace() {\n\
    \        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        for c in chars {\n            new_s.push(c);\n        }\n        new_s.push('\
    \ ');\n    }\n    let mut ans = String::new();\n    for i in 0..new_s.len() -\
    \ 1 {\n        ans.push(new_s.chars().nth(i).unwrap());\n    }\n    ans\n}\n\n\
    fn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp94eazmwg.rs:21:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for mut word in s.split_whitespace() {\n\
    \        word = word.chars().collect::<Vec<char>>().sort_by(|a, b| a.cmp(b)).into_iter().collect::<String>().as_str();\n\
    \        res.push_str(word);\n        res.push(' ');\n    }\n    res.pop();\n\
    \    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmpwe3cu_ja.rs:13:77\n\
    \   |\n13 |         word = word.chars().collect::<Vec<char>>().sort_by(|a, b|\
    \ a.cmp(b)).into_iter().collect::<String>().as_str();\n   |                  \
    \                                                           ^^^^^^^^^ `()` is\
    \ not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): Iterator`\n           which is required by `(): IntoIterator`\n\
    \           `&(): Iterator`\n           which is required by `&(): IntoIterator`\n\
    \           `&mut (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // unimplemented!(\"Return an ordered version of the string '{}'\", s);\n\
    \    let new_str: Vec<char> = s.chars().collect();\n    let mut res: Vec<char>\
    \ = Vec::new();\n    let mut i = 0;\n    while i < new_str.len() {\n        if\
    \ !new_str[i].is_alphabetic() {\n            res.push(new_str[i]);\n         \
    \   i += 1;\n        } else {\n            let mut word: Vec<char> = Vec::new();\n\
    \            while i < new_str.len() && new_str[i].is_alphabetic() {\n       \
    \         word.push(new_str[i]);\n                i += 1;\n            }\n   \
    \         word.sort();\n            for c in word {\n                res.push(c);\n\
    \            }\n        }\n    }\n    res.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello Wdlor!!!\"`,\n right: `\"Hello !!!Wdlor\"`', /tmp/tmpj0z3_k1d.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut v: Vec<String> = s.split_whitespace().map(|s| {\n        let mut\
    \ ss = s.chars().collect::<Vec<char>>();\n        ss.sort();\n        ss.into_iter().collect::<String>()\n\
    \    }).collect();\n    v.sort();\n    v.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"!!!Wdlor Hello\"`,\n right: `\"Hello !!!Wdlor\"`', /tmp/tmpkgct9zcu.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut word = String::new();\n    for\
    \ c in s.chars() {\n        if c == ' ' {\n            result += &anti_shuffle_word(&word);\n\
    \            result.push(' ');\n            word.clear();\n        } else {\n\
    \            word.push(c);\n        }\n    }\n    result += &anti_shuffle_word(&word);\n\
    \    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `anti_shuffle_word` in this scope\n\
    \  --> /tmp/tmp_o5ck32z.rs:15:24\n   |\n15 |             result += &anti_shuffle_word(&word);\n\
    \   |                        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `anti_shuffle_word` in this scope\n  --> /tmp/tmp_o5ck32z.rs:22:16\n\
    \   |\n22 |     result += &anti_shuffle_word(&word);\n   |                ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for i in s.split_whitespace() {\n     \
    \   for j in i.chars().collect::<Vec<char>>().iter().collect::<Vec<&char>>().sort()\
    \ {\n            res.push(*j);\n        }\n        res.push(' ');\n    }\n   \
    \ let res: String = res.trim().chars().collect();\n    res\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `()` is not an iterator\n  --> /tmp/tmpwz9wmbw6.rs:13:18\n\
    \   |\n13 |         for j in i.chars().collect::<Vec<char>>().iter().collect::<Vec<&char>>().sort()\
    \ {\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `()`\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `()`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut splitted: Vec<String> = s.split_whitespace().map(|x| x.to_string()).collect();\n\
    \    for item in splitted.iter_mut() {\n        let mut vec: Vec<char> = item.chars().collect();\n\
    \        vec.sort();\n        *item = vec.into_iter().collect();\n    }\n    splitted.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut letters:\
    \ Vec<char> = word.chars().collect();\n            letters.sort();\n         \
    \   letters.into_iter().collect()\n        })\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut new_string = String::new();\n    for word in s.split(\" \") {\n \
    \       let mut letters: Vec<_> = word.chars().collect();\n        letters.sort();\n\
    \        new_string.push_str(&letters.into_iter().collect::<String>());\n    \
    \    new_string.push(' ');\n    }\n    return new_string.trim().to_string();\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut v: Vec<_> = s.split_whitespace().collect();\n    for word in &mut\
    \ v {\n        word.sort_by(|a, b| a.cmp(b));\n    }\n    v.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for mutable reference `&mut\
    \ &str` in the current scope\n  --> /tmp/tmpt_ypnz8m.rs:13:14\n   |\n13 |    \
    \     word.sort_by(|a, b| a.cmp(b));\n   |              ^^^^^^^ method not found\
    \ in `&mut &str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut buffer = String::with_capacity(s.len());\n    let mut cursor = 0;\n\
    \    while cursor < s.len() {\n        let mut first_char = s.char_indices().skip(cursor).next().unwrap();\n\
    \        let mut last_char = s.char_indices().skip(cursor).rev().next().unwrap();\n\
    \        let mut first_iter = s.char_indices().skip(cursor);\n        let mut\
    \ last_iter = s.char_indices().skip(cursor).rev();\n        while first_char.1\
    \ != ' ' && first_char.0 < last_char.0 {\n            while last_char.1 != ' '\
    \ && first_char.0 < last_char.0 {\n                if first_char.1 > last_char.1\
    \ {\n                    buffer.push(last_char.1);\n                    last_char\
    \ = last_iter.next().unwrap();\n                } else {\n                   \
    \ buffer.push(first_char.1);\n                    first_char = first_iter.next().unwrap();\n\
    \                }\n            }\n            buffer.push(first_char.1);\n  \
    \          first_char = first_iter.next().unwrap();\n        }\n        buffer.push(first_char.1);\n\
    \        cursor = first_char.0 + 1;\n    }\n    buffer\n}\n\nfn main() {\n   \
    \ let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `CharIndices<'_>: ExactSizeIterator` is not\
    \ satisfied\n    --> /tmp/tmpcy30g3vs.rs:15:59\n     |\n15   |         let mut\
    \ last_char = s.char_indices().skip(cursor).rev().next().unwrap();\n     |   \
    \                                                        ^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `CharIndices<'_>`\n     |\n     = help: the following\
    \ other types implement trait `ExactSizeIterator`:\n               &mut I\n  \
    \             Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n\
    \               ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\n     = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Skip<CharIndices<'_>>`\nnote: required by a bound in `rev`\n\nerror[E0599]:\
    \ the method `next` exists for struct `Rev<Skip<CharIndices<'_>>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpcy30g3vs.rs:15:65\n   |\n15 |     \
    \       let mut last_char = s.char_indices().skip(cursor).rev().next().unwrap();\n\
    \   |                                                                    ^^^^\
    \ method cannot be called on `Rev<Skip<CharIndices<'_>>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `Skip<CharIndices<'_>>: DoubleEndedIterator`\n           which is required\
    \ by `Rev<Skip<CharIndices<'_>>>: Iterator`\n\nerror[E0277]: the trait bound `CharIndices<'_>:\
    \ ExactSizeIterator` is not satisfied\n    --> /tmp/tmpcy30g3vs.rs:17:59\n   \
    \  |\n17   |         let mut last_iter = s.char_indices().skip(cursor).rev();\n\
    \     |                                                           ^^^ the trait\
    \ `ExactSizeIterator` is not implemented for `CharIndices<'_>`\n     |\n     =\
    \ help: the following other types implement trait `ExactSizeIterator`:\n     \
    \          &mut I\n               Args\n               ArgsOs\n              \
    \ ArrayChunks<'_, T, N>\n               ArrayChunksMut<'_, T, N>\n           \
    \    ArrayWindows<'_, T, N>"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split(\" \") {\n     \
    \   let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        for c in chars {\n            result.push(c);\n        }\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let words: Vec<&str> = s.split(\" \").collect();\n    let mut output: Vec<String>\
    \ = Vec::new();\n    for w in words {\n        let mut letters: Vec<char> = w.chars().collect();\n\
    \        letters.sort();\n        output.push(letters.into_iter().collect());\n\
    \    }\n    output.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split_whitespace() {\n\
    \        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        for ch in chars {\n            result.push(ch);\n        }\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut s = s.split(\" \").collect::<Vec<&str>>();\n    let mut temp = s.clone();\n\
    \    for i in 0..s.len() {\n        let mut ss = s[i].chars().collect::<Vec<char>>();\n\
    \        ss.sort();\n        let mut ss = ss.into_iter().collect::<String>();\n\
    \        temp[i] = ss.as_str();\n    }\n    temp.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp7j2_gw01.rs:11:9\n\
    \   |\n11 |     let mut s = s.split(\" \").collect::<Vec<&str>>();\n   |     \
    \    ----^\n   |         |\n   |         help: remove this `mut`\n   |\n   = note:\
    \ `#[warn(unused_mut)]` on by default\n\nwarning: variable does not need to be\
    \ mutable\n  --> /tmp/tmp7j2_gw01.rs:16:13\n   |\n16 |         let mut ss = ss.into_iter().collect::<String>();\n\
    \   |             ----^^\n   |             |\n   |             help: remove this\
    \ `mut`\n\nerror[E0597]: `ss` does not live long enough\n  --> /tmp/tmp7j2_gw01.rs:17:19\n\
    \   |\n17 |         temp[i] = ss.as_str();\n   |                   ^^^^^^^^^^^\
    \ borrowed value does not live long enough\n18 |     }\n   |     - `ss` dropped\
    \ here while still borrowed\n19 |     temp.join(\" \")\n   |     --------------\
    \ borrow later used here\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0597`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|w| w.chars().sorted().collect::<String>())\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpxijbcfmg.rs:12:28\n   |\n12 |         .map(|w|\
    \ w.chars().sorted().collect::<String>())\n   |                            ^^^^^^\
    \ method not found in `Chars<'_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words: Vec<String> = s.split_whitespace().map(|w| w.to_string()).collect();\n\
    \    for word in words.iter_mut() {\n        let mut word_chars: Vec<char> = word.chars().collect();\n\
    \        word_chars.sort();\n        word.clear();\n        for c in word_chars\
    \ {\n            word.push(c);\n        }\n    }\n    words.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|w| {\n            let mut word: Vec<char>\
    \ = w.chars().collect();\n            word.sort();\n            word.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    String::from(\"abc\")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"abc\"`,\n right: `\"Hi\"`', /tmp/tmprov805h1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut out: Vec<String> = Vec::new();\n    for mut word in s.split_whitespace()\
    \ {\n        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        word = chars.into_iter().collect();\n        out.push(word);\n    }\n\
    \    out.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n  \
    \  assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq_d1rata.rs:16:18\n   |\n\
    16 |         out.push(word);\n   |                  ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                  |\n   |                  expected\
    \ struct `String`, found `&str`\n\nerror[E0277]: a value of type `&str` cannot\
    \ be built from an iterator over elements of type `char`\n    --> /tmp/tmpq_d1rata.rs:15:34\n\
    \     |\n15   |         word = chars.into_iter().collect();\n     |          \
    \                        ^^^^^^^ value of type `&str` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `&str`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|s| {\n            let mut chars: Vec<char>\
    \ = s.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split(\" \") {\n     \
    \   let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        let mut new_word = String::new();\n        for c in chars {\n       \
    \     new_word.push(c);\n        }\n        result.push_str(&new_word);\n    \
    \    result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut ans = String::new();\n    for w in s.split_whitespace() {\n     \
    \   let mut chars: Vec<char> = w.chars().collect();\n        chars.sort();\n \
    \       for c in chars {\n            ans.push(c);\n        }\n        ans.push('\
    \ ');\n    }\n    ans.pop();\n    ans\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for w in s.split(' ') {\n        let\
    \ mut chars: Vec<char> = w.chars().collect();\n        chars.sort();\n       \
    \ for c in chars {\n            result.push(c);\n        }\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split_whitespace() {\n  \
    \      let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        for c in chars {\n            res.push(c);\n        }\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut word: Vec<_>\
    \ = word.chars().collect();\n            word.sort();\n            word.into_iter().collect()\n\
    \        })\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpx4fskedt.rs:12:10\n\
    \   |\n12 |         .map(|word| {\n   |          ^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `map`\n   |\nhelp: consider\
    \ specifying the type argument in the method call\n   |\n15 |             word.into_iter().collect::<B>()\n\
    \   |                                     +++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut output = String::new();\n    let mut is_space = true;\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            if is_space {\n\
    \                output.push_str(&c.to_string());\n                is_space =\
    \ false;\n            } else {\n                let chars: Vec<char> = output.chars().collect();\n\
    \                let mut i = 0;\n                while i < chars.len() && chars[i]\
    \ < c {\n                    i += 1;\n                }\n                output.insert(i,\
    \ c);\n            }\n        } else {\n            output.push(c);\n        \
    \    is_space = true;\n        }\n    }\n    output\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hdellloo Wr!!!\"`,\n right: `\"Hello !!!Wdlor\"`', /tmp/tmp1337a4q6.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // Your code here!\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwtrp5ept.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz9z8exiv.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|s| {\n            let mut chars: Vec<char>\
    \ = s.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|x| x.chars().collect::<Vec<_>>())\n \
    \       .map(|mut c| {\n            c.sort();\n            c.into_iter().collect::<String>()\n\
    \        })\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut letters: Vec<char> = vec![];\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if !letters.is_empty()\
    \ {\n                letters.sort();\n                for l in letters {\n   \
    \                 result.push(l);\n                }\n                letters.clear();\n\
    \            }\n            result.push(c);\n        } else {\n            letters.push(c);\n\
    \        }\n    }\n    if !letters.is_empty() {\n        letters.sort();\n   \
    \     for l in letters {\n            result.push(l);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `letters`\n   --> /tmp/tmpyayy_eyu.rs:15:17\n\
    \    |\n12  |     let mut letters: Vec<char> = vec![];\n    |         -----------\
    \ move occurs because `letters` has type `Vec<char>`, which does not implement\
    \ the `Copy` trait\n...\n15  |             if !letters.is_empty() {\n    |   \
    \              ^^^^^^^^^^^^^^^^^^ value borrowed here after move\n16  |      \
    \           letters.sort();\n17  |                 for l in letters {\n    | \
    \                         ------- `letters` moved due to this implicit call to\
    \ `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `letters`\nhelp: consider iterating\
    \ over a slice of the `Vec<char>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |                 for l in &letters {\n    |                     \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for w in s.split_whitespace() {\n  \
    \      result.push_str(&anti_shuffle_word(w));\n        result.push(' ');\n  \
    \  }\n    if !result.is_empty() {\n        result.pop();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `anti_shuffle_word` in this scope\n\
    \  --> /tmp/tmp_4g9uypf.rs:13:26\n   |\n13 |         result.push_str(&anti_shuffle_word(w));\n\
    \   |                          ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split_whitespace() {\n\
    \        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        result.push_str(&chars.iter().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut each_word: Vec<String> = Vec::new();\n\
    \    let mut counter = 0;\n    let mut str_as_vec: Vec<char> = s.chars().collect();\n\
    \    for idx in 0..str_as_vec.len() {\n        if str_as_vec[idx] == ' ' {\n \
    \           let mut ordered_word: Vec<char> =\n                each_word[counter].chars().collect();\n\
    \            ordered_word.sort();\n            let mut ordered_word_as_string\
    \ = String::new();\n            for i in 0..ordered_word.len() {\n           \
    \     ordered_word_as_string.push(ordered_word[i]);\n            }\n         \
    \   result.push_str(&ordered_word_as_string);\n            result.push(' ');\n\
    \            counter += 1;\n        } else {\n            if counter < each_word.len()\
    \ {\n                each_word[counter].push(str_as_vec[idx]);\n            }\
    \ else {\n                each_word.push(str_as_vec[idx].to_string());\n     \
    \       }\n        }\n    }\n    if !each_word.is_empty() {\n        let mut ordered_word:\
    \ Vec<char> = each_word[counter].chars().collect();\n        ordered_word.sort();\n\
    \        let mut ordered_word_as_string = String::new();\n        for i in 0..ordered_word.len()\
    \ {\n            ordered_word_as_string.push(ordered_word[i]);\n        }\n  \
    \      result.push_str(&ordered_word_as_string);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!(\"anti_shuffle('{}')\", s)\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: anti_shuffle('Hi')', /tmp/tmp2e09xtym.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let words: Vec<String> = s.split_whitespace().map(|x| x.to_string()).collect();\n\
    \    let mut sorted_words: Vec<String> = words.clone();\n    for word in sorted_words.iter_mut()\
    \ {\n        word.retain(|c| c != ' ');\n        word.chars().collect::<Vec<char>>().sort();\n\
    \    }\n    let mut res = String::new();\n    for (word, sorted_word) in words.iter().zip(sorted_words.iter())\
    \ {\n        res.push_str(sorted_word);\n        res.push_str(word.split_whitespace().skip(1).next().unwrap_or(\"\
    \"));\n        res.push(' ');\n    }\n    res.trim().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello\"`,\n right: `\"ehllo\"`', /tmp/tmp1qie9thy.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut word: Vec<_>\
    \ = word.chars().collect();\n            word.sort();\n            word.into_iter().collect()\n\
    \        })\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpsu5o2d5z.rs:12:10\n\
    \   |\n12 |         .map(|word| {\n   |          ^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `map`\n   |\nhelp: consider\
    \ specifying the type argument in the method call\n   |\n15 |             word.into_iter().collect::<B>()\n\
    \   |                                     +++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|x| {\n            let mut char_vec: Vec<char>\
    \ = x.chars().collect();\n            char_vec.sort();\n            char_vec.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let words: Vec<&str> = s.split_whitespace().collect();\n    let mut result\
    \ = String::new();\n    for (i, word) in words.iter().enumerate() {\n        let\
    \ sorted_word: String = word.chars().sorted().collect();\n        result.push_str(&sorted_word);\n\
    \        if i < words.len() - 1 {\n            result.push(' ');\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmp8vl385_e.rs:14:48\n   |\n14 |         let sorted_word:\
    \ String = word.chars().sorted().collect();\n   |                            \
    \                    ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplmulutxf.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut words = String::new();\n   \
    \ for c in s.chars() {\n        if c == ' ' {\n            let mut v: Vec<char>\
    \ = words.chars().collect();\n            v.sort();\n            words = v.into_iter().collect();\n\
    \            result.push_str(&words);\n            result.push(' ');\n       \
    \     words = String::new();\n        } else {\n            words.push(c);\n \
    \       }\n    }\n    let mut v: Vec<char> = words.chars().collect();\n    v.sort();\n\
    \    words = v.into_iter().collect();\n    result.push_str(&words);\n    result\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split(' ') {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    res.push_str(&chars.into_iter().collect::<String>());\n        res.push('\
    \ ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO implement anti_shuffle\n    unimplemented!();\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpryp3781j.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut r = String::new();\n    let mut a = s.split_whitespace();\n    loop\
    \ {\n        match a.next() {\n            Some(x) => {\n                let mut\
    \ q = x.chars().collect::<Vec<char>>();\n                q.sort();\n         \
    \       for c in q {\n                    r.push(c);\n                }\n    \
    \            r.push(' ');\n            }\n            None => break,\n       \
    \ }\n    }\n    r.pop();\n    r\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut v: Vec<String> = Vec::new();\n    let mut res: String = String::new();\n\
    \    for word in s.split_whitespace() {\n        let mut s: String = String::new();\n\
    \        for ch in word.chars() {\n            s.push(ch);\n        }\n      \
    \  v.push(s);\n    }\n    for x in v {\n        let mut s: String = String::new();\n\
    \        for ch in x.chars().rev() {\n            s.push(ch);\n        }\n   \
    \     res.push_str(&s);\n        res.push(' ');\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iH \"`,\n right: `\"Hi\"`', /tmp/tmp5ie3tfdt.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let words: Vec<&str> = s.split(\" \").collect();\n    let ordered_words:\
    \ Vec<String> = words.iter().map(|word| {\n        let mut chars: Vec<char> =\
    \ word.chars().collect();\n        chars.sort();\n        chars.into_iter().collect()\n\
    \    }).collect();\n    ordered_words.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char>\
    \ = word.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words: Vec<String> = Vec::new();\n    let mut res = String::new();\n\
    \    let mut start = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ c == ' ' {\n            let word = s.get(start..i).unwrap();\n            let\
    \ mut chars: Vec<char> = word.chars().collect();\n            chars.sort();\n\
    \            words.push(chars.into_iter().collect());\n            start = i +\
    \ 1;\n        }\n    }\n    let word = s.get(start..s.len()).unwrap();\n    let\
    \ mut chars: Vec<char> = word.chars().collect();\n    chars.sort();\n    words.push(chars.into_iter().collect());\n\
    \    for w in words {\n        res.push_str(&w);\n        res.push(' ');\n   \
    \ }\n    let _ = res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpv_vc838n.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|x| {\n            let mut v: Vec<_> = x.chars().collect();\n\
    \            v.sort();\n            v.into_iter().collect()\n        })\n    \
    \    .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|word| {\n            let chars: Vec<char>\
    \ = word.chars().collect();\n            let mut chars = chars.into_iter().collect::<Vec<char>>();\n\
    \            chars.sort();\n            chars.into_iter().collect::<String>()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // Write your code here\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8pwb96k3.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut ret = String::new();\n    for word in s.split(' ') {\n        let\
    \ mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n    \
    \    ret.push_str(&chars.into_iter().collect::<String>());\n        ret.push('\
    \ ');\n    }\n    ret.pop();\n    ret\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words: Vec<String> = s.split(\" \").map(|w| w.to_string()).collect();\n\
    \    for i in 0..words.len() {\n        let mut letters: Vec<char> = words[i].chars().collect();\n\
    \        letters.sort();\n        words[i] = letters.into_iter().collect();\n\
    \    }\n    words.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .filter(|s| !s.is_empty())\n        .map(|word| word.chars().sorted().collect::<String>())\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpzaij_fud.rs:13:34\n   |\n13 |         .map(|word|\
    \ word.chars().sorted().collect::<String>())\n   |                           \
    \       ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = \"\".to_string();\n    let mut arr = s.split(\" \");\n \
    \   for word in arr {\n        let mut sorted = word.chars().collect::<Vec<char>>();\n\
    \        sorted.sort();\n        for ch in sorted {\n            result.push(ch);\n\
    \        }\n        result.push(' ');\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|x| {\n            let mut chars: Vec<char>\
    \ = x.chars().collect();\n            chars.sort();\n            chars.into_iter().collect::<String>()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = vec![];\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \     } else {\n            if !word.is_empty() {\n                words.push(word);\n\
    \                word = String::new();\n            }\n            words.push(c.to_string());\n\
    \        }\n    }\n    if !word.is_empty() {\n        words.push(word);\n    }\n\
    \    let mut ret = String::new();\n    for w in words {\n        if w.is_alphabetic()\
    \ {\n            let mut v = vec![];\n            for c in w.chars() {\n     \
    \           v.push(c);\n            }\n            v.sort();\n            for\
    \ c in v {\n                ret.push(c);\n            }\n        } else {\n  \
    \          ret.push_str(&w);\n        }\n    }\n    ret\n}\n\nfn main() {\n  \
    \  let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_alphabetic` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmphb2ovx88.rs:29:14\n   |\n29 |         if\
    \ w.is_alphabetic() {\n   |              ^^^^^^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    return s.split(\" \").map(|x| {\n        let mut chars: Vec<char> = x.chars().collect();\n\
    \        chars.sort();\n        chars.into_iter().collect::<String>()\n    }).collect::<Vec<String>>().join(\"\
    \ \");\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split(\" \")\n        .map(|s| {\n            let mut chars: Vec<char>\
    \ = s.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = s.split_whitespace();\n    let mut buf = String::new();\n\
    \    while let Some(word) = words.next() {\n        let mut chars: Vec<char> =\
    \ word.chars().collect();\n        chars.sort();\n        buf.push_str(&chars.into_iter().collect::<String>());\n\
    \        buf.push(' ');\n    }\n    buf.trim().to_string()\n}\n\nfn main() {\n\
    \    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\"\
    )), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")),\
    \ String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = \"\".to_string();\n    for word in s.split(\" \") {\n     \
    \   let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n\
    \        res += &chars.iter().collect::<String>();\n        res += \" \";\n  \
    \  }\n    res.trim().to_string()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut res = String::new();\n    for word in s.split(' ') {\n        let\
    \ mut word: Vec<char> = word.chars().collect();\n        word.sort();\n      \
    \  res.push_str(&word.iter().collect::<String>());\n        res.push(' ');\n \
    \   }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut s = s.split_whitespace().collect::<Vec<&str>>();\n    for item in\
    \ s.iter_mut() {\n        *item = sort_chars(*item);\n    }\n    s.join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_chars` in this scope\n  --> /tmp/tmp4o4h7pbg.rs:13:17\n\
    \   |\n13 |         *item = sort_chars(*item);\n   |                 ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = s.split(\" \");\n    let first_word = words.next().unwrap();\n\
    \    let mut chars = first_word.chars();\n    let mut output = vec![chars.next().unwrap()];\n\
    \    for letter in chars {\n        let mut i = 0;\n        while i < output.len()\
    \ && letter > output[i] {\n            i += 1;\n        }\n        output.insert(i,\
    \ letter);\n    }\n    for word in words {\n        output.push(' ');\n      \
    \  let mut chars = word.chars();\n        let mut i = 0;\n        while i < output.len()\
    \ && chars.next().unwrap() > output[i] {\n            i += 1;\n        }\n   \
    \     output.insert(i, chars.next().unwrap());\n        while let Some(letter)\
    \ = chars.next() {\n            let mut i = 0;\n            while i < output.len()\
    \ && letter > output[i] {\n                i += 1;\n            }\n          \
    \  output.insert(i, letter);\n        }\n    }\n    String::from_iter(output)\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpg0opc1mh.rs:38:13\n   |\n\
    38 |     String::from_iter(output)\n   |             ^^^^^^^^^ function or associated\
    \ item not found in `String`\n   |\n   = help: items from traits can only be used\
    \ if the trait is in scope\nhelp: the following trait is implemented but not in\
    \ scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n\
    \   |\nhelp: there is an associated function with a similar name\n   |\n38 | \
    \    String::from_utf8(output)\n   |             ~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words = vec![];\n    let mut chars = vec![];\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            chars.sort();\n            words.push(chars.into_iter().collect());\n\
    \            chars = vec![];\n        } else {\n            chars.push(c);\n \
    \       }\n    }\n    chars.sort();\n    words.push(chars.into_iter().collect());\n\
    \    words.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `Vec<T>`\n  --> /tmp/tmp0fis4osu.rs:11:21\n\
    \   |\n11 |     let mut words = vec![];\n   |         ---------   ^^^^^^ cannot\
    \ infer type for type parameter `T`\n   |         |\n   |         consider giving\
    \ `words` the explicit type `Vec<T>`, where the type parameter `T` is specified\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!(\"anti-shuffle sentence {}\", s)\n}\n\nfn main() {\n    let\
    \ candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: anti-shuffle sentence Hi',\
    \ /tmp/tmpct8ixfbs.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // Your code here\n    let mut res = String::new();\n    for word in s.split_whitespace()\
    \ {\n        let mut t = word.chars().collect::<Vec<char>>();\n        t.sort();\n\
    \        res.push_str(&t.iter().collect::<String>());\n        res.push(' ');\n\
    \    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    s.split_whitespace()\n        .map(|w| {\n            let mut chars: Vec<char>\
    \ = w.chars().collect();\n            chars.sort();\n            chars.into_iter().collect()\n\
    \        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp1e3iozh.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut words: Vec<&str> = s.split(\" \").collect();\n    for index in 0..words.len()\
    \ {\n        let mut chars: Vec<char> = words[index].chars().collect();\n    \
    \    chars.sort();\n        words[index] = chars.iter().collect::<String>().as_str();\n\
    \    }\n    words.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0716]: temporary value dropped while borrowed\n  --> /tmp/tmpthnfjumz.rs:15:24\n\
    \   |\n13 |         let mut chars: Vec<char> = words[index].chars().collect();\n\
    \   |                                    ----- borrow later used here\n14 |  \
    \       chars.sort();\n15 |         words[index] = chars.iter().collect::<String>().as_str();\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         - temporary\
    \ value is freed at the end of this statement\n   |                        |\n\
    \   |                        creates a temporary which is freed while still in\
    \ use\n   |\n   = note: consider using a `let` binding to create a longer lived\
    \ value\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0716`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // count characters occurences\n    let mut chars = HashMap::new();\n   \
    \ for ch in s.chars() {\n        let count = chars.entry(ch).or_insert(0);\n \
    \       *count += 1;\n    }\n\n    // Sort by key and then value\n    let mut\
    \ sorted_chars: Vec<(char, i32)> = chars.into_iter().collect();\n    sorted_chars.sort_by(|a,\
    \ b| {\n        if a.0 != b.0 {\n            a.0.cmp(&b.0)\n        } else {\n\
    \            a.1.cmp(&b.1)\n        }\n    });\n\n    let mut result = String::new();\n\
    \    let mut index = 0;\n    for ch in s.chars() {\n        if ch.is_alphabetic()\
    \ {\n            let (letter, count) = sorted_chars[index];\n            for _\
    \ in 0..count {\n                result.push(letter);\n            }\n       \
    \     index += 1;\n        } else {\n            result.push(ch);\n        }\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n  \
    \  assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmplwq67bri.rs:12:21\n   |\n12 |     let mut chars = HashMap::new();\n\
    \   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // TODO: implement the function here\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpeg6b2ild.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut temp = String::new();\n    for\
    \ c in s.chars() {\n        if c == ' ' {\n            if !temp.is_empty() {\n\
    \                result.push_str(&anti_shuffle_word(temp));\n                temp.clear();\n\
    \            }\n            result.push(' ');\n        } else {\n            temp.push(c);\n\
    \        }\n    }\n    if !temp.is_empty() {\n        result.push_str(&anti_shuffle_word(temp));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `anti_shuffle_word` in this scope\n\
    \  --> /tmp/tmp5pwq5mmx.rs:16:34\n   |\n16 |                 result.push_str(&anti_shuffle_word(temp));\n\
    \   |                                  ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `anti_shuffle_word` in this scope\n  -->\
    \ /tmp/tmp5pwq5mmx.rs:25:26\n   |\n25 |         result.push_str(&anti_shuffle_word(temp));\n\
    \   |                          ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    // you can use s.chars() to get all chars in a string\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphqsgk6w4.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split_whitespace() {\n\
    \        let mut sorted_word = String::new();\n        let mut chars: Vec<char>\
    \ = word.chars().collect();\n        chars.sort();\n        for char in chars\
    \ {\n            sorted_word.push(char);\n        }\n        result.push_str(&sorted_word);\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpg8xar7t3.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut sorted_words: Vec<String> = Vec::new();\n    let mut chars: Vec<char>\
    \ = Vec::new();\n    let mut word: String = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            sorted_words.push(word);\n           \
    \ word = String::new();\n        } else {\n            chars.push(c);\n      \
    \      chars.sort();\n            word = chars.iter().collect();\n           \
    \ chars.clear();\n        }\n    }\n    sorted_words.push(word);\n    sorted_words.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"i\"`,\n right: `\"Hi\"`', /tmp/tmphjozvffg.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpm042gsyg.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut chars: Vec<char> =\
    \ word.chars().collect();\n        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n\
    \        if let Some(word) = words.next() {\n            result.push_str(\" \"\
    );\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello \"`,\n right: `\"Hello !!!Wdlor\"`', /tmp/tmp119csbvu.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    let mut temp = String::new();\n    for\
    \ char in s.chars() {\n        if char == ' ' {\n            result.push_str(&temp);\n\
    \            result.push(' ');\n            temp = String::new();\n        } else\
    \ {\n            temp.push(char);\n        }\n    }\n    result.push_str(&temp);\n\
    \    let mut parts: Vec<String> = result.split(' ').map(|x| x.to_string()).collect();\n\
    \    for part in parts.iter_mut() {\n        let mut chars: Vec<char> = part.chars().collect();\n\
    \        chars.sort();\n        *part = chars.into_iter().collect();\n    }\n\
    \    parts.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n\
    \    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut arr: Vec<String> = Vec::new();\n    for i in s.split_whitespace()\
    \ {\n        let mut chars: Vec<char> = i.chars().collect();\n        chars.sort();\n\
    \        arr.push(chars.into_iter().collect());\n    }\n    arr.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"\
    Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\"\
    )), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\"\
    )), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\"\
    )), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\"\
    )), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n \
    \   assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"\
    hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"\
    number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"\
    abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello\
    \ World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name\
    \ is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxvu955yd.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfn anti_shuffle(s: String) -> String {\n\
    \    let mut result = String::new();\n    for word in s.split_whitespace() {\n\
    \        let mut word_vec: Vec<_> = word.chars().collect();\n        word_vec.sort();\n\
    \        result.push_str(&word_vec.iter().collect::<String>());\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"\
    Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"\
    ));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"\
    ));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n\
    \    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello\
    \ !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How\
    \ are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
