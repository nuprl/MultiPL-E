name: HumanEval_155_even_odd_count
language: rust
results:
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n == 0 {\n        return (1, 0);\n    }\n    if n < 0 {\n        n = -n;\n \
    \   }\n    while n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n  \
    \      } else {\n            odd += 1;\n        }\n        n /= 10;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpaqsaunni.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpsdhfue5t.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odds = 0;\n    let mut evens = 0;\n    let mut n = num;\n   \
    \ while n != 0 {\n        if n % 2 == 0 {\n            evens += 1;\n        }\
    \ else {\n            odds += 1;\n        }\n        n /= 10;\n    }\n    (evens,\
    \ odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp8zmm06jc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count_even: isize = 0;\n    let mut count_odd: isize = 0;\n \
    \   for c in num.to_string().chars() {\n        if c.to_digit(10).unwrap() % 2\
    \ == 0 {\n            count_even += 1;\n        } else {\n            count_odd\
    \ += 1;\n        }\n    }\n    (count_even, count_odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp1u5r775n.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (1, 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 2)`,\n right: `(0, 1)`', /tmp/tmpe0jr__0p.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let num = num.abs();\n \
    \   for d in num.to_string().chars() {\n        if d.to_digit(10).unwrap() % 2\
    \ == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n  \
    \      }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpd_lnl3w8.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num = num;\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpt_gafs37.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmperljk7w2.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num = num;\n    let mut even = 0;\n    let mut odd = 0;\n   \
    \ while num != 0 {\n        if num % 2 == 0 {\n            even += 1;\n      \
    \  } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp09s7bn2q.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num_abs\
    \ = num.abs();\n    loop {\n        let digit = num_abs % 10;\n        if digit\
    \ % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n        num_abs /= 10;\n        if num_abs == 0 {\n      \
    \      break;\n        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsjrx68oy.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut s = num.to_string();\n    let mut n1 = 0;\n    let mut n2 = 0;\n\
    \    if s.contains(\"-\") {\n        s.remove(0);\n    }\n    for i in s.chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            n1 += 1;\n   \
    \     } else {\n            n2 += 1;\n        }\n    }\n    (n1, n2)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmp6_sedo5w.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp42cqpwxo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.abs().count_ones() as isize, num.abs().count_zeros() as isize)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 61)`,\n right: `(0, 1)`', /tmp/tmpk1yczuys.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num == 0 {\n        return (1, 0);\n    }\n    let mut even_count\
    \ = 0;\n    let mut odd_count = 0;\n    let mut rem = num;\n    while rem != 0\
    \ {\n        if rem % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n        rem /= 10;\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ while num != 0 {\n        if num % 2 == 0 {\n            even += 1;\n      \
    \  } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpe_iaei53.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // TODO\n    let mut n = num;\n    let mut even = 0;\n    let mut odd\
    \ = 0;\n    if n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if\
    \ n % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmplmnylqs6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp_n9oqhr3.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp__0lmmdv.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpsf3d1dim.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptmlgjc3c.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1uf68f_6.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpn7nqgxje.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpu8hytbod.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp09t2kbbm.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ while num != 0 {\n        if num % 2 == 0 {\n            even += 1;\n      \
    \  } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7gqwhxw2.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    num.to_string()\n        .chars()\n        .map(|digit| digit.to_digit(10).unwrap()\
    \ as isize)\n        .fold((0, 0), |acc, digit| {\n            if digit % 2 ==\
    \ 0 {\n                (acc.0 + 1, acc.1)\n            } else {\n            \
    \    (acc.0, acc.1 + 1)\n            }\n        })\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpcl9ntfz6.rs:8:41\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for digit in\
    \ num.to_string().chars() {\n        if digit.to_digit(10).unwrap() % 2 == 0 {\n\
    \            even_count += 1;\n        } else {\n            odd_count += 1;\n\
    \        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp_kchnad8.rs:9:31\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyuncuv0s.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        let d = n % 10;\n        if d % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpiqolw7cs.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    num.to_string()\n        .chars()\n        .map(|c| c.to_digit(10).unwrap()\
    \ as isize)\n        .fold((0, 0), |(even, odd), v| {\n            if v % 2 ==\
    \ 0 {\n                (even + 1, odd)\n            } else {\n               \
    \ (even, odd + 1)\n            }\n        })\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp6wm7w5xl.rs:8:33\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzly3trw4.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.to_string().chars().filter(|x|x.is_digit(10) && x.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n     num.to_string().chars().filter(|x|x.is_digit(10)\
    \ && x.to_digit(10).unwrap() % 2 == 1).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for x in num.to_string().chars()\
    \ {\n        let x = x.to_digit(10).unwrap();\n        if x % 2 == 0 {\n     \
    \       even_count += 1;\n        } else {\n            odd_count += 1;\n    \
    \    }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp_cio0ixr.rs:9:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 0..num.abs().to_string().len()\
    \ {\n        let digit = (num.abs() / 10_isize.pow(i as u32)) % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    num.to_string()\n        .chars()\n        .fold((0, 0), |(even, odd),\
    \ c| {\n            if c.is_digit(10) {\n                if c.to_digit(10).unwrap()\
    \ % 2 == 0 {\n                    (even + 1, odd)\n                } else {\n\
    \                    (even, odd + 1)\n                }\n            } else {\n\
    \                (even, odd)\n            }\n        })\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num == 0 {\n        return (1, 0);\n    }\n    let mut even = 0;\n\
    \    let mut odd = 0;\n    let mut num = num;\n    if num < 0 {\n        num =\
    \ -num;\n    }\n    while num > 0 {\n        let digit = num % 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        return even_odd_count(-num);\n    }\n    let mut\
    \ n = num;\n    let mut even = 0;\n    let mut odd = 0;\n    while n > 0 {\n \
    \       let digit = n % 10;\n        if digit % 2 == 0 {\n            even +=\
    \ 1;\n        } else {\n            odd += 1;\n        }\n        n /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqx38ifg3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpnkylzumd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcdy_v1oc.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num = num;\n    let mut even = 0;\n    let mut odd = 0;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    let mut divisor = 10;\n    while\
    \ num > 0 {\n        let last_digit = num % divisor;\n        if last_digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num = num / divisor;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4ec2fo1q.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.to_string().chars().filter(|x| x.is_digit(10) && x.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n     num.to_string().chars().filter(|x| x.is_digit(10)\
    \ && x.to_digit(10).unwrap() % 2 != 0).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for ch in num.to_string().chars()\
    \ {\n        let digit = ch.to_digit(10).unwrap();\n        if digit % 2 == 0\
    \ {\n            even += 1;\n        } else {\n            odd += 1;\n       \
    \ }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpux7msque.rs:9:37\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for x in num.to_string().chars()\
    \ {\n        if x == '-' {\n            continue;\n        }\n        if x.to_digit(10).unwrap()\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_digit_count = 0;\n    let mut odd_digit_count = 0;\n   \
    \ let mut num = num;\n    while num != 0 {\n        let d = num % 10;\n      \
    \  num /= 10;\n        if d % 2 == 0 {\n            even_digit_count += 1;\n \
    \       } else {\n            odd_digit_count += 1;\n        }\n    }\n    (even_digit_count,\
    \ odd_digit_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_drlue8t.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpnxxjzz5_.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let num_str\
    \ = num.to_string();\n    for x in num_str.chars() {\n        let digit = x.to_digit(10).unwrap();\n\
    \        if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpuu2r15xq.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwyt1ad0z.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // TODO implement this function\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpetuef3s9.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_digit_count = 0;\n    let mut even_digit_count = 0;\n   \
    \ for c in num.to_string().chars() {\n        if c.to_digit(10).unwrap() % 2 ==\
    \ 0 {\n            even_digit_count += 1;\n        } else {\n            odd_digit_count\
    \ += 1;\n        }\n    }\n    (even_digit_count, odd_digit_count)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp47o2fkvn.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n    for c in num.to_string().chars()\
    \ {\n        if c == '-' {\n            continue;\n        }\n        let n =\
    \ c.to_digit(10).unwrap() as isize;\n        if n % 2 == 0 {\n            evens\
    \ += 1;\n        } else {\n            odds += 1;\n        }\n    }\n    (evens,\
    \ odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for d in num.to_string().chars()\
    \ {\n        if d.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp8umd8ifo.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphnwlykvh.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpnnldg_53.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ while num != 0 {\n        let i = num % 10;\n        num /= 10;\n        if\
    \ i % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpc2v_38k3.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    loop {\n        if\
    \ num == 0 {\n            break;\n        }\n        let remainder = num % 10;\n\
    \        if remainder % 2 == 0 {\n            even_count += 1;\n        } else\
    \ {\n            odd_count += 1;\n        }\n        num /= 10;\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqmpx3ihe.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut e = 0;\n    let mut o = 0;\n    for c in num.to_string().chars()\
    \ {\n        if c.to_digit(10).unwrap() % 2 == 0 {\n            e += 1;\n    \
    \    } else {\n            o += 1;\n        }\n    }\n    (e, o)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpamy64c0m.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // This is just to return a (0, 0) value to start with.\n    (0, 0)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmppsraf__w.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_cnt = 0;\n    let mut odd_cnt = 0;\n    for ch in num.to_string().chars()\
    \ {\n        if ch == '-' {\n            continue;\n        }\n        let digit\
    \ = ch.to_digit(10).unwrap();\n        if digit % 2 == 0 {\n            even_cnt\
    \ += 1;\n        } else {\n            odd_cnt += 1;\n        }\n    }\n    (even_cnt,\
    \ odd_cnt)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpi4wd8aqd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpg9cs21_u.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_digits = 0;\n    let mut odd_digits = 0;\n    let mut number\
    \ = num;\n    while number != 0 {\n        let digit = number % 10;\n        number\
    \ /= 10;\n        if digit % 2 == 0 {\n            even_digits += 1;\n       \
    \ } else {\n            odd_digits += 1;\n        }\n    }\n    (even_digits,\
    \ odd_digits)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpg3aduxpq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ while num != 0 {\n        if num % 2 == 0 {\n            even += 1;\n      \
    \  } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp149_xx06.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        let d = n % 10;\n        n /= 10;\n        if d % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpdt25yd4o.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpngbvqgmb.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.abs().to_string().chars().filter(|x| x.is_digit(10) && x.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n    num.abs().to_string().chars().filter(|x| x.is_digit(10)\
    \ && x.to_digit(10).unwrap() % 2 != 0).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz0v6_lqz.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpq8_3gvio.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num_vec\
    \ = num.to_string().chars().collect::<Vec<char>>();\n    let mut current = 0;\n\
    \    if num_vec[0] == '-' {\n        num_vec.remove(0);\n    }\n    for i in 0..num_vec.len()\
    \ {\n        current = num_vec[i].to_digit(10).unwrap();\n        if current %\
    \ 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (\n        num.abs().to_string().matches('2').count() as isize\n    \
    \        + num.abs().to_string().matches('4').count() as isize\n            +\
    \ num.abs().to_string().matches('6').count() as isize\n            + num.abs().to_string().matches('8').count()\
    \ as isize,\n        num.abs().to_string().matches('1').count() as isize\n   \
    \         + num.abs().to_string().matches('3').count() as isize\n            +\
    \ num.abs().to_string().matches('5').count() as isize\n            + num.abs().to_string().matches('7').count()\
    \ as isize\n            + num.abs().to_string().matches('9').count() as isize,\n\
    \    )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpng59g5xt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let num = num.abs();\n\
    \    let mut n = num;\n    while n > 0 {\n        let x = n % 10;\n        if\
    \ x % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    (even_count, odd_count)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkdmzlsu_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        let mut d = n % 10;\n        if d % 2 == 0 {\n           \
    \ even += 1;\n        } else {\n            odd += 1;\n        }\n        n /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp881to0l4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for digit in\
    \ 0..num.abs().to_string().len() {\n        let number = num.abs().to_string().chars().nth(digit).unwrap().to_digit(10).unwrap();\n\
    \        if number % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    loop {\n        if n == 0 {\n         \
    \   break;\n        }\n        let k = n % 10;\n        if k % 2 == 0 {\n    \
    \        even += 1;\n        } else {\n            odd += 1;\n        }\n    \
    \    n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn_08h3pg.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let even = num.to_string().chars().filter(|&c| !c.is_whitespace() &&\
    \ (c.to_digit(10).unwrap() % 2 == 0)).count() as isize;\n    let odd = num.to_string().chars().filter(|&c|\
    \ !c.is_whitespace() && (c.to_digit(10).unwrap() % 2 != 0)).count() as isize;\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp_hn7d6zb.rs:6:90\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpiawk46zp.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphf904kv4.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut number\
    \ = num;\n    while number != 0 {\n        let digit = number % 10;\n        if\
    \ digit % 2 == 0 {\n            even_count += 1;\n        } else {\n         \
    \   odd_count += 1;\n        }\n        number /= 10;\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphp4hw1yu.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpguy_4bse.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    num.to_string()\n        .split(\"\")\n        .filter(|s| s != &\"\"\
    )\n        .fold((0, 0), |acc, s| match s.parse::<isize>().unwrap() % 2 {\n  \
    \          0 => (acc.0 + 1, acc.1),\n            _ => (acc.0, acc.1 + 1),\n  \
    \      })\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmp21d4me5l.rs:9:57\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6il4xbx6.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // TODO\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpqjhzbyk7.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpap0ybw01.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmp5cjlx925.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let digits = num.abs().to_string();\n    let mut evens = 0;\n    let\
    \ mut odds = 0;\n    for ch in digits.chars() {\n        let n = ch.to_digit(10).unwrap();\n\
    \        if n % 2 == 0 {\n            evens += 1;\n        } else {\n        \
    \    odds += 1;\n        }\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp02tlw1ci.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let s = num.to_string();\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    for c in s.chars() {\n        if c.is_digit(10) {\n            if\
    \ c.to_digit(10).unwrap() % 2 == 0 {\n                even_count += 1;\n     \
    \       } else {\n                odd_count += 1;\n            }\n        }\n\
    \    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        return even_odd_count(-num);\n    }\n    let mut\
    \ evens = 0;\n    let mut odds = 0;\n    let mut num = num;\n    while num > 0\
    \ {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            evens\
    \ += 1;\n        } else {\n            odds += 1;\n        }\n        num /= 10;\n\
    \    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjx22byaa.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_count = 0;\n    let mut even_count = 0;\n    for c in num.to_string().chars()\
    \ {\n        let i = c.to_digit(10).unwrap() as isize;\n        if i % 2 == 0\
    \ {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpt7gi5sz4.rs:9:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut x = num;\n    if\
    \ x < 0 {\n        x = -x;\n    }\n    let mut digit = 0;\n    while x > 0 {\n\
    \        digit = x % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        x /= 10;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpk7n9qxza.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let num_string = num.to_string();\n    let mut even_count = 0;\n    let\
    \ mut odd_count = 0;\n    for c in num_string.chars() {\n        let c_num = c.to_digit(10).unwrap();\n\
    \        if c_num % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpwa0go4h1.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for digit in\
    \ num.to_string().chars() {\n        let digit = digit.to_digit(10).unwrap();\n\
    \        if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpru7i7gb5.rs:9:40\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.to_string().chars()\
    \ {\n        let n = i.to_digit(10).unwrap();\n        if n % 2 == 0 {\n     \
    \       even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmprhnimixw.rs:9:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in format!(\"{}\"\
    , num).chars() {\n        let val = i.to_digit(10).unwrap() as isize;\n      \
    \  if val % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpflcv56ua.rs:9:34\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmplqakg5pc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpjlvpzxm7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // TODO\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpvrgtugpe.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let evens = num.to_string().chars().filter(|x| x.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize;\n    let odds = num.to_string().chars().filter(|x|\
    \ x.to_digit(10).unwrap() % 2 != 0).count() as isize;\n    (evens, odds)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpn_r24t5r.rs:6:67\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut result = (0, 0);\n    let mut num = num;\n    while num != 0\
    \ {\n        if num % 2 == 0 {\n            result.0 += 1;\n        } else {\n\
    \            result.1 += 1;\n        }\n        num /= 10;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6vyx1ou7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt0508tr2.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpb87q5dfg.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (1, 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 2)`,\n right: `(0, 1)`', /tmp/tmppm4qfkbc.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_digits: isize = 0;\n    let mut odd_digits: isize = 0;\n\
    \    let mut abs_num = num.abs();\n    while abs_num > 0 {\n        let digit\
    \ = abs_num % 10;\n        if digit % 2 == 0 {\n            even_digits += 1;\n\
    \        } else {\n            odd_digits += 1;\n        }\n        abs_num /=\
    \ 10;\n    }\n    (even_digits, odd_digits)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp65cqs2v9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut new_num\
    \ = num;\n    if num < 0 {\n        new_num = -new_num;\n    }\n    let mut num_string\
    \ = new_num.to_string();\n    let mut string_vec: Vec<char> = Vec::new();\n  \
    \  for c in num_string.chars() {\n        string_vec.push(c);\n    }\n    while\
    \ string_vec.len() > 0 {\n        let n = string_vec.remove(0);\n        let num_test\
    \ = n.to_string().parse::<isize>().unwrap();\n        if num_test % 2 == 0 {\n\
    \            even_count += 1;\n        } else {\n            odd_count += 1;\n\
    \        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    num.to_string()\n        .chars()\n        .fold((0, 0), |mut sum, c|\
    \ {\n            let n = c.to_digit(10).unwrap() as isize;\n            if n %\
    \ 2 == 0 {\n                sum.0 += 1;\n            } else {\n              \
    \  sum.1 += 1;\n            }\n            sum\n        })\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpb7jxrenc.rs:9:36\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for c in num.to_string().chars()\
    \ {\n        let i = c.to_digit(10).unwrap() as isize;\n        if i % 2 == 0\
    \ {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpiqqge0ov.rs:9:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        let digit = n % 10;\n        n /= 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7euae4vp.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_digits = 0;\n    let mut odd_digits = 0;\n    let mut temp\
    \ = num;\n    while temp != 0 {\n        if temp % 2 == 0 {\n            even_digits\
    \ += 1;\n        } else {\n            odd_digits += 1;\n        }\n        temp\
    \ /= 10;\n    }\n    (even_digits, odd_digits)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpsnlng6aw.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut s = String::new();\n    let mut even = 0;\n    let mut odd =\
    \ 0;\n    s = num.to_string();\n    for x in s.chars() {\n        if x.to_digit(10).unwrap()\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpnxu7_wl9.rs:11:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.to_string().chars().filter(|d| d.to_digit(10).unwrap() % 2 == 0).count()\
    \ as isize,\n     num.to_string().chars().filter(|d| d.to_digit(10).unwrap() %\
    \ 2 == 1).count() as isize)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpe1_nh_d4.rs:6:56\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_count = 0;\n    let mut even_count = 0;\n    let mut n =\
    \ num;\n    while n != 0 {\n        if n % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n        n /= 10;\n\
    \    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpfumn8084.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for c in num.to_string().chars()\
    \ {\n        if c.to_digit(10).unwrap() % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp4wdh_azi.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7wl_cplc.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpduqw63ue.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut n =\
    \ num;\n    while n != 0 {\n        if n % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n        n /= 10;\n\
    \    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpv0o4efns.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxir48msk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut string_num = num.to_string();\n\
    \    let mut rest = 0;\n    let mut exponent = string_num.len() as isize - 1;\n\
    \    let mut result = 0;\n    let mut num_array = vec![];\n    while exponent\
    \ >= 0 {\n        if exponent == 0 {\n            num_array.push(string_num.parse::<isize>().unwrap()\
    \ - rest);\n        } else {\n            result = 10_isize.pow(exponent as u32)\
    \ * (string_num.parse::<isize>().unwrap() - rest);\n            rest += result\
    \ % 10;\n            num_array.push(result / 10);\n        }\n        exponent\
    \ -= 1;\n    }\n    for i in num_array {\n        if i % 2 == 0 {\n          \
    \  even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 0)`,\n right: `(1, 1)`', /tmp/tmpt7jvlakm.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let num = num.abs();\n    let mut n = num;\n    let mut even = 0;\n \
    \   let mut odd = 0;\n    while n > 0 {\n        let digit = n % 10;\n       \
    \ if digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_s2pmtvq.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpv_ixl4ur.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // YOUR CODE HERE\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplvyt936p.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpojwlvv3y.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let abs_num = num.abs();\n    let even = abs_num\n        .to_string()\n\
    \        .chars()\n        .filter(|c| c.to_digit(10).unwrap() % 2 == 0)\n   \
    \     .count() as isize;\n    let odd = abs_num\n        .to_string()\n      \
    \  .chars()\n        .filter(|c| c.to_digit(10).unwrap() % 2 == 1)\n        .count()\
    \ as isize;\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqc4xlrwn.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num = num;\n    let mut even_counter = 0;\n    let mut odd_counter\
    \ = 0;\n    while num != 0 {\n        let x = num % 10;\n        if x % 2 == 0\
    \ {\n            even_counter += 1;\n        } else {\n            odd_counter\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even_counter, odd_counter)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9zwszt_a.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmp1ylutcvr.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut tmp = num;\n    let mut even = 0;\n    let mut odd = 0;\n   \
    \ while tmp != 0 {\n        if tmp % 2 == 0 {\n            even += 1;\n      \
    \  } else {\n            odd += 1;\n        }\n        tmp /= 10;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp8qagn8_d.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6emf730q.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_count = 0;\n    let mut even_count = 0;\n    let n = num.abs();\n\
    \    for c in n.to_string().chars() {\n        if c.to_digit(10).unwrap() % 2\
    \ == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd = 0;\n    let mut even = 0;\n    for i in num.to_string().chars()\
    \ {\n        let a = i.to_digit(10).unwrap();\n        if a % 2 == 0 {\n     \
    \       even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpnignfs6m.rs:9:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplhaofh89.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num == 0 {\n        return (1, 0);\n    }\n    let mut even = 0;\n\
    \    let mut odd = 0;\n    let mut num = num;\n    while num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1;\n        } else {\n            odd +=\
    \ 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for digit in\
    \ num.to_string().chars() {\n        if digit.to_digit(10).unwrap() % 2 == 0 {\n\
    \            even_count += 1;\n        } else {\n            odd_count += 1;\n\
    \        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpdyvw89lt.rs:9:31\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpk41zqbfb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut n = num;\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    while n != 0 {\n        if n % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n        n /= 10;\n\
    \    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqxtsetg1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.to_string().chars().filter(|&c| c.is_numeric() && c.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n     num.to_string().chars().filter(|&c| c.is_numeric()\
    \ && c.to_digit(10).unwrap() % 2 == 1).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for c in num.to_string().chars()\
    \ {\n        if c.to_digit(10).unwrap() % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpe309eeep.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut (odd, even) = (0, 0);\n    for &i in &[num.abs()] {\n       \
    \ if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd +=\
    \ 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: `mut` must be attached to each individual binding\n --> /tmp/tmpc80dl6zd.rs:6:9\n\
    \  |\n6 |     let mut (odd, even) = (0, 0);\n  |         ^^^^^^^^^^^^^^^ help:\
    \ add `mut` to each binding: `(mut odd, mut even)`\n  |\n  = note: `mut` may be\
    \ followed by `variable` and `variable @ pattern`\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut rem = 0;\n    let\
    \ mut num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num\
    \ > 0 {\n        rem = num % 10;\n        if rem % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpna3hme4o.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // your code goes here\n    let mut count_even = 0;\n    let mut count_odd\
    \ = 0;\n    for x in num.to_string().chars() {\n        if x.to_digit(10).unwrap()\
    \ % 2 == 0 {\n            count_even += 1;\n        } else {\n            count_odd\
    \ += 1;\n        }\n    }\n    (count_even, count_odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpjv5_7iul.rs:10:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // Your code here\n    let mut even = 0;\n    let mut odd = 0;\n    let\
    \ mut num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num\
    \ > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbup098ub.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let str_num = num.to_string();\n    let mut odds = 0;\n    let mut evens\
    \ = 0;\n    for c in str_num.chars() {\n        if c.is_digit(10) {\n        \
    \    let d = c.to_digit(10).unwrap();\n            if d % 2 == 0 {\n         \
    \       evens += 1;\n            } else {\n                odds += 1;\n      \
    \      }\n        }\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for c in num.to_string().chars()\
    \ {\n        let c = c.to_digit(10).unwrap();\n        if c % 2 == 0 {\n     \
    \       even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpt7up2qmc.rs:9:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbnrgx07n.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut number = num;\n\
    \    while number != 0 {\n        if number % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        number /= 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpy7y28gfh.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.to_string().chars().filter(|&c| c.is_digit(10) && c.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize, num.to_string().chars().filter(|&c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 != 0).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp934zuilf.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.to_string().chars().filter(|&x| x.is_digit(10) && x.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n     num.to_string().chars().filter(|&x| x.is_digit(10)\
    \ && x.to_digit(10).unwrap() % 2 != 0).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmp0_fendx9.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6d68j1pi.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9c7u5hmb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut oc = 0;\n    let mut ec = 0;\n    for c in num.to_string().chars()\
    \ {\n        let digit = c.to_digit(10).unwrap();\n        if digit % 2 == 0 {\n\
    \            ec += 1;\n        } else {\n            oc += 1;\n        }\n   \
    \ }\n    (ec, oc)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n   \
    \ assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpe5jzkfaz.rs:9:36\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            evens += 1;\n\
    \        } else {\n            odds += 1;\n        }\n    }\n    (evens, odds)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpz1jaehi7.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3vnfivna.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let positive_num = num.abs();\n    let mut digits = positive_num;\n \
    \   let mut even_count = 0;\n    let mut odd_count = 0;\n    while digits != 0\
    \ {\n        let last_digit = digits % 10;\n        if last_digit % 2 == 0 {\n\
    \            even_count += 1;\n        } else {\n            odd_count += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpwlvmsorf.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi62f5w4i.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // Your code here\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n    for n in num.to_string().chars() {\n        if n.to_digit(10).unwrap()\
    \ % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpvn1bs4ay.rs:10:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let num = num.abs();\n\
    \    let mut rem = num;\n    while rem > 0 {\n        let digit = rem % 10;\n\
    \        if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n        rem /= 10;\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxdqijymt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let num = num.abs();\n    let count_even = (num.to_string().len() as\
    \ f64 / 2.0).ceil() as isize;\n    let count_odd = (num.to_string().len() as f64\
    \ / 2.0).floor() as isize;\n    (count_even, count_odd)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmpxh8b9_jv.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpttu9ojby.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // Could do this, but not as fun: return (num.abs().to_string().chars().filter(|x|\
    \ x.is_digit(10) && x.to_digit(10).unwrap() % 2 == 0).count() as isize, num.abs().to_string().chars().filter(|x|\
    \ x.is_digit(10) && x.to_digit(10).unwrap() % 2 == 1).count() as isize);\n   \
    \ let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut n = num.abs();\n\
    \    while n > 0 {\n        if n % 2 == 0 {\n            even_count += 1;\n  \
    \      } else {\n            odd_count += 1;\n        }\n        n /= 10;\n  \
    \  }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpzj7ohn1x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpsl6mcaa_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for char in\
    \ num.to_string().chars() {\n        let n = char.to_digit(10).unwrap() as isize;\n\
    \        if n % 2 == 0 {\n            even_count += 1;\n        } else {\n   \
    \         odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpyswtdq3t.rs:9:35\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpc4mrj7wq.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (\n        num.abs().to_string().chars().filter(|c| is_even(*c as u8)).count()\
    \ as isize,\n        num.abs().to_string().chars().filter(|c| is_odd(*c as u8)).count()\
    \ as isize,\n    )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_even` in this scope\n --> /tmp/tmp86fx9l_v.rs:7:50\n\
    \  |\n7 |         num.abs().to_string().chars().filter(|c| is_even(*c as u8)).count()\
    \ as isize,\n  |                                                  ^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_odd` in this scope\n\
    \ --> /tmp/tmp86fx9l_v.rs:8:50\n  |\n8 |         num.abs().to_string().chars().filter(|c|\
    \ is_odd(*c as u8)).count() as isize,\n  |                                   \
    \               ^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.to_string().chars().filter(|c| c.is_digit(10) && c.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n     num.to_string().chars().filter(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 1).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num = num;\n    let mut even = 0;\n    let mut odd = 0;\n   \
    \ while num != 0 {\n        if num % 2 == 0 {\n            even += 1;\n      \
    \  } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpf2m3e_88.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        let d = n % 10;\n        if d % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpro0js9mi.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        let digit = num % 10;\n        if digit\
    \ % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn1pdx1qg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp29988pfm.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count_even = 0;\n    let mut count_odd = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            count_even\
    \ += 1;\n        } else {\n            count_odd += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (count_even, count_odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5ju5nab7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpe792h3go.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu3n1m57u.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_odd = 0;\n    let mut num_even = 0;\n    let mut n = num;\n\
    \    if n == 0 {\n        return (0, 0);\n    }\n    loop {\n        if n % 2\
    \ == 0 {\n            num_even += 1;\n        } else {\n            num_odd +=\
    \ 1;\n        }\n        n /= 10;\n        if n == 0 {\n            break;\n \
    \       }\n    }\n    (num_even, num_odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkytoqtvf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd = 0;\n    let mut even = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        let digit = n %\
    \ 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3w3tiyu4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num == 0 {\n        return (1, 0);\n    }\n    let mut even_count\
    \ = 0;\n    let mut odd_count = 0;\n    let mut num = num;\n    if num < 0 {\n\
    \        num = -num;\n    }\n    loop {\n        let digit = num % 10;\n     \
    \   if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n    \
    \        odd_count += 1;\n        }\n        num /= 10;\n        if num == 0 {\n\
    \            break;\n        }\n    }\n    (even_count, odd_count)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3b_oxdo1.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (\n        num.abs().to_string().chars().filter(|c| c.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n        num.abs().to_string().chars().filter(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1).count() as isize,\n    )\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmply2flfe6.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_digits = 0;\n    let mut odd_digits = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_digits\
    \ += 1;\n        } else {\n            odd_digits += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_digits, odd_digits)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp49c0x5ni.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num_abs = num.abs();\n\
    \    while num_abs > 0 {\n        if num_abs % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num_abs /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4rss2ikd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_digit_count = 0;\n    let mut odd_digit_count = 0;\n   \
    \ let mut num = num;\n    if num < 0 {\n        num = -num;\n    }\n    while\
    \ num > 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n    \
    \        even_digit_count += 1;\n        } else {\n            odd_digit_count\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even_digit_count, odd_digit_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpb0gsj4a2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpmq4j_909.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let digits = num.abs().to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize);\n    let mut even_counter = 0;\n    let mut odd_counter = 0;\n  \
    \  for d in digits {\n        if d % 2 == 0 {\n            even_counter += 1;\n\
    \        } else {\n            odd_counter += 1;\n        }\n    }\n    (even_counter,\
    \ odd_counter)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp56_bf7l_.rs:6:18\n\
    \  |\n6 |     let digits = num.abs().to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize);\n  |                  ^^^^^^^^^^^^^^^^^^^^^                     \
    \                             - temporary value is freed at the end of this statement\n\
    \  |                  |\n  |                  creates a temporary which is freed\
    \ while still in use\n...\n9 |     for d in digits {\n  |              ------\
    \ borrow later used here\n  |\n  = note: consider using a `let` binding to create\
    \ a longer lived value\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0716`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8h5n679l.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_count = 0;\n    let mut even_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    loop {\n        let\
    \ digit = num % 10;\n        if digit % 2 == 0 {\n            even_count += 1;\n\
    \        } else {\n            odd_count += 1;\n        }\n        num /= 10;\n\
    \        if num == 0 {\n            break;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_pos = num.abs();\n    let mut even = 0;\n    let mut odd\
    \ = 0;\n    while num_pos > 0 {\n        let d = num_pos % 10;\n        if d %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num_pos /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpnm_zygyw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpj7a1u83e.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjuff7m95.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.to_string().chars().filter(|c| c.is_numeric() && c.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n     num.to_string().chars().filter(|c| c.is_numeric()\
    \ && c.to_digit(10).unwrap() % 2 == 1).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odds = 0;\n    let mut evens = 0;\n    let mut num = num;\n \
    \   while num != 0 {\n        if num % 2 == 0 {\n            evens += 1;\n   \
    \     } else {\n            odds += 1;\n        }\n        num /= 10;\n    }\n\
    \    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpejx910ht.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num == 0 {\n        return (1, 0);\n    }\n    let mut evens = 0;\n\
    \    let mut odds = 0;\n    let mut n = num;\n    while n != 0 {\n        if n\
    \ % 2 == 0 {\n            evens += 1;\n        } else {\n            odds += 1;\n\
    \        }\n        n /= 10;\n    }\n    (evens, odds)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpja3e34fu.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3ta5xs2p.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.abs().to_string().chars().filter(|c| c.is_digit(10) && c.to_digit(10).unwrap()\
    \ % 2 == 0).count() as isize,\n     num.abs().to_string().chars().filter(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 1).count() as isize)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits = num.abs();\n\
    \    while digits > 0 {\n        let digit = digits % 10;\n        if digit %\
    \ 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmph_ctpgms.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (\n        num.to_string()\n            .chars()\n            .filter(|digit|\
    \ digit.to_digit(10).unwrap() % 2 == 0)\n            .count() as isize,\n    \
    \    num.to_string()\n            .chars()\n            .filter(|digit| digit.to_digit(10).unwrap()\
    \ % 2 != 0)\n            .count() as isize,\n    )\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp0q4fay6e.rs:9:48\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut x = num;\n    let mut even_cnt = 0;\n    let mut odd_cnt = 0;\n\
    \    while x != 0 {\n        if x % 2 == 0 {\n            even_cnt += 1;\n   \
    \     } else {\n            odd_cnt += 1;\n        }\n        x /= 10;\n    }\n\
    \    (even_cnt, odd_cnt)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp1irm0k9y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
