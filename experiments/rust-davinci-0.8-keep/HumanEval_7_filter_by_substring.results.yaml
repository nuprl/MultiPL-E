name: HumanEval_7_filter_by_substring
language: rust
results:
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered.push(string);\n        }\n    }\n    filtered\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut ret = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            ret.push(s);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut ret = Vec::new();\n\
    \    for i in strings {\n        if i.contains(&substring) {\n            ret.push(i);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut vec: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let substring = substring.to_lowercase();\n\
    \    strings\n        .into_iter()\n        .filter(|s| s.to_lowercase().contains(&substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ {\n        let string = string.as_str();\n        string.contains(substring.as_str())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let filter_vec = strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect();\n    filter_vec\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let result: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|x| x.contains(&substring))\n\
    \        .collect();\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let res: Vec<String> =\
    \ strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    res\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let strings: Vec<&str>\
    \ = strings.iter().map(|s| s.as_str()).collect();\n    let strings = str_util::filter_by_substring(strings,\
    \ substring.as_str());\n    let strings: Vec<String> = strings.iter().map(|s|\
    \ s.to_string()).collect();\n    strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `str_util`\n\
    \ --> /tmp/tmpnp45lnze.rs:8:19\n  |\n8 |     let strings = str_util::filter_by_substring(strings,\
    \ substring.as_str());\n  |                   ^^^^^^^^ use of undeclared crate\
    \ or module `str_util`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            result.push(s)\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut res: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            res.push(s)\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let filtered: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|x| x.contains(&substring))\n\
    \        .collect();\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for word in strings {\n        if word.contains(&substring) {\n         \
    \   result.push(word);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       result.push(string);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       result.push(string);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let result: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|el|\
    \ el.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let matches = strings\n\
    \        .into_iter()\n        .filter(|elem| elem.contains(&substring));\n  \
    \  matches.collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut new_strings =\
    \ Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            new_strings.push(string);\n        }\n    }\n    new_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    // filter list only for\
    \ string which contains the given substring\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut out = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            out.push(s);\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    return strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect();\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_list:\
    \ Vec<String> = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_list.push(string)\n        }\n    }\n    filtered_list\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for elem in strings {\n        if elem.contains(&substring) {\n         \
    \   result.push(elem);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for str in strings {\n        if str.contains(&substring)\
    \ {\n            result.push(str);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for str in strings {\n        if str.contains(&substring)\
    \ {\n            filtered.push(str);\n        }\n    }\n    filtered\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            filtered_strings.push(s)\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for elem in strings {\n        if elem.contains(&substring)\
    \ {\n            result.push(elem);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for i in strings {\n        if i.contains(&substring) {\n\
    \            filtered_strings.push(i);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    // Without clone\n   \
    \ // let filtered = strings.into_iter().filter(|x| x.contains(&substring)).collect();\n\
    \    // let filtered = strings.into_iter().filter(|x| x.as_str().contains(&substring)).collect();\n\
    \    // With clone\n    let filtered = strings.into_iter().filter(|x| x.contains(&substring)).cloned().collect();\n\
    \    filtered\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp671jdqmh.rs:11:47: 11:73]> as Iterator>::Item == &_`\n    -->\
    \ /tmp/tmp671jdqmh.rs:11:75\n     |\n11   |     let filtered = strings.into_iter().filter(|x|\
    \ x.contains(&substring)).cloned().collect();\n     |                        \
    \                                                   ^^^^^^ expected reference,\
    \ found struct `String`\n     |\n     = note: expected reference `&_`\n      \
    \             found struct `String`\nnote: required by a bound in `cloned`\n\n\
    error[E0599]: the method `collect` exists for struct `Cloned<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp671jdqmh.rs:11:47: 11:73]>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp671jdqmh.rs:11:84\n   |\n11 |        let filtered =\
    \ strings.into_iter().filter(|x| x.contains(&substring)).cloned().collect();\n\
    \   |                                                                        \
    \               ^^^^^^^ method cannot be called on `Cloned<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp671jdqmh.rs:11:47: 11:73]>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp671jdqmh.rs:11:47: 11:73]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmp671jdqmh.rs:11:47:\
    \ 11:73]>>: Iterator`\n           `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmp671jdqmh.rs:11:47:\
    \ 11:73]>>: Iterator`\n           which is required by `&mut Cloned<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp671jdqmh.rs:11:47: 11:73]>>: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            result.push(string);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut results = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       results.push(string);\n        }\n    }\n    results\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    // Collect the strings\
    \ that have the given substring in them\n    let filtered_strings: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect();\n\n    filtered_strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|i|\
    \ i.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       result.push(string);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       result.push(string);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    // TODO: Implement this\
    \ function\n    strings.into_iter().filter(|s| s.contains(&substring)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    return strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect();\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let lowercase_substring\
    \ = substring.to_lowercase();\n    let mut v = Vec::new();\n    for s in strings\
    \ {\n        if s.to_lowercase().contains(&lowercase_substring) {\n          \
    \  v.push(s);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let result: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let result: Vec<String>\
    \ = strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    return strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect();\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    // TODO\n    vec![]\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"xxx\", \"xxxAAA\", \"xxx\"]`', /tmp/tmpj0egqmed.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut res = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       res.push(string);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filter_by_substring:\
    \ Vec<String> = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filter_by_substring.push(string);\n        }\n    }\n    filter_by_substring\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let filtered_strings:\
    \ Vec<String> = strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect();\n    filtered_strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut output = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            output.push(s);\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            result.push(string);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut res: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            res.push(s)\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            filtered_strings.push(s);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let predicate = |s: &String|\
    \ s.contains(&substring);\n    filter(strings, predicate)\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `filter` in this scope\n --> /tmp/tmphtdf_w27.rs:8:5\n\
    \  |\n8 |     filter(strings, predicate)\n  |     ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    return strings.into_iter().filter(|x|\
    \ x.contains(&substring)).collect();\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ {\n        string.to_lowercase().contains(&substring.to_lowercase())\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found_strings:\
    \ Vec<String> = Vec::new();\n    for line in strings {\n        if line.contains(&substring)\
    \ {\n            found_strings.push(line);\n        }\n    }\n    found_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut substring_strings\
    \ = Vec::new();\n    for i in strings {\n        if i.contains(&substring) {\n\
    \            substring_strings.push(i);\n        }\n    }\n    substring_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_list:\
    \ Vec<String> = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_list.push(string);\n        }\n    }\n    filtered_list\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    // TODO: Make this function\
    \ asynchronous\n    let substring_slice = substring.as_str();\n    strings\n \
    \       .into_iter()\n        .filter(|string| string.contains(substring_slice))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered.push(string);\n        }\n    }\n    filtered\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut new_strings =\
    \ Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            new_strings.push(string)\n        }\n    }\n    new_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for input in strings {\n        if input.contains(&substring) {\n       \
    \     result.push(input);\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut vec = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            vec.push(s);\n\
    \        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s)\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    return strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect();\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut ret: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            ret.push(string);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    //#TODO\n    strings.into_iter().filter(|e|\
    \ e.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            result.push(string);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for element in strings {\n        if element.contains(&substring)\
    \ {\n            filtered_strings.push(element);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|string|\
    \ string.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            result.push(s)\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut vec: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            vec.push(string);\n        }\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
