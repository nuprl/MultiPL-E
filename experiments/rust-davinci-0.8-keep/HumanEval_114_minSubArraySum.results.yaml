name: HumanEval_114_minSubArraySum
language: rust
results:
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sub_array_sum = 0;\n    let mut temp_sub_array_sum\
    \ = 0;\n    for num in nums {\n        temp_sub_array_sum += num;\n        if\
    \ temp_sub_array_sum < min_sub_array_sum {\n            min_sub_array_sum = temp_sub_array_sum;\n\
    \        }\n    }\n    min_sub_array_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpgi6qbasn.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut max_sum = nums[0];\n\
    \    let mut current_sum = nums[0];\n    for n in nums[1..].iter() {\n       \
    \ max_sum = max_sum.max(*n);\n        if current_sum <= 0 {\n            current_sum\
    \ = *n;\n        } else {\n            current_sum += *n;\n        }\n       \
    \ min_sum = min_sum.min(current_sum);\n    }\n    min_sum.max(max_sum)\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp5ihbcl2i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // sum of min subarray, sum of prefixes\n    let mut sum_subarr\
    \ = nums[0];\n    let mut sum_prefix = 0;\n    let mut min_subarr = nums[0];\n\
    \n    for i in 1..nums.len() {\n        sum_prefix += nums[i - 1];\n        sum_subarr\
    \ = min(sum_subarr, sum_prefix);\n        min_subarr = min(min_subarr, sum_subarr\
    \ + nums[i]);\n    }\n\n    min_subarr\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfw1_koox.rs:14:22\n\
    \   |\n14 |         sum_subarr = min(sum_subarr, sum_prefix);\n   |          \
    \            ^^^\n...\n21 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    14 |         sum_subarr = main(sum_subarr, sum_prefix);\n   |                \
    \      ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfw1_koox.rs:15:22\n\
    \   |\n15 |         min_subarr = min(min_subarr, sum_subarr + nums[i]);\n   |\
    \                      ^^^\n...\n21 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n15 |         min_subarr = main(min_subarr, sum_subarr + nums[i]);\n   |\
    \                      ~~~~\nhelp: consider importing this function\n   |\n1 \
    \ | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minimum = isize::max_value();\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        minimum = minimum.min(sum);\n\
    \        if sum < 0 {\n            sum = 0;\n        }\n    }\n    minimum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp7f24kdo2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut max_ending_here = nums[0];\n    let mut min_so_far =\
    \ nums[0];\n    for i in 1..nums.len() {\n        max_ending_here = std::cmp::max(nums[i],\
    \ max_ending_here + nums[i]);\n        min_so_far = std::cmp::min(min_so_far,\
    \ max_ending_here);\n    }\n    min_so_far\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj3l__ltv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n   \
    \ for i in 1..nums.len() {\n        if sum > 0 {\n            sum = nums[i];\n\
    \        } else {\n            sum += nums[i];\n        }\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n \
    \   for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n        if sum > 0 {\n           \
    \ sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::isize::MAX;\n    let mut current_sum = 0;\n\
    \    for num in nums {\n        current_sum += num;\n        if current_sum <\
    \ min {\n            min = current_sum;\n        }\n        if current_sum > 0\
    \ {\n            current_sum = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Your code here\n    let mut min_sum = *nums.iter().min().unwrap();\n\
    \    let mut sum = 0;\n    for n in nums {\n        sum += n;\n        if sum\
    \ < min_sum {\n            min_sum = sum;\n        }\n        if sum > 0 {\n \
    \           sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let (mut sum, mut min_sum) = (0, isize::max_value());\n    for\
    \ i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum {\n\
    \            min_sum = sum;\n        }\n        if sum > 0 {\n            sum\
    \ = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::max_value();\n    let mut sum = 0;\n  \
    \  for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min {\n\
    \            min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n \
    \   for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n        if sum > 0 {\n           \
    \ sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut curr_sum\
    \ = 0;\n    for (i, num) in nums.iter().enumerate() {\n        curr_sum += num;\n\
    \        if i == 0 {\n            min_sum = curr_sum;\n        } else {\n    \
    \        min_sum = min_sum.min(curr_sum);\n        }\n        if curr_sum > 0\
    \ {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ result = std::isize::MAX;\n    let mut sum = 0;\n    for x in nums {\n     \
    \   sum += x;\n        result = std::cmp::min(result, sum);\n        if sum >\
    \ 0 {\n            sum = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut cur_min = 0;\n    let mut min = 0;\n    let mut sum\
    \ = 0;\n    for (idx, num) in nums.iter().enumerate() {\n        sum += num;\n\
    \        if idx == 0 {\n            cur_min = sum;\n            min = sum;\n \
    \       } else {\n            cur_min = if cur_min < 0 { sum } else { cur_min\
    \ + sum };\n            min = min.min(cur_min);\n        }\n    }\n    min\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9ocyrjcu.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_so_far = nums[0];\n    let mut min_ending_here =\
    \ nums[0];\n    for num in nums.iter().skip(1) {\n        min_ending_here = num.min(min_ending_here\
    \ + num);\n        min_so_far = min_so_far.min(min_ending_here);\n    }\n    min_so_far\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp32n5lzyb.rs:10:35\n   |\n\
    10 |         min_ending_here = num.min(min_ending_here + num);\n   |         \
    \                          ^^^^^^^^^^^^^^^^^^^^^\n   |                       \
    \            |\n   |                                   expected `&isize`, found\
    \ `isize`\n   |                                   help: consider borrowing here:\
    \ `&(min_ending_here + num)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp32n5lzyb.rs:10:27\n\
    \   |\n8  |     let mut min_ending_here = nums[0];\n   |                     \
    \          ------- expected due to this value\n9  |     for num in nums.iter().skip(1)\
    \ {\n10 |         min_ending_here = num.min(min_ending_here + num);\n   |    \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \ min_ending_here = *num.min(min_ending_here + num);\n   |                   \
    \        +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = 0;\n    let mut curr_sum = 0;\n    let mut\
    \ min_idx = nums.len();\n    let mut max_idx = 0;\n    for (i, n) in nums.iter().enumerate()\
    \ {\n        curr_sum += n;\n        if curr_sum < min_sum {\n            min_sum\
    \ = curr_sum;\n            min_idx = i;\n        }\n        if curr_sum - min_sum\
    \ > nums[max_idx..].iter().sum::<isize>() {\n            max_idx = i;\n      \
    \  }\n    }\n    let (l, r) = (min_idx + 1, max_idx + 1);\n    nums[l..r].iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'slice index starts at 7 but ends at 1', library/core/src/slice/index.rs:92:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut res = isize::max_value();\n    let mut sum = 0;\n  \
    \  for i in 0..nums.len() {\n        for j in i..nums.len() {\n            sum\
    \ += nums[j];\n            res = min(res, sum);\n        }\n        sum = 0;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpohyts686.rs:12:19\n\
    \   |\n12 |             res = min(res, sum);\n   |                   ^^^\n...\n\
    19 | fn main() {\n   | --------- similarly named function `main` defined here\n\
    \   |\nhelp: a function with a similar name exists\n   |\n12 |             res\
    \ = main(res, sum);\n   |                   ~~~~\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut last_sum = nums[0];\n\
    \    for n in &nums[1..] {\n        last_sum = last_sum.min(*n).min(last_sum +\
    \ *n);\n        min_sum = min_sum.min(last_sum);\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-16`,\n right: `-14`', /tmp/tmp8kvnklra.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.into_iter().fold(Vec::<isize>::new(), |mut acc, x| {\n\
    \        acc.push(acc.last().unwrap_or(&0) + x);\n        acc\n    })\n    .into_iter()\n\
    \    .min()\n    .unwrap()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpbo1mvtrw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut current_min = std::isize::MAX;\n    let mut current_max\
    \ = std::isize::MIN;\n    let mut current_sum = 0;\n    for num in nums {\n  \
    \      current_sum += num;\n        current_min = current_min.min(current_sum);\n\
    \        current_max = current_max.max(current_sum);\n    }\n    current_min.min(current_max)\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpu5176z39.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut smallest = std::isize::MAX;\n    let mut running_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        running_sum += nums[i];\n      \
    \  if running_sum < smallest {\n            smallest = running_sum;\n        }\n\
    \        if running_sum > 0 {\n            running_sum = 0;\n        }\n    }\n\
    \    smallest\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ cur_min = nums[0];\n    let mut cur_sum = 0;\n    for i in 0..nums.len() {\n\
    \        cur_sum += nums[i];\n        if cur_sum < cur_min {\n            cur_min\
    \ = cur_sum;\n        }\n        if cur_sum > 0 {\n            cur_sum = 0;\n\
    \        }\n    }\n    cur_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_so_far = isize::max_value();\n    let mut min_ending_here\
    \ = 0;\n    for i in 0..nums.len() {\n        min_ending_here = min_ending_here\
    \ + nums[i];\n        if min_so_far > min_ending_here {\n            min_so_far\
    \ = min_ending_here;\n        }\n        if min_ending_here > 0 {\n          \
    \  min_ending_here = 0;\n        }\n    }\n    min_so_far\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut curr_sum = 0;\n\
    \    for num in nums {\n        curr_sum += num;\n        if curr_sum < min_sum\
    \ {\n            min_sum = curr_sum;\n        }\n        if curr_sum > 0 {\n \
    \           curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp85pf27va.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_so_far = nums[0];\n    let mut current_min = nums[0];\n    for num in nums.iter().skip(1)\
    \ {\n        current_min = current_min.min(*num);\n        min_so_far = min_so_far.min(current_min);\n\
    \    }\n    min_so_far\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmpowmwogz9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut curr_min = 0;\n    let mut min_sum = isize::max_value();\n\
    \    let mut curr_sum = 0;\n    for i in 0..nums.len() {\n        curr_sum +=\
    \ nums[i];\n        min_sum = min_sum.min(curr_sum - curr_min);\n        curr_min\
    \ = curr_min.min(curr_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp3c7m7lnz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n \
    \   for &num in nums.iter() {\n        sum += num;\n        if sum < min_sum {\n\
    \            min_sum = sum;\n        }\n        if sum > 0 {\n            sum\
    \ = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = i32::max_value();\n    let mut sum = 0;\n\
    \    for i in 0..nums.len() {\n        if sum < 0 {\n            sum = nums[i];\n\
    \        } else {\n            sum += nums[i];\n        }\n        min_sum = min_sum.min(sum);\n\
    \    }\n    min_sum as isize\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpof0pmq8n.rs:15:31\n   |\n\
    15 |         min_sum = min_sum.min(sum);\n   |                               ^^^\
    \ expected `i32`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `i32` and panic if the converted value doesn't fit\n   |\n15 |         min_sum\
    \ = min_sum.min(sum.try_into().unwrap());\n   |                              \
    \    ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ n in nums {\n        sum += n;\n        if sum < min {\n            min = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = 0;\n    let mut curr_sum = 0;\n    for num\
    \ in nums {\n        curr_sum += num;\n        if curr_sum < min_sum {\n     \
    \       min_sum = curr_sum;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpuoc8w2qm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut answer = isize::MAX;\n    let mut sum = 0;\n    let\
    \ mut left = 0;\n    for (right, val) in nums.iter().enumerate() {\n        sum\
    \ += val;\n        while sum <= 0 {\n            sum -= nums[left];\n        \
    \    left += 1;\n        }\n        if right + 1 >= nums.len() {\n           \
    \ break;\n        }\n        answer = min(answer, sum);\n    }\n    if answer\
    \ == isize::MAX {\n        0\n    } else {\n        answer\n    }\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpth_wof3z.rs:19:18\n\
    \   |\n19 |         answer = min(answer, sum);\n   |                  ^^^\n...\n\
    28 | fn main() {\n   | --------- similarly named function `main` defined here\n\
    \   |\nhelp: a function with a similar name exists\n   |\n19 |         answer\
    \ = main(answer, sum);\n   |                  ~~~~\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut current_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        current_sum += nums[i];\n      \
    \  if current_sum < min_sum {\n            min_sum = current_sum;\n        }\n\
    \        if current_sum > 0 {\n            current_sum = 0;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = 0;\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        if sum < min {\n            min = sum;\n   \
    \     }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmps6gosbe7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut best_sum = isize::max_value();\n    let mut running_sum\
    \ = 0;\n    for num in nums {\n        running_sum += num;\n        best_sum =\
    \ running_sum.min(best_sum);\n        if running_sum > 0 {\n            running_sum\
    \ = 0;\n        }\n    }\n    best_sum\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpz16o6hk7.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut j = 0;\n    let mut len = nums.len();\n\
    \    let mut min_sum = nums[0];\n    let mut current_sum = 0;\n    while j < len\
    \ {\n        current_sum += nums[j];\n        min_sum = min_sum.min(current_sum);\n\
    \        if current_sum > 0 {\n            current_sum = 0;\n            i = j\
    \ + 1;\n        }\n        j += 1;\n    }\n    min_sum\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min {\n    \
    \        min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n \
    \       }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let n = nums.len();\n    let mut ans = std::isize::MAX;\n  \
    \  let mut sum = 0;\n    let mut left = 0;\n    for i in 0..n {\n        sum +=\
    \ nums[i];\n        while sum >= 0 {\n            ans = ans.min(sum);\n      \
    \      sum -= nums[left];\n            left += 1;\n        }\n    }\n    ans\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 6 but the index\
    \ is 6', /tmp/tmpcojm7x_h.rs:15:20\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // TODO: Implement the solution here\n    nums.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpqs7uq_ed.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut result = isize::max_value();\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        result = isize::min(result,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = i32::max_value();\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        min = std::cmp::min(min, sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min as isize\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6hcscdh_.rs:11:34\n   |\n\
    11 |         min = std::cmp::min(min, sum);\n   |                            \
    \      ^^^ expected `i32`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `i32` and panic if the converted value doesn't fit\n   |\n11 |       \
    \  min = std::cmp::min(min, sum.try_into().unwrap());\n   |                  \
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut ans = std::isize::MAX;\n    let mut left = 0;\n    let\
    \ mut sum = 0;\n    for (i, n) in nums.iter().enumerate() {\n        sum += n;\n\
    \        while sum >= 0 {\n            ans = ans.min(sum);\n            sum -=\
    \ nums[left];\n            left += 1;\n        }\n    }\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 6 but the index\
    \ is 6', /tmp/tmpowwr3hx_.rs:14:20\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // We will keep track of the smallest sum seen so far and the\
    \ current sum as we\n    // iterate over the array. If the current sum is smaller\
    \ than the smallest sum\n    // seen so far, update the smallest sum.\n    let\
    \ mut min_sum = std::isize::MAX;\n    let mut current_sum = 0;\n    for num in\
    \ nums {\n        // If the current sum becomes negative, we can reset it to 0\
    \ because we don't\n        // need to continue from this point because the sum\
    \ will only get bigger.\n        if current_sum < 0 {\n            current_sum\
    \ = 0;\n        }\n        current_sum += num;\n        min_sum = current_sum.min(min_sum);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9_71ngvu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = nums[0];\n    let mut left = 0;\n    let mut min_sum\
    \ = sum;\n    for (i, &x) in nums.iter().enumerate().skip(1) {\n        sum +=\
    \ x;\n        if sum < min_sum {\n            min_sum = sum;\n        }\n    \
    \    if sum - nums[left] < min_sum {\n            min_sum = sum - nums[left];\n\
    \        }\n        left = i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp03tnte9d.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_so_far = isize::max_value();\n    let mut sum =\
    \ 0;\n    for num in nums {\n        sum += num;\n        min_so_far = isize::min(min_so_far,\
    \ sum);\n        sum = isize::max(sum, 0);\n    }\n    min_so_far\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzk01fajq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut curr_sum = 0;\n    let mut min_sum = 0;\n    let mut\
    \ max_sum = std::isize::MAX;\n    for i in 0..nums.len() {\n        curr_sum +=\
    \ nums[i];\n        min_sum = curr_sum;\n        if curr_sum < max_sum {\n   \
    \         max_sum = curr_sum;\n        }\n        for j in i + 1..nums.len() {\n\
    \            curr_sum += nums[j];\n            if curr_sum < min_sum {\n     \
    \           min_sum = curr_sum;\n            }\n        }\n        curr_sum =\
    \ 0;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpwsiicknd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut curr_min = nums[0];\n    let mut curr_sum = nums[0];\n\
    \    for i in 1..nums.len() {\n        curr_sum = curr_sum.min(0) + nums[i];\n\
    \        curr_min = curr_min.min(curr_sum);\n    }\n    curr_min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut result = nums[0];\n    let mut lowest = nums[0];\n \
    \   for i in 1..nums.len() {\n        result = nums[i].max(result + nums[i]);\n\
    \        lowest = lowest.min(result);\n    }\n    lowest\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpbc2vi8xp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_total = std::isize::MAX;\n    let mut curr_total\
    \ = 0;\n    for num in nums {\n        curr_total += num;\n        if curr_total\
    \ < min_total {\n            min_total = curr_total;\n        }\n        if curr_total\
    \ > 0 {\n            curr_total = 0;\n        }\n    }\n    min_total\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut current_sum = 0;\n \
    \   for num in nums {\n        current_sum += num;\n        if current_sum < min_sum\
    \ {\n            min_sum = current_sum;\n        }\n        if current_sum > 0\
    \ {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut current_sum\
    \ = 0;\n    for n in nums {\n        current_sum += n;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ res = nums[0];\n    let mut sum = nums[0];\n    for i in 1..nums.len() {\n \
    \       sum = sum.min(0) + nums[i];\n        res = res.min(sum);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::max_value();\n    let mut sum = 0;\n  \
    \  for num in nums {\n        sum += num;\n        if sum < min {\n          \
    \  min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n       \
    \ }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut curr = 0;\n    let mut min = isize::MAX;\n    for num\
    \ in nums {\n        curr += num;\n        if curr < min {\n            min =\
    \ curr;\n        }\n        if curr > 0 {\n            curr = 0;\n        }\n\
    \    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for x\
    \ in nums {\n        sum += x;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut current_sum\
    \ = 0;\n    for num in nums {\n        current_sum += num;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::max_value();\n    let mut sum = 0;\n  \
    \  for &num in nums.iter() {\n        sum += num;\n        if sum < min {\n  \
    \          min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum = nums[0];\n\
    \    for i in 1..nums.len() {\n        curr_sum = std::cmp::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::cmp::min(min_sum, curr_sum);\n    }\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_sum = isize::max_value();\n    let mut sum = 0;\n    for &num in nums.iter()\
    \ {\n        sum += num;\n        min_sum = std::cmp::min(min_sum, sum);\n   \
    \     if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    assert!(!nums.is_empty());\n    let mut lhs = 0;\n    let mut\
    \ rhs = 1;\n    let mut sum = nums[lhs];\n    let mut min = sum;\n    while rhs\
    \ < nums.len() {\n        sum += nums[rhs];\n        if sum < min {\n        \
    \    min = sum;\n        }\n        while sum >= 0 && lhs < rhs {\n          \
    \  sum -= nums[lhs];\n            lhs += 1;\n            if sum < min {\n    \
    \            min = sum;\n            }\n        }\n        rhs += 1;\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = nums[0];\n    let mut sum = nums[0];\n    for\
    \ i in 1..nums.len() {\n        if sum > 0 {\n            sum = nums[i];\n   \
    \     } else {\n            sum += nums[i];\n        }\n        if sum < min {\n\
    \            min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n \
    \   let mut min_sum = 0;\n    let n = nums.len();\n    loop {\n        if j >=\
    \ n {\n            break;\n        }\n        if sum + nums[j] < 0 {\n       \
    \     i = j + 1;\n            sum = 0;\n        } else {\n            sum += nums[j];\n\
    \            if min_sum == 0 || sum < min_sum {\n                min_sum = sum;\n\
    \            }\n            j += 1;\n        }\n    }\n    return min_sum;\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpoyah8z6x.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums {\n      \
    \  sum += num;\n        if sum < min {\n            min = sum;\n        }\n  \
    \      if sum > 0 {\n            sum = 0;\n        }\n    }\n    min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min {\n    \
    \        min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n \
    \       }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut current_sum = 0;\n \
    \   for i in 0..nums.len() {\n        current_sum += nums[i];\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::MAX;\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n  \
    \      if sum < 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpwwj7m6eg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let (mut min, mut sum) = (nums[0], 0);\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min {\n            min = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut result = nums[0];\n    let mut sum = nums[0];\n    for\
    \ i in 1..nums.len() {\n        sum = (sum + nums[i]).min(nums[i]);\n        result\
    \ = result.min(sum);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n   \
    \ for i in 1..nums.len() {\n        sum = std::cmp::min(nums[i], sum + nums[i]);\n\
    \        min_sum = std::cmp::min(min_sum, sum);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n    for n in nums\
    \ {\n        sum += n;\n        if sum < min {\n            min = sum;\n     \
    \   }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut global_min = nums[0];\n    let mut local_min = nums[0];\n\
    \    for i in 1..nums.len() {\n        local_min = std::cmp::min(nums[i], local_min\
    \ + nums[i]);\n        global_min = std::cmp::min(global_min, local_min);\n  \
    \  }\n    global_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut global_min = nums[0];\n    let mut curr_min = nums[0];\n\
    \    for i in 1..nums.len() {\n        curr_min = nums[i].min(curr_min + nums[i]);\n\
    \        global_min = global_min.min(curr_min);\n    }\n    global_min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = nums[0];\n    let mut sum = nums[0];\n    for\
    \ i in 1..nums.len() {\n        sum = std::cmp::min(nums[i], sum + nums[i]);\n\
    \        min = std::cmp::min(min, sum);\n    }\n    min\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for (i,\
    \ num) in nums.iter().enumerate() {\n        sum += num;\n        if i != 0 {\n\
    \            min_sum = std::cmp::min(min_sum, sum);\n        }\n        if sum\
    \ < 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpeif_grse.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().fold((0, isize::max_value()), |(sum, min), v| {\n\
    \        let sum = sum + v;\n        (sum, if sum < min { sum } else { min })\n\
    \    }).1\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_24mah7d.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n \
    \   for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut best = nums[0];\n    let mut current = 0;\n    for n\
    \ in nums {\n        current += n;\n        if current < best {\n            best\
    \ = current;\n        }\n        if current > 0 {\n            current = 0;\n\
    \        }\n    }\n    best\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut current_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        current_sum += nums[i];\n      \
    \  if current_sum < min_sum {\n            min_sum = current_sum;\n        }\n\
    \        if current_sum > 0 {\n            current_sum = 0;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let len = nums.len();\n    let mut curr_sum = 0;\n    let mut\
    \ min_sum = nums[0];\n    for i in 0..len {\n        curr_sum += nums[i];\n  \
    \      if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n \
    \       if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let n = nums.len();\n    if n == 0 {\n        return 0;\n  \
    \  }\n    let mut smallest_sum = nums[0];\n    let mut sum = 0;\n    for i in\
    \ 0..n {\n        sum += nums[i];\n        if sum < smallest_sum {\n         \
    \   smallest_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    smallest_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n \
    \   for x in nums {\n        sum += x;\n        if sum < min_sum {\n         \
    \   min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n  \
    \      }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut max_pos = 0;\n    let mut sum = 0;\n    let mut min_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if max_pos\
    \ <= min_sum {\n            max_pos = min_sum;\n        }\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n    }\n    sum - max_pos\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp9aqtbzb0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // This is kinda tricky. Start with an initial value.\n    let\
    \ mut min = nums[0];\n    // Iterate over the array, keeping a running sum along\
    \ the way.\n    let mut sum = 0;\n    for &num in nums.iter() {\n        sum +=\
    \ num;\n        // If the running sum falls below the current minimum, update\
    \ the minimum.\n        if sum < min {\n            min = sum;\n        }\n  \
    \      // If the running sum is less than zero, just reset it.\n        if sum\
    \ < 0 {\n            sum = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0vzkxegh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = std::isize::MAX;\n    let mut current_sum = 0;\n\
    \    for i in 0..nums.len() {\n        current_sum += nums[i];\n        if current_sum\
    \ < sum {\n            sum = current_sum;\n        }\n        if current_sum >\
    \ 0 {\n            current_sum = 0;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // `i32::max_value()` as isize\n    let mut global_min: isize\
    \ = 2147483647;\n    let mut local_min: isize = 0;\n\n    for num in nums {\n\
    \        local_min = std::cmp::min(num, local_min + num);\n        global_min\
    \ = std::cmp::min(global_min, local_min);\n    }\n\n    global_min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minimum_sum = isize::max_value();\n    let mut current_sum\
    \ = 0;\n    for num in nums {\n        current_sum += num;\n        if current_sum\
    \ < minimum_sum {\n            minimum_sum = current_sum;\n        }\n       \
    \ if current_sum > 0 {\n            current_sum = 0;\n        }\n    }\n    minimum_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = nums[0];\n    let mut result = nums[0];\n    for\
    \ i in 1..nums.len() {\n        if sum > 0 {\n            sum = nums[i];\n   \
    \     } else {\n            sum += nums[i];\n        }\n        result = min(result,\
    \ sum);\n    }\n    result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp4pun6cmf.rs:15:18\n\
    \   |\n15 |         result = min(result, sum);\n   |                  ^^^\n...\n\
    20 | fn main() {\n   | --------- similarly named function `main` defined here\n\
    \   |\nhelp: a function with a similar name exists\n   |\n15 |         result\
    \ = main(result, sum);\n   |                  ~~~~\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut res = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ i in 0..nums.len() {\n        sum += nums[i];\n        res = std::cmp::min(res,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = ISIZE_MAX;\n    let mut sum = 0;\n    for n in\
    \ nums {\n        sum += n;\n        min = std::cmp::min(min, sum);\n        if\
    \ sum > 0 {\n            sum = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `ISIZE_MAX` in this scope\n --> /tmp/tmplbtdfik0.rs:7:19\n\
    \  |\n7 |     let mut min = ISIZE_MAX;\n  |                   ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let len = nums.len();\n    if len == 0 {\n        return 0;\n\
    \    }\n    let mut sum = nums[0];\n    let mut min = sum;\n    for i in 1..len\
    \ {\n        sum = sum.max(0) + nums[i];\n        min = min.min(sum);\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpykkci4ve.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ max = 0;\n    let mut s = 0;\n    let mut maxSoFar = 0;\n    for (i, v) in nums.iter().enumerate()\
    \ {\n        if s < 0 {\n            s = 0;\n        }\n        s += v;\n    \
    \    if maxSoFar < s {\n            maxSoFar = s;\n        }\n        if i ==\
    \ nums.len() - 1 {\n            max = maxSoFar;\n        }\n    }\n    let mut\
    \ max1 = 0;\n    let mut s1 = 0;\n    let mut maxSoFar1 = 0;\n    for (i, v) in\
    \ nums.iter().rev().enumerate() {\n        if s1 < 0 {\n            s1 = 0;\n\
    \        }\n        s1 += v;\n        if maxSoFar1 < s1 {\n            maxSoFar1\
    \ = s1;\n        }\n        if i == nums.len() - 1 {\n            max1 = maxSoFar1;\n\
    \        }\n    }\n    if max > max1 {\n        max\n    } else {\n        max1\n\
    \    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp5xcxltrn.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut current_sum\
    \ = 0;\n    for num in nums {\n        current_sum += num;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut global_min_sum = nums[0];\n    let mut local_min_sum\
    \ = nums[0];\n    for &num in nums.iter().skip(1) {\n        local_min_sum = std::cmp::min(num,\
    \ local_min_sum + num);\n        global_min_sum = std::cmp::min(global_min_sum,\
    \ local_min_sum);\n    }\n    global_min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_sum = nums[0];\n    let mut left = 0;\n    let mut curr_sum = 0;\n    for\
    \ (idx, num) in nums.iter().enumerate() {\n        curr_sum += num;\n        if\
    \ curr_sum < min_sum {\n            min_sum = curr_sum;\n            left = idx;\n\
    \        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut acc = 0;\n    let mut min_sum = std::isize::MAX;\n \
    \   for &num in nums.iter() {\n        acc += num;\n        min_sum = std::cmp::min(min_sum,\
    \ acc);\n        if acc > 0 {\n            acc = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut mi = isize::max_value();\n    let mut sum = 0;\n   \
    \ for n in nums {\n        sum += n;\n        mi = mi.min(sum);\n        if sum\
    \ > 0 {\n            sum = 0;\n        }\n    }\n    mi\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_val\
    \ = isize::max_value();\n    for n in nums {\n        sum += n;\n        min_val\
    \ = min_val.min(n);\n        if sum - min_sum < min_val {\n            min_val\
    \ = sum - min_sum;\n        }\n        min_sum = min_sum.min(sum);\n    }\n  \
    \  min_val\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp5a1l8fs8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut current_sum = 0;\n    let mut min_sum = 0;\n    let\
    \ mut min_value = std::isize::MAX;\n    for n in nums {\n        current_sum +=\
    \ n;\n        min_value = std::cmp::min(min_value, n);\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n    }\n    if min_sum\
    \ == 0 {\n        min_value\n    } else {\n        min_sum\n    }\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-5`,\n right: `-6`', /tmp/tmp83rxk4ji.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut result = std::isize::MAX;\n    let mut min_sum = 0;\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        result = std::cmp::min(result, sum - min_sum);\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n    }\n    result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpba66p9sl.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ sum = nums[0];\n    let mut min_sum = nums[0];\n    for i in 1..nums.len() {\n\
    \        if sum > 0 {\n            sum = nums[i];\n        } else {\n        \
    \    sum += nums[i];\n        }\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut current_sum\
    \ = 0;\n    for num in nums {\n        current_sum += num;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_sum = isize::max_value();\n    let mut sum = 0;\n    for n in nums {\n \
    \       sum += n;\n        min_sum = min_sum.min(sum);\n        if sum < 0 {\n\
    \            sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0zlk3_e7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::min;\n    let mut min_sum = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        min_sum = min(min_sum, sum);\n        if sum > 0 {\n            sum =\
    \ 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut current_sum = nums[0];\n\
    \    for i in 1..nums.len() {\n        current_sum = min(current_sum + nums[i],\
    \ nums[i]);\n        min_sum = min(min_sum, current_sum);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp4o6p1urr.rs:10:23\n\
    \   |\n10 |         current_sum = min(current_sum + nums[i], nums[i]);\n   | \
    \                      ^^^\n...\n16 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n10 |         current_sum = main(current_sum + nums[i], nums[i]);\n   |\
    \                       ~~~~\nhelp: consider importing this function\n   |\n1\
    \  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this\
    \ scope\n  --> /tmp/tmp4o6p1urr.rs:11:19\n   |\n11 |         min_sum = min(min_sum,\
    \ current_sum);\n   |                   ^^^\n...\n16 | fn main() {\n   | ---------\
    \ similarly named function `main` defined here\n   |\nhelp: a function with a\
    \ similar name exists\n   |\n11 |         min_sum = main(min_sum, current_sum);\n\
    \   |                   ~~~~\nhelp: consider importing this function\n   |\n1\
    \  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut curr_sum = 0;\n    let mut min_sum = isize::max_value();\n\
    \    for num in nums {\n        curr_sum += num;\n        min_sum = min_sum.min(curr_sum);\n\
    \        curr_sum = curr_sum.max(0);\n    }\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmphy_xp5gv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_sum = nums[0];\n    let mut max_ending_here = nums[0];\n    for n in nums.iter().skip(1)\
    \ {\n        max_ending_here = max_ending_here.max(*n);\n        min_sum = min_sum.min(max_ending_here);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpgkm_hv21.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut current_min = isize::max_value();\n    let mut current_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        for j in 0..nums.len() {\n     \
    \       current_sum = 0;\n            for k in i..j + 1 {\n                current_sum\
    \ += nums[k];\n            }\n            if current_sum < current_min {\n   \
    \             current_min = current_sum;\n            }\n        }\n    }\n  \
    \  current_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjk_cv52z.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ local_min = nums[0];\n    let mut global_min = nums[0];\n    for &num in nums.iter().skip(1)\
    \ {\n        local_min = num.min(local_min + num);\n        global_min = global_min.min(local_min);\n\
    \    }\n    global_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // We start with the first element.\n    let mut min_sum = nums[0];\n\
    \    let mut current_sum = nums[0];\n\n    // For each remaining element, we either\
    \ add it to the current sum, or start a new\n    // sub-array, i.e. a new current\
    \ sum.\n    for i in 1..nums.len() {\n        let current_element = nums[i];\n\
    \        current_sum = current_element.max(current_sum + current_element);\n \
    \       min_sum = min_sum.min(current_sum);\n    }\n\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpuda_444h.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut result = isize::max_value();\n    let mut i = 0;\n \
    \   let mut j = 0;\n    let mut sum = 0;\n    let len = nums.len();\n    while\
    \ j < len {\n        sum += nums[j];\n        while sum >= 0 {\n            result\
    \ = result.min(sum);\n            sum -= nums[i];\n            i += 1;\n     \
    \   }\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 6 but the index\
    \ is 6', /tmp/tmpnfszbcf5.rs:16:20\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n \
    \   for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n        if sum > 0 {\n           \
    \ sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut total = 0;\n    let mut min = isize::max_value();\n\
    \    for num in nums {\n        total += num;\n        min = min.min(total);\n\
    \        if total < 0 {\n            total = 0;\n        }\n    }\n    min\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpeanlsl9f.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut total = 0;\n    let mut min = isize::max_value();\n\
    \    for i in 0..nums.len() {\n        total += nums[i];\n        if total < min\
    \ {\n            min = total;\n        }\n        if total > 0 {\n           \
    \ total = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut sum = 0;\n\
    \    for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n        if sum > 0 {\n           \
    \ sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut result = nums[0];\n    let mut sum = 0;\n    for i in\
    \ 0..nums.len() {\n        sum += nums[i];\n        if sum < result {\n      \
    \      result = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut running_sum = 0;\n    let mut min_sum = isize::max_value();\n\
    \    for n in nums {\n        running_sum += n;\n        min_sum = min_sum.min(running_sum);\n\
    \        if running_sum > 0 {\n            running_sum = 0;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::{max, min};\n    let mut min_sum = isize::max_value();\n\
    \    let mut sum = 0;\n    for &num in nums.iter() {\n        sum += num;\n  \
    \      min_sum = min(min_sum, sum);\n        sum = max(sum, 0);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxv555i7a.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_sum = nums[0];\n    let mut sum = nums[0];\n    for &n in nums.iter().skip(1)\
    \ {\n        sum = sum.min(0) + n;\n        min_sum = min_sum.min(sum);\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut ans = isize::max_value();\n    let mut start = 0usize;\n\
    \    let mut end = 0usize;\n    let mut sum = 0isize;\n    while end < nums.len()\
    \ {\n        sum += nums[end];\n        while sum <= 0 {\n            sum -= nums[start];\n\
    \            start += 1;\n        }\n        ans = std::cmp::min(ans, sum);\n\
    \        end += 1;\n    }\n    ans\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpebpb9078.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpmg6bje5h.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::isize::MAX;\n    let mut curr = 0;\n    for\
    \ i in 0..nums.len() {\n        curr += nums[i];\n        if curr < min {\n  \
    \          min = curr;\n        }\n        if curr > 0 {\n            curr = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::isize::MAX;\n    let mut curr = 0;\n    for\
    \ i in 0..nums.len() {\n        curr += nums[i];\n        if curr < min {\n  \
    \          min = curr;\n        }\n        if curr > 0 {\n            curr = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for num\
    \ in nums {\n        sum += num;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for x\
    \ in nums {\n        sum += x;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::MAX;\n    let mut current_sum = 0;\n\
    \    for &num in nums.iter() {\n        current_sum += num;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n \
    \   for &i in nums.iter() {\n        sum += i;\n        if sum < min_sum {\n \
    \           min_sum = sum;\n        }\n        if sum > 0 {\n            sum =\
    \ 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ res = nums[0];\n    let mut cur = nums[0];\n    for i in 1..nums.len() {\n \
    \       cur = cur.min(0) + nums[i];\n        res = res.min(cur);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_val = isize::max_value();\n    let mut curr_sum\
    \ = 0;\n    for num in nums {\n        curr_sum += num;\n        min_val = isize::min(min_val,\
    \ curr_sum);\n        curr_sum = isize::max(curr_sum, 0);\n    }\n    min_val\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp3relk3qb.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n \
    \   for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = nums[0];\n    let mut min = sum;\n    for num\
    \ in nums.iter().skip(1) {\n        sum = sum.max(*num);\n        min = min.min(sum);\n\
    \    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0_97cz41.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::max_value();\n    let mut sum = 0;\n  \
    \  for (i, &v) in nums.iter().enumerate() {\n        for j in i..nums.len() {\n\
    \            sum += nums[j];\n            if sum < min {\n                min\
    \ = sum;\n            }\n        }\n        sum = 0;\n    }\n    min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut current_sum\
    \ = 0;\n    for x in nums {\n        current_sum += x;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut current_sum\
    \ = 0;\n    for num in nums {\n        current_sum += num;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_sum = nums[0];\n    let mut curr_sum = nums[0];\n    for i in 1..nums.len()\
    \ {\n        curr_sum = std::cmp::min(nums[i], curr_sum + nums[i]);\n        min_sum\
    \ = std::cmp::min(min_sum, curr_sum);\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ ans = nums[0];\n    let mut curr = 0;\n    for x in nums {\n        curr = x.max(curr\
    \ + x);\n        ans = ans.min(curr);\n    }\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmps_8pejj9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut cur_sum = 0;\n    let mut min_sum = nums[0];\n    for\
    \ num in nums {\n        cur_sum += num;\n        if cur_sum < min_sum {\n   \
    \         min_sum = cur_sum;\n        }\n        if cur_sum > 0 {\n          \
    \  cur_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ i in 0..nums.len() {\n        if nums[i] < min {\n            min = nums[i];\n\
    \        }\n        sum += nums[i];\n    }\n    if sum > 0 {\n        return min;\n\
    \    }\n    sum = 0;\n    let mut ans = std::isize::MAX;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < ans {\n            ans = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ return ans;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-5`,\n right: `-6`', /tmp/tmp0o0u1ygx.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ left = 0;\n    let mut right = 0;\n    let mut sum = 0;\n    let mut min_sum\
    \ = nums[0];\n    while right < nums.len() {\n        if sum > 0 {\n         \
    \   sum = nums[right];\n            left = right;\n        } else {\n        \
    \    sum += nums[right];\n        }\n        min_sum = min_sum.min(sum);\n   \
    \     right += 1;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Write your code here\n    let mut min_sum = nums[0];\n  \
    \  let mut sum = nums[0];\n    for i in 1..nums.len() {\n        sum = std::cmp::min(nums[i],\
    \ sum + nums[i]);\n        min_sum = std::cmp::min(min_sum, sum);\n    }\n   \
    \ min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // max negative number, place holder\n    let mut global_min\
    \ = std::isize::MIN;\n    // Iterate over the list of numbers\n    for i in 0..nums.len()\
    \ {\n        // Sum of the number\n        let mut sum = 0;\n        // Iterate\
    \ over the numbers behind that number\n        for j in i..nums.len() {\n    \
    \        // Add those numbers to the sum\n            sum += nums[j];\n      \
    \      // If the sum is bigger than the global minimum, update the global minimum\n\
    \            if sum < global_min {\n                global_min = sum;\n      \
    \      }\n        }\n    }\n    // Return the result\n    global_min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-9223372036854775808`,\n right: `1`', /tmp/tmpflo9x4zk.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut window = VecDeque::new();\n    let mut minimum = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for &number in nums.iter() {\n        sum += number;\n\
    \        window.push_back(number);\n        while sum < 0 {\n            sum -=\
    \ window.pop_front().unwrap();\n        }\n        minimum = minimum.min(sum);\n\
    \    }\n    minimum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n -->\
    \ /tmp/tmp2t32uu30.rs:7:22\n  |\n7 |     let mut window = VecDeque::new();\n \
    \ |                      ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::VecDeque;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sub_array_sum = isize::max_value();\n    let mut\
    \ curr_sub_array_sum = 0;\n    for n in nums {\n        if n < min_sub_array_sum\
    \ {\n            min_sub_array_sum = n;\n        }\n        curr_sub_array_sum\
    \ += n;\n        if curr_sub_array_sum < min_sub_array_sum {\n            min_sub_array_sum\
    \ = curr_sub_array_sum;\n        }\n        if curr_sub_array_sum > 0 {\n    \
    \        curr_sub_array_sum = 0;\n        }\n    }\n    min_sub_array_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut sum = 0;\n\
    \    for &num in nums.iter() {\n        sum += num;\n        min_sum = isize::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut prev_sum = 0;\n\
    \    for num in nums {\n        prev_sum = std::cmp::min(prev_sum + num, num);\n\
    \        min_sum = std::cmp::min(min_sum, prev_sum);\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut current_sum\
    \ = 0;\n    for num in nums {\n        current_sum += num;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut max_sum = nums[0];\n\
    \    let mut current_sum = nums[0];\n    for i in 1..nums.len() {\n        current_sum\
    \ += nums[i];\n        if current_sum < min_sum {\n            min_sum = current_sum;\n\
    \        }\n        if current_sum > max_sum {\n            max_sum = current_sum;\n\
    \        }\n    }\n    if max_sum < 0 {\n        max_sum\n    } else {\n     \
    \   min_sum\n    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpyun9q1jf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let min_sum = nums.iter().min().unwrap();\n    let mut min_non_empty_sum\
    \ = std::isize::MAX;\n    for sub_vec in nums.windows(2) {\n        let sum =\
    \ sub_vec.iter().sum();\n        if sum < min_non_empty_sum && sum > *min_sum\
    \ {\n            min_non_empty_sum = sum;\n        }\n    }\n    if min_non_empty_sum\
    \ == std::isize::MAX {\n        min_sum + 1\n    } else {\n        min_non_empty_sum\n\
    \    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpu4p3rktt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut curr_sum = 0;\n\
    \    for num in nums {\n        curr_sum += num;\n        if curr_sum < min_sum\
    \ {\n            min_sum = curr_sum;\n        }\n        if curr_sum > 0 {\n \
    \           curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::MAX;\n    let mut pmin = isize::MAX;\n\
    \    let mut sum = 0;\n    for n in nums {\n        sum += n;\n        min = min.min(sum\
    \ - pmin);\n        pmin = pmin.min(sum);\n    }\n    min\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-9223372036854775805`,\n right: `1`', /tmp/tmp3u2j2w73.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut current_sum = 0;\n    let mut min_sum = 0;\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut min_sum_i = 0;\n    let mut min_sum_j\
    \ = 0;\n    let mut finished = false;\n    while !finished {\n        if i ==\
    \ nums.len() {\n            finished = true;\n        } else {\n            if\
    \ current_sum + nums[i] > 0 {\n                current_sum += nums[i];\n     \
    \           i += 1;\n            } else {\n                if current_sum < min_sum\
    \ {\n                    min_sum = current_sum;\n                    min_sum_i\
    \ = j;\n                    min_sum_j = i;\n                }\n              \
    \  current_sum = 0;\n                j = i + 1;\n                i += 1;\n   \
    \         }\n        }\n    }\n    return min_sum;\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmppj40hoxr.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut min = std::isize::MAX;\n    for\
    \ i in 0..nums.len() {\n        for j in i..nums.len() {\n            for k in\
    \ i..j + 1 {\n                sum += nums[k];\n            }\n            if sum\
    \ < min {\n                min = sum;\n            }\n            sum = 0;\n \
    \       }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let (mut\
    \ min_sum, mut sum) = (nums[0], 0);\n    for num in nums {\n        sum += num;\n\
    \        min_sum = min_sum.min(sum);\n        if sum < 0 {\n            sum =\
    \ 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpwz9cw4u7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n   \
    \ for num in nums.iter().skip(1) {\n        sum = std::cmp::min(sum + num, *num);\n\
    \        min_sum = std::cmp::min(min_sum, sum);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::max_value();\n    let mut sum = 0;\n  \
    \  for (i, &n) in nums.iter().enumerate() {\n        sum += n;\n        if sum\
    \ < min {\n            min = sum;\n        }\n        for j in 0..i {\n      \
    \      sum -= nums[j];\n            if sum < min {\n                min = sum;\n\
    \            }\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-22`,\n right: `1`', /tmp/tmp75rlnx5m.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sub_array_sum = isize::MAX;\n    let mut current_sub_array_sum\
    \ = 0;\n    for num in nums {\n        current_sub_array_sum += num;\n       \
    \ if current_sub_array_sum < min_sub_array_sum {\n            min_sub_array_sum\
    \ = current_sub_array_sum;\n        }\n        if current_sub_array_sum > 0 {\n\
    \            current_sub_array_sum = 0;\n        }\n    }\n    min_sub_array_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ result = nums[0];\n    let mut curr_sum = nums[0];\n    for index in 1..nums.len()\
    \ {\n        if curr_sum > 0 {\n            curr_sum = nums[index];\n        }\
    \ else {\n            curr_sum += nums[index];\n        }\n        result = isize::min(result,\
    \ curr_sum);\n    }\n    result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = 0;\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        if sum < min {\n            min = sum;\n   \
    \     }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpy9dclrbc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ sum = nums[0];\n    let mut min_sum = sum;\n    for n in nums.iter().skip(1)\
    \ {\n        sum = if sum < 0 { *n } else { sum + n };\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5ob3fd0h.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // brute force\n    // let mut min = std::isize::MAX;\n    //\
    \ let mut sum = 0;\n    // let mut sum_all = 0;\n    // for num in nums.iter()\
    \ {\n    //     sum_all += num;\n    // }\n    // for i in 0..nums.len() {\n \
    \   //     for j in i..nums.len() {\n    //         sum = 0;\n    //         for\
    \ idx in i..=j {\n    //             sum += nums[idx];\n    //         }\n   \
    \ //         if sum < min {\n    //             min = sum;\n    //         }\n\
    \    //     }\n    // }\n    // if min < 0 {\n    //     min\n    // } else {\n\
    \    //     min.min(sum_all)\n    // }\n\n    // greedy\n    let mut min = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for num in nums.iter() {\n        sum += num;\n   \
    \     if sum < min {\n            min = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // current min sum\n    let mut minSum = std::isize::MAX;\n\
    \    // current sum\n    let mut sum = 0;\n    // iterate over nums\n    for num\
    \ in nums {\n        // increment sum\n        sum += num;\n        // update\
    \ minSum if appropriate\n        if sum < minSum {\n            minSum = sum;\n\
    \        }\n        // if current sum is less than 0\n        if sum < 0 {\n \
    \           // start from scratch\n            sum = 0;\n        }\n    }\n  \
    \  // return minSum\n    minSum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmph73f16hs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut ans = isize::max_value();\n    let mut current = 0;\n\
    \    for num in nums {\n        current = current.min(0) + num;\n        ans =\
    \ ans.min(current);\n    }\n    ans\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut start = 0;\n\
    \    let mut end = 0;\n    let mut sum = 0;\n    while end < nums.len() {\n  \
    \      sum += nums[end];\n        min_sum = min_sum.min(sum);\n        end +=\
    \ 1;\n        if sum > 0 {\n            sum = 0;\n            start = end;\n \
    \       }\n    }\n    return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut current_sum\
    \ = 0;\n    for num in nums {\n        current_sum += num;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut total = nums[0];\n \
    \   for i in 1..nums.len() {\n        total = total.min(0) + nums[i];\n      \
    \  min_sum = min_sum.min(total);\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ result = nums[0];\n    let mut current = nums[0];\n    for i in 1..nums.len()\
    \ {\n        let value = nums[i];\n        if current > 0 {\n            current\
    \ = value;\n        } else {\n            current += value;\n        }\n     \
    \   if current < result {\n            result = current;\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::max_value();\n    let mut curr = 0;\n \
    \   for i in 0..nums.len() {\n        curr += nums[i];\n        if curr < min\
    \ {\n            min = curr;\n        }\n        if curr > 0 {\n            curr\
    \ = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = 0;\n    let mut current_sum = 0;\n    let\
    \ mut global_min = nums[0];\n    for i in 0..nums.len() {\n        if current_sum\
    \ < 0 {\n            current_sum = 0;\n        }\n        current_sum += nums[i];\n\
    \        if current_sum > global_min {\n            global_min = current_sum;\n\
    \        }\n    }\n    global_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpjdjlpa8n.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut curr_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        curr_sum += nums[i];\n        if\
    \ curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n        if\
    \ curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::max_value();\n    let mut sum = 0;\n  \
    \  for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min {\n\
    \            min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let (mut min, mut count) = (nums[0], nums[0]);\n    for i in\
    \ 1..nums.len() {\n        count = count.min(0) + nums[i];\n        min = min.min(count);\n\
    \    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::max_value();\n    let mut sum = 0;\n  \
    \  for n in nums {\n        sum += n;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // calculate full sum\n    let mut sum = 0;\n    for i in nums.iter()\
    \ {\n        sum += i;\n    }\n\n    // iterate through Vec\n    let mut min_sum\
    \ = sum;\n    for i in 0..nums.len() {\n        let mut curr_sum = 0;\n      \
    \  for j in i..nums.len() {\n            curr_sum += nums[j];\n            if\
    \ curr_sum < min_sum {\n                min_sum = curr_sum;\n            }\n \
    \       }\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let len = nums.len();\n    let (mut current_sum, mut min_sum)\
    \ = (0, std::isize::MAX);\n    for i in 0..len {\n        current_sum += nums[i];\n\
    \        if current_sum < min_sum {\n            min_sum = current_sum;\n    \
    \    }\n        if current_sum > 0 {\n            current_sum = 0;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut res = std::isize::MAX;\n    let mut tmp = 0;\n    for\
    \ i in 0..nums.len() {\n        tmp += nums[i];\n        res = std::cmp::min(res,\
    \ tmp);\n        if tmp > 0 {\n            tmp = 0;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minSum = std::isize::MAX;\n    let mut sum = 0;\n  \
    \  for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < minSum\
    \ {\n            minSum = sum;\n        }\n        if sum > 0 {\n            sum\
    \ = 0;\n        }\n    }\n    minSum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    if nums.len()\
    \ == 1 {\n        return nums[0];\n    }\n    let mut a: isize = std::isize::MAX;\n\
    \    let mut m: isize = 0;\n    for i in 0..nums.len() {\n        m += nums[i];\n\
    \        if a > m {\n            a = m;\n        }\n        if m > 0 {\n     \
    \       m = 0;\n        }\n    }\n    a\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut curr_sum = 0;\n\
    \    for i in 0..nums.len() {\n        curr_sum += nums[i];\n        if curr_sum\
    \ < min_sum {\n            min_sum = curr_sum;\n        }\n        if curr_sum\
    \ > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut curr_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        curr_sum += nums[i];\n        if\
    \ curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n        if\
    \ curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    let mut running_sum\
    \ = 0;\n    for num in nums {\n        running_sum += num;\n        min_sum =\
    \ std::cmp::min(min_sum, running_sum);\n        if running_sum > 0 {\n       \
    \     running_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for i\
    \ in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum {\n  \
    \          min_sum = sum;\n        }\n        if sum > 0 {\n            sum =\
    \ 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut result = nums[0];\n    let mut sum = 0;\n    for n in\
    \ nums {\n        sum += n;\n        result = result.min(sum);\n        if sum\
    \ > 0 {\n            sum = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Do not do this!\n    // let mut min_sum = std::isize::MAX;\n\
    \    // let mut start = 0;\n    // while start < nums.len() {\n    //     let\
    \ mut sum = 0;\n    //     for end in start..nums.len() {\n    //         sum\
    \ += nums[end];\n    //         if sum < min_sum {\n    //             min_sum\
    \ = sum;\n    //         }\n    //     }\n    //     start += 1;\n    // }\n \
    \   // min_sum\n\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n\
    \    let mut start = 0;\n    let mut end = 0;\n    while end < nums.len() {\n\
    \        sum += nums[end];\n        if sum < min_sum {\n            min_sum =\
    \ sum;\n        }\n        if sum > 0 {\n            sum = 0;\n            start\
    \ = end + 1;\n        }\n        end += 1;\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // TODO: Implement the solution here\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdo9kc4t6.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut mini = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        mini = std::cmp::min(mini, sum);\n\
    \        if sum < 0 {\n            sum = 0;\n        }\n    }\n    mini\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpusvz2m1a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n    for n in nums\
    \ {\n        sum += n;\n        if sum < min {\n            min = sum;\n     \
    \   }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_sum = nums[0];\n    let mut sum = 0;\n    for num in nums {\n        sum\
    \ += num;\n        if sum < min_sum {\n            min_sum = sum;\n        }\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min = std::isize::MAX;\n    let mut sum = 0;\n    for &num in nums.iter() {\n\
    \        sum += num;\n        min = std::cmp::min(min, sum);\n        if sum >\
    \ 0 {\n            sum = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minSum = nums[0];\n    let mut sum = nums[0];\n    for\
    \ i in 1..nums.len() {\n        sum = sum.min(0) + nums[i];\n        minSum =\
    \ minSum.min(sum);\n    }\n    minSum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut cur_min = isize::MAX;\n    let mut cur_sum = 0;\n  \
    \  for num in nums {\n        cur_sum += num;\n        cur_min = cur_min.min(cur_sum);\n\
    \        cur_sum = cur_sum.max(0);\n    }\n    cur_min\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp62tez62p.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut min_sum = std::isize::MAX;\n \
    \   for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::MAX;\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n  \
    \      if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut current = nums[0];\n    let mut minimum = current;\n\
    \    for i in 1..nums.len() {\n        current = min(current + nums[i], nums[i]);\n\
    \        minimum = min(minimum, current);\n    }\n    minimum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpya2as_qk.rs:10:19\n\
    \   |\n10 |         current = min(current + nums[i], nums[i]);\n   |         \
    \          ^^^\n...\n16 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    10 |         current = main(current + nums[i], nums[i]);\n   |               \
    \    ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpya2as_qk.rs:11:19\n\
    \   |\n11 |         minimum = min(minimum, current);\n   |                   ^^^\n\
    ...\n16 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n11 |        \
    \ minimum = main(minimum, current);\n   |                   ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let (mut min_so_far, mut sum) = (nums[0], 0);\n    for &n in\
    \ nums.iter() {\n        sum += n;\n        min_so_far = min_so_far.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_so_far\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for num\
    \ in nums {\n        sum += num;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
