name: HumanEval_16_count_distinct_characters
language: rust
results:
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut hash_map = HashMap::new();\n    for character\
    \ in string.chars() {\n        hash_map.insert(character.to_lowercase().to_string(),\
    \ true);\n    }\n    hash_map.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpg4fqwslj.rs:7:24\n  |\n7 |     let mut hash_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counter = 0;\n    let mut set: HashSet<char>\
    \ = HashSet::new();\n    for char in string.chars() {\n        set.insert(char.to_lowercase().next().unwrap());\n\
    \    }\n    for _ in set {\n        counter += 1;\n    }\n    counter\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmps9ahdiiv.rs:8:18\n\
    \  |\n8 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmps9ahdiiv.rs:8:34\n  |\n8 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7hrt0psl.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvx1texv1.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp1mc1usd6.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    let mut found = vec![false;\
    \ 256];\n    for c in string.chars() {\n        let num = c as usize;\n      \
    \  if !found[num] {\n            count += 1;\n            found[num] = true;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpv8vg246m.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let lower_case_string = string.to_lowercase();\n   \
    \ let mut char_set = HashSet::new();\n    for c in lower_case_string.chars() {\n\
    \        char_set.insert(c);\n    }\n    char_set.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp61fd43pr.rs:8:24\n  |\n8 |     let mut char_set = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut characters: HashSet<char> = HashSet::new();\n\
    \    for character in string.chars() {\n        characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpgdxs627u.rs:7:25\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpgdxs627u.rs:7:41\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = string.chars().collect::<Vec<char>>();\n\
    \    chars.sort();\n    let mut count = 1;\n    let mut length = chars.len();\n\
    \    let mut prev = &chars[0];\n    for i in 1..length {\n        if prev.to_lowercase().to_string()\
    \ != chars[i].to_lowercase().to_string() {\n            count += 1;\n        }\n\
    \        prev = &chars[i];\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmp8yo4r4ra.rs:11:21\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = string.chars().map(|x| x.to_lowercase().next().unwrap()).collect::<Vec<char>>();\n\
    \    chars.sort();\n    chars.dedup();\n    chars.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut result = Vec::new();\n    let mut result_count\
    \ = 0;\n    for c in string.chars() {\n        if result.contains(&c.to_lowercase().to_string())\
    \ == false {\n            result.push(c.to_lowercase().to_string());\n       \
    \     result_count += 1;\n        }\n    }\n    result_count\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1xv611p5.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters = Vec::new();\n    for c\
    \ in string.chars() {\n        if !distinct_characters.contains(&c.to_lowercase().next().unwrap())\
    \ {\n            distinct_characters.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpbb612i6c.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpzyhqzlxw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    count_distinct_characters_imperative(string)\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `count_distinct_characters_imperative`\
    \ in this scope\n --> /tmp/tmpet_8gptq.rs:7:5\n  |\n7 |     count_distinct_characters_imperative(string)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<Vec<char>>().into_iter().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpkobw96ya.rs:7:80\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<Vec<char>>().into_iter().collect::<HashSet<char>>().len()\
    \ as isize\n  |                                                              \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_counts = HashMap::new();\n    for c in\
    \ string.chars() {\n        *char_counts.entry(c.to_ascii_lowercase()).or_insert(0)\
    \ += 1;\n    }\n    char_counts.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp9huhrvjw.rs:7:27\n  |\n7 |     let mut char_counts = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // todo\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `0`', /tmp/tmpx2ewjb86.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // initialize the set to store characters\n    let mut\
    \ set = std::collections::HashSet::new();\n    // use the collect iterator to\
    \ convert an iterator of chars to a set\n    set.extend(string.chars());\n   \
    \ set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp6bs89f9x.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut s: HashSet<char> = HashSet::new();\n    for\
    \ c in string.chars() {\n        s.insert(c.to_lowercase().nth(0).unwrap());\n\
    \    }\n    s.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmptsxcdms3.rs:7:16\n\
    \  |\n7 |     let mut s: HashSet<char> = HashSet::new();\n  |                ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `HashSet`\n --> /tmp/tmptsxcdms3.rs:7:32\n  |\n7 |     let\
    \ mut s: HashSet<char> = HashSet::new();\n  |                                ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n  return string.len() as isize;\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmp60ajuuom.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for c in string.chars()\
    \ {\n        set.insert(c.to_ascii_lowercase());\n    }\n    set.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9kc9txrq.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgyw03mhn.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut c_vec: Vec<char> = Vec::new();\n    let mut\
    \ dup_counter = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let length = string.len();\n\
    \    // Convert a string to a vector\n    c_vec = string.chars().collect();\n\
    \    // Sort the char vector, so that we can easily find dup chars in order\n\
    \    c_vec.sort();\n    while i < length {\n        // Find dups\n        j =\
    \ i + 1;\n        while j < length {\n            if c_vec[i] == c_vec[j] {\n\
    \                dup_counter += 1;\n            }\n            j += 1;\n     \
    \   }\n        i += 1;\n    }\n    (length - dup_counter) as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmphitaqzxb.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n  let mut already_met = HashSet::new();\n  let string =\
    \ string.to_lowercase();\n  let mut count = 0;\n  for c in string.chars() {\n\
    \    if !already_met.contains(&c) {\n      already_met.insert(c);\n      count\
    \ += 1;\n    }\n  }\n  count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp26s57hv4.rs:7:25\n  |\n7 |   let mut already_met = HashSet::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO\n    unimplemented!();\n}\n\nfn main() {\n \
    \   let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpl9kqmbxk.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters = HashSet::new();\n    for\
    \ c in string.chars() {\n        distinct_characters.insert(c.to_lowercase().to_string());\n\
    \    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1mv_jefu.rs:7:35\n  |\n7 |     let mut distinct_characters = HashSet::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct = string.to_lowercase();\n    distinct.sort();\n\
    \    distinct.dedup();\n    distinct.len() as isize\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpt73z8oey.rs:8:14\n  |\n8 |     distinct.sort();\n  |   \
    \           ^^^^ method not found in `String`\n\nerror[E0599]: no method named\
    \ `dedup` found for struct `String` in the current scope\n --> /tmp/tmpt73z8oey.rs:9:14\n\
    \  |\n9 |     distinct.dedup();\n  |              ^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut freq = [0; 26];\n    let mut count = 0;\n  \
    \  for i in string.bytes() {\n        let mut b = i;\n        if i >= 'a' as u8\
    \ && i <= 'z' as u8 {\n            b = i - 32;\n        }\n        if b >= 'A'\
    \ as u8 && b <= 'Z' as u8 {\n            if freq[(b - 'A' as u8) as usize] ==\
    \ 0 {\n                count += 1;\n            }\n            freq[(b - 'A' as\
    \ u8) as usize] += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpr_9c3uf5.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct = HashSet::new();\n    for c in string.chars()\
    \ {\n        distinct.insert(c.to_lowercase().next().unwrap());\n    }\n    distinct.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpmfp_4uca.rs:7:24\n  |\n7 |     let mut distinct = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut characters = HashSet::new();\n    for character\
    \ in string.chars() {\n        characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpsk0_tnzm.rs:7:26\n  |\n7 |     let mut characters = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_counts = HashMap::new();\n    for ch in\
    \ string.chars() {\n        char_counts.insert(ch.to_lowercase().to_string(),\
    \ 1);\n    }\n    char_counts.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp6_fa6uq8.rs:7:27\n  |\n7 |     let mut char_counts = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpoeciwkdu.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_chars = vec![];\n    let mut distinct_chars_count\
    \ = 0;\n    for c in string.chars() {\n        if distinct_chars.contains(&c.to_lowercase().to_string())\
    \ {\n            continue;\n        }\n        distinct_chars.push(c.to_lowercase().to_string());\n\
    \        distinct_chars_count += 1;\n    }\n    distinct_chars_count\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct = isize::new();\n    // write your\
    \ code here\n    distinct\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `new` found for type\
    \ `isize` in the current scope\n --> /tmp/tmp9rskxt5z.rs:7:31\n  |\n7 |     let\
    \ mut distinct = isize::new();\n  |                               ^^^ function\
    \ or associated item not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut counts = BTreeMap::new();\n    for c in string.chars()\
    \ {\n        let cc = c.to_lowercase().next().unwrap();\n        *counts.entry(cc).or_insert(0)\
    \ += 1;\n    }\n    counts.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeMap`\n -->\
    \ /tmp/tmprkoqf0ih.rs:7:22\n  |\n7 |     let mut counts = BTreeMap::new();\n \
    \ |                      ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsief9kk6.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut characters = HashSet::new();\n    for character\
    \ in string.chars() {\n        characters.insert(character.to_ascii_lowercase());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqy7ylf84.rs:7:26\n  |\n7 |     let mut characters = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgxzs6bxr.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().unique().count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unique` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp__7d5azs.rs:7:35\n  |\n7 |     string.to_lowercase().chars().unique().count()\
    \ as isize\n  |                                   ^^^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for c in string.chars()\
    \ {\n        set.insert(c.to_lowercase().to_string());\n    }\n    set.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp0aub_z_4.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpigzii2g3.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count: isize = 0;\n    let mut chars: Vec<char>\
    \ = Vec::new();\n    for c in string.chars() {\n        if !chars.contains(&c.to_lowercase().to_string().chars().nth(0).unwrap())\
    \ {\n            chars.push(c.to_lowercase().to_string().chars().nth(0).unwrap());\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let string = string.to_lowercase();\n    let mut chars\
    \ = string.chars();\n    let mut distinct = vec![];\n    while let Some(c) = chars.next()\
    \ {\n        if !distinct.contains(&c) {\n            distinct.push(c);\n    \
    \    }\n    }\n    return distinct.len() as isize;\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let c: Vec<_> = string.chars().collect();\n    let mut\
    \ set: HashSet<char> = HashSet::new();\n    for i in c {\n        set.insert(i);\n\
    \    }\n    return set.len() as isize;\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpzmyl8l7h.rs:8:18\n\
    \  |\n8 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpzmyl8l7h.rs:8:34\n  |\n8 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut characters: HashSet<char> = HashSet::new();\n\
    \    for c in string.chars() {\n        characters.insert(c.to_lowercase().nth(0).unwrap());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpa1hj91xe.rs:7:25\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpa1hj91xe.rs:7:41\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n  unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3roc694b.rs:7:3\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for ch in string.chars()\
    \ {\n        set.insert(ch.to_lowercase().next().unwrap());\n    }\n    set.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpi7nau6jo.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let characters: Vec<char> = string.chars().collect();\n\
    \    let mut distinct: HashSet<char> = HashSet::new();\n    for character in characters\
    \ {\n        distinct.insert(character.to_lowercase().nth(0).unwrap());\n    }\n\
    \    distinct.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp8s_nx0ju.rs:8:23\n\
    \  |\n8 |     let mut distinct: HashSet<char> = HashSet::new();\n  |         \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8s_nx0ju.rs:8:39\n\
    \  |\n8 |     let mut distinct: HashSet<char> = HashSet::new();\n  |         \
    \                              ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpf6jdb1pn.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut total = 0;\n    let mut chars = HashSet::new();\n\
    \    for character in string.to_lowercase().chars() {\n        if !chars.contains(&character)\
    \ {\n            chars.insert(character);\n            total += 1;\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpa0xwxi2a.rs:8:21\n  |\n8 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsclhsri0.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashSet::new();\n    for c in string.chars()\
    \ {\n        let key = c.to_lowercase().to_string();\n        chars.insert(key);\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmptl0jsieo.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let vec: Vec<char> = string.chars().collect();\n   \
    \ let mut unique_vec: Vec<char> = vec.clone();\n    unique_vec.dedup();\n    unique_vec.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpx_qsu9k0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars: HashSet<char> = HashSet::new();\n   \
    \ for c in string.chars() {\n        chars.insert(c.to_lowercase().nth(0).unwrap());\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp1qp5tpce.rs:7:20\n\
    \  |\n7 |     let mut chars: HashSet<char> = HashSet::new();\n  |            \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp1qp5tpce.rs:7:36\n  |\n7 |  \
    \   let mut chars: HashSet<char> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut freq = HashMap::new();\n    for c in string.chars()\
    \ {\n        let lc = c.to_lowercase().next().unwrap();\n        if freq.contains_key(&lc)\
    \ {\n            freq.insert(lc, freq.get(&lc).unwrap() + 1);\n        } else\
    \ {\n            freq.insert(lc, 1);\n        }\n    }\n    freq.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpy2qpn03i.rs:7:20\n  |\n7 |     let mut freq = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwlczd4g_.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO: Implement it!\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2mttgalr.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashSet::new();\n    for character in\
    \ string.chars() {\n        chars.insert(character.to_lowercase().to_string());\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp3tgjjdqd.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_chars = String::new();\n    for ch\
    \ in string.chars() {\n        if !distinct_chars.contains(ch) {\n           \
    \ distinct_chars.push(ch);\n        }\n    }\n    distinct_chars.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpa6ed48jq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for c in string.chars()\
    \ {\n        let case_insensitive_char = c.to_lowercase().next().unwrap();\n \
    \       set.insert(case_insensitive_char);\n    }\n    set.len() as isize\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpaer4kly6.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_9__q2wa.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut res = 0;\n    let mut s = string.to_lowercase();\n\
    \    while s.len() > 0 {\n        let c = s.pop().unwrap();\n        if !s.contains(c)\
    \ {\n            res += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    return string.chars().map(|c| c.to_ascii_lowercase()).distinct().count()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `distinct` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpkgzypl54.rs:7:59\n  |\n7 |     return string.chars().map(|c|\
    \ c.to_ascii_lowercase()).distinct().count() as isize;\n  |                  \
    \                                         ^^^^^^^^ method not found in `Map<Chars<'_>,\
    \ [closure@/tmp/tmpkgzypl54.rs:7:31: 7:57]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmppa773o_k.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut s = string.to_lowercase();\n    let mut distinct_chars\
    \ = Vec::new();\n    s.retain(|c| {\n        if !distinct_chars.contains(&c) {\n\
    \            distinct_chars.push(c);\n            true\n        } else {\n   \
    \         false\n        }\n    });\n    distinct_chars.len() as isize\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_set = Set::new();\n    for char in string.chars()\
    \ {\n        char_set.insert(char.to_lowercase().next().unwrap());\n    }\n  \
    \  char_set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmp_ahub4hp.rs:7:24\n\
    \  |\n7 |     let mut char_set = Set::new();\n  |                        ^^^ use\
    \ of undeclared type `Set`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_set = BTreeSet::new();\n    for c in string.chars()\
    \ {\n        char_set.insert(c.to_lowercase().next().unwrap());\n    }\n    char_set.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpw4hwtuil.rs:7:24\n  |\n7 |     let mut char_set = BTreeSet::new();\n\
    \  |                        ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpsclr83ab.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n  unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp20us1ti.rs:7:3\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbcu_q904.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let string_lowercase = string.to_lowercase();\n    let\
    \ characters = string_lowercase.chars().collect::<Vec<char>>();\n    let count\
    \ = characters.iter().collect::<HashSet<_>>().len();\n    count as isize\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp_1836ejv.rs:9:45\n\
    \  |\n9 |     let count = characters.iter().collect::<HashSet<_>>().len();\n \
    \ |                                             ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmptp_dvtgy.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpmkc7g2n4.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    if string.is_empty() {\n        return 0;\n    }\n \
    \   let mut set = BTreeSet::new();\n    for c in string.chars() {\n        set.insert(c.to_lowercase().to_string());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n  -->\
    \ /tmp/tmpob56p5cl.rs:10:19\n   |\n10 |     let mut set = BTreeSet::new();\n \
    \  |                   ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::BTreeSet;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().map(|c| c.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpu5fmqas6.rs:7:68\n\
    \  |\n7 |     string.chars().map(|c| c.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize\n  |                                                              \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // todo\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `0`', /tmp/tmpxmeyx540.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut jerry: Vec<String> = Vec::new();\n    for c\
    \ in string.to_lowercase().chars() {\n        jerry.push(c.to_string());\n   \
    \ }\n    jerry.sort();\n    jerry.dedup();\n    jerry.len() as isize\n}\n\nfn\
    \ main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut i: isize = 0;\n    let mut map: HashMap<char,\
    \ bool> = HashMap::new();\n    for c in string.chars() {\n        if !map.contains_key(&c.to_lowercase().next().unwrap())\
    \ {\n            map.insert(c.to_lowercase().next().unwrap(), true);\n       \
    \     i += 1;\n        }\n    }\n    i\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpjuw72wq8.rs:8:18\n\
    \  |\n8 |     let mut map: HashMap<char, bool> = HashMap::new();\n  |        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpjuw72wq8.rs:8:40\n\
    \  |\n8 |     let mut map: HashMap<char, bool> = HashMap::new();\n  |        \
    \                                ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO: return the number of distinct characters in\
    \ the string.\n    // Hint: \"Rust std library\" -> \"Char\"\n    return 0;\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpeuiznwj8.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpgz85u5r1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6smw_ojw.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars: Vec<char> = string.chars().collect();\n\
    \    chars.sort();\n    let mut distinct_chars: Vec<char> = Vec::new();\n    for\
    \ i in 0..chars.len() {\n        if i == 0 {\n            distinct_chars.push(chars[i]);\n\
    \        } else if chars[i] != chars[i - 1] {\n            distinct_chars.push(chars[i]);\n\
    \        }\n    }\n    distinct_chars.len() as isize\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpna33jyms.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut result = HashSet::new();\n    for item in string.chars()\
    \ {\n        result.insert(item.to_lowercase().to_string());\n    }\n    result.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpcmc3ra2d.rs:7:22\n  |\n7 |     let mut result = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut checker = HashSet::new();\n    let mut counter\
    \ = 0;\n    for c in string.chars() {\n        if checker.contains(&c.to_lowercase().to_string())\
    \ {\n            continue;\n        }\n        checker.insert(c.to_lowercase().to_string());\n\
    \        counter += 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpc3o_ijfq.rs:7:23\n  |\n7 |     let mut checker = HashSet::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().fold(HashSet::new(), |mut acc, x| {\n\
    \        acc.insert(x.to_lowercase().next().unwrap());\n        acc\n    }).len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpltoroiai.rs:7:25\n  |\n7 |     string.chars().fold(HashSet::new(), |mut\
    \ acc, x| {\n  |                         ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut dist_char: HashSet<char> = HashSet::new();\n\
    \    for c in string.chars() {\n        dist_char.insert(c.to_lowercase().to_string().chars().nth(0).unwrap());\n\
    \    }\n    return dist_char.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp1vij_423.rs:7:24\n\
    \  |\n7 |     let mut dist_char: HashSet<char> = HashSet::new();\n  |        \
    \                ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1vij_423.rs:7:40\n\
    \  |\n7 |     let mut dist_char: HashSet<char> = HashSet::new();\n  |        \
    \                                ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut map = HashMap::new();\n    for char in string.chars()\
    \ {\n        let c = char.to_lowercase().next().unwrap();\n        let counter\
    \ = map.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    map.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpi1amicrk.rs:7:19\n  |\n7 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let unique_chars: HashSet<char> = string.chars().collect();\n\
    \    unique_chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp37mylrun.rs:7:23\n\
    \  |\n7 |     let unique_chars: HashSet<char> = string.chars().collect();\n  |\
    \                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // FIXME\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpp8ulkccm.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let set: HashSet<char> = string.chars().collect();\n\
    \    return set.len() as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpry6vi_6i.rs:7:14\n\
    \  |\n7 |     let set: HashSet<char> = string.chars().collect();\n  |        \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().fold(HashSet::new(), |mut acc, c| {\n\
    \        acc.insert(c.to_lowercase().next().unwrap());\n        acc\n    }).len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmprdgjbn11.rs:7:25\n  |\n7 |     string.chars().fold(HashSet::new(), |mut\
    \ acc, c| {\n  |                         ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9fgcst3q.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpmamyar_y.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = string.chars().collect::<Vec<char>>();\n\
    \    chars.sort();\n    let chars = chars.into_iter().filter(|&c| c.is_alphabetic()).map(|c|\
    \ c.to_lowercase().nth(0).unwrap()).collect::<HashSet<char>>();\n    chars.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpccnuojhh.rs:9:118\n\
    \  |\n9 |     let chars = chars.into_iter().filter(|&c| c.is_alphabetic()).map(|c|\
    \ c.to_lowercase().nth(0).unwrap()).collect::<HashSet<char>>();\n  |         \
    \                                                                            \
    \                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3c38yi1u.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distict_characters: isize = 0;\n    let mut\
    \ distinct_character_vec: Vec<char> = Vec::new();\n    for c in string.chars()\
    \ {\n        if !distinct_character_vec.contains(&c.to_lowercase().next().unwrap())\
    \ {\n            distinct_character_vec.push(c.to_lowercase().next().unwrap());\n\
    \            distict_characters += 1;\n        }\n    }\n    distict_characters\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for c in string.chars()\
    \ {\n        set.insert(c.to_lowercase().next().unwrap());\n    }\n    set.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpaybgoqgn.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx54tju0i.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let chars: HashSet<char> = string.chars().collect();\n\
    \    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpxelnoicq.rs:7:16\n\
    \  |\n7 |     let chars: HashSet<char> = string.chars().collect();\n  |      \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut isize_map: HashMap<char, isize> = HashMap::new();\n\
    \    let mut count: isize = 0;\n    for c in string.chars() {\n        let c_lower\
    \ = c.to_lowercase().collect::<Vec<char>>()[0];\n        if !isize_map.contains_key(&c_lower)\
    \ {\n            isize_map.insert(c_lower, 0);\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp98a2yfkt.rs:7:24\n\
    \  |\n7 |     let mut isize_map: HashMap<char, isize> = HashMap::new();\n  | \
    \                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp98a2yfkt.rs:7:47\n\
    \  |\n7 |     let mut isize_map: HashMap<char, isize> = HashMap::new();\n  | \
    \                                              ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpc742_o2_.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    return string.chars().collect::<HashSet<char>>().len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpds6jak56.rs:7:37\n\
    \  |\n7 |     return string.chars().collect::<HashSet<char>>().len() as isize;\n\
    \  |                                     ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut hash: HashSet<char> = HashSet::new();\n    for\
    \ c in string.chars() {\n        hash.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    hash.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpw2zw2c9m.rs:7:19\n\
    \  |\n7 |     let mut hash: HashSet<char> = HashSet::new();\n  |             \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpw2zw2c9m.rs:7:35\n  |\n7 |  \
    \   let mut hash: HashSet<char> = HashSet::new();\n  |                       \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set: HashSet<char> = HashSet::new();\n    for\
    \ c in string.chars() {\n        set.insert(c.to_lowercase().next().unwrap());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpwmv58fi7.rs:7:18\n\
    \  |\n7 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpwmv58fi7.rs:7:34\n  |\n7 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars_seen = HashSet::new();\n    for character\
    \ in string.chars() {\n        chars_seen.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    chars_seen.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpd089ed7c.rs:7:26\n  |\n7 |     let mut chars_seen = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars: Vec<char> = string.to_lowercase().chars().collect();\n\
    \    chars.sort();\n    chars.dedup();\n    return chars.len() as isize;\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for ch in string.chars()\
    \ {\n        let char_in_uppercase = ch.to_uppercase().collect::<String>();\n\
    \        let char_in_lowercase = ch.to_lowercase().collect::<String>();\n    \
    \    set.insert(char_in_uppercase);\n        set.insert(char_in_lowercase);\n\
    \    }\n    return set.len() as isize;\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmparf6nwqw.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashSet::new();\n    let mut count =\
    \ 0;\n    for ch in string.chars() {\n        let lowercase = ch.to_lowercase().collect::<String>();\n\
    \        if !chars.contains(&lowercase) {\n            chars.insert(lowercase);\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpof77yl40.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn2qbc_vi.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().collect::<HashSet<char>>().len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp02kt8wzp.rs:7:30\n\
    \  |\n7 |     string.chars().collect::<HashSet<char>>().len() as isize\n  |  \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmprq72vjiz.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn8g9t9e7.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut dict = HashMap::new();\n    for c in string.chars()\
    \ {\n        dict.insert(c.to_ascii_lowercase(), 1);\n    }\n    return dict.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpnv78cgji.rs:7:20\n  |\n7 |     let mut dict = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters: Vec<char> = Vec::new();\n\
    \    let mut distinct_characters_index: usize = 0;\n    let mut first_character_seen\
    \ = false;\n    let mut second_character_seen = false;\n    let mut third_character_seen\
    \ = false;\n    let mut fourth_character_seen = false;\n    let mut fifth_character_seen\
    \ = false;\n    let mut sixth_character_seen = false;\n    let mut seventh_character_seen\
    \ = false;\n    let mut eighth_character_seen = false;\n    let mut ninth_character_seen\
    \ = false;\n    let mut tenth_character_seen = false;\n    let mut eleventh_character_seen\
    \ = false;\n    let mut twelfth_character_seen = false;\n    let mut thirteenth_character_seen\
    \ = false;\n    let mut fourteenth_character_seen = false;\n    let mut fifteenth_character_seen\
    \ = false;\n    let mut sixteenth_character_seen = false;\n    let mut seventeenth_character_seen\
    \ = false;\n    let mut eighteenth_character_seen = false;\n    let mut nineteenth_character_seen\
    \ = false;\n    let mut twentieth_character_seen = false;\n    let mut twenty_first_character_seen\
    \ = false;\n    let mut twenty_second_character_seen = false;\n    let mut twenty_third_character_seen\
    \ = false;\n    let mut twenty_fourth_character_seen = false;\n    let mut twenty_fifth_character_seen\
    \ = false;\n    let mut twenty_sixth_character_seen = false;\n    let mut twenty_seventh_character_seen\
    \ = false;\n    let mut twenty_eighth_character_seen = false;\n    let mut twenty_ninth_character_seen\
    \ = false;\n    let mut thirtieth_character_seen = false;\n    let mut thirty_first_character_seen\
    \ = false;\n    let mut thirty_second_character_seen = false;\n    let mut thirty_third_character_seen\
    \ = false;\n    let mut thirty_fourth_character_seen = false;\n    let mut thirty_fifth_character_seen\
    \ = false;\n    let mut thirty_sixth_character_seen = false;\n\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfdtao5kx.rs:6:49\n  |\n6 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------\
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for c in string.to_lowercase().chars()\
    \ {\n        set.insert(c);\n    }\n    set.len() as isize\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpn3w472uz.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // your code here!\n    0\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmptvwm2tng.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdko9e2jn.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let string_vec: Vec<char> = string.chars().collect();\n\
    \    let string_len = string_vec.len();\n    let mut distinct_char_count = 0;\n\
    \    for i in 0..string_len {\n        let mut char_found = false;\n        for\
    \ j in 0..i {\n            if string_vec[i].to_ascii_lowercase() == string_vec[j].to_ascii_lowercase()\
    \ {\n                char_found = true;\n                break;\n            }\n\
    \        }\n        if !char_found {\n            distinct_char_count += 1;\n\
    \        }\n    }\n    distinct_char_count as isize\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqr88ops9.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let chars: Vec<char> = string.chars().collect();\n \
    \   let unique_chars: HashSet<char> = chars.iter().cloned().collect();\n    unique_chars.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpuhu476sw.rs:8:23\n\
    \  |\n8 |     let unique_chars: HashSet<char> = chars.iter().cloned().collect();\n\
    \  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let lowercase_string = string.to_lowercase();\n    let\
    \ mut distinct_characters = HashSet::new();\n    for c in lowercase_string.chars()\
    \ {\n        distinct_characters.insert(c);\n    }\n    return distinct_characters.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp8ntx6ajk.rs:8:35\n  |\n8 |     let mut distinct_characters = HashSet::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut seen = HashSet::new();\n    for letter in string.chars()\
    \ {\n        seen.insert(letter.to_lowercase().next().unwrap());\n    }\n    return\
    \ seen.len() as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpigquddd3.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().fold(HashSet::new(), |mut char_set, c|\
    \ {\n        char_set.insert(c.to_lowercase().to_string());\n        char_set\n\
    \    }).len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmprrvroga8.rs:7:25\n  |\n7 |     string.chars().fold(HashSet::new(), |mut\
    \ char_set, c| {\n  |                         ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().collect::<HashSet<char>>().len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpl213425p.rs:7:30\n\
    \  |\n7 |     string.chars().collect::<HashSet<char>>().len() as isize\n  |  \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // Your code here!\n    0\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpoa6w6zqm.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi2pkhdej.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct = String::new();\n    for c in string.chars()\
    \ {\n        let uc = c.to_uppercase().next().unwrap();\n        if !distinct.contains(uc)\
    \ {\n            distinct.push(uc);\n        }\n    }\n    distinct.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = HashMap::new();\n    let chars = string.chars();\n\
    \    for c in chars {\n        let key = c.to_lowercase().next().unwrap();\n \
    \       *count.entry(key).or_insert(0) += 1;\n    }\n    count.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmphsfq3kak.rs:7:21\n  |\n7 |     let mut count = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp586rs9kx.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count = 0;\n    let mut set: HashSet<char> =\
    \ HashSet::new();\n    for c in string.chars() {\n        let lowercase_c = c.to_lowercase().collect::<Vec<char>>()[0];\n\
    \        if !set.contains(&lowercase_c) {\n            count += 1;\n         \
    \   set.insert(lowercase_c);\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpbazldfj6.rs:8:18\n\
    \  |\n8 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpbazldfj6.rs:8:34\n  |\n8 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_jjktqas.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyxmbs2eb.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let lower_string = string.to_lowercase();\n    let mut\
    \ character_counts = HashMap::new();\n    for c in lower_string.chars() {\n  \
    \      let x = character_counts.entry(c).or_insert(0);\n        *x += 1;\n   \
    \ }\n    character_counts.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpo8_vnq9z.rs:8:32\n  |\n8 |     let mut character_counts = HashMap::new();\n\
    \  |                                ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for c in string.chars()\
    \ {\n        set.insert(c.to_lowercase().next().unwrap());\n    }\n    set.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpf81_cg0v.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut cache = BTreeSet::new();\n    for c in string.chars()\
    \ {\n        cache.insert(c.to_lowercase().to_string());\n    }\n    cache.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpv5yctr62.rs:7:21\n  |\n7 |     let mut cache = BTreeSet::new();\n  |\
    \                     ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpnp35wou6.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let string_chars: Vec<char> = string.chars().collect();\n\
    \    let characters: HashSet<char> = string_chars.iter().cloned().collect();\n\
    \    let count: isize = characters.len() as isize;\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpl58nhp1f.rs:8:21\n\
    \  |\n8 |     let characters: HashSet<char> = string_chars.iter().cloned().collect();\n\
    \  |                     ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp4j1oizv9.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut result: isize = 0;\n    let mut string = string.clone();\n\
    \    string.make_ascii_lowercase();\n    for i in 0..string.len() {\n        if\
    \ string.find(string.get(i..i + 1).unwrap()).unwrap() == i {\n            result\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpuw5qpkjo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct = 0;\n    let mut distinct_characters\
    \ = Vec::new();\n    for character in string.chars() {\n        if !distinct_characters.contains(&character.to_ascii_lowercase())\
    \ {\n            distinct_characters.push(character.to_ascii_lowercase());\n \
    \           distinct += 1;\n        }\n    }\n    distinct\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmps85jmok3.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n  // collect the string into a vector of characters\n  let\
    \ char_vec: Vec<char> = string.chars().collect();\n  // use a set to record the\
    \ distinct characters\n  let mut distinct_char_set: HashSet<char> = HashSet::new();\n\
    \  for c in char_vec {\n    distinct_char_set.insert(c);\n  }\n  // get the size\
    \ of the set to get the # of distinct chars\n  distinct_char_set.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpoyda53b7.rs:10:30\n\
    \   |\n10 |   let mut distinct_char_set: HashSet<char> = HashSet::new();\n   |\
    \                              ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpoyda53b7.rs:10:46\n\
    \   |\n10 |   let mut distinct_char_set: HashSet<char> = HashSet::new();\n   |\
    \                                              ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpls0ylpgb.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpkznsqbw6.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut characters: HashSet<char> = HashSet::new();\n\
    \    for character in string.chars() {\n        characters.insert(character.to_lowercase().to_string().chars().next().unwrap());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7atnvhar.rs:7:25\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp7atnvhar.rs:7:41\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut characters: Vec<char> = Vec::new();\n    for\
    \ c in string.chars() {\n        if !characters.contains(&c.to_lowercase().collect::<Vec<char>>()[0])\
    \ {\n            characters.push(c.to_lowercase().collect::<Vec<char>>()[0]);\n\
    \        }\n    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().unique().count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unique` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpc9ggqtmu.rs:7:35\n  |\n7 |     string.to_lowercase().chars().unique().count()\
    \ as isize\n  |                                   ^^^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptiiddc2d.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = string.chars().collect::<Vec<char>>();\n\
    \    chars.sort();\n    chars.dedup();\n    chars.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpsvlzjtcq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters: Vec<char> = Vec::new();\n\
    \    for c in string.chars() {\n        if !distinct_characters.contains(&c.to_lowercase().to_string().chars().next().unwrap())\
    \ {\n            distinct_characters.push(c.to_lowercase().to_string().chars().next().unwrap());\n\
    \        }\n    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().fold(HashSet::new(), |mut acc, c| {\n\
    \        acc.insert(c.to_lowercase().next().unwrap());\n        acc\n    }).len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpszvcisfg.rs:7:25\n  |\n7 |     string.chars().fold(HashSet::new(), |mut\
    \ acc, c| {\n  |                         ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for ch in string.chars()\
    \ {\n        set.insert(ch.to_ascii_lowercase());\n    }\n    set.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpfo0ottb5.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let lower_case = string.to_lowercase();\n    let mut\
    \ distinct_chars = Vec::new();\n    let mut distinct_chars_count = 0;\n    for\
    \ c in lower_case.chars() {\n        if !distinct_chars.contains(&c) {\n     \
    \       distinct_chars.push(c);\n            distinct_chars_count += 1;\n    \
    \    }\n    }\n    distinct_chars_count\n}\n\nfn main() {\n    let candidate =\
    \ count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let char_set: HashSet<_> = string.chars().collect();\n\
    \    char_set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmppurgh03l.rs:7:19\n\
    \  |\n7 |     let char_set: HashSet<_> = string.chars().collect();\n  |      \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashSet::new();\n    for c in string.chars()\
    \ {\n        chars.insert(c.to_lowercase().collect::<String>());\n    }\n    chars.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpby3zt6_n.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().map(|c| c.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpr3folkra.rs:7:68\n\
    \  |\n7 |     string.chars().map(|c| c.to_lowercase().to_string()).collect::<HashSet<String>>().len()\
    \ as isize\n  |                                                              \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set: HashSet<char> = HashSet::new();\n    for\
    \ ch in string.chars() {\n        set.insert(ch.to_lowercase().next().unwrap());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpnmrwupkl.rs:7:18\n\
    \  |\n7 |     let mut set: HashSet<char> = HashSet::new();\n  |              \
    \    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpnmrwupkl.rs:7:34\n  |\n7 |  \
    \   let mut set: HashSet<char> = HashSet::new();\n  |                        \
    \          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut seen = HashSet::new();\n    for c in string.chars()\
    \ {\n        seen.insert(c.to_lowercase().to_string());\n    }\n    return seen.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpocs9zri5.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // substring_indices(some_string) returns a vector of\
    \ tuples of indices of all the substrings which have already appeared before in\
    \ a given string.\n    // For e.g.  if the given string is \"abcabcabc\", then\
    \ substring_indices(string) will return [(0, 3), (3, 6), (6, 9)]\n\n    let mut\
    \ substring_indices: Vec<(usize, usize)> = Vec::new();\n    let mut curr_index\
    \ = 0;\n    while curr_index < string.len() {\n        let mut matched = false;\n\
    \        for &(start, end) in &substring_indices {\n            if &string[start..end]\
    \ == &string[curr_index..curr_index + (end - start)] {\n                substring_indices.push((curr_index,\
    \ curr_index + (end - start)));\n                curr_index += (end - start);\n\
    \                matched = true;\n                break;\n            }\n    \
    \    }\n        if !matched {\n            substring_indices.push((curr_index,\
    \ curr_index + 1));\n            curr_index += 1;\n        }\n    }\n    substring_indices.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpf4iy99te.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars: HashSet<char> = HashSet::new();\n   \
    \ for c in string.chars() {\n        chars.insert(c.to_lowercase().nth(0).unwrap());\n\
    \    }\n    chars.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpuewf5d3x.rs:7:20\n\
    \  |\n7 |     let mut chars: HashSet<char> = HashSet::new();\n  |            \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpuewf5d3x.rs:7:36\n  |\n7 |  \
    \   let mut chars: HashSet<char> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let chars = string.chars().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    let mut d = Vec::new();\n    for c in chars {\n     \
    \   if !d.contains(&c.to_lowercase().to_string()) {\n            d.push(c.to_lowercase().to_string());\n\
    \            i = i + 1;\n        }\n    }\n    i\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2hph3l6o.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpir5vi3e1.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut characters: HashSet<char> = HashSet::new();\n\
    \    for character in string.chars() {\n        characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    return characters.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpd354dk8m.rs:7:25\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpd354dk8m.rs:7:41\n\
    \  |\n7 |     let mut characters: HashSet<char> = HashSet::new();\n  |       \
    \                                  ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO: complete implementation\n    0\n}\n\nfn main()\
    \ {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp5ot1n6ta.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n  let mut sorted_string = string.to_lowercase();\n  sorted_string.sort_by(|a,\
    \ b| a.cmp(b));\n  sorted_string.dedup();\n  sorted_string.len() as isize\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `String` in the\
    \ current scope\n --> /tmp/tmphwst363y.rs:8:17\n  |\n8 |   sorted_string.sort_by(|a,\
    \ b| a.cmp(b));\n  |                 ^^^^^^^ method not found in `String`\n\n\
    error[E0599]: no method named `dedup` found for struct `String` in the current\
    \ scope\n --> /tmp/tmphwst363y.rs:9:17\n  |\n9 |   sorted_string.dedup();\n  |\
    \                 ^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set = HashSet::new();\n    for character in\
    \ string.chars() {\n        set.insert(character.to_lowercase().collect::<String>());\n\
    \    }\n    set.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp7ac0w1is.rs:7:19\n  |\n7 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3x7xby2e.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.to_lowercase().chars().collect::<HashSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpjazc9npd.rs:7:45\n\
    \  |\n7 |     string.to_lowercase().chars().collect::<HashSet<char>>().len() as\
    \ isize\n  |                                             ^^^^^^^ not found in\
    \ this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpan0ae1w5.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // unimplemented!()\n    let mut res: Vec<char> = Vec::new();\n\
    \    let mut res2: Vec<char> = Vec::new();\n    for c in string.chars() {\n  \
    \      if c.is_lowercase() {\n            res.push(c);\n        } else {\n   \
    \         res2.push(c);\n        }\n    }\n    res.sort();\n    res2.sort();\n\
    \    for i in res2.iter() {\n        let mut flg = false;\n        for j in res.iter()\
    \ {\n            if i.to_lowercase().to_string() == j.to_string() {\n        \
    \        flg = true;\n            }\n        }\n        if !flg {\n          \
    \  res.push(*i);\n        }\n    }\n    res.len() as isize\n}\n\nfn main() {\n\
    \    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp6hg6wr1l.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters = 0;\n    let mut unique_characters\
    \ = HashSet::new();\n    for character in string.chars() {\n        unique_characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    distinct_characters = unique_characters.len() as isize;\n    distinct_characters\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpdj10occn.rs:8:33\n  |\n8 |     let mut unique_characters = HashSet::new();\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut set: HashSet<_> = string.chars().collect();\n\
    \    return set.len() as isize;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp4n6ole54.rs:7:18\n\
    \  |\n7 |     let mut set: HashSet<_> = string.chars().collect();\n  |       \
    \           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut string_vec: Vec<char> = Vec::new();\n    for\
    \ character in string.chars() {\n        string_vec.push(character);\n    }\n\
    \    let mut char_set: HashSet<char> = HashSet::new();\n    for character in string_vec\
    \ {\n        char_set.insert(character);\n    }\n    char_set.len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp_jk14y0c.rs:11:23\n\
    \   |\n11 |     let mut char_set: HashSet<char> = HashSet::new();\n   |      \
    \                 ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp_jk14y0c.rs:11:39\n\
    \   |\n11 |     let mut char_set: HashSet<char> = HashSet::new();\n   |      \
    \                                 ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    return string.len() as isize;\n}\n\nfn main() {\n  \
    \  let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `5`', /tmp/tmpjmpkgmpr.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().collect::<HashSet<char>>().len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmplah3vsn3.rs:7:30\n\
    \  |\n7 |     string.chars().collect::<HashSet<char>>().len() as isize\n  |  \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count: isize = 0;\n    let mut letters: Vec<char>\
    \ = Vec::new();\n    let string = string.to_lowercase();\n    for c in string.chars()\
    \ {\n        if !letters.contains(&c) {\n            letters.push(c);\n      \
    \      count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp37vw9ygk.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpqw02017d.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut char_set = HashSet::new();\n    for character\
    \ in string.chars() {\n        char_set.insert(character.to_ascii_lowercase());\n\
    \    }\n    return char_set.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpcp4a0cfp.rs:7:24\n  |\n7 |     let mut char_set = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    string.chars().collect::<HashSet<char>>().len() as isize\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpbaq371kq.rs:7:30\n\
    \  |\n7 |     string.chars().collect::<HashSet<char>>().len() as isize\n  |  \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let lower = string.to_lowercase();\n    lower.chars().collect::<BTreeSet<char>>().len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmp4nsfzr3r.rs:8:29\n\
    \  |\n8 |     lower.chars().collect::<BTreeSet<char>>().len() as isize\n  |  \
    \                           ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut characters = HashSet::new();\n    for character\
    \ in string.chars() {\n        characters.insert(character.to_lowercase().next().unwrap());\n\
    \    }\n    characters.len() as isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpkp02um7_.rs:7:26\n  |\n7 |     let mut characters = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut chars = HashSet::new();\n    for c in string.chars()\
    \ {\n        chars.insert(c.to_ascii_lowercase());\n    }\n    chars.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpxaiv5vxi.rs:7:21\n  |\n7 |     let mut chars = HashSet::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut count: isize = 0;\n    let mut chars: Vec<char>\
    \ = string.chars().collect();\n    chars.sort();\n    for i in 0..chars.len()\
    \ {\n        if i == 0 {\n            count += 1;\n        } else if chars[i]\
    \ != chars[i - 1] {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpa1rcyuxd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpht533ku5.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO: your code here\n    0\n}\n\nfn main() {\n \
    \   let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpo06x4a29.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters: HashSet<_> = HashSet::new();\n\
    \    for character in string.chars() {\n        distinct_characters.insert(character.to_ascii_lowercase());\n\
    \    }\n    distinct_characters.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpvh9ygatc.rs:7:34\n\
    \  |\n7 |     let mut distinct_characters: HashSet<_> = HashSet::new();\n  | \
    \                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpvh9ygatc.rs:7:47\n\
    \  |\n7 |     let mut distinct_characters: HashSet<_> = HashSet::new();\n  | \
    \                                              ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppcy4f05f.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut used = [false; 256];\n    let mut count = 0;\n\
    \    for c in string.chars() {\n        let upp = c.to_uppercase().next().unwrap();\n\
    \        if !used[upp as usize] {\n            used[upp as usize] = true;\n  \
    \          count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmph_tr6eki.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    // TODO: implement your solution here\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpaqbmuqk6.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct = String::new();\n    for c in string.chars()\
    \ {\n        if !distinct.contains(c) {\n            distinct.push(c)\n      \
    \  }\n    }\n    distinct.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpr49qvkqw.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut num = 0;\n    let mut ascii_num: [bool; 128]\
    \ = [false; 128];\n    for c in string.chars() {\n        if !ascii_num[c as usize]\
    \ {\n            num += 1;\n            ascii_num[c as usize] = true;\n      \
    \  }\n    }\n    num\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpts1cpz80.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    let mut distinct_characters = 0;\n    let mut characters\
    \ = Vec::new();\n    for x in string.chars() {\n        if !characters.contains(&x.to_ascii_lowercase())\
    \ {\n            characters.push(x.to_ascii_lowercase());\n            distinct_characters\
    \ += 1;\n        }\n    }\n    distinct_characters\n}\n\nfn main() {\n    let\
    \ candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu57gk7nf.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n///\
    \ 3\n/// >>> count_distinct_characters('Jerry')\n/// 4\nfn count_distinct_characters(string:\
    \ String) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpy3to_izd.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
